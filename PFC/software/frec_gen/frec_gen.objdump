
frec_gen.elf:     file format elf32-littlenios2
frec_gen.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0001d120 memsz 0x0001d120 flags r-x
    LOAD off    0x0001e140 vaddr 0x0081d140 paddr 0x0081ed64 align 2**12
         filesz 0x00001c24 memsz 0x00001c24 flags rw-
    LOAD off    0x00020988 vaddr 0x00820988 paddr 0x00820988 align 2**12
         filesz 0x00000000 memsz 0x00007bf8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001c738  008001bc  008001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000084c  0081c8f4  0081c8f4  0001d8f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c24  0081d140  0081ed64  0001e140  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00007bf8  00820988  00820988  00020988  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0001fd64  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001218  00000000  00000000  0001fd90  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000029c2  00000000  00000000  00020fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00037993  00000000  00000000  0002396a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000bc7b  00000000  00000000  0005b2fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0002208d  00000000  00000000  00066f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002fa4  00000000  00000000  00089008  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002c8a  00000000  00000000  0008bfac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000feb8  00000000  00000000  0008ec36  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0009eaf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000d78  00000000  00000000  0009eb50  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  000a5016  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000a501c  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000a501f  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000a5020  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000a5021  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000a5025  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000a5029  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000004  00000000  00000000  000a502d  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000004  00000000  00000000  000a5031  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000004  00000000  00000000  000a5035  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  000a5039  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000012  00000000  00000000  000a5044  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000e2e92  00000000  00000000  000a5056  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001bc l    d  .text	00000000 .text
0081c8f4 l    d  .rodata	00000000 .rodata
0081d140 l    d  .rwdata	00000000 .rwdata
00820988 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00800204 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 frec_gen.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 e_pow.c
0081ca08 l     O .rodata	00000010 bp
0081ca18 l     O .rodata	00000010 dp_l
0081ca28 l     O .rodata	00000010 dp_h
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
0081ca38 l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00805814 l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
008060bc l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0080731c l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
0081d140 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 vfprintf.c
008088a8 l     F .text	00000058 __sprint_r
0081cbe2 l     O .rodata	00000010 blanks.3452
0081cbd2 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0080a90c l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0080c308 l     F .text	00000058 std
0080c414 l     F .text	00000008 __fp_lock
0080c41c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0081ecb4 l     O .rwdata	00000004 charset
0081cc14 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0081cd5c l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0080fec4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080ff24 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00810024 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00810410 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
008104f0 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0081064c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
00810894 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0081ecd4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00810c48 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0081ecd8 l     O .rwdata	00000004 lockid
008209e0 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0081ecdc l     O .rwdata	00000004 lockid
008209e8 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
00812680 l     F .text	00000044 OS_InitMisc
008126c4 l     F .text	0000006c OS_InitRdyList
00812828 l     F .text	000000e0 OS_InitTCBList
008125a4 l     F .text	000000dc OS_InitEventList
00812730 l     F .text	0000007c OS_InitTaskIdle
008127ac l     F .text	0000007c OS_InitTaskStat
00812a9c l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
008149bc l     F .text	00000110 OS_FlagTaskRdy
00814714 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0081dafc l     O .rwdata	0000106c uart
0081eb68 l     O .rwdata	00000124 lcd
008193dc l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00819694 l     F .text	000002c4 altera_avalon_jtag_uart_irq
00819958 l     F .text	00000114 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
0081ed54 l     O .rwdata	00000004 colstart
0081a170 l     F .text	000000b8 lcd_write_command
0081a228 l     F .text	000000d4 lcd_write_data
0081a2fc l     F .text	000000c4 lcd_clear_screen
0081a3c0 l     F .text	000001ec lcd_repaint_screen
0081a5ac l     F .text	000000c8 lcd_scroll_up
0081a674 l     F .text	000002d0 lcd_handle_escape
0081ae7c l     F .text	000000cc alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0081b104 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0081b59c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0081b6f4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0081b830 l     F .text	000000dc alt_file_locked
0081ba94 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
0081cfbd l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0081c6d0 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0081c884 l     F .text	00000040 alt_sim_halt
00800fb0 g     F .text	0000008c delete_at_end
0080d984 g     F .text	00000094 _mprec_log10
0081ed2a g     O .rwdata	00000002 OSTaskNameSize
0080da70 g     F .text	00000088 __any_on
0080f0dc g     F .text	00000070 _isatty_r
0081cd34 g     O .rodata	00000028 __mprec_tinytens
008106ac g     F .text	000000c8 alt_main
00808580 g     F .text	000000a0 _puts_r
008250cc g     O .bss	00000100 alt_irq
008052e0 g     F .text	00000018 fabs
0080f14c g     F .text	00000078 _lseek_r
008152b0 g     F .text	000000d0 OS_MemInit
0081ed64 g       *ABS*	00000000 __flash_rwdata_start
008192d0 g     F .text	00000064 OSTimeSet
00806bdc g     F .text	00000088 __eqdf2
00820988 g     O .bss	00000004 captura_valida
008111fc g     F .text	000006b4 OSEventPendMulti
00802018 g     F .text	00000064 configuration_function_generator_ton
008209a0 g     O .bss	00000004 num_nodes
00828580 g       *ABS*	00000000 __alt_heap_start
0081c09c g     F .text	00000020 OSTaskCreateHook
0081ec8c g     O .rwdata	00000006 ether_addr
00808508 g     F .text	00000044 printf
0081ed02 g     O .rwdata	00000002 OSMboxEn
00811904 g     F .text	0000007c OSIntEnter
0080eba8 g     F .text	00000068 __sseek
0080c370 g     F .text	000000a4 __sinit
0081ed12 g     O .rwdata	00000002 OSQEn
0080d048 g     F .text	00000084 _setlocale_r
0080c470 g     F .text	00000068 __sfmoreglue
00810eb8 g     F .text	000000d0 __malloc_unlock
0081c0f8 g     F .text	0000001c OSTaskStatHook
008209f0 g     O .bss	00000001 OSLockNesting
0080103c g     F .text	000000a8 delete_list
0082099c g     O .bss	00000004 frecuencia
00805cac g     F .text	00000174 __divsf3
0081ed50 g     O .rwdata	00000002 OSDataSize
008209f1 g     O .bss	00000001 OSRunning
00800614 g     F .text	00000278 ReceivePacket
0080d400 g     F .text	000000e0 memmove
0081c130 g     F .text	0000001c OSInitHookBegin
0081ed48 g     O .rwdata	00000002 OSTmrSize
0080c460 g     F .text	00000010 _cleanup
0080daf8 g     F .text	000000bc _Balloc
008036ac g     F .text	000001e4 pkt_arp_changes_to_send
008209f4 g     O .bss	00000004 OSIdleCtr
0080116c g     F .text	00000084 calculate_new_freq
00806cec g     F .text	00000088 __gtdf2
0081bd68 g       .text	00000000 OSStartTsk
00807d90 g     F .text	00000010 __errno
00812dd0 g     F .text	000002e0 OS_TCBInit
00800000 g     F .entry	0000001c __reset
0081ed4e g     O .rwdata	00000002 OSTmrWheelTblSize
00800020 g       *ABS*	00000000 __flash_exceptions_start
0081ecee g     O .rwdata	00000002 OSEventSize
008209f8 g     O .bss	00000001 OSPrioHighRdy
0080f068 g     F .text	00000074 _fstat_r
0081c0bc g     F .text	00000020 OSTaskDelHook
008209bc g     O .bss	00000004 errno
008070dc g     F .text	00000038 __make_dp
0081bd48 g       .text	00000000 OSStartHighRdy
008179c4 g     F .text	00000200 OSTaskCreateExt
00800344 g     F .text	000001b4 DM9000_init
00814230 g     F .text	00000068 OSFlagPendGetFlagsRdy
0081ed2e g     O .rwdata	00000002 OSTaskStatStkSize
00807850 g     F .text	0000002c __make_fp
0081323c g     F .text	00000334 OSFlagAccept
008159e8 g     F .text	000000c8 OSQFlush
00815380 g     F .text	00000154 OSQAccept
008209d8 g     O .bss	00000004 alt_argv
00826c8c g       *ABS*	00000000 _gp
00810a10 g     F .text	00000118 usleep
008059f8 g     F .text	00000070 __subsf3
008177f0 g     F .text	000001d4 OSTaskCreate
0081727c g     F .text	00000574 OSTaskChangePrio
00820a70 g     O .bss	000005b2 RXT
008209ec g     O .bss	00000004 alt_heapsem
008130b0 g     F .text	0000018c OSDebugInit
00817bc4 g     F .text	0000040c OSTaskDel
00800eac g     F .text	00000078 insert_at_end
0081d97c g     O .rwdata	00000180 alt_fd_list
008251cc g     O .bss	00000370 OSFlagTbl
00812380 g     F .text	000000b8 OS_EventTaskRemove
0081c1a4 g     F .text	00000094 alt_find_dev
0080d360 g     F .text	000000a0 memcpy
0081ed18 g     O .rwdata	00000002 OSRdyTblSize
00800bac g     F .text	00000114 lcd_write_first_line
0080c454 g     F .text	0000000c _cleanup_r
00806f0c g     F .text	000000f8 __floatsidf
0081b7b8 g     F .text	00000078 alt_io_redirect
00806dfc g     F .text	00000088 __ltdf2
0081c8f4 g       *ABS*	00000000 __DTOR_END__
00800208 g     F .text	00000054 iow
00808620 g     F .text	00000014 puts
00810f88 g     F .text	00000130 OSEventNameGet
0081ecfc g     O .rwdata	00000002 OSFlagMax
00820990 g     O .bss	00000004 last
0080d8d4 g     F .text	000000b0 __ratio
00811980 g     F .text	00000100 OSIntExit
0081ed36 g     O .rwdata	00000002 OSTCBSize
008209f9 g     O .bss	00000001 OSPrioCur
00819bd4 g     F .text	000002c0 altera_avalon_jtag_uart_read
00807db4 g     F .text	00000014 malloc
0080854c g     F .text	00000034 _printf_r
00807458 g     F .text	00000008 __udivsi3
00810350 g     F .text	000000c0 isatty
0081ed1c g     O .rwdata	00000002 OSStkWidth
0081cc44 g     O .rodata	000000c8 __mprec_tens
0081ed10 g     O .rwdata	00000002 OSPtrSize
0080325c g     F .text	00000224 pkt_is_arprequest
0080d024 g     F .text	00000008 __locale_charset
0081ecf0 g     O .rwdata	00000002 OSEventTblSize
00805770 g     F .text	000000a4 __fixunsdfsi
0081bcbc g       .text	00000000 OSCtxSw
0081c44c g     F .text	00000090 alt_icache_flush
008209b0 g     O .bss	00000004 __malloc_top_pad
008209fc g     O .bss	00000004 OSTCBList
008209cc g     O .bss	00000004 alt_fd_list_lock
0081ecb0 g     O .rwdata	00000004 __mb_cur_max
0080d02c g     F .text	0000000c _localeconv_r
0080e1f0 g     F .text	0000003c __i2b
0080ca08 g     F .text	0000049c __sfvwrite_r
0082553c g     O .bss	00000c30 OSMemTbl
00820a00 g     O .bss	00000001 OSTickStepState
00808634 g     F .text	00000070 _sbrk_r
0081ed14 g     O .rwdata	00000002 OSQMax
0082616c g     O .bss	00000800 OSTaskStatStk
00814e98 g     F .text	0000010c OSMemNameGet
0081ecf4 g     O .rwdata	00000002 OSFlagEn
0080f1c4 g     F .text	00000078 _read_r
0081ed3a g     O .rwdata	00000002 OSTimeTickHookEn
00815f4c g     F .text	00000180 OSQPost
00814acc g     F .text	000000ac OS_FlagUnlink
0081d948 g     O .rwdata	0000000c __lc_ctype
00802124 g     F .text	00000074 system_config_init
0081ecc8 g     O .rwdata	00000004 alt_max_fd
0081295c g     F .text	0000006c OS_MemCopy
008129c8 g     F .text	000000d4 OS_Sched
00807b90 g     F .text	00000138 __unpack_d
0080ef44 g     F .text	00000110 _fclose_r
00814d94 g     F .text	00000104 OSMemGet
008182f8 g     F .text	000001c4 OSTaskNameSet
0080c2d4 g     F .text	00000034 fflush
008209b4 g     O .bss	00000004 __malloc_max_sbrked_mem
00820a04 g     O .bss	00000004 OSCtxSwCtr
0081c114 g     F .text	0000001c OSTimeTickHook
0081ecfe g     O .rwdata	00000002 OSFlagNameSize
00805fa8 g     F .text	00000054 __extendsfdf2
00802430 g     F .text	000000e8 edge_button_interrupts
00812438 g     F .text	00000104 OS_EventTaskRemoveMulti
0080654c g     F .text	00000074 __adddf3
0081222c g     F .text	00000154 OS_EventTaskWaitMulti
0080d7b4 g     F .text	00000120 __b2d
00803480 g     F .text	0000022c pkt_changes_to_send
0081ed16 g     O .rwdata	00000002 OSQSize
0080f818 g     F .text	000005b0 __umoddi3
0081055c g     F .text	000000f0 lseek
00816b28 g     F .text	0000027c OSSemPend
0081ec9c g     O .rwdata	00000004 __fdlib_version
0081eca4 g     O .rwdata	00000004 _global_impure_ptr
00800924 g     F .text	000000ac VITask
008209a4 g     O .bss	00000004 aaa
0080e56c g     F .text	000005f4 _realloc_r
0081ed00 g     O .rwdata	00000002 OSLowestPrio
00828580 g       *ABS*	00000000 __bss_end
00810258 g     F .text	000000f8 alt_iic_isr_register
0081c184 g     F .text	00000020 OSTCBInitHook
0081ed46 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0081bb8c g     F .text	00000110 alt_tick
0080f23c g     F .text	000005dc __udivdi3
00800b58 g     F .text	00000054 lcd_clear
0081ece8 g     O .rwdata	00000002 OSEventEn
0081cd0c g     O .rodata	00000028 __mprec_bigtens
0080e44c g     F .text	00000120 __s2b
0081ed42 g     O .rwdata	00000002 OSTmrCfgNameSize
00807188 g     F .text	00000194 __floatunsidf
0080d6d4 g     F .text	00000060 __mcmp
0081ed60 g     O .rwdata	00000004 __ctype_ptr
0080c43c g     F .text	00000018 __fp_lock_all
00810210 g     F .text	00000048 alt_ic_irq_enabled
00821024 g     O .bss	00000018 sc
008148d8 g     F .text	000000e4 OS_FlagInit
0081baf4 g     F .text	00000098 alt_alarm_stop
0081ed24 g     O .rwdata	00000002 OSTaskIdleStkSize
008209d0 g     O .bss	00000004 alt_irq_active
008166b4 g     F .text	000000c0 OSSemAccept
008150c4 g     F .text	000000f0 OSMemPut
00814b78 g     F .text	0000021c OSMemCreate
00820a08 g     O .bss	00000004 OSIdleCtrMax
008000ec g     F .exceptions	000000d0 alt_irq_handler
0081d954 g     O .rwdata	00000028 alt_dev_null
0081ed38 g     O .rwdata	00000002 OSTicksPerSec
0080535c g     F .text	00000210 rint
008076e0 g     F .text	000000c8 __unpack_f
0081bcbc g       .text	00000000 OSIntCtxSw
008022ec g     F .text	00000144 interrupt_captura_0
0081b4a4 g     F .text	00000044 alt_dcache_flush_all
0080d5a0 g     F .text	00000070 __hi0bits
008209a8 g     O .bss	00000004 packet_num
00807004 g     F .text	000000d8 __fixdfsi
00820a0c g     O .bss	00000004 OSTCBFreeList
0081ed64 g       *ABS*	00000000 __ram_rwdata_end
00816da4 g     F .text	0000017c OSSemPendAbort
0081ecc0 g     O .rwdata	00000008 alt_dev_list
00810b28 g     F .text	00000120 write
0081ed3c g     O .rwdata	00000002 OSVersionNbr
0081d140 g       *ABS*	00000000 __ram_rodata_end
0080ff50 g     F .text	000000d4 fstat
00806e84 g     F .text	00000088 __ledf2
0081ece4 g     O .rwdata	00000004 OSEndiannessTest
0080e32c g     F .text	00000120 __pow5mult
008209c0 g     O .bss	00000004 __nlocale_changed
00807460 g     F .text	00000008 __umodsi3
0081ecf6 g     O .rwdata	00000002 OSFlagGrpSize
0081ec98 g     O .rwdata	00000004 last_instrument
00828580 g       *ABS*	00000000 end
00807580 g     F .text	00000160 __pack_f
0080207c g     F .text	00000054 ccp_activate_square
0081a944 g     F .text	00000538 altera_avalon_lcd_16207_write
0081955c g     F .text	00000138 altera_avalon_jtag_uart_init
00812c40 g     F .text	000000c8 OS_TaskStat
0081c8f0 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0081b174 g     F .text	00000090 alt_avalon_timer_sc_init
00807500 g     F .text	00000080 __clzsi2
00801d88 g     F .text	00000154 configuration_function_generator_square
00819e94 g     F .text	000002dc altera_avalon_jtag_uart_write
0080c360 g     F .text	00000004 __sfp_lock_acquire
0080d27c g     F .text	000000e4 memchr
00812908 g     F .text	00000054 OS_MemClr
00808900 g     F .text	00001eac ___vfprintf_internal_r
0081bd8c g     F .text	00000310 OSTaskStkInit
00808718 g     F .text	00000060 _sprintf_r
0080c6f4 g     F .text	00000314 _free_r
00811f88 g     F .text	00000194 OS_EventTaskRdy
0081c6d4 g     F .text	000001b0 __call_exitprocs
00820a10 g     O .bss	00000001 OSCPUUsage
008209c4 g     O .bss	00000004 __mlocale_changed
0081ecac g     O .rwdata	00000004 __malloc_sbrk_base
008001bc g     F .text	0000004c _start
00820a40 g     O .bss	00000004 _alt_tick_rate
00815ab0 g     F .text	00000320 OSQPend
00818cbc g     F .text	0000014c OSTimeDly
0080debc g     F .text	0000014c __lshift
0082103c g     O .bss	00002000 RICTask_stk
00820a44 g     O .bss	00000004 _alt_nticks
00810774 g     F .text	00000120 read
00819368 g     F .text	00000074 alt_sys_init
00805f10 g     F .text	00000098 __floatsisf
0081c59c g     F .text	00000134 __register_exitproc
00820a11 g     O .bss	00000001 OSTaskCtr
0080025c g     F .text	0000004c ior
00818e08 g     F .text	00000254 OSTimeDlyHMSM
0080e008 g     F .text	000001e8 __multiply
00803d18 g     F .text	00001300 __ieee754_pow
00819a6c g     F .text	00000074 altera_avalon_jtag_uart_close
00803890 g     F .text	00000488 pow
0081d140 g       *ABS*	00000000 __ram_rwdata_start
0081c8f4 g       *ABS*	00000000 __ram_rodata_start
008087ec g     F .text	000000bc strncpy
00820a48 g     O .bss	00000028 __malloc_current_mallinfo
0081ecea g     O .rwdata	00000002 OSEventMax
0080dbb4 g     F .text	0000017c __d2b
00816f20 g     F .text	00000128 OSSemPost
00811b0c g     F .text	000000e4 OSSchedUnlock
00800dd4 g     F .text	00000060 create
00801c94 g     F .text	00000064 reset_ccp
00802518 g     F .text	000006dc ethernet_interrupts
00819414 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0081c358 g     F .text	000000f4 alt_get_fd
00820a14 g     O .bss	00000004 OSMemFreeList
00811c60 g     F .text	000000ac OSStatInit
0081b358 g     F .text	0000014c alt_busy_sleep
00814640 g     F .text	000000d4 OSFlagQuery
00807cc8 g     F .text	000000c8 __fpcmp_parts_d
0081ed20 g     O .rwdata	00000002 OSTaskCreateExtEn
0080eed4 g     F .text	00000070 _close_r
0081c528 g     F .text	00000074 memcmp
00811f6c g     F .text	0000001c OS_Dummy
008194c4 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00828580 g       *ABS*	00000000 __alt_stack_base
0081950c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
0080a7d0 g     F .text	0000013c __swsetup_r
0082696c g     O .bss	000001e0 OSQTbl
00806984 g     F .text	00000258 __divdf3
0080c4d8 g     F .text	000000f0 __sfp
0080da18 g     F .text	00000058 __copybits
0081d540 g     O .rwdata	00000408 __malloc_av_
0080c36c g     F .text	00000004 __sinit_lock_release
00820a18 g     O .bss	00000004 OSTCBHighRdy
008065c0 g     F .text	000003c4 __muldf3
0080ec8c g     F .text	00000060 __sread
0081ca48 g     O .rodata	00000010 __thenan_sf
00820a1c g     O .bss	00000004 OSQFreeList
0081c238 g     F .text	00000120 alt_find_file
0081b4e8 g     F .text	000000b4 alt_dev_llist_insert
00810db0 g     F .text	00000108 __malloc_lock
00810954 g     F .text	000000bc sbrk
008017a8 g     F .text	00000310 show_frequency_lcd
008020d0 g     F .text	00000054 ccp_activate_non_square
008110b8 g     F .text	00000144 OSEventNameSet
0080c0d8 g     F .text	000001fc _fflush_r
0080ee20 g     F .text	000000b4 _calloc_r
00820a20 g     O .bss	00000001 OSRdyGrp
00800cc0 g     F .text	00000114 lcd_write_second_line
00820988 g       *ABS*	00000000 __bss_start
0080d4e0 g     F .text	00000098 memset
00800a5c g     F .text	000000fc lcd_init
0080088c g     F .text	00000098 main
008209dc g     O .bss	00000004 alt_envp
008209b8 g     O .bss	00000004 __malloc_max_total_mem
0081946c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0081cd80 g     O .rodata	00000100 OSUnMapTbl
00805e98 g     F .text	00000078 __ltsf2
0081af48 g     F .text	00000164 altera_avalon_lcd_16207_init
0081ed1a g     O .rwdata	00000002 OSSemEn
00814298 g     F .text	000003a8 OSFlagPost
0080eba0 g     F .text	00000008 __sclose
00805344 g     F .text	00000008 matherr
01000000 g       *ABS*	00000000 __alt_heap_limit
0080f054 g     F .text	00000014 fclose
0081211c g     F .text	00000110 OS_EventTaskWait
00807114 g     F .text	00000074 __truncdfsf2
00812d08 g     F .text	000000c8 OS_TaskStatStkChk
008283f0 g     O .bss	00000190 _atexit0
00817fd0 g     F .text	00000170 OSTaskDelReq
0080ab24 g     F .text	000015b4 _dtoa_r
00807dc8 g     F .text	00000740 _malloc_r
00800e34 g     F .text	00000078 insert_beginning
0081eccc g     O .rwdata	00000004 alt_errno
00811bf0 g     F .text	00000070 OSStart
00810d54 g     F .text	0000005c __env_unlock
0080cf6c g     F .text	000000b8 _fwalk
008184bc g     F .text	00000218 OSTaskResume
008151b4 g     F .text	000000fc OSMemQuery
0081ed2c g     O .rwdata	00000002 OSTaskStatEn
0081ed06 g     O .rwdata	00000002 OSMemMax
008160cc g     F .text	00000188 OSQPostFront
00807398 g     F .text	00000060 __divsi3
00820a21 g     O .bss	00000003 OSRdyTbl
0081ece0 g     O .rwdata	00000002 OSDebugEn
0081ca58 g     O .rodata	00000014 __thenan_df
0080c5c8 g     F .text	0000012c _malloc_trim_r
0081c8f4 g       *ABS*	00000000 __CTOR_END__
00805acc g     F .text	000001e0 __mulsf3
008052f8 g     F .text	0000001c finite
0081ecf8 g     O .rwdata	00000002 OSFlagNodeSize
0081ed40 g     O .rwdata	00000002 OSTmrCfgMax
0080ecec g     F .text	000000bc strcmp
008154d4 g     F .text	00000214 OSQCreate
00818140 g     F .text	000001b8 OSTaskNameGet
0081c8f4 g       *ABS*	00000000 __flash_rodata_start
00816254 g     F .text	00000234 OSQPostOpt
00811d0c g     F .text	00000240 OSTimeTick
008010e4 g     F .text	00000088 frequency_meter
0081ed28 g     O .rwdata	00000002 OSTaskMax
0081c8f4 g       *ABS*	00000000 __DTOR_LIST__
00816774 g     F .text	00000114 OSSemCreate
0081ed4c g     O .rwdata	00000002 OSTmrWheelSize
0080574c g     F .text	00000024 copysign
00806c64 g     F .text	00000088 __nedf2
0081ed22 g     O .rwdata	00000002 OSTaskDelEn
00817048 g     F .text	00000130 OSSemQuery
008156e8 g     F .text	00000300 OSQDel
00815dd0 g     F .text	0000017c OSQPendAbort
00819334 g     F .text	00000034 alt_irq_init
008002a8 g     F .text	0000009c phy_write
008004f8 g     F .text	0000011c TransmitPacket
008108f4 g     F .text	00000060 alt_release_fd
008086a4 g     F .text	00000074 sprintf
0081ca6c g     O .rodata	00000100 __clz_tab
008209c8 g     O .bss	00000004 _PathLocale
00801edc g     F .text	0000013c configuration_function_generator_non_square
0081c4dc g     F .text	00000014 atexit
00805e20 g     F .text	00000078 __gesf2
0080eda8 g     F .text	00000078 _write_r
00811a80 g     F .text	0000008c OSSchedLock
0080d0cc g     F .text	0000001c setlocale
00802bf4 g     F .text	000001e0 assign_pkt_defaults
00813570 g     F .text	0000013c OSFlagCreate
0081eca0 g     O .rwdata	00000004 _impure_ptr
008209d4 g     O .bss	00000004 alt_argc
0080556c g     F .text	000001e0 scalbn
0081b660 g     F .text	00000064 _do_dtors
00820998 g     O .bss	00000004 sw
00802220 g     F .text	000000cc decimal_to_binary
0081ecf2 g     O .rwdata	00000002 OSEventMultiEn
00802ec0 g     F .text	00000024 calculate_udp_checksum
008136ac g     F .text	000002a8 OSFlagDel
00820a24 g     O .bss	00000004 OSEventFreeList
00800020 g       .exceptions	00000000 alt_irq_entry
0080d734 g     F .text	00000080 __ulp
0080eb60 g     F .text	00000040 __isinfd
00813bec g     F .text	00000644 OSFlagPend
0081ed3e g     O .rwdata	00000002 OSTmrEn
0080c424 g     F .text	00000018 __fp_unlock_all
0081b0ac g     F .text	00000058 altera_avalon_lcd_16207_write_fd
0081ecb8 g     O .rwdata	00000008 alt_fs_list
00812b0c g     F .text	00000080 OS_StrCopy
0081ed08 g     O .rwdata	00000002 OSMemNameSize
0080534c g     F .text	00000010 nan
0081c14c g     F .text	0000001c OSInitHookEnd
00800020 g       *ABS*	00000000 __ram_exceptions_start
0081ed34 g     O .rwdata	00000002 OSTCBPrioTblMax
0080d038 g     F .text	00000010 localeconv
00805018 g     F .text	000002c8 __ieee754_sqrt
0081ed30 g     O .rwdata	00000002 OSTaskStatStkChkEn
00810084 g     F .text	00000050 alt_ic_isr_register
0081ed04 g     O .rwdata	00000002 OSMemEn
0082098c g     O .bss	00000004 first
00801cf8 g     F .text	00000090 configuration_ccp_captura_0
0081ed0e g     O .rwdata	00000002 OSMutexEn
0081ed64 g       *ABS*	00000000 _edata
00801bd4 g     F .text	000000c0 write_ram_function_generator
00828580 g       *ABS*	00000000 _end
00820a28 g     O .bss	00000001 OSIntNesting
008001bc g       *ABS*	00000000 __ram_exceptions_end
00819ae0 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0081905c g     F .text	00000210 OSTimeDlyResume
00801ab8 g     F .text	0000011c function_generator
00813a98 g     F .text	00000154 OSFlagNameSet
008186d4 g     F .text	000001fc OSTaskStkChk
00810170 g     F .text	000000a0 alt_ic_irq_disable
0081ed0a g     O .rwdata	00000002 OSMemSize
0080ec10 g     F .text	0000007c __swrite
0081eca8 g     O .rwdata	00000004 __malloc_trim_threshold
0081bc9c g     F .text	00000020 altera_nios2_qsys_irq_init
00820a2c g     O .bss	00000004 OSTCBCur
0081c4f0 g     F .text	00000038 exit
00820994 g     O .bss	00000004 capturaant
0081ed0c g     O .rwdata	00000002 OSMemTblSize
0080cea4 g     F .text	000000c8 _fwalk_reent
00805ffc g     F .text	000000c0 __floatunsisf
0080dd30 g     F .text	0000018c __mdiff
008073f8 g     F .text	00000060 __modsi3
00800f24 g     F .text	0000008c delete_beginning
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
0080c364 g     F .text	00000004 __sfp_lock_release
008118b0 g     F .text	00000054 OSInit
00800000 g       *ABS*	00000000 __alt_mem_sdram
00818afc g     F .text	00000144 OSTaskQuery
00816608 g     F .text	000000ac OS_QInit
00812b8c g     F .text	00000058 OS_StrLen
00814fa4 g     F .text	00000120 OSMemNameSet
0081cebc g     O .rodata	00000101 _ctype_
0082303c g     O .bss	00000090 custom_signal
0081ed26 g     O .rwdata	00000002 OSTaskProfileEn
00820a30 g     O .bss	00000004 OSTime
00802198 g     F .text	00000088 assign_interruptions
008077a8 g     F .text	000000a8 __fpcmp_parts_f
00826b4c g     O .bss	00000800 OSTaskIdleStk
008209ac g     O .bss	00000004 rx_len
0081c8c4 g     F .text	0000002c _exit
00805314 g     F .text	00000030 __isnand
0081b204 g     F .text	00000154 alt_alarm_start
00813954 g     F .text	00000144 OSFlagNameGet
0081926c g     F .text	00000064 OSTimeGet
00807468 g     F .text	00000098 __muldi3
0080d0e8 g     F .text	00000194 __smakebuf_r
00808778 g     F .text	00000074 strlen
0081c0dc g     F .text	0000001c OSTaskSwHook
0081b90c g     F .text	00000188 open
0082734c g     O .bss	00000b40 OSEventTbl
00806d74 g     F .text	00000088 __gedf2
00827e8c g     O .bss	00000510 OSTCBTbl
00817178 g     F .text	00000104 OSSemSet
00802ee4 g     F .text	00000378 pkt_is_viprotocol
0081b6c4 g     F .text	00000030 alt_icache_flush_all
008011f0 g     F .text	000005b8 calculate_average_frequency
0081ecd0 g     O .rwdata	00000004 alt_priority_mask
00816888 g     F .text	000002a0 OSSemDel
00820a34 g     O .bss	00000004 OSFlagFreeList
008100d4 g     F .text	0000009c alt_ic_irq_enable
0081ecec g     O .rwdata	00000002 OSEventNameSize
0080a7ac g     F .text	00000024 __vfprintf_internal
00820a38 g     O .bss	00000001 OSStatRdy
008009d0 g     F .text	0000008c RICTask
0082839c g     O .bss	00000054 OSTCBPrioTbl
00810ca8 g     F .text	000000ac __env_lock
0081ed32 g     O .rwdata	00000002 OSTaskSwHookEn
008064cc g     F .text	00000080 __subdf3
0080d610 g     F .text	000000c4 __lo0bits
0081ed58 g     O .rwdata	00000008 alt_alarm_list
0081ecfa g     O .rwdata	00000002 OSFlagWidth
0081b5fc g     F .text	00000064 _do_ctors
0080fdc8 g     F .text	000000fc close
00805a68 g     F .text	00000064 __addsf3
008209e4 g     O .bss	00000004 alt_envsem
00820a3c g     O .bss	00000004 OSIdleCtrRun
00811f4c g     F .text	00000020 OSVersion
0081ed44 g     O .rwdata	00000002 OSTmrCfgWheelSize
00810470 g     F .text	00000080 alt_load
00818c40 g     F .text	0000007c OS_TaskStkClr
008230cc g     O .bss	00002000 VITask_stk
0080787c g     F .text	00000314 __pack_d
0081ed1e g     O .rwdata	00000002 OSTaskCreateEn
0081253c g     F .text	00000068 OS_EventWaitListInit
0081ec94 g     O .rwdata	00000004 captura
0081c168 g     F .text	0000001c OSTaskIdleHook
00802dd4 g     F .text	000000ec calculate_ip_checksum
00807da0 g     F .text	00000014 free
0080c368 g     F .text	00000004 __sinit_lock_acquire
0080e22c g     F .text	00000100 __multadd
008188d0 g     F .text	0000022c OSTaskSuspend
0080d578 g     F .text	00000028 _Bfree
00812be4 g     F .text	0000005c OS_TaskIdle
0081ed4a g     O .rwdata	00000002 OSTmrTblSize
00816488 g     F .text	00000180 OSQQuery



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406f14 	ori	at,at,444
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  8000fc:	08119040 	call	811904 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800100:	0005313a 	rdctl	r2,ipending
  800104:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800108:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80010c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  800110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800114:	00800044 	movi	r2,1
  800118:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80011c:	e0ffff17 	ldw	r3,-4(fp)
  800120:	e0bffe17 	ldw	r2,-8(fp)
  800124:	1884703a 	and	r2,r3,r2
  800128:	1005003a 	cmpeq	r2,r2,zero
  80012c:	1000161e 	bne	r2,zero,800188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  800130:	e0bffd17 	ldw	r2,-12(fp)
  800134:	00c020b4 	movhi	r3,130
  800138:	18d43304 	addi	r3,r3,20684
  80013c:	100490fa 	slli	r2,r2,3
  800140:	10c5883a 	add	r2,r2,r3
  800144:	11400017 	ldw	r5,0(r2)
  800148:	e0bffd17 	ldw	r2,-12(fp)
  80014c:	00c020b4 	movhi	r3,130
  800150:	18d43304 	addi	r3,r3,20684
  800154:	100490fa 	slli	r2,r2,3
  800158:	10c5883a 	add	r2,r2,r3
  80015c:	10800104 	addi	r2,r2,4
  800160:	11000017 	ldw	r4,0(r2)
  800164:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800168:	0005313a 	rdctl	r2,ipending
  80016c:	e0bffb15 	stw	r2,-20(fp)

  return active;
  800170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800178:	e0bfff17 	ldw	r2,-4(fp)
  80017c:	1004c03a 	cmpne	r2,r2,zero
  800180:	103fe31e 	bne	r2,zero,800110 <alt_irq_handler+0x24>
  800184:	00000706 	br	8001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800188:	e0bffe17 	ldw	r2,-8(fp)
  80018c:	1085883a 	add	r2,r2,r2
  800190:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800194:	e0bffd17 	ldw	r2,-12(fp)
  800198:	10800044 	addi	r2,r2,1
  80019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a0:	003fde06 	br	80011c <alt_irq_handler+0x30>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001a4:	08119800 	call	811980 <OSIntExit>
}
  8001a8:	e037883a 	mov	sp,fp
  8001ac:	dfc00117 	ldw	ra,4(sp)
  8001b0:	df000017 	ldw	fp,0(sp)
  8001b4:	dec00204 	addi	sp,sp,8
  8001b8:	f800283a 	ret

Disassembly of section .text:

008001bc <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  8001bc:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  8001c0:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  8001c4:	10bfff04 	addi	r2,r2,-4
    bgt r2, zero, 0b
  8001c8:	00bffd16 	blt	zero,r2,8001c0 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001cc:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001d0:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001d4:	068020b4 	movhi	gp,130
    ori gp, gp, %lo(_gp)
  8001d8:	d69b2314 	ori	gp,gp,27788
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001dc:	008020b4 	movhi	r2,130
    ori r2, r2, %lo(__bss_start)
  8001e0:	10826214 	ori	r2,r2,2440

    movhi r3, %hi(__bss_end)
  8001e4:	00c020b4 	movhi	r3,130
    ori r3, r3, %lo(__bss_end)
  8001e8:	18e16014 	ori	r3,r3,34176

    beq r2, r3, 1f
  8001ec:	10c00326 	beq	r2,r3,8001fc <_start+0x40>

0:
    stw zero, (r2)
  8001f0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001f4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001f8:	10fffd36 	bltu	r2,r3,8001f0 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001fc:	08104700 	call	810470 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800200:	08106ac0 	call	8106ac <alt_main>

00800204 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  800204:	003fff06 	br	800204 <alt_after_alt_main>

00800208 <iow>:
#include <stdio.h>

#define msleep(msec)                                  usleep(1000*msec);
//-------------------------------------------------------------------------
void iow(unsigned int reg, unsigned int data)
{
  800208:	defffc04 	addi	sp,sp,-16
  80020c:	dfc00315 	stw	ra,12(sp)
  800210:	df000215 	stw	fp,8(sp)
  800214:	df000204 	addi	fp,sp,8
  800218:	e13ffe15 	stw	r4,-8(fp)
  80021c:	e17fff15 	stw	r5,-4(fp)
  IOWR(DM9000A_BASE,IO_addr,reg);
  800220:	e0fffe17 	ldw	r3,-8(fp)
  800224:	00804034 	movhi	r2,256
  800228:	1084a204 	addi	r2,r2,4744
  80022c:	10c00035 	stwio	r3,0(r2)
  usleep(STD_DELAY);
  800230:	01000504 	movi	r4,20
  800234:	0810a100 	call	810a10 <usleep>
  IOWR(DM9000A_BASE,IO_data,data);
  800238:	e0ffff17 	ldw	r3,-4(fp)
  80023c:	00804034 	movhi	r2,256
  800240:	1084a304 	addi	r2,r2,4748
  800244:	10c00035 	stwio	r3,0(r2)
}
  800248:	e037883a 	mov	sp,fp
  80024c:	dfc00117 	ldw	ra,4(sp)
  800250:	df000017 	ldw	fp,0(sp)
  800254:	dec00204 	addi	sp,sp,8
  800258:	f800283a 	ret

0080025c <ior>:
//-------------------------------------------------------------------------
unsigned int ior(unsigned int reg)
{
  80025c:	defffd04 	addi	sp,sp,-12
  800260:	dfc00215 	stw	ra,8(sp)
  800264:	df000115 	stw	fp,4(sp)
  800268:	df000104 	addi	fp,sp,4
  80026c:	e13fff15 	stw	r4,-4(fp)
  IOWR(DM9000A_BASE,IO_addr,reg);
  800270:	e0ffff17 	ldw	r3,-4(fp)
  800274:	00804034 	movhi	r2,256
  800278:	1084a204 	addi	r2,r2,4744
  80027c:	10c00035 	stwio	r3,0(r2)
  usleep(STD_DELAY);
  800280:	01000504 	movi	r4,20
  800284:	0810a100 	call	810a10 <usleep>
  return IORD(DM9000A_BASE,IO_data);
  800288:	00804034 	movhi	r2,256
  80028c:	1084a304 	addi	r2,r2,4748
  800290:	10800037 	ldwio	r2,0(r2)
}
  800294:	e037883a 	mov	sp,fp
  800298:	dfc00117 	ldw	ra,4(sp)
  80029c:	df000017 	ldw	fp,0(sp)
  8002a0:	dec00204 	addi	sp,sp,8
  8002a4:	f800283a 	ret

008002a8 <phy_write>:
//-------------------------------------------------------------------------
void phy_write (unsigned int reg, unsigned int value)
{ 
  8002a8:	defffc04 	addi	sp,sp,-16
  8002ac:	dfc00315 	stw	ra,12(sp)
  8002b0:	df000215 	stw	fp,8(sp)
  8002b4:	df000204 	addi	fp,sp,8
  8002b8:	e13ffe15 	stw	r4,-8(fp)
  8002bc:	e17fff15 	stw	r5,-4(fp)
  /* set PHY register address into EPAR REG. 0CH */
  iow(0x0C, reg | 0x40);              /* PHY register address setting, and DM9000_PHY offset = 0x40 */
  8002c0:	e0bffe17 	ldw	r2,-8(fp)
  8002c4:	11401014 	ori	r5,r2,64
  8002c8:	01000304 	movi	r4,12
  8002cc:	08002080 	call	800208 <iow>
  
  /* fill PHY WRITE data into EPDR REG. 0EH & REG. 0DH */
  iow(0x0E, ((value >> 8) & 0xFF));   /* PHY data high_byte */
  8002d0:	e0bfff17 	ldw	r2,-4(fp)
  8002d4:	1004d23a 	srli	r2,r2,8
  8002d8:	11403fcc 	andi	r5,r2,255
  8002dc:	01000384 	movi	r4,14
  8002e0:	08002080 	call	800208 <iow>
  iow(0x0D, value & 0xFF);            /* PHY data low_byte */
  8002e4:	e0bfff17 	ldw	r2,-4(fp)
  8002e8:	11403fcc 	andi	r5,r2,255
  8002ec:	01000344 	movi	r4,13
  8002f0:	08002080 	call	800208 <iow>

  /* issue PHY + WRITE command = 0xa into EPCR REG. 0BH */
  iow(0x0B, 0x8);                     /* clear PHY command first */
  8002f4:	010002c4 	movi	r4,11
  8002f8:	01400204 	movi	r5,8
  8002fc:	08002080 	call	800208 <iow>
  IOWR(DM9000A_BASE, IO_data, 0x0A);  /* issue PHY + WRITE command */
  800300:	00c04034 	movhi	r3,256
  800304:	18c4a304 	addi	r3,r3,4748
  800308:	00800284 	movi	r2,10
  80030c:	18800035 	stwio	r2,0(r3)
  usleep(STD_DELAY);
  800310:	01000504 	movi	r4,20
  800314:	0810a100 	call	810a10 <usleep>
  IOWR(DM9000A_BASE, IO_data, 0x08);  /* clear PHY command again */
  800318:	00c04034 	movhi	r3,256
  80031c:	18c4a304 	addi	r3,r3,4748
  800320:	00800204 	movi	r2,8
  800324:	18800035 	stwio	r2,0(r3)
  usleep(50);  /* wait 1~30 us (>20 us) for PHY + WRITE completion */
  800328:	01000c84 	movi	r4,50
  80032c:	0810a100 	call	810a10 <usleep>
}
  800330:	e037883a 	mov	sp,fp
  800334:	dfc00117 	ldw	ra,4(sp)
  800338:	df000017 	ldw	fp,0(sp)
  80033c:	dec00204 	addi	sp,sp,8
  800340:	f800283a 	ret

00800344 <DM9000_init>:
//-------------------------------------------------------------------------
/* DM9000_init I/O routine */
unsigned int DM9000_init (void)  /* initialize DM9000 LAN chip */
{
  800344:	defffd04 	addi	sp,sp,-12
  800348:	dfc00215 	stw	ra,8(sp)
  80034c:	df000115 	stw	fp,4(sp)
  800350:	df000104 	addi	fp,sp,4
  unsigned int  i;

  /* set the internal PHY power-on (GPIOs normal settings) */
  iow(0x1E, 0x01);  /* GPCR REG. 1EH = 1 selected GPIO0 "output" port for internal PHY */
  800354:	01000784 	movi	r4,30
  800358:	01400044 	movi	r5,1
  80035c:	08002080 	call	800208 <iow>
  iow(0x1F, 0x00);  /* GPR  REG. 1FH GEPIO0 Bit [0] = 0 to activate internal PHY */
  800360:	010007c4 	movi	r4,31
  800364:	000b883a 	mov	r5,zero
  800368:	08002080 	call	800208 <iow>
  msleep(5);        /* wait > 2 ms for PHY power-up ready */
  80036c:	0104e204 	movi	r4,5000
  800370:	0810a100 	call	810a10 <usleep>

  /* software-RESET NIC */
  iow(NCR, 0x03);   /* NCR REG. 00 RST Bit [0] = 1 reset on, and LBK Bit [2:1] = 01b MAC loopback on */
  800374:	0009883a 	mov	r4,zero
  800378:	014000c4 	movi	r5,3
  80037c:	08002080 	call	800208 <iow>
  usleep(20);       /* wait > 10us for a software-RESET ok */
  800380:	01000504 	movi	r4,20
  800384:	0810a100 	call	810a10 <usleep>
  iow(NCR, 0x00);   /* normalize */
  800388:	0009883a 	mov	r4,zero
  80038c:	000b883a 	mov	r5,zero
  800390:	08002080 	call	800208 <iow>
  iow(NCR, 0x03);
  800394:	0009883a 	mov	r4,zero
  800398:	014000c4 	movi	r5,3
  80039c:	08002080 	call	800208 <iow>
  usleep(20);
  8003a0:	01000504 	movi	r4,20
  8003a4:	0810a100 	call	810a10 <usleep>
  iow(NCR, 0x00);
  8003a8:	0009883a 	mov	r4,zero
  8003ac:	000b883a 	mov	r5,zero
  8003b0:	08002080 	call	800208 <iow>
  
  /* set GPIO0=1 then GPIO0=0 to turn off and on the internal PHY */
  iow(0x1F, 0x01);  /* GPR PHYPD Bit [0] = 1 turn-off PHY */
  8003b4:	010007c4 	movi	r4,31
  8003b8:	01400044 	movi	r5,1
  8003bc:	08002080 	call	800208 <iow>
  iow(0x1F, 0x00);  /* PHYPD Bit [0] = 0 activate phyxcer */
  8003c0:	010007c4 	movi	r4,31
  8003c4:	000b883a 	mov	r5,zero
  8003c8:	08002080 	call	800208 <iow>
  msleep(10);       /* wait >4 ms for PHY power-up */
  8003cc:	0109c404 	movi	r4,10000
  8003d0:	0810a100 	call	810a10 <usleep>
  
  /* set PHY operation mode */
  phy_write(0,PHY_reset);   /* reset PHY: registers back to the default states */
  8003d4:	0009883a 	mov	r4,zero
  8003d8:	01600014 	movui	r5,32768
  8003dc:	08002a80 	call	8002a8 <phy_write>
  usleep(50);               /* wait >30 us for PHY software-RESET ok */
  8003e0:	01000c84 	movi	r4,50
  8003e4:	0810a100 	call	810a10 <usleep>
  phy_write(16, 0x404);     /* turn off PHY reduce-power-down mode only */
  8003e8:	01000404 	movi	r4,16
  8003ec:	01410104 	movi	r5,1028
  8003f0:	08002a80 	call	8002a8 <phy_write>
  phy_write(4, PHY_txab);   /* set PHY TX advertised ability: ALL + Flow_control */
  8003f4:	01000104 	movi	r4,4
  8003f8:	01417844 	movi	r5,1505
  8003fc:	08002a80 	call	8002a8 <phy_write>
  phy_write(0, 0x1200);     /* PHY auto-NEGO re-start enable (RESTART_AUTO_NEGOTIATION + AUTO_NEGOTIATION_ENABLE) to auto sense and recovery PHY registers */
  800400:	0009883a 	mov	r4,zero
  800404:	01448004 	movi	r5,4608
  800408:	08002a80 	call	8002a8 <phy_write>
  msleep(5);               /* wait >2 ms for PHY auto-sense linking to partner */
  80040c:	0104e204 	movi	r4,5000
  800410:	0810a100 	call	810a10 <usleep>

  /* store MAC address into NIC */
  for (i = 0; i < 6; i++) 
  800414:	e03fff15 	stw	zero,-4(fp)
  800418:	00000b06 	br	800448 <DM9000_init+0x104>
  iow(16 + i, ether_addr[i]);
  80041c:	e0bfff17 	ldw	r2,-4(fp)
  800420:	11000404 	addi	r4,r2,16
  800424:	e0ffff17 	ldw	r3,-4(fp)
  800428:	d0a00004 	addi	r2,gp,-32768
  80042c:	1885883a 	add	r2,r3,r2
  800430:	10800003 	ldbu	r2,0(r2)
  800434:	11403fcc 	andi	r5,r2,255
  800438:	08002080 	call	800208 <iow>
  phy_write(4, PHY_txab);   /* set PHY TX advertised ability: ALL + Flow_control */
  phy_write(0, 0x1200);     /* PHY auto-NEGO re-start enable (RESTART_AUTO_NEGOTIATION + AUTO_NEGOTIATION_ENABLE) to auto sense and recovery PHY registers */
  msleep(5);               /* wait >2 ms for PHY auto-sense linking to partner */

  /* store MAC address into NIC */
  for (i = 0; i < 6; i++) 
  80043c:	e0bfff17 	ldw	r2,-4(fp)
  800440:	10800044 	addi	r2,r2,1
  800444:	e0bfff15 	stw	r2,-4(fp)
  800448:	e0bfff17 	ldw	r2,-4(fp)
  80044c:	108001b0 	cmpltui	r2,r2,6
  800450:	103ff21e 	bne	r2,zero,80041c <DM9000_init+0xd8>
  iow(16 + i, ether_addr[i]);
  
  /* clear any pending interrupt */
  iow(ISR, 0x3F);     /* clear the ISR status: PRS, PTS, ROS, ROOS 4 bits, by RW/C1 */
  800454:	01003f84 	movi	r4,254
  800458:	01400fc4 	movi	r5,63
  80045c:	08002080 	call	800208 <iow>
  iow(NSR, 0x2C);     /* clear the TX status: TX1END, TX2END, WAKEUP 3 bits, by RW/C1 */
  800460:	01000044 	movi	r4,1
  800464:	01400b04 	movi	r5,44
  800468:	08002080 	call	800208 <iow>

  /* program operating registers~ */
  iow(NCR,  NCR_set);   /* NCR REG. 00 enable the chip functions (and disable this MAC loopback mode back to normal) */
  80046c:	0009883a 	mov	r4,zero
  800470:	000b883a 	mov	r5,zero
  800474:	08002080 	call	800208 <iow>
  iow(0x08, BPTR_set);  /* BPTR  REG.08  (if necessary) RX Back Pressure Threshold in Half duplex moe only: High Water 3KB, 600 us */
  800478:	01000204 	movi	r4,8
  80047c:	01400fc4 	movi	r5,63
  800480:	08002080 	call	800208 <iow>
  iow(0x09, FCTR_set);  /* FCTR  REG.09  (if necessary) Flow Control Threshold setting High/ Low Water Overflow 5KB/ 10KB */
  800484:	01000244 	movi	r4,9
  800488:	01401684 	movi	r5,90
  80048c:	08002080 	call	800208 <iow>
  iow(0x0A, RTFCR_set); /* RTFCR REG.0AH (if necessary) RX/TX Flow Control Register enable TXPEN, BKPM (TX_Half), FLCE (RX) */
  800490:	01000284 	movi	r4,10
  800494:	01400a44 	movi	r5,41
  800498:	08002080 	call	800208 <iow>
  iow(0x0F, 0x00);      /* Clear the all Event */
  80049c:	010003c4 	movi	r4,15
  8004a0:	000b883a 	mov	r5,zero
  8004a4:	08002080 	call	800208 <iow>
  iow(0x2D, 0x80);      /* Switch LED to mode 1 */
  8004a8:	01000b44 	movi	r4,45
  8004ac:	01402004 	movi	r5,128
  8004b0:	08002080 	call	800208 <iow>

  /* set other registers depending on applications */
  iow(ETXCSR, ETXCSR_set); /* Early Transmit 75% */
  8004b4:	01000c04 	movi	r4,48
  8004b8:	014020c4 	movi	r5,131
  8004bc:	08002080 	call	800208 <iow>
  
  /* enable interrupts to activate DM9000 ~on */
  iow(IMR, INTR_set);   /* IMR REG. FFH PAR=1 only, or + PTM=1& PRM=1 enable RxTx interrupts */
  8004c0:	01003fc4 	movi	r4,255
  8004c4:	01402044 	movi	r5,129
  8004c8:	08002080 	call	800208 <iow>

  /* enable RX (Broadcast/ ALL_MULTICAST) ~go */
  iow(RCR , RCR_set | RX_ENABLE | PASS_MULTICAST);  /* RCR REG. 05 RXEN Bit [0] = 1 to enable the RX machine/ filter */
  8004cc:	01000144 	movi	r4,5
  8004d0:	01400e44 	movi	r5,57
  8004d4:	08002080 	call	800208 <iow>

  /* RETURN "DEVICE_SUCCESS" back to upper layer */
  return  (ior(0x2D)==0x80) ? DMFE_SUCCESS : DMFE_FAIL;
  8004d8:	01000b44 	movi	r4,45
  8004dc:	080025c0 	call	80025c <ior>
  8004e0:	10802018 	cmpnei	r2,r2,128
}
  8004e4:	e037883a 	mov	sp,fp
  8004e8:	dfc00117 	ldw	ra,4(sp)
  8004ec:	df000017 	ldw	fp,0(sp)
  8004f0:	dec00204 	addi	sp,sp,8
  8004f4:	f800283a 	ret

008004f8 <TransmitPacket>:
//-------------------------------------------------------------------------
/*  Transmit one Packet TX I/O routine  */
unsigned int  TransmitPacket(unsigned char *data_ptr,unsigned int tx_len)
{
  8004f8:	defffb04 	addi	sp,sp,-20
  8004fc:	dfc00415 	stw	ra,16(sp)
  800500:	df000315 	stw	fp,12(sp)
  800504:	df000304 	addi	fp,sp,12
  800508:	e13ffe15 	stw	r4,-8(fp)
  80050c:	e17fff15 	stw	r5,-4(fp)
  unsigned int  i;
  
   /* mask NIC interrupts IMR: PAR only */
  iow(IMR, PAR_set);
  800510:	01003fc4 	movi	r4,255
  800514:	01402004 	movi	r5,128
  800518:	08002080 	call	800208 <iow>
  
  /* issue TX packet's length into TXPLH REG. FDH & TXPLL REG. FCH */
  iow(0xFD, (tx_len >> 8) & 0xFF);  /* TXPLH High_byte length */
  80051c:	e0bfff17 	ldw	r2,-4(fp)
  800520:	1004d23a 	srli	r2,r2,8
  800524:	11403fcc 	andi	r5,r2,255
  800528:	01003f44 	movi	r4,253
  80052c:	08002080 	call	800208 <iow>
  iow(0xFC, tx_len & 0xFF);         /* TXPLL Low_byte  length */
  800530:	e0bfff17 	ldw	r2,-4(fp)
  800534:	11403fcc 	andi	r5,r2,255
  800538:	01003f04 	movi	r4,252
  80053c:	08002080 	call	800208 <iow>

  /* wirte transmit data to chip SRAM */
  IOWR(DM9000A_BASE, IO_addr, MWCMD);   /* set MWCMD REG. F8H TX I/O port ready */
  800540:	00c04034 	movhi	r3,256
  800544:	18c4a204 	addi	r3,r3,4744
  800548:	00803e04 	movi	r2,248
  80054c:	18800035 	stwio	r2,0(r3)
  for (i = 0; i < tx_len; i += 2)
  800550:	e03ffd15 	stw	zero,-12(fp)
  800554:	00001506 	br	8005ac <TransmitPacket+0xb4>
  {
    usleep(STD_DELAY);
  800558:	01000504 	movi	r4,20
  80055c:	0810a100 	call	810a10 <usleep>
    IOWR(DM9000A_BASE, IO_data, (data_ptr[i+1]<<8)|data_ptr[i] );
  800560:	e0fffd17 	ldw	r3,-12(fp)
  800564:	e0bffe17 	ldw	r2,-8(fp)
  800568:	1885883a 	add	r2,r3,r2
  80056c:	10800044 	addi	r2,r2,1
  800570:	10800003 	ldbu	r2,0(r2)
  800574:	10803fcc 	andi	r2,r2,255
  800578:	1008923a 	slli	r4,r2,8
  80057c:	e0fffd17 	ldw	r3,-12(fp)
  800580:	e0bffe17 	ldw	r2,-8(fp)
  800584:	1885883a 	add	r2,r3,r2
  800588:	10800003 	ldbu	r2,0(r2)
  80058c:	10803fcc 	andi	r2,r2,255
  800590:	2086b03a 	or	r3,r4,r2
  800594:	00804034 	movhi	r2,256
  800598:	1084a304 	addi	r2,r2,4748
  80059c:	10c00035 	stwio	r3,0(r2)
  iow(0xFD, (tx_len >> 8) & 0xFF);  /* TXPLH High_byte length */
  iow(0xFC, tx_len & 0xFF);         /* TXPLL Low_byte  length */

  /* wirte transmit data to chip SRAM */
  IOWR(DM9000A_BASE, IO_addr, MWCMD);   /* set MWCMD REG. F8H TX I/O port ready */
  for (i = 0; i < tx_len; i += 2)
  8005a0:	e0bffd17 	ldw	r2,-12(fp)
  8005a4:	10800084 	addi	r2,r2,2
  8005a8:	e0bffd15 	stw	r2,-12(fp)
  8005ac:	e0fffd17 	ldw	r3,-12(fp)
  8005b0:	e0bfff17 	ldw	r2,-4(fp)
  8005b4:	18bfe836 	bltu	r3,r2,800558 <TransmitPacket+0x60>
    usleep(STD_DELAY);
    IOWR(DM9000A_BASE, IO_data, (data_ptr[i+1]<<8)|data_ptr[i] );
  }

  /* issue TX polling command activated */
  iow(TCR , TCR_set | TX_REQUEST);  /* TXCR Bit [0] TXREQ auto clear after TX completed */
  8005b8:	01000084 	movi	r4,2
  8005bc:	01400044 	movi	r5,1
  8005c0:	08002080 	call	800208 <iow>

  /* wait TX transmit done */
  while(!(ior(NSR)&0x0C))
  8005c4:	00000206 	br	8005d0 <TransmitPacket+0xd8>
  usleep(STD_DELAY);
  8005c8:	01000504 	movi	r4,20
  8005cc:	0810a100 	call	810a10 <usleep>

  /* issue TX polling command activated */
  iow(TCR , TCR_set | TX_REQUEST);  /* TXCR Bit [0] TXREQ auto clear after TX completed */

  /* wait TX transmit done */
  while(!(ior(NSR)&0x0C))
  8005d0:	01000044 	movi	r4,1
  8005d4:	080025c0 	call	80025c <ior>
  8005d8:	1080030c 	andi	r2,r2,12
  8005dc:	1005003a 	cmpeq	r2,r2,zero
  8005e0:	103ff91e 	bne	r2,zero,8005c8 <TransmitPacket+0xd0>
  usleep(STD_DELAY);

  /* clear the NSR Register */
  iow(NSR,0x00);
  8005e4:	01000044 	movi	r4,1
  8005e8:	000b883a 	mov	r5,zero
  8005ec:	08002080 	call	800208 <iow>
  
  /* re-enable NIC interrupts */
  iow(IMR, INTR_set);
  8005f0:	01003fc4 	movi	r4,255
  8005f4:	01402044 	movi	r5,129
  8005f8:	08002080 	call	800208 <iow>

  /* RETURN "TX_SUCCESS" to upper layer */
  return  DMFE_SUCCESS;
  8005fc:	0005883a 	mov	r2,zero
}
  800600:	e037883a 	mov	sp,fp
  800604:	dfc00117 	ldw	ra,4(sp)
  800608:	df000017 	ldw	fp,0(sp)
  80060c:	dec00204 	addi	sp,sp,8
  800610:	f800283a 	ret

00800614 <ReceivePacket>:
//-------------------------------------------------------------------------
/* Receive One Packet I/O routine */
unsigned int  ReceivePacket (unsigned char *data_ptr,unsigned int *rx_len)
{
  800614:	defff804 	addi	sp,sp,-32
  800618:	dfc00715 	stw	ra,28(sp)
  80061c:	df000615 	stw	fp,24(sp)
  800620:	df000604 	addi	fp,sp,24
  800624:	e13ffe15 	stw	r4,-8(fp)
  800628:	e17fff15 	stw	r5,-4(fp)
  unsigned char rx_READY,GoodPacket;
  unsigned int  Tmp, RxStatus, i;
  
  RxStatus = rx_len[0] = 0;
  80062c:	e0bfff17 	ldw	r2,-4(fp)
  800630:	10000015 	stw	zero,0(r2)
  800634:	e0bfff17 	ldw	r2,-4(fp)
  800638:	10800017 	ldw	r2,0(r2)
  80063c:	e0bffb15 	stw	r2,-20(fp)
  GoodPacket=FALSE;
  800640:	e03ffd05 	stb	zero,-12(fp)

   /* mask NIC interrupts IMR: PAR only */
  iow(IMR, PAR_set);
  800644:	01003fc4 	movi	r4,255
  800648:	01402004 	movi	r5,128
  80064c:	08002080 	call	800208 <iow>
  
  /* dummy read a byte from MRCMDX REG. F0H */
  rx_READY = ior(MRCMDX);
  800650:	01003c04 	movi	r4,240
  800654:	080025c0 	call	80025c <ior>
  800658:	e0bffd45 	stb	r2,-11(fp)
  
  /* got most updated byte: rx_READY */
  rx_READY = IORD(DM9000A_BASE,IO_data)&0x03;
  80065c:	00804034 	movhi	r2,256
  800660:	1084a304 	addi	r2,r2,4748
  800664:	10800037 	ldwio	r2,0(r2)
  800668:	108000cc 	andi	r2,r2,3
  80066c:	e0bffd45 	stb	r2,-11(fp)
  usleep(STD_DELAY);
  800670:	01000504 	movi	r4,20
  800674:	0810a100 	call	810a10 <usleep>
  
  /* check if (rx_READY == 0x01): Received Packet READY? */
  if (rx_READY == DM9000_PKT_READY)
  800678:	e0bffd43 	ldbu	r2,-11(fp)
  80067c:	10800058 	cmpnei	r2,r2,1
  800680:	10004d1e 	bne	r2,zero,8007b8 <ReceivePacket+0x1a4>
  {
    /* got RX_Status & RX_Length from RX SRAM */
    IOWR(DM9000A_BASE, IO_addr, MRCMD); /* set MRCMD REG. F2H RX I/O port ready */
  800684:	00c04034 	movhi	r3,256
  800688:	18c4a204 	addi	r3,r3,4744
  80068c:	00803c84 	movi	r2,242
  800690:	18800035 	stwio	r2,0(r3)
    usleep(STD_DELAY);
  800694:	01000504 	movi	r4,20
  800698:	0810a100 	call	810a10 <usleep>
    RxStatus = IORD(DM9000A_BASE,IO_data);
  80069c:	00804034 	movhi	r2,256
  8006a0:	1084a304 	addi	r2,r2,4748
  8006a4:	10800037 	ldwio	r2,0(r2)
  8006a8:	e0bffb15 	stw	r2,-20(fp)
    usleep(STD_DELAY);
  8006ac:	01000504 	movi	r4,20
  8006b0:	0810a100 	call	810a10 <usleep>
    rx_len[0] = IORD(DM9000A_BASE,IO_data);
  8006b4:	00804034 	movhi	r2,256
  8006b8:	1084a304 	addi	r2,r2,4748
  8006bc:	10800037 	ldwio	r2,0(r2)
  8006c0:	1007883a 	mov	r3,r2
  8006c4:	e0bfff17 	ldw	r2,-4(fp)
  8006c8:	10c00015 	stw	r3,0(r2)

    /* Check this packet_status GOOD or BAD? */
    if ( !(RxStatus & 0xBF00) && (rx_len[0] < MAX_PACKET_SIZE) )
  8006cc:	e0bffb17 	ldw	r2,-20(fp)
  8006d0:	10afc00c 	andi	r2,r2,48896
  8006d4:	1004c03a 	cmpne	r2,r2,zero
  8006d8:	1000221e 	bne	r2,zero,800764 <ReceivePacket+0x150>
  8006dc:	e0bfff17 	ldw	r2,-4(fp)
  8006e0:	10800017 	ldw	r2,0(r2)
  8006e4:	10817ca8 	cmpgeui	r2,r2,1522
  8006e8:	10001e1e 	bne	r2,zero,800764 <ReceivePacket+0x150>
    {
      /* read 1 received packet from RX SRAM into RX buffer */
      for (i = 0; i < rx_len[0]; i += 2)
  8006ec:	e03ffa15 	stw	zero,-24(fp)
  8006f0:	00001506 	br	800748 <ReceivePacket+0x134>
      {
        usleep(STD_DELAY);
  8006f4:	01000504 	movi	r4,20
  8006f8:	0810a100 	call	810a10 <usleep>
        Tmp = IORD(DM9000A_BASE, IO_data);
  8006fc:	00804034 	movhi	r2,256
  800700:	1084a304 	addi	r2,r2,4748
  800704:	10800037 	ldwio	r2,0(r2)
  800708:	e0bffc15 	stw	r2,-16(fp)
        data_ptr[i] = Tmp&0xFF;
  80070c:	e0fffa17 	ldw	r3,-24(fp)
  800710:	e0bffe17 	ldw	r2,-8(fp)
  800714:	1887883a 	add	r3,r3,r2
  800718:	e0bffc17 	ldw	r2,-16(fp)
  80071c:	18800005 	stb	r2,0(r3)
        data_ptr[i+1] = (Tmp>>8)&0xFF;
  800720:	e0fffa17 	ldw	r3,-24(fp)
  800724:	e0bffe17 	ldw	r2,-8(fp)
  800728:	1885883a 	add	r2,r3,r2
  80072c:	10c00044 	addi	r3,r2,1
  800730:	e0bffc17 	ldw	r2,-16(fp)
  800734:	1004d23a 	srli	r2,r2,8
  800738:	18800005 	stb	r2,0(r3)

    /* Check this packet_status GOOD or BAD? */
    if ( !(RxStatus & 0xBF00) && (rx_len[0] < MAX_PACKET_SIZE) )
    {
      /* read 1 received packet from RX SRAM into RX buffer */
      for (i = 0; i < rx_len[0]; i += 2)
  80073c:	e0bffa17 	ldw	r2,-24(fp)
  800740:	10800084 	addi	r2,r2,2
  800744:	e0bffa15 	stw	r2,-24(fp)
  800748:	e0bfff17 	ldw	r2,-4(fp)
  80074c:	10c00017 	ldw	r3,0(r2)
  800750:	e0bffa17 	ldw	r2,-24(fp)
  800754:	10ffe736 	bltu	r2,r3,8006f4 <ReceivePacket+0xe0>
        usleep(STD_DELAY);
        Tmp = IORD(DM9000A_BASE, IO_data);
        data_ptr[i] = Tmp&0xFF;
        data_ptr[i+1] = (Tmp>>8)&0xFF;
      }
      GoodPacket=TRUE;
  800758:	00800044 	movi	r2,1
  80075c:	e0bffd05 	stb	r2,-12(fp)
    RxStatus = IORD(DM9000A_BASE,IO_data);
    usleep(STD_DELAY);
    rx_len[0] = IORD(DM9000A_BASE,IO_data);

    /* Check this packet_status GOOD or BAD? */
    if ( !(RxStatus & 0xBF00) && (rx_len[0] < MAX_PACKET_SIZE) )
  800760:	00004306 	br	800870 <ReceivePacket+0x25c>
      GoodPacket=TRUE;
    } /* end if (GoodPacket) */
    else
    {
      /* this packet is bad, dump it from RX SRAM */
      for (i = 0; i < rx_len[0]; i += 2)
  800764:	e03ffa15 	stw	zero,-24(fp)
  800768:	00000906 	br	800790 <ReceivePacket+0x17c>
      {
        usleep(STD_DELAY);
  80076c:	01000504 	movi	r4,20
  800770:	0810a100 	call	810a10 <usleep>
        Tmp = IORD(DM9000A_BASE, IO_data);        
  800774:	00804034 	movhi	r2,256
  800778:	1084a304 	addi	r2,r2,4748
  80077c:	10800037 	ldwio	r2,0(r2)
  800780:	e0bffc15 	stw	r2,-16(fp)
      GoodPacket=TRUE;
    } /* end if (GoodPacket) */
    else
    {
      /* this packet is bad, dump it from RX SRAM */
      for (i = 0; i < rx_len[0]; i += 2)
  800784:	e0bffa17 	ldw	r2,-24(fp)
  800788:	10800084 	addi	r2,r2,2
  80078c:	e0bffa15 	stw	r2,-24(fp)
  800790:	e0bfff17 	ldw	r2,-4(fp)
  800794:	10c00017 	ldw	r3,0(r2)
  800798:	e0bffa17 	ldw	r2,-24(fp)
  80079c:	10fff336 	bltu	r2,r3,80076c <ReceivePacket+0x158>
      {
        usleep(STD_DELAY);
        Tmp = IORD(DM9000A_BASE, IO_data);        
      }
      printf("\nError\n");
  8007a0:	010020b4 	movhi	r4,130
  8007a4:	21323d04 	addi	r4,r4,-14092
  8007a8:	08086200 	call	808620 <puts>
      rx_len[0] = 0;
  8007ac:	e0bfff17 	ldw	r2,-4(fp)
  8007b0:	10000015 	stw	zero,0(r2)
  8007b4:	00002e06 	br	800870 <ReceivePacket+0x25c>
    } /* end if (!GoodPacket) */
  } /* end if (rx_READY == DM9000_PKT_READY) ok */
  else if(rx_READY) /* status check first byte: rx_READY Bit[1:0] must be "00"b or "01"b */
  8007b8:	e0bffd43 	ldbu	r2,-11(fp)
  8007bc:	1005003a 	cmpeq	r2,r2,zero
  8007c0:	10002b1e 	bne	r2,zero,800870 <ReceivePacket+0x25c>
  {
    /* software-RESET NIC */
    iow(NCR, 0x03);   /* NCR REG. 00 RST Bit [0] = 1 reset on, and LBK Bit [2:1] = 01b MAC loopback on */
  8007c4:	0009883a 	mov	r4,zero
  8007c8:	014000c4 	movi	r5,3
  8007cc:	08002080 	call	800208 <iow>
    usleep(20);       /* wait > 10us for a software-RESET ok */
  8007d0:	01000504 	movi	r4,20
  8007d4:	0810a100 	call	810a10 <usleep>
    iow(NCR, 0x00);   /* normalize */
  8007d8:	0009883a 	mov	r4,zero
  8007dc:	000b883a 	mov	r5,zero
  8007e0:	08002080 	call	800208 <iow>
    iow(NCR, 0x03);
  8007e4:	0009883a 	mov	r4,zero
  8007e8:	014000c4 	movi	r5,3
  8007ec:	08002080 	call	800208 <iow>
    usleep(20);
  8007f0:	01000504 	movi	r4,20
  8007f4:	0810a100 	call	810a10 <usleep>
    iow(NCR, 0x00);    
  8007f8:	0009883a 	mov	r4,zero
  8007fc:	000b883a 	mov	r5,zero
  800800:	08002080 	call	800208 <iow>
    /* program operating registers~ */
    iow(NCR,  NCR_set);   /* NCR REG. 00 enable the chip functions (and disable this MAC loopback mode back to normal) */
  800804:	0009883a 	mov	r4,zero
  800808:	000b883a 	mov	r5,zero
  80080c:	08002080 	call	800208 <iow>
    iow(0x08, BPTR_set);  /* BPTR  REG.08  (if necessary) RX Back Pressure Threshold in Half duplex moe only: High Water 3KB, 600 us */
  800810:	01000204 	movi	r4,8
  800814:	01400fc4 	movi	r5,63
  800818:	08002080 	call	800208 <iow>
    iow(0x09, FCTR_set);  /* FCTR  REG.09  (if necessary) Flow Control Threshold setting High/ Low Water Overflow 5KB/ 10KB */
  80081c:	01000244 	movi	r4,9
  800820:	01401684 	movi	r5,90
  800824:	08002080 	call	800208 <iow>
    iow(0x0A, RTFCR_set); /* RTFCR REG.0AH (if necessary) RX/TX Flow Control Register enable TXPEN, BKPM (TX_Half), FLCE (RX) */
  800828:	01000284 	movi	r4,10
  80082c:	01400a44 	movi	r5,41
  800830:	08002080 	call	800208 <iow>
    iow(0x0F, 0x00);      /* Clear the all Event */
  800834:	010003c4 	movi	r4,15
  800838:	000b883a 	mov	r5,zero
  80083c:	08002080 	call	800208 <iow>
    iow(0x2D, 0x80);      /* Switch LED to mode 1 */
  800840:	01000b44 	movi	r4,45
  800844:	01402004 	movi	r5,128
  800848:	08002080 	call	800208 <iow>
    /* set other registers depending on applications */
    iow(ETXCSR, ETXCSR_set); /* Early Transmit 75% */
  80084c:	01000c04 	movi	r4,48
  800850:	014020c4 	movi	r5,131
  800854:	08002080 	call	800208 <iow>
    /* enable interrupts to activate DM9000 ~on */
    iow(IMR, INTR_set);   /* IMR REG. FFH PAR=1 only, or + PTM=1& PRM=1 enable RxTx interrupts */
  800858:	01003fc4 	movi	r4,255
  80085c:	01402044 	movi	r5,129
  800860:	08002080 	call	800208 <iow>
    /* enable RX (Broadcast/ ALL_MULTICAST) ~go */
    iow(RCR , RCR_set | RX_ENABLE | PASS_MULTICAST);  /* RCR REG. 05 RXEN Bit [0] = 1 to enable the RX machine/ filter */
  800864:	01000144 	movi	r4,5
  800868:	01400e44 	movi	r5,57
  80086c:	08002080 	call	800208 <iow>
  } /* end NIC H/W system Data-Bus error */
  
  return GoodPacket ? DMFE_SUCCESS : DMFE_FAIL;
  800870:	e0bffd03 	ldbu	r2,-12(fp)
  800874:	1005003a 	cmpeq	r2,r2,zero
}
  800878:	e037883a 	mov	sp,fp
  80087c:	dfc00117 	ldw	ra,4(sp)
  800880:	df000017 	ldw	fp,0(sp)
  800884:	dec00204 	addi	sp,sp,8
  800888:	f800283a 	ret

0080088c <main>:

//////////////////////////////////////////////////////////////////////////////
//							    	MAIN									//
//////////////////////////////////////////////////////////////////////////////
int main()
{
  80088c:	defff904 	addi	sp,sp,-28
  800890:	dfc00615 	stw	ra,24(sp)
  800894:	df000515 	stw	fp,20(sp)
  800898:	df000504 	addi	fp,sp,20

	// Create and launch the threads
	OSTaskCreateExt(VITask,
  80089c:	018020b4 	movhi	r6,130
  8008a0:	31943204 	addi	r6,r6,20680
  8008a4:	00800204 	movi	r2,8
  8008a8:	d8800015 	stw	r2,0(sp)
  8008ac:	008020b4 	movhi	r2,130
  8008b0:	108c3304 	addi	r2,r2,12492
  8008b4:	d8800115 	stw	r2,4(sp)
  8008b8:	00820004 	movi	r2,2048
  8008bc:	d8800215 	stw	r2,8(sp)
  8008c0:	d8000315 	stw	zero,12(sp)
  8008c4:	d8000415 	stw	zero,16(sp)
  8008c8:	01002034 	movhi	r4,128
  8008cc:	21024904 	addi	r4,r4,2340
  8008d0:	000b883a 	mov	r5,zero
  8008d4:	01c00204 	movi	r7,8
  8008d8:	08179c40 	call	8179c4 <OSTaskCreateExt>
				  TASK_STACKSIZE,
				  NULL,
				  0);


	OSTaskCreateExt(RICTask,
  8008dc:	018020b4 	movhi	r6,130
  8008e0:	318c0e04 	addi	r6,r6,12344
  8008e4:	008001c4 	movi	r2,7
  8008e8:	d8800015 	stw	r2,0(sp)
  8008ec:	008020b4 	movhi	r2,130
  8008f0:	10840f04 	addi	r2,r2,4156
  8008f4:	d8800115 	stw	r2,4(sp)
  8008f8:	00820004 	movi	r2,2048
  8008fc:	d8800215 	stw	r2,8(sp)
  800900:	d8000315 	stw	zero,12(sp)
  800904:	d8000415 	stw	zero,16(sp)
  800908:	01002034 	movhi	r4,128
  80090c:	21027404 	addi	r4,r4,2512
  800910:	000b883a 	mov	r5,zero
  800914:	01c001c4 	movi	r7,7
  800918:	08179c40 	call	8179c4 <OSTaskCreateExt>
	              TASK_STACKSIZE,
	              NULL,
				  0);


  OSStart(); // Operative System: to manage the threads
  80091c:	0811bf00 	call	811bf0 <OSStart>

  while(1); /*In normal execution this is never executed */
  800920:	003fff06 	br	800920 <main+0x94>

00800924 <VITask>:
/////////////////////////////////////////////////////////////////////////////////////

/* Thread 1: VITask */
/* We call the instrument's function that is activated in 'sc.activated_device' */
void VITask(void* pdata)
{
  800924:	defffd04 	addi	sp,sp,-12
  800928:	dfc00215 	stw	ra,8(sp)
  80092c:	df000115 	stw	fp,4(sp)
  800930:	df000104 	addi	fp,sp,4
  800934:	e13fff15 	stw	r4,-4(fp)

	first = last = NULL; // pointer to the list of frequency
  800938:	d0274115 	stw	zero,-25340(gp)
  80093c:	d0a74117 	ldw	r2,-25340(gp)
  800940:	d0a74015 	stw	r2,-25344(gp)
	lcd_init();
  800944:	0800a5c0 	call	800a5c <lcd_init>
	system_config_init();
  800948:	08021240 	call	802124 <system_config_init>
	assign_interruptions(); //assign the interruptions to a specific ISR
  80094c:	08021980 	call	802198 <assign_interruptions>
  800950:	00000006 	br	800954 <VITask+0x30>

	while(1) {

		if (sc.activated_device == FREQUENCY_METER){ 			 // Frequency Meter activated
  800954:	008020b4 	movhi	r2,130
  800958:	10840904 	addi	r2,r2,4132
  80095c:	10800003 	ldbu	r2,0(r2)
  800960:	10803fcc 	andi	r2,r2,255
  800964:	1080201c 	xori	r2,r2,128
  800968:	10bfe004 	addi	r2,r2,-128
  80096c:	1004c03a 	cmpne	r2,r2,zero
  800970:	1000091e 	bne	r2,zero,800998 <VITask+0x74>

			frequency_meter();
  800974:	08010e40 	call	8010e4 <frequency_meter>
			IOWR(PIO_OUT_GREEN_BASE, 0, 0x0001); 			 // LEDG0 of the dev board is ON
  800978:	00804034 	movhi	r2,256
  80097c:	10844004 	addi	r2,r2,4352
  800980:	00c00044 	movi	r3,1
  800984:	10c00035 	stwio	r3,0(r2)
			IOWR(PIO_OUT_RED_BASE, 0, 0x0000);				 // Clear Red leds (info of the Function Generator)
  800988:	00804034 	movhi	r2,256
  80098c:	10844804 	addi	r2,r2,4384
  800990:	10000035 	stwio	zero,0(r2)
  800994:	003fef06 	br	800954 <VITask+0x30>

		} else if (sc.activated_device == FUNCTION_GENERATOR){ // Function Generator activated
  800998:	008020b4 	movhi	r2,130
  80099c:	10840904 	addi	r2,r2,4132
  8009a0:	10800003 	ldbu	r2,0(r2)
  8009a4:	10803fcc 	andi	r2,r2,255
  8009a8:	1080201c 	xori	r2,r2,128
  8009ac:	10bfe004 	addi	r2,r2,-128
  8009b0:	10800058 	cmpnei	r2,r2,1
  8009b4:	103fe71e 	bne	r2,zero,800954 <VITask+0x30>

			function_generator();
  8009b8:	0801ab80 	call	801ab8 <function_generator>
			IOWR(PIO_OUT_GREEN_BASE, 0, 0x0002);			 // LEDG1 of the dec board isON
  8009bc:	00c04034 	movhi	r3,256
  8009c0:	18c44004 	addi	r3,r3,4352
  8009c4:	00800084 	movi	r2,2
  8009c8:	18800035 	stwio	r2,0(r3)

		}
	}
  8009cc:	003fe106 	br	800954 <VITask+0x30>

008009d0 <RICTask>:


/* Thread 2: RICTask */
/* We receive packets via Ethernet connection */
void RICTask(void* pdata)
{
  8009d0:	defffb04 	addi	sp,sp,-20
  8009d4:	dfc00415 	stw	ra,16(sp)
  8009d8:	df000315 	stw	fp,12(sp)
  8009dc:	df000304 	addi	fp,sp,12
  8009e0:	e13fff15 	stw	r4,-4(fp)

	unsigned int num_packets;

	while(DM9000_init() != DMFE_SUCCESS); //initialization of the Ethernet controller
  8009e4:	08003440 	call	800344 <DM9000_init>
  8009e8:	1004c03a 	cmpne	r2,r2,zero
  8009ec:	103ffd1e 	bne	r2,zero,8009e4 <RICTask+0x14>

	// Register the ISR after the initialization
	alt_ic_isr_register(DM9000A_IRQ_INTERRUPT_CONTROLLER_ID, DM9000A_IRQ, (void *)ethernet_interrupts , NULL, NULL);
  8009f0:	d8000015 	stw	zero,0(sp)
  8009f4:	0009883a 	mov	r4,zero
  8009f8:	01400184 	movi	r5,6
  8009fc:	01802034 	movhi	r6,128
  800a00:	31894604 	addi	r6,r6,9496
  800a04:	000f883a 	mov	r7,zero
  800a08:	08100840 	call	810084 <alt_ic_isr_register>
	/*
	 *	We receive 'num_packets', then we suspend the task for 100ms. Then we receive
	 *		'num_packets' ..., and so on.
	 */

	num_packets = 25; // burst of packets to be read each time
  800a0c:	00800644 	movi	r2,25
  800a10:	e0bffe15 	stw	r2,-8(fp)
	while (1) {

		while (num_packets != 0) {
  800a14:	00000606 	br	800a30 <RICTask+0x60>
			TransmitPacket(0,0x00); // clear the Ethernet Flag, so we can receive other packet
  800a18:	0009883a 	mov	r4,zero
  800a1c:	000b883a 	mov	r5,zero
  800a20:	08004f80 	call	8004f8 <TransmitPacket>
			num_packets--;
  800a24:	e0bffe17 	ldw	r2,-8(fp)
  800a28:	10bfffc4 	addi	r2,r2,-1
  800a2c:	e0bffe15 	stw	r2,-8(fp)
	 */

	num_packets = 25; // burst of packets to be read each time
	while (1) {

		while (num_packets != 0) {
  800a30:	e0bffe17 	ldw	r2,-8(fp)
  800a34:	1004c03a 	cmpne	r2,r2,zero
  800a38:	103ff71e 	bne	r2,zero,800a18 <RICTask+0x48>
			TransmitPacket(0,0x00); // clear the Ethernet Flag, so we can receive other packet
			num_packets--;
		}
		num_packets = 25;
  800a3c:	00800644 	movi	r2,25
  800a40:	e0bffe15 	stw	r2,-8(fp)
		OSTimeDlyHMSM(0, 0, 0, 100); // the task is suspended for 100ms, and we execute the VITask for that time.
  800a44:	0009883a 	mov	r4,zero
  800a48:	000b883a 	mov	r5,zero
  800a4c:	000d883a 	mov	r6,zero
  800a50:	01c01904 	movi	r7,100
  800a54:	0818e080 	call	818e08 <OSTimeDlyHMSM>
									 //  As VITask has less priority than RICTask, we need to suspend RICTask in order
									 //	 to execute VITask.
	}
  800a58:	003ff506 	br	800a30 <RICTask+0x60>

00800a5c <lcd_init>:
//					  		  LCD FUNCTIONS								 //
///////////////////////////////////////////////////////////////////////////

/* To initialize the LCD */
void lcd_init( void )
{
  800a5c:	defffe04 	addi	sp,sp,-8
  800a60:	dfc00115 	stw	ra,4(sp)
  800a64:	df000015 	stw	fp,0(sp)
  800a68:	d839883a 	mov	fp,sp
  /* Set Function Code Four Times -- 8-bit, 2 line, 5x7 mode */
  IOWR( LCD_BASE, LCD_WR_COMMAND_REG, 0x38 );
  800a6c:	00c04034 	movhi	r3,256
  800a70:	18c46004 	addi	r3,r3,4480
  800a74:	00800e04 	movi	r2,56
  800a78:	18800035 	stwio	r2,0(r3)
  usleep(4100);   /* Wait 4.1 ms */
  800a7c:	01040104 	movi	r4,4100
  800a80:	0810a100 	call	810a10 <usleep>
  IOWR( LCD_BASE, LCD_WR_COMMAND_REG, 0x38 );
  800a84:	00c04034 	movhi	r3,256
  800a88:	18c46004 	addi	r3,r3,4480
  800a8c:	00800e04 	movi	r2,56
  800a90:	18800035 	stwio	r2,0(r3)
  usleep(100);    /* Wait 100 us */
  800a94:	01001904 	movi	r4,100
  800a98:	0810a100 	call	810a10 <usleep>
  IOWR( LCD_BASE, LCD_WR_COMMAND_REG, 0x38 );
  800a9c:	00c04034 	movhi	r3,256
  800aa0:	18c46004 	addi	r3,r3,4480
  800aa4:	00800e04 	movi	r2,56
  800aa8:	18800035 	stwio	r2,0(r3)
  usleep(5000);   /* Wait 5.0 ms */
  800aac:	0104e204 	movi	r4,5000
  800ab0:	0810a100 	call	810a10 <usleep>
  IOWR( LCD_BASE, LCD_WR_COMMAND_REG, 0x38 );
  800ab4:	00c04034 	movhi	r3,256
  800ab8:	18c46004 	addi	r3,r3,4480
  800abc:	00800e04 	movi	r2,56
  800ac0:	18800035 	stwio	r2,0(r3)
  usleep(100);
  800ac4:	01001904 	movi	r4,100
  800ac8:	0810a100 	call	810a10 <usleep>

  /* Set Display to OFF */
  IOWR( LCD_BASE, LCD_WR_COMMAND_REG, 0x08 );
  800acc:	00c04034 	movhi	r3,256
  800ad0:	18c46004 	addi	r3,r3,4480
  800ad4:	00800204 	movi	r2,8
  800ad8:	18800035 	stwio	r2,0(r3)
  usleep(100);
  800adc:	01001904 	movi	r4,100
  800ae0:	0810a100 	call	810a10 <usleep>

  /* Set Display to ON */
  IOWR( LCD_BASE, LCD_WR_COMMAND_REG, 0x0C );
  800ae4:	00c04034 	movhi	r3,256
  800ae8:	18c46004 	addi	r3,r3,4480
  800aec:	00800304 	movi	r2,12
  800af0:	18800035 	stwio	r2,0(r3)
  usleep(100);
  800af4:	01001904 	movi	r4,100
  800af8:	0810a100 	call	810a10 <usleep>

  /* Set Entry Mode -- Cursor increment, display doesn't shift */
  IOWR( LCD_BASE, LCD_WR_COMMAND_REG, 0x06 );
  800afc:	00c04034 	movhi	r3,256
  800b00:	18c46004 	addi	r3,r3,4480
  800b04:	00800184 	movi	r2,6
  800b08:	18800035 	stwio	r2,0(r3)
  usleep(100);
  800b0c:	01001904 	movi	r4,100
  800b10:	0810a100 	call	810a10 <usleep>

  /* Set the cursor to the home position */
  IOWR( LCD_BASE, LCD_WR_COMMAND_REG, 0x02 );
  800b14:	00c04034 	movhi	r3,256
  800b18:	18c46004 	addi	r3,r3,4480
  800b1c:	00800084 	movi	r2,2
  800b20:	18800035 	stwio	r2,0(r3)
  usleep(2000);
  800b24:	0101f404 	movi	r4,2000
  800b28:	0810a100 	call	810a10 <usleep>

  /* Clear the display */
  IOWR( LCD_BASE, LCD_WR_COMMAND_REG, 0x01 );
  800b2c:	00c04034 	movhi	r3,256
  800b30:	18c46004 	addi	r3,r3,4480
  800b34:	00800044 	movi	r2,1
  800b38:	18800035 	stwio	r2,0(r3)
  usleep(2000);
  800b3c:	0101f404 	movi	r4,2000
  800b40:	0810a100 	call	810a10 <usleep>
}
  800b44:	e037883a 	mov	sp,fp
  800b48:	dfc00117 	ldw	ra,4(sp)
  800b4c:	df000017 	ldw	fp,0(sp)
  800b50:	dec00204 	addi	sp,sp,8
  800b54:	f800283a 	ret

00800b58 <lcd_clear>:


/* To clear the LCD */
void lcd_clear( void )
{
  800b58:	defffe04 	addi	sp,sp,-8
  800b5c:	dfc00115 	stw	ra,4(sp)
  800b60:	df000015 	stw	fp,0(sp)
  800b64:	d839883a 	mov	fp,sp

	IOWR( LCD_BASE, LCD_WR_COMMAND_REG, 0x02 ); //cursor to home
  800b68:	00c04034 	movhi	r3,256
  800b6c:	18c46004 	addi	r3,r3,4480
  800b70:	00800084 	movi	r2,2
  800b74:	18800035 	stwio	r2,0(r3)
	usleep(2000);
  800b78:	0101f404 	movi	r4,2000
  800b7c:	0810a100 	call	810a10 <usleep>

	IOWR( LCD_BASE, LCD_WR_COMMAND_REG, 0x01 ); //clear display
  800b80:	00c04034 	movhi	r3,256
  800b84:	18c46004 	addi	r3,r3,4480
  800b88:	00800044 	movi	r2,1
  800b8c:	18800035 	stwio	r2,0(r3)
	usleep(2000);
  800b90:	0101f404 	movi	r4,2000
  800b94:	0810a100 	call	810a10 <usleep>
}
  800b98:	e037883a 	mov	sp,fp
  800b9c:	dfc00117 	ldw	ra,4(sp)
  800ba0:	df000017 	ldw	fp,0(sp)
  800ba4:	dec00204 	addi	sp,sp,8
  800ba8:	f800283a 	ret

00800bac <lcd_write_first_line>:


/* Write a message in the first line of the LCD */
void lcd_write_first_line(char *message)
{
  800bac:	defff704 	addi	sp,sp,-36
  800bb0:	dfc00815 	stw	ra,32(sp)
  800bb4:	df000715 	stw	fp,28(sp)
  800bb8:	dc000615 	stw	r16,24(sp)
  800bbc:	df000604 	addi	fp,sp,24
  800bc0:	e13fff15 	stw	r4,-4(fp)

	char final_message[ALT_LCD_WIDTH]; //ALT_LCD_WIDTH = 16
	int i=0;
  800bc4:	e03ffa15 	stw	zero,-24(fp)
	IOWR( LCD_BASE, LCD_WR_COMMAND_REG, 0x02 ); //cursor to home
  800bc8:	00c04034 	movhi	r3,256
  800bcc:	18c46004 	addi	r3,r3,4480
  800bd0:	00800084 	movi	r2,2
  800bd4:	18800035 	stwio	r2,0(r3)
	usleep(2000);
  800bd8:	0101f404 	movi	r4,2000
  800bdc:	0810a100 	call	810a10 <usleep>

	if (strlen(message) > ALT_LCD_WIDTH) printf("ERROR: Input not valid on the first line of the LCD");
  800be0:	e13fff17 	ldw	r4,-4(fp)
  800be4:	08087780 	call	808778 <strlen>
  800be8:	10800470 	cmpltui	r2,r2,17
  800bec:	1000041e 	bne	r2,zero,800c00 <lcd_write_first_line+0x54>
  800bf0:	010020b4 	movhi	r4,130
  800bf4:	21323f04 	addi	r4,r4,-14084
  800bf8:	08085080 	call	808508 <printf>
  800bfc:	00002a06 	br	800ca8 <lcd_write_first_line+0xfc>
	else {
		strncpy(final_message, message, strlen(message));
  800c00:	e13fff17 	ldw	r4,-4(fp)
  800c04:	08087780 	call	808778 <strlen>
  800c08:	100d883a 	mov	r6,r2
  800c0c:	e13ffb04 	addi	r4,fp,-20
  800c10:	e17fff17 	ldw	r5,-4(fp)
  800c14:	08087ec0 	call	8087ec <strncpy>

		// Rest of the line is filled with the ' ' space symbol
		for (i = strlen(message); i <= ALT_LCD_WIDTH; i++) {
  800c18:	e13fff17 	ldw	r4,-4(fp)
  800c1c:	08087780 	call	808778 <strlen>
  800c20:	e0bffa15 	stw	r2,-24(fp)
  800c24:	00000806 	br	800c48 <lcd_write_first_line+0x9c>
			final_message[i] = ' ';
  800c28:	e0fffa17 	ldw	r3,-24(fp)
  800c2c:	e0bffb04 	addi	r2,fp,-20
  800c30:	10c7883a 	add	r3,r2,r3
  800c34:	00800804 	movi	r2,32
  800c38:	18800005 	stb	r2,0(r3)
	if (strlen(message) > ALT_LCD_WIDTH) printf("ERROR: Input not valid on the first line of the LCD");
	else {
		strncpy(final_message, message, strlen(message));

		// Rest of the line is filled with the ' ' space symbol
		for (i = strlen(message); i <= ALT_LCD_WIDTH; i++) {
  800c3c:	e0bffa17 	ldw	r2,-24(fp)
  800c40:	10800044 	addi	r2,r2,1
  800c44:	e0bffa15 	stw	r2,-24(fp)
  800c48:	e0bffa17 	ldw	r2,-24(fp)
  800c4c:	10800450 	cmplti	r2,r2,17
  800c50:	103ff51e 	bne	r2,zero,800c28 <lcd_write_first_line+0x7c>
			final_message[i] = ' ';
		}
		for( i = 0; i < strlen(final_message) ; i++ ) { //show message
  800c54:	e03ffa15 	stw	zero,-24(fp)
  800c58:	00000f06 	br	800c98 <lcd_write_first_line+0xec>
			IOWR( LCD_BASE, LCD_WR_DATA_REG, final_message[i] );
  800c5c:	e0fffa17 	ldw	r3,-24(fp)
  800c60:	e0bffb04 	addi	r2,fp,-20
  800c64:	10c5883a 	add	r2,r2,r3
  800c68:	10800003 	ldbu	r2,0(r2)
  800c6c:	10c03fcc 	andi	r3,r2,255
  800c70:	18c0201c 	xori	r3,r3,128
  800c74:	18ffe004 	addi	r3,r3,-128
  800c78:	00804034 	movhi	r2,256
  800c7c:	10846204 	addi	r2,r2,4488
  800c80:	10c00035 	stwio	r3,0(r2)
			usleep(50);
  800c84:	01000c84 	movi	r4,50
  800c88:	0810a100 	call	810a10 <usleep>

		// Rest of the line is filled with the ' ' space symbol
		for (i = strlen(message); i <= ALT_LCD_WIDTH; i++) {
			final_message[i] = ' ';
		}
		for( i = 0; i < strlen(final_message) ; i++ ) { //show message
  800c8c:	e0bffa17 	ldw	r2,-24(fp)
  800c90:	10800044 	addi	r2,r2,1
  800c94:	e0bffa15 	stw	r2,-24(fp)
  800c98:	e43ffa17 	ldw	r16,-24(fp)
  800c9c:	e13ffb04 	addi	r4,fp,-20
  800ca0:	08087780 	call	808778 <strlen>
  800ca4:	80bfed36 	bltu	r16,r2,800c5c <lcd_write_first_line+0xb0>
			IOWR( LCD_BASE, LCD_WR_DATA_REG, final_message[i] );
			usleep(50);
	    }
	}
}
  800ca8:	e037883a 	mov	sp,fp
  800cac:	dfc00217 	ldw	ra,8(sp)
  800cb0:	df000117 	ldw	fp,4(sp)
  800cb4:	dc000017 	ldw	r16,0(sp)
  800cb8:	dec00304 	addi	sp,sp,12
  800cbc:	f800283a 	ret

00800cc0 <lcd_write_second_line>:


/* Write a message in the second line of the LCD */
void lcd_write_second_line(char *message)
{
  800cc0:	defff704 	addi	sp,sp,-36
  800cc4:	dfc00815 	stw	ra,32(sp)
  800cc8:	df000715 	stw	fp,28(sp)
  800ccc:	dc000615 	stw	r16,24(sp)
  800cd0:	df000604 	addi	fp,sp,24
  800cd4:	e13fff15 	stw	r4,-4(fp)

	char final_message[ALT_LCD_WIDTH]; //ALT_LCD_WIDTH = 16
	int i=0;
  800cd8:	e03ffa15 	stw	zero,-24(fp)

	//IOWR( LCD_BASE, LCD_WR_COMMAND_REG, 0x02 ); //cursor to home
	//usleep(2000);

	IOWR( LCD_BASE, LCD_WR_COMMAND_REG, 0xC0 ); // change of line: to the second line
  800cdc:	00c04034 	movhi	r3,256
  800ce0:	18c46004 	addi	r3,r3,4480
  800ce4:	00803004 	movi	r2,192
  800ce8:	18800035 	stwio	r2,0(r3)
    usleep(100);
  800cec:	01001904 	movi	r4,100
  800cf0:	0810a100 	call	810a10 <usleep>

	if (strlen(message) > ALT_LCD_WIDTH) printf("ERROR: Input not valid on the second line of the LCD");
  800cf4:	e13fff17 	ldw	r4,-4(fp)
  800cf8:	08087780 	call	808778 <strlen>
  800cfc:	10800470 	cmpltui	r2,r2,17
  800d00:	1000041e 	bne	r2,zero,800d14 <lcd_write_second_line+0x54>
  800d04:	010020b4 	movhi	r4,130
  800d08:	21324c04 	addi	r4,r4,-14032
  800d0c:	08085080 	call	808508 <printf>
  800d10:	00002a06 	br	800dbc <lcd_write_second_line+0xfc>
	else {
		strncpy(final_message, message, strlen(message));
  800d14:	e13fff17 	ldw	r4,-4(fp)
  800d18:	08087780 	call	808778 <strlen>
  800d1c:	100d883a 	mov	r6,r2
  800d20:	e13ffb04 	addi	r4,fp,-20
  800d24:	e17fff17 	ldw	r5,-4(fp)
  800d28:	08087ec0 	call	8087ec <strncpy>

		// Rest of the line is filled with the ' ' space symbol
		for (i = strlen(message); i <= ALT_LCD_WIDTH; i++) {
  800d2c:	e13fff17 	ldw	r4,-4(fp)
  800d30:	08087780 	call	808778 <strlen>
  800d34:	e0bffa15 	stw	r2,-24(fp)
  800d38:	00000806 	br	800d5c <lcd_write_second_line+0x9c>
			final_message[i] = ' ';
  800d3c:	e0fffa17 	ldw	r3,-24(fp)
  800d40:	e0bffb04 	addi	r2,fp,-20
  800d44:	10c7883a 	add	r3,r2,r3
  800d48:	00800804 	movi	r2,32
  800d4c:	18800005 	stb	r2,0(r3)
	if (strlen(message) > ALT_LCD_WIDTH) printf("ERROR: Input not valid on the second line of the LCD");
	else {
		strncpy(final_message, message, strlen(message));

		// Rest of the line is filled with the ' ' space symbol
		for (i = strlen(message); i <= ALT_LCD_WIDTH; i++) {
  800d50:	e0bffa17 	ldw	r2,-24(fp)
  800d54:	10800044 	addi	r2,r2,1
  800d58:	e0bffa15 	stw	r2,-24(fp)
  800d5c:	e0bffa17 	ldw	r2,-24(fp)
  800d60:	10800450 	cmplti	r2,r2,17
  800d64:	103ff51e 	bne	r2,zero,800d3c <lcd_write_second_line+0x7c>
			final_message[i] = ' ';
		}
		for( i = 0; i < strlen(final_message) ; i++ ) { //show message
  800d68:	e03ffa15 	stw	zero,-24(fp)
  800d6c:	00000f06 	br	800dac <lcd_write_second_line+0xec>
			IOWR( LCD_BASE, LCD_WR_DATA_REG, final_message[i] );
  800d70:	e0fffa17 	ldw	r3,-24(fp)
  800d74:	e0bffb04 	addi	r2,fp,-20
  800d78:	10c5883a 	add	r2,r2,r3
  800d7c:	10800003 	ldbu	r2,0(r2)
  800d80:	10c03fcc 	andi	r3,r2,255
  800d84:	18c0201c 	xori	r3,r3,128
  800d88:	18ffe004 	addi	r3,r3,-128
  800d8c:	00804034 	movhi	r2,256
  800d90:	10846204 	addi	r2,r2,4488
  800d94:	10c00035 	stwio	r3,0(r2)
			usleep(50);
  800d98:	01000c84 	movi	r4,50
  800d9c:	0810a100 	call	810a10 <usleep>

		// Rest of the line is filled with the ' ' space symbol
		for (i = strlen(message); i <= ALT_LCD_WIDTH; i++) {
			final_message[i] = ' ';
		}
		for( i = 0; i < strlen(final_message) ; i++ ) { //show message
  800da0:	e0bffa17 	ldw	r2,-24(fp)
  800da4:	10800044 	addi	r2,r2,1
  800da8:	e0bffa15 	stw	r2,-24(fp)
  800dac:	e43ffa17 	ldw	r16,-24(fp)
  800db0:	e13ffb04 	addi	r4,fp,-20
  800db4:	08087780 	call	808778 <strlen>
  800db8:	80bfed36 	bltu	r16,r2,800d70 <lcd_write_second_line+0xb0>
			IOWR( LCD_BASE, LCD_WR_DATA_REG, final_message[i] );
			usleep(50);
	    }
	}
}
  800dbc:	e037883a 	mov	sp,fp
  800dc0:	dfc00217 	ldw	ra,8(sp)
  800dc4:	df000117 	ldw	fp,4(sp)
  800dc8:	dc000017 	ldw	r16,0(sp)
  800dcc:	dec00304 	addi	sp,sp,12
  800dd0:	f800283a 	ret

00800dd4 <create>:
//				FUNCTIONS TO OPERATE WITH THE FREQUENCY LIST				 //
///////////////////////////////////////////////////////////////////////////////

/* TO create an empty node */
struct node *create(float data)
{
  800dd4:	defffc04 	addi	sp,sp,-16
  800dd8:	dfc00315 	stw	ra,12(sp)
  800ddc:	df000215 	stw	fp,8(sp)
  800de0:	df000204 	addi	fp,sp,8
  800de4:	e13fff15 	stw	r4,-4(fp)
	struct node *temp;

	temp = (struct node *)malloc(sizeof(struct node));
  800de8:	01000304 	movi	r4,12
  800dec:	0807db40 	call	807db4 <malloc>
  800df0:	e0bffe15 	stw	r2,-8(fp)
	temp->prev = NULL;
  800df4:	e0bffe17 	ldw	r2,-8(fp)
  800df8:	10000015 	stw	zero,0(r2)
	temp->next = NULL;
  800dfc:	e0bffe17 	ldw	r2,-8(fp)
  800e00:	10000215 	stw	zero,8(r2)
	temp->frequency = data;
  800e04:	e0fffe17 	ldw	r3,-8(fp)
  800e08:	e0bfff17 	ldw	r2,-4(fp)
  800e0c:	18800115 	stw	r2,4(r3)
	num_nodes++;
  800e10:	d0a74517 	ldw	r2,-25324(gp)
  800e14:	10800044 	addi	r2,r2,1
  800e18:	d0a74515 	stw	r2,-25324(gp)
	return temp;
  800e1c:	e0bffe17 	ldw	r2,-8(fp)
}
  800e20:	e037883a 	mov	sp,fp
  800e24:	dfc00117 	ldw	ra,4(sp)
  800e28:	df000017 	ldw	fp,0(sp)
  800e2c:	dec00204 	addi	sp,sp,8
  800e30:	f800283a 	ret

00800e34 <insert_beginning>:


/*  TO insert at beginning */
void insert_beginning(float data)//struct node *first, struct node *last, float data)
{
  800e34:	defffc04 	addi	sp,sp,-16
  800e38:	dfc00315 	stw	ra,12(sp)
  800e3c:	df000215 	stw	fp,8(sp)
  800e40:	df000204 	addi	fp,sp,8
  800e44:	e13fff15 	stw	r4,-4(fp)

	struct node *temp;

	if (first == NULL) { //the list is empty
  800e48:	d0a74017 	ldw	r2,-25344(gp)
  800e4c:	1004c03a 	cmpne	r2,r2,zero
  800e50:	1000061e 	bne	r2,zero,800e6c <insert_beginning+0x38>
        first = create(data);
  800e54:	e13fff17 	ldw	r4,-4(fp)
  800e58:	0800dd40 	call	800dd4 <create>
  800e5c:	d0a74015 	stw	r2,-25344(gp)
        last = first;
  800e60:	d0a74017 	ldw	r2,-25344(gp)
  800e64:	d0a74115 	stw	r2,-25340(gp)
  800e68:	00000b06 	br	800e98 <insert_beginning+0x64>
    } else { //the list is not empty
        temp = create(data);
  800e6c:	e13fff17 	ldw	r4,-4(fp)
  800e70:	0800dd40 	call	800dd4 <create>
  800e74:	e0bffe15 	stw	r2,-8(fp)
        temp->next = first;
  800e78:	d0e74017 	ldw	r3,-25344(gp)
  800e7c:	e0bffe17 	ldw	r2,-8(fp)
  800e80:	10c00215 	stw	r3,8(r2)
        first->prev = temp;
  800e84:	d0e74017 	ldw	r3,-25344(gp)
  800e88:	e0bffe17 	ldw	r2,-8(fp)
  800e8c:	18800015 	stw	r2,0(r3)
        first = temp;
  800e90:	e0bffe17 	ldw	r2,-8(fp)
  800e94:	d0a74015 	stw	r2,-25344(gp)
    }
}
  800e98:	e037883a 	mov	sp,fp
  800e9c:	dfc00117 	ldw	ra,4(sp)
  800ea0:	df000017 	ldw	fp,0(sp)
  800ea4:	dec00204 	addi	sp,sp,8
  800ea8:	f800283a 	ret

00800eac <insert_at_end>:


/* To insert at end */
void insert_at_end(float data)//struct node *first, struct node *last, float data)
{
  800eac:	defffc04 	addi	sp,sp,-16
  800eb0:	dfc00315 	stw	ra,12(sp)
  800eb4:	df000215 	stw	fp,8(sp)
  800eb8:	df000204 	addi	fp,sp,8
  800ebc:	e13fff15 	stw	r4,-4(fp)

	struct node *temp;

	if (first == NULL) { //the list is empty
  800ec0:	d0a74017 	ldw	r2,-25344(gp)
  800ec4:	1004c03a 	cmpne	r2,r2,zero
  800ec8:	1000061e 	bne	r2,zero,800ee4 <insert_at_end+0x38>
        first = create(data);
  800ecc:	e13fff17 	ldw	r4,-4(fp)
  800ed0:	0800dd40 	call	800dd4 <create>
  800ed4:	d0a74015 	stw	r2,-25344(gp)
        last = first;
  800ed8:	d0a74017 	ldw	r2,-25344(gp)
  800edc:	d0a74115 	stw	r2,-25340(gp)
  800ee0:	00000b06 	br	800f10 <insert_at_end+0x64>
    } else { //the list is not empty
        temp = create(data);
  800ee4:	e13fff17 	ldw	r4,-4(fp)
  800ee8:	0800dd40 	call	800dd4 <create>
  800eec:	e0bffe15 	stw	r2,-8(fp)
        last->next = temp;
  800ef0:	d0e74117 	ldw	r3,-25340(gp)
  800ef4:	e0bffe17 	ldw	r2,-8(fp)
  800ef8:	18800215 	stw	r2,8(r3)
        temp->prev = last;
  800efc:	d0e74117 	ldw	r3,-25340(gp)
  800f00:	e0bffe17 	ldw	r2,-8(fp)
  800f04:	10c00015 	stw	r3,0(r2)
        last = temp;
  800f08:	e0bffe17 	ldw	r2,-8(fp)
  800f0c:	d0a74115 	stw	r2,-25340(gp)
    }
}
  800f10:	e037883a 	mov	sp,fp
  800f14:	dfc00117 	ldw	ra,4(sp)
  800f18:	df000017 	ldw	fp,0(sp)
  800f1c:	dec00204 	addi	sp,sp,8
  800f20:	f800283a 	ret

00800f24 <delete_beginning>:


/* To delete the first element */
void delete_beginning()//struct node *first, struct node *last)
{
  800f24:	defffd04 	addi	sp,sp,-12
  800f28:	dfc00215 	stw	ra,8(sp)
  800f2c:	df000115 	stw	fp,4(sp)
  800f30:	df000104 	addi	fp,sp,4

	struct node *temp;

	if(first == NULL) return; // the list is empty
  800f34:	d0a74017 	ldw	r2,-25344(gp)
  800f38:	1005003a 	cmpeq	r2,r2,zero
  800f3c:	1000171e 	bne	r2,zero,800f9c <delete_beginning+0x78>
	else if (first == last) { // the list has only one item
  800f40:	d0e74017 	ldw	r3,-25344(gp)
  800f44:	d0a74117 	ldw	r2,-25340(gp)
  800f48:	1880081e 	bne	r3,r2,800f6c <delete_beginning+0x48>
		free(first);
  800f4c:	d1274017 	ldw	r4,-25344(gp)
  800f50:	0807da00 	call	807da0 <free>
		first = NULL;
  800f54:	d0274015 	stw	zero,-25344(gp)
		last = NULL;
  800f58:	d0274115 	stw	zero,-25340(gp)
		num_nodes--;
  800f5c:	d0a74517 	ldw	r2,-25324(gp)
  800f60:	10bfffc4 	addi	r2,r2,-1
  800f64:	d0a74515 	stw	r2,-25324(gp)
  800f68:	00000c06 	br	800f9c <delete_beginning+0x78>
	} else { // the list has more than one item
		temp = first->next;
  800f6c:	d0a74017 	ldw	r2,-25344(gp)
  800f70:	10800217 	ldw	r2,8(r2)
  800f74:	e0bfff15 	stw	r2,-4(fp)
		temp->prev = NULL;
  800f78:	e0bfff17 	ldw	r2,-4(fp)
  800f7c:	10000015 	stw	zero,0(r2)
		free(first);
  800f80:	d1274017 	ldw	r4,-25344(gp)
  800f84:	0807da00 	call	807da0 <free>
		first = temp;
  800f88:	e0bfff17 	ldw	r2,-4(fp)
  800f8c:	d0a74015 	stw	r2,-25344(gp)
		num_nodes--;
  800f90:	d0a74517 	ldw	r2,-25324(gp)
  800f94:	10bfffc4 	addi	r2,r2,-1
  800f98:	d0a74515 	stw	r2,-25324(gp)
	}
}
  800f9c:	e037883a 	mov	sp,fp
  800fa0:	dfc00117 	ldw	ra,4(sp)
  800fa4:	df000017 	ldw	fp,0(sp)
  800fa8:	dec00204 	addi	sp,sp,8
  800fac:	f800283a 	ret

00800fb0 <delete_at_end>:


/* To delete the last element of the list*/
void delete_at_end()//struct node *first, struct node *last)
{
  800fb0:	defffd04 	addi	sp,sp,-12
  800fb4:	dfc00215 	stw	ra,8(sp)
  800fb8:	df000115 	stw	fp,4(sp)
  800fbc:	df000104 	addi	fp,sp,4

	struct node *temp;

	if(first == NULL) return; // the list is empty
  800fc0:	d0a74017 	ldw	r2,-25344(gp)
  800fc4:	1005003a 	cmpeq	r2,r2,zero
  800fc8:	1000171e 	bne	r2,zero,801028 <delete_at_end+0x78>
	else if (first == last) { // the list has only one item
  800fcc:	d0e74017 	ldw	r3,-25344(gp)
  800fd0:	d0a74117 	ldw	r2,-25340(gp)
  800fd4:	1880081e 	bne	r3,r2,800ff8 <delete_at_end+0x48>
		free(first);
  800fd8:	d1274017 	ldw	r4,-25344(gp)
  800fdc:	0807da00 	call	807da0 <free>
		first = NULL;
  800fe0:	d0274015 	stw	zero,-25344(gp)
		last = NULL;
  800fe4:	d0274115 	stw	zero,-25340(gp)
		num_nodes--;
  800fe8:	d0a74517 	ldw	r2,-25324(gp)
  800fec:	10bfffc4 	addi	r2,r2,-1
  800ff0:	d0a74515 	stw	r2,-25324(gp)
  800ff4:	00000c06 	br	801028 <delete_at_end+0x78>
	} else { // the list has more than one item
		temp = last->prev;
  800ff8:	d0a74117 	ldw	r2,-25340(gp)
  800ffc:	10800017 	ldw	r2,0(r2)
  801000:	e0bfff15 	stw	r2,-4(fp)
		free(last);
  801004:	d1274117 	ldw	r4,-25340(gp)
  801008:	0807da00 	call	807da0 <free>
		temp->next = NULL;
  80100c:	e0bfff17 	ldw	r2,-4(fp)
  801010:	10000215 	stw	zero,8(r2)
		last = temp;
  801014:	e0bfff17 	ldw	r2,-4(fp)
  801018:	d0a74115 	stw	r2,-25340(gp)
		num_nodes--;
  80101c:	d0a74517 	ldw	r2,-25324(gp)
  801020:	10bfffc4 	addi	r2,r2,-1
  801024:	d0a74515 	stw	r2,-25324(gp)
	}
}
  801028:	e037883a 	mov	sp,fp
  80102c:	dfc00117 	ldw	ra,4(sp)
  801030:	df000017 	ldw	fp,0(sp)
  801034:	dec00204 	addi	sp,sp,8
  801038:	f800283a 	ret

0080103c <delete_list>:


/* To delete all the list */
void delete_list()//struct node *first, struct node *last)
{
  80103c:	defffd04 	addi	sp,sp,-12
  801040:	dfc00215 	stw	ra,8(sp)
  801044:	df000115 	stw	fp,4(sp)
  801048:	df000104 	addi	fp,sp,4

	struct node *temp;

	if(first == NULL) return; // the list is empty
  80104c:	d0a74017 	ldw	r2,-25344(gp)
  801050:	1005003a 	cmpeq	r2,r2,zero
  801054:	10001e1e 	bne	r2,zero,8010d0 <delete_list+0x94>
	else if (first == last) { //the list has only one item
  801058:	d0e74017 	ldw	r3,-25344(gp)
  80105c:	d0a74117 	ldw	r2,-25340(gp)
  801060:	1880061e 	bne	r3,r2,80107c <delete_list+0x40>
		free(first);
  801064:	d1274017 	ldw	r4,-25344(gp)
  801068:	0807da00 	call	807da0 <free>
		first = NULL;
  80106c:	d0274015 	stw	zero,-25344(gp)
		last = NULL;
  801070:	d0274115 	stw	zero,-25340(gp)
		num_nodes = 0;
  801074:	d0274515 	stw	zero,-25324(gp)
  801078:	00001506 	br	8010d0 <delete_list+0x94>

	} else { //the list has two items or more
		temp = last->prev;
  80107c:	d0a74117 	ldw	r2,-25340(gp)
  801080:	10800017 	ldw	r2,0(r2)
  801084:	e0bfff15 	stw	r2,-4(fp)
		while (temp != first) {
  801088:	00000606 	br	8010a4 <delete_list+0x68>

			free(temp->next);
  80108c:	e0bfff17 	ldw	r2,-4(fp)
  801090:	11000217 	ldw	r4,8(r2)
  801094:	0807da00 	call	807da0 <free>
			temp = temp->prev;
  801098:	e0bfff17 	ldw	r2,-4(fp)
  80109c:	10800017 	ldw	r2,0(r2)
  8010a0:	e0bfff15 	stw	r2,-4(fp)
		last = NULL;
		num_nodes = 0;

	} else { //the list has two items or more
		temp = last->prev;
		while (temp != first) {
  8010a4:	d0e74017 	ldw	r3,-25344(gp)
  8010a8:	e0bfff17 	ldw	r2,-4(fp)
  8010ac:	10fff71e 	bne	r2,r3,80108c <delete_list+0x50>

			free(temp->next);
			temp = temp->prev;
		}
		free(temp->next);
  8010b0:	e0bfff17 	ldw	r2,-4(fp)
  8010b4:	11000217 	ldw	r4,8(r2)
  8010b8:	0807da00 	call	807da0 <free>
		free(first);
  8010bc:	d1274017 	ldw	r4,-25344(gp)
  8010c0:	0807da00 	call	807da0 <free>
		first = NULL;
  8010c4:	d0274015 	stw	zero,-25344(gp)
		last = NULL;
  8010c8:	d0274115 	stw	zero,-25340(gp)
		num_nodes = 0;
  8010cc:	d0274515 	stw	zero,-25324(gp)
	}

}
  8010d0:	e037883a 	mov	sp,fp
  8010d4:	dfc00117 	ldw	ra,4(sp)
  8010d8:	df000017 	ldw	fp,0(sp)
  8010dc:	dec00204 	addi	sp,sp,8
  8010e0:	f800283a 	ret

008010e4 <frequency_meter>:
//							FREQUENCY METER FUNCTIONS							   //
/////////////////////////////////////////////////////////////////////////////////////

/* Instrument: Frequency Meter */
void frequency_meter( void )
{
  8010e4:	defffd04 	addi	sp,sp,-12
  8010e8:	dfc00215 	stw	ra,8(sp)
  8010ec:	df000115 	stw	fp,4(sp)
  8010f0:	df000104 	addi	fp,sp,4

	float frecuencia_int = 0;
  8010f4:	e03fff15 	stw	zero,-4(fp)

	if (last_instrument != FREQUENCY_METER){ // When the frequency meter is chosen, we do a reset of the ccp module ...
  8010f8:	d0a00317 	ldw	r2,-32756(gp)
  8010fc:	1005003a 	cmpeq	r2,r2,zero
  801100:	10000b1e 	bne	r2,zero,801130 <frequency_meter+0x4c>
											// ... and configure the CCP in function generator mode

		last_instrument = FREQUENCY_METER;
  801104:	d0200315 	stw	zero,-32756(gp)
		reset_ccp();						// reset of the CCP module
  801108:	0801c940 	call	801c94 <reset_ccp>
		OSTimeDlyHMSM(0, 0, 1, 0);			// Delay(hour,minutes,seconds,miliseconds)
  80110c:	0009883a 	mov	r4,zero
  801110:	000b883a 	mov	r5,zero
  801114:	01800044 	movi	r6,1
  801118:	000f883a 	mov	r7,zero
  80111c:	0818e080 	call	818e08 <OSTimeDlyHMSM>
		lcd_write_first_line("Frequency Meter");
  801120:	010020b4 	movhi	r4,130
  801124:	21325a04 	addi	r4,r4,-13976
  801128:	0800bac0 	call	800bac <lcd_write_first_line>
		configuration_ccp_captura_0();		// CCP configured in mode captura_0
  80112c:	0801cf80 	call	801cf8 <configuration_ccp_captura_0>
	}

	if (captura_valida == 1) {
  801130:	d0a73f17 	ldw	r2,-25348(gp)
  801134:	10800058 	cmpnei	r2,r2,1
  801138:	1000061e 	bne	r2,zero,801154 <frequency_meter+0x70>

			frecuencia_int = calculate_new_freq(); // Calculates the frequency with the values of capturaant and captura (global variables)
  80113c:	080116c0 	call	80116c <calculate_new_freq>
  801140:	e0bfff15 	stw	r2,-4(fp)
												   // ... that are modified by the ISR of captura_0
			frecuencia = calculate_average_frequency(frecuencia_int);
  801144:	e13fff17 	ldw	r4,-4(fp)
  801148:	08011f00 	call	8011f0 <calculate_average_frequency>
  80114c:	d0a74415 	stw	r2,-25328(gp)

			//printf("capturaant= %d , captura= %d, frecuencia media: %f\n", capturaant, captura, frecuencia_int);
			//show_frequency_lcd(frecuencia);	   // Shows the frequency in the second line of the LCD

			captura_valida = 0;
  801150:	d0273f15 	stw	zero,-25348(gp)
	}

	configuration_ccp_captura_0(); // Configuration in capture mode (captura_0)
  801154:	0801cf80 	call	801cf8 <configuration_ccp_captura_0>
}
  801158:	e037883a 	mov	sp,fp
  80115c:	dfc00117 	ldw	ra,4(sp)
  801160:	df000017 	ldw	fp,0(sp)
  801164:	dec00204 	addi	sp,sp,8
  801168:	f800283a 	ret

0080116c <calculate_new_freq>:


/* Calculate new frequency with capturaant and captura */
float calculate_new_freq ( void )//unsigned long int captura_int, unsigned long int capturaant_int )
{
  80116c:	defffb04 	addi	sp,sp,-20
  801170:	dfc00415 	stw	ra,16(sp)
  801174:	df000315 	stw	fp,12(sp)
  801178:	df000304 	addi	fp,sp,12

	float frequency;
	float tPer = 0.00000001;  // period of a 100MHz signal
  80117c:	008c8b34 	movhi	r2,12844
  801180:	10b31dc4 	addi	r2,r2,-13193
  801184:	e0bffd15 	stw	r2,-12(fp)

	if (captura > capturaant) {
  801188:	d0e00217 	ldw	r3,-32760(gp)
  80118c:	d0a74217 	ldw	r2,-25336(gp)
  801190:	10c00e2e 	bgeu	r2,r3,8011cc <calculate_new_freq+0x60>
		frequency = (1/((captura-capturaant)*tPer));
  801194:	d0e00217 	ldw	r3,-32760(gp)
  801198:	d0a74217 	ldw	r2,-25336(gp)
  80119c:	1889c83a 	sub	r4,r3,r2
  8011a0:	0805ffc0 	call	805ffc <__floatunsisf>
  8011a4:	1009883a 	mov	r4,r2
  8011a8:	e17ffd17 	ldw	r5,-12(fp)
  8011ac:	0805acc0 	call	805acc <__mulsf3>
  8011b0:	010fe034 	movhi	r4,16256
  8011b4:	100b883a 	mov	r5,r2
  8011b8:	0805cac0 	call	805cac <__divsf3>
  8011bc:	e0bffe15 	stw	r2,-8(fp)
		return frequency;
  8011c0:	e0bffe17 	ldw	r2,-8(fp)
  8011c4:	e0bfff15 	stw	r2,-4(fp)
  8011c8:	00000206 	br	8011d4 <calculate_new_freq+0x68>
	} else {
		return frecuencia;
  8011cc:	d0e74417 	ldw	r3,-25328(gp)
  8011d0:	e0ffff15 	stw	r3,-4(fp)
  8011d4:	e0ffff17 	ldw	r3,-4(fp)
  8011d8:	1805883a 	mov	r2,r3
	}


}
  8011dc:	e037883a 	mov	sp,fp
  8011e0:	dfc00117 	ldw	ra,4(sp)
  8011e4:	df000017 	ldw	fp,0(sp)
  8011e8:	dec00204 	addi	sp,sp,8
  8011ec:	f800283a 	ret

008011f0 <calculate_average_frequency>:


/* Calculate average frequency */
float calculate_average_frequency(float new_freq)
{
  8011f0:	deffec04 	addi	sp,sp,-80
  8011f4:	dfc01315 	stw	ra,76(sp)
  8011f8:	df001215 	stw	fp,72(sp)
  8011fc:	ddc01115 	stw	r23,68(sp)
  801200:	dd801015 	stw	r22,64(sp)
  801204:	dd400f15 	stw	r21,60(sp)
  801208:	dd000e15 	stw	r20,56(sp)
  80120c:	dcc00d15 	stw	r19,52(sp)
  801210:	dc800c15 	stw	r18,48(sp)
  801214:	dc400b15 	stw	r17,44(sp)
  801218:	dc000a15 	stw	r16,40(sp)
  80121c:	df000a04 	addi	fp,sp,40
  801220:	e13ffe15 	stw	r4,-8(fp)
	float av_freq;
	struct node *temp;

	temp = first;
  801224:	d0a74017 	ldw	r2,-25344(gp)
  801228:	e0bffc15 	stw	r2,-16(fp)
	av_freq = 0.0;
  80122c:	e03ffd15 	stw	zero,-12(fp)

	// We operate with the frequency list to create/delete nodes
	if (num_nodes < sc.num_freq_nodes) { // insert a node at the beginning
  801230:	008020b4 	movhi	r2,130
  801234:	10840904 	addi	r2,r2,4132
  801238:	10c00117 	ldw	r3,4(r2)
  80123c:	d0a74517 	ldw	r2,-25324(gp)
  801240:	10c0030e 	bge	r2,r3,801250 <calculate_average_frequency+0x60>

		insert_beginning(new_freq);
  801244:	e13ffe17 	ldw	r4,-8(fp)
  801248:	0800e340 	call	800e34 <insert_beginning>
  80124c:	00000306 	br	80125c <calculate_average_frequency+0x6c>

	} else { // delete the last node and insert a new one

		delete_at_end();
  801250:	0800fb00 	call	800fb0 <delete_at_end>
		insert_beginning(new_freq);
  801254:	e13ffe17 	ldw	r4,-8(fp)
  801258:	0800e340 	call	800e34 <insert_beginning>
	}

	switch ( sc.average_type ) {
  80125c:	008020b4 	movhi	r2,130
  801260:	10840904 	addi	r2,r2,4132
  801264:	10800203 	ldbu	r2,8(r2)
  801268:	10803fcc 	andi	r2,r2,255
  80126c:	1080201c 	xori	r2,r2,128
  801270:	10bfe004 	addi	r2,r2,-128
  801274:	e0bfff15 	stw	r2,-4(fp)
  801278:	e0ffff17 	ldw	r3,-4(fp)
  80127c:	18800060 	cmpeqi	r2,r3,1
  801280:	1000241e 	bne	r2,zero,801314 <calculate_average_frequency+0x124>
  801284:	e0ffff17 	ldw	r3,-4(fp)
  801288:	188000a0 	cmpeqi	r2,r3,2
  80128c:	1000721e 	bne	r2,zero,801458 <calculate_average_frequency+0x268>
  801290:	e0ffff17 	ldw	r3,-4(fp)
  801294:	1805003a 	cmpeq	r2,r3,zero
  801298:	1000011e 	bne	r2,zero,8012a0 <calculate_average_frequency+0xb0>
  80129c:	00013106 	br	801764 <calculate_average_frequency+0x574>
			case SIMPLE_MOVING_AVERAGE: {

				// Calculates the average frequency
				int k = 1;
  8012a0:	00800044 	movi	r2,1
  8012a4:	e0bffb15 	stw	r2,-20(fp)
				temp = first;
  8012a8:	d0a74017 	ldw	r2,-25344(gp)
  8012ac:	e0bffc15 	stw	r2,-16(fp)
				for(k = 1; k <= num_nodes; k++) {
  8012b0:	00800044 	movi	r2,1
  8012b4:	e0bffb15 	stw	r2,-20(fp)
  8012b8:	00000c06 	br	8012ec <calculate_average_frequency+0xfc>

					av_freq = av_freq + (temp->frequency);
  8012bc:	e0bffc17 	ldw	r2,-16(fp)
  8012c0:	10800117 	ldw	r2,4(r2)
  8012c4:	e13ffd17 	ldw	r4,-12(fp)
  8012c8:	100b883a 	mov	r5,r2
  8012cc:	0805a680 	call	805a68 <__addsf3>
  8012d0:	e0bffd15 	stw	r2,-12(fp)
					temp = temp->next;
  8012d4:	e0bffc17 	ldw	r2,-16(fp)
  8012d8:	10800217 	ldw	r2,8(r2)
  8012dc:	e0bffc15 	stw	r2,-16(fp)
			case SIMPLE_MOVING_AVERAGE: {

				// Calculates the average frequency
				int k = 1;
				temp = first;
				for(k = 1; k <= num_nodes; k++) {
  8012e0:	e0bffb17 	ldw	r2,-20(fp)
  8012e4:	10800044 	addi	r2,r2,1
  8012e8:	e0bffb15 	stw	r2,-20(fp)
  8012ec:	d0e74517 	ldw	r3,-25324(gp)
  8012f0:	e0bffb17 	ldw	r2,-20(fp)
  8012f4:	18bff10e 	bge	r3,r2,8012bc <calculate_average_frequency+0xcc>

					av_freq = av_freq + (temp->frequency);
					temp = temp->next;
				}
				av_freq = av_freq/num_nodes;
  8012f8:	d1274517 	ldw	r4,-25324(gp)
  8012fc:	0805f100 	call	805f10 <__floatsisf>
  801300:	e13ffd17 	ldw	r4,-12(fp)
  801304:	100b883a 	mov	r5,r2
  801308:	0805cac0 	call	805cac <__divsf3>
  80130c:	e0bffd15 	stw	r2,-12(fp)
				break;
  801310:	00011706 	br	801770 <calculate_average_frequency+0x580>
			}
			case WEIGHTED_MOVING_AVERAGE: {

				// Calculates the weights
				int sum = 0;
  801314:	e03ffa15 	stw	zero,-24(fp)
				int i = 0;
  801318:	e03ff915 	stw	zero,-28(fp)

				for(i = 1; i <= num_nodes; i++) sum += i; // sum of the indexes of the nodes (1+2+3+ ... +num_nodes )
  80131c:	00800044 	movi	r2,1
  801320:	e0bff915 	stw	r2,-28(fp)
  801324:	00000706 	br	801344 <calculate_average_frequency+0x154>
  801328:	e0fffa17 	ldw	r3,-24(fp)
  80132c:	e0bff917 	ldw	r2,-28(fp)
  801330:	1885883a 	add	r2,r3,r2
  801334:	e0bffa15 	stw	r2,-24(fp)
  801338:	e0bff917 	ldw	r2,-28(fp)
  80133c:	10800044 	addi	r2,r2,1
  801340:	e0bff915 	stw	r2,-28(fp)
  801344:	d0e74517 	ldw	r3,-25324(gp)
  801348:	e0bff917 	ldw	r2,-28(fp)
  80134c:	18bff60e 	bge	r3,r2,801328 <calculate_average_frequency+0x138>

				// Calculates the average frequency by using the weights (i/sum)
				i = num_nodes;
  801350:	d0a74517 	ldw	r2,-25324(gp)
  801354:	e0bff915 	stw	r2,-28(fp)
				temp = first;
  801358:	d0a74017 	ldw	r2,-25344(gp)
  80135c:	e0bffc15 	stw	r2,-16(fp)
				for(i = num_nodes; i >= 1; i--) {
  801360:	d0a74517 	ldw	r2,-25324(gp)
  801364:	e0bff915 	stw	r2,-28(fp)
  801368:	00003706 	br	801448 <calculate_average_frequency+0x258>

					av_freq = av_freq + ((temp->frequency)*(i*1.0/sum));
  80136c:	e13ffd17 	ldw	r4,-12(fp)
  801370:	0805fa80 	call	805fa8 <__extendsfdf2>
  801374:	1029883a 	mov	r20,r2
  801378:	182b883a 	mov	r21,r3
  80137c:	e0bffc17 	ldw	r2,-16(fp)
  801380:	10800117 	ldw	r2,4(r2)
  801384:	1009883a 	mov	r4,r2
  801388:	0805fa80 	call	805fa8 <__extendsfdf2>
  80138c:	1025883a 	mov	r18,r2
  801390:	1827883a 	mov	r19,r3
  801394:	e13ff917 	ldw	r4,-28(fp)
  801398:	0806f0c0 	call	806f0c <__floatsidf>
  80139c:	1021883a 	mov	r16,r2
  8013a0:	1823883a 	mov	r17,r3
  8013a4:	e13ffa17 	ldw	r4,-24(fp)
  8013a8:	0806f0c0 	call	806f0c <__floatsidf>
  8013ac:	100f883a 	mov	r7,r2
  8013b0:	1811883a 	mov	r8,r3
  8013b4:	8009883a 	mov	r4,r16
  8013b8:	880b883a 	mov	r5,r17
  8013bc:	380d883a 	mov	r6,r7
  8013c0:	400f883a 	mov	r7,r8
  8013c4:	08069840 	call	806984 <__divdf3>
  8013c8:	1009883a 	mov	r4,r2
  8013cc:	180b883a 	mov	r5,r3
  8013d0:	2005883a 	mov	r2,r4
  8013d4:	2807883a 	mov	r3,r5
  8013d8:	9009883a 	mov	r4,r18
  8013dc:	980b883a 	mov	r5,r19
  8013e0:	100d883a 	mov	r6,r2
  8013e4:	180f883a 	mov	r7,r3
  8013e8:	08065c00 	call	8065c0 <__muldf3>
  8013ec:	1009883a 	mov	r4,r2
  8013f0:	180b883a 	mov	r5,r3
  8013f4:	2005883a 	mov	r2,r4
  8013f8:	2807883a 	mov	r3,r5
  8013fc:	a009883a 	mov	r4,r20
  801400:	a80b883a 	mov	r5,r21
  801404:	100d883a 	mov	r6,r2
  801408:	180f883a 	mov	r7,r3
  80140c:	080654c0 	call	80654c <__adddf3>
  801410:	1009883a 	mov	r4,r2
  801414:	180b883a 	mov	r5,r3
  801418:	2005883a 	mov	r2,r4
  80141c:	2807883a 	mov	r3,r5
  801420:	1009883a 	mov	r4,r2
  801424:	180b883a 	mov	r5,r3
  801428:	08071140 	call	807114 <__truncdfsf2>
  80142c:	e0bffd15 	stw	r2,-12(fp)
					temp = temp->next;
  801430:	e0bffc17 	ldw	r2,-16(fp)
  801434:	10800217 	ldw	r2,8(r2)
  801438:	e0bffc15 	stw	r2,-16(fp)
				for(i = 1; i <= num_nodes; i++) sum += i; // sum of the indexes of the nodes (1+2+3+ ... +num_nodes )

				// Calculates the average frequency by using the weights (i/sum)
				i = num_nodes;
				temp = first;
				for(i = num_nodes; i >= 1; i--) {
  80143c:	e0bff917 	ldw	r2,-28(fp)
  801440:	10bfffc4 	addi	r2,r2,-1
  801444:	e0bff915 	stw	r2,-28(fp)
  801448:	e0bff917 	ldw	r2,-28(fp)
  80144c:	10800048 	cmpgei	r2,r2,1
  801450:	103fc61e 	bne	r2,zero,80136c <calculate_average_frequency+0x17c>

					av_freq = av_freq + ((temp->frequency)*(i*1.0/sum));
					temp = temp->next;
				}
				break;
  801454:	0000c606 	br	801770 <calculate_average_frequency+0x580>
			}
			case EXPONENTIAL_MOVING_AVERAGE: {

				// Calculates the exponential weights
				float alpha = 0, sum = 0;
  801458:	e03ff815 	stw	zero,-32(fp)
  80145c:	e03ff715 	stw	zero,-36(fp)
				int i = 0;
  801460:	e03ff615 	stw	zero,-40(fp)

				if (num_nodes == sc.num_freq_nodes) {
  801464:	008020b4 	movhi	r2,130
  801468:	10840904 	addi	r2,r2,4132
  80146c:	10c00117 	ldw	r3,4(r2)
  801470:	d0a74517 	ldw	r2,-25324(gp)
  801474:	1880be1e 	bne	r3,r2,801770 <calculate_average_frequency+0x580>

					alpha = 4.0/(num_nodes+1);
  801478:	d0a74517 	ldw	r2,-25324(gp)
  80147c:	11000044 	addi	r4,r2,1
  801480:	0806f0c0 	call	806f0c <__floatsidf>
  801484:	100f883a 	mov	r7,r2
  801488:	1811883a 	mov	r8,r3
  80148c:	0009883a 	mov	r4,zero
  801490:	01500434 	movhi	r5,16400
  801494:	380d883a 	mov	r6,r7
  801498:	400f883a 	mov	r7,r8
  80149c:	08069840 	call	806984 <__divdf3>
  8014a0:	1009883a 	mov	r4,r2
  8014a4:	180b883a 	mov	r5,r3
  8014a8:	2005883a 	mov	r2,r4
  8014ac:	2807883a 	mov	r3,r5
  8014b0:	1009883a 	mov	r4,r2
  8014b4:	180b883a 	mov	r5,r3
  8014b8:	08071140 	call	807114 <__truncdfsf2>
  8014bc:	e0bff815 	stw	r2,-32(fp)
					for(i = 1; i <= num_nodes; i++) sum += (alpha*pow((1-alpha), (1-i)));
  8014c0:	00800044 	movi	r2,1
  8014c4:	e0bff615 	stw	r2,-40(fp)
  8014c8:	00003706 	br	8015a8 <calculate_average_frequency+0x3b8>
  8014cc:	e13ff717 	ldw	r4,-36(fp)
  8014d0:	0805fa80 	call	805fa8 <__extendsfdf2>
  8014d4:	1029883a 	mov	r20,r2
  8014d8:	182b883a 	mov	r21,r3
  8014dc:	e13ff817 	ldw	r4,-32(fp)
  8014e0:	0805fa80 	call	805fa8 <__extendsfdf2>
  8014e4:	1025883a 	mov	r18,r2
  8014e8:	1827883a 	mov	r19,r3
  8014ec:	010fe034 	movhi	r4,16256
  8014f0:	e17ff817 	ldw	r5,-32(fp)
  8014f4:	08059f80 	call	8059f8 <__subsf3>
  8014f8:	1009883a 	mov	r4,r2
  8014fc:	0805fa80 	call	805fa8 <__extendsfdf2>
  801500:	1021883a 	mov	r16,r2
  801504:	1823883a 	mov	r17,r3
  801508:	00c00044 	movi	r3,1
  80150c:	e0bff617 	ldw	r2,-40(fp)
  801510:	1889c83a 	sub	r4,r3,r2
  801514:	0806f0c0 	call	806f0c <__floatsidf>
  801518:	100f883a 	mov	r7,r2
  80151c:	1811883a 	mov	r8,r3
  801520:	8009883a 	mov	r4,r16
  801524:	880b883a 	mov	r5,r17
  801528:	380d883a 	mov	r6,r7
  80152c:	400f883a 	mov	r7,r8
  801530:	08038900 	call	803890 <pow>
  801534:	1009883a 	mov	r4,r2
  801538:	180b883a 	mov	r5,r3
  80153c:	2005883a 	mov	r2,r4
  801540:	2807883a 	mov	r3,r5
  801544:	9009883a 	mov	r4,r18
  801548:	980b883a 	mov	r5,r19
  80154c:	100d883a 	mov	r6,r2
  801550:	180f883a 	mov	r7,r3
  801554:	08065c00 	call	8065c0 <__muldf3>
  801558:	1009883a 	mov	r4,r2
  80155c:	180b883a 	mov	r5,r3
  801560:	2005883a 	mov	r2,r4
  801564:	2807883a 	mov	r3,r5
  801568:	a009883a 	mov	r4,r20
  80156c:	a80b883a 	mov	r5,r21
  801570:	100d883a 	mov	r6,r2
  801574:	180f883a 	mov	r7,r3
  801578:	080654c0 	call	80654c <__adddf3>
  80157c:	1009883a 	mov	r4,r2
  801580:	180b883a 	mov	r5,r3
  801584:	2005883a 	mov	r2,r4
  801588:	2807883a 	mov	r3,r5
  80158c:	1009883a 	mov	r4,r2
  801590:	180b883a 	mov	r5,r3
  801594:	08071140 	call	807114 <__truncdfsf2>
  801598:	e0bff715 	stw	r2,-36(fp)
  80159c:	e0bff617 	ldw	r2,-40(fp)
  8015a0:	10800044 	addi	r2,r2,1
  8015a4:	e0bff615 	stw	r2,-40(fp)
  8015a8:	d0e74517 	ldw	r3,-25324(gp)
  8015ac:	e0bff617 	ldw	r2,-40(fp)
  8015b0:	18bfc60e 	bge	r3,r2,8014cc <calculate_average_frequency+0x2dc>

					// Calculates the average frequency by using the exponential weights (alpha*pow((1-alpha), (1-i))/sum)
					i = num_nodes;
  8015b4:	d0a74517 	ldw	r2,-25324(gp)
  8015b8:	e0bff615 	stw	r2,-40(fp)
					temp = first;
  8015bc:	d0a74017 	ldw	r2,-25344(gp)
  8015c0:	e0bffc15 	stw	r2,-16(fp)
					for(i = num_nodes; i >= 1; i--) {
  8015c4:	d0a74517 	ldw	r2,-25324(gp)
  8015c8:	e0bff615 	stw	r2,-40(fp)
  8015cc:	00006106 	br	801754 <calculate_average_frequency+0x564>

						av_freq = av_freq + ((temp->frequency)*((alpha*pow((1.0-alpha), (1.0-i)))/sum));
  8015d0:	e13ffd17 	ldw	r4,-12(fp)
  8015d4:	0805fa80 	call	805fa8 <__extendsfdf2>
  8015d8:	1029883a 	mov	r20,r2
  8015dc:	182b883a 	mov	r21,r3
  8015e0:	e0bffc17 	ldw	r2,-16(fp)
  8015e4:	10800117 	ldw	r2,4(r2)
  8015e8:	1009883a 	mov	r4,r2
  8015ec:	0805fa80 	call	805fa8 <__extendsfdf2>
  8015f0:	102d883a 	mov	r22,r2
  8015f4:	182f883a 	mov	r23,r3
  8015f8:	e13ff817 	ldw	r4,-32(fp)
  8015fc:	0805fa80 	call	805fa8 <__extendsfdf2>
  801600:	1025883a 	mov	r18,r2
  801604:	1827883a 	mov	r19,r3
  801608:	e13ff817 	ldw	r4,-32(fp)
  80160c:	0805fa80 	call	805fa8 <__extendsfdf2>
  801610:	100f883a 	mov	r7,r2
  801614:	1811883a 	mov	r8,r3
  801618:	0009883a 	mov	r4,zero
  80161c:	014ffc34 	movhi	r5,16368
  801620:	380d883a 	mov	r6,r7
  801624:	400f883a 	mov	r7,r8
  801628:	08064cc0 	call	8064cc <__subdf3>
  80162c:	1009883a 	mov	r4,r2
  801630:	180b883a 	mov	r5,r3
  801634:	2021883a 	mov	r16,r4
  801638:	2823883a 	mov	r17,r5
  80163c:	e13ff617 	ldw	r4,-40(fp)
  801640:	0806f0c0 	call	806f0c <__floatsidf>
  801644:	100f883a 	mov	r7,r2
  801648:	1811883a 	mov	r8,r3
  80164c:	0009883a 	mov	r4,zero
  801650:	014ffc34 	movhi	r5,16368
  801654:	380d883a 	mov	r6,r7
  801658:	400f883a 	mov	r7,r8
  80165c:	08064cc0 	call	8064cc <__subdf3>
  801660:	1009883a 	mov	r4,r2
  801664:	180b883a 	mov	r5,r3
  801668:	2005883a 	mov	r2,r4
  80166c:	2807883a 	mov	r3,r5
  801670:	8009883a 	mov	r4,r16
  801674:	880b883a 	mov	r5,r17
  801678:	100d883a 	mov	r6,r2
  80167c:	180f883a 	mov	r7,r3
  801680:	08038900 	call	803890 <pow>
  801684:	100f883a 	mov	r7,r2
  801688:	1811883a 	mov	r8,r3
  80168c:	9009883a 	mov	r4,r18
  801690:	980b883a 	mov	r5,r19
  801694:	380d883a 	mov	r6,r7
  801698:	400f883a 	mov	r7,r8
  80169c:	08065c00 	call	8065c0 <__muldf3>
  8016a0:	1009883a 	mov	r4,r2
  8016a4:	180b883a 	mov	r5,r3
  8016a8:	2021883a 	mov	r16,r4
  8016ac:	2823883a 	mov	r17,r5
  8016b0:	e13ff717 	ldw	r4,-36(fp)
  8016b4:	0805fa80 	call	805fa8 <__extendsfdf2>
  8016b8:	100f883a 	mov	r7,r2
  8016bc:	1811883a 	mov	r8,r3
  8016c0:	8009883a 	mov	r4,r16
  8016c4:	880b883a 	mov	r5,r17
  8016c8:	380d883a 	mov	r6,r7
  8016cc:	400f883a 	mov	r7,r8
  8016d0:	08069840 	call	806984 <__divdf3>
  8016d4:	1009883a 	mov	r4,r2
  8016d8:	180b883a 	mov	r5,r3
  8016dc:	2005883a 	mov	r2,r4
  8016e0:	2807883a 	mov	r3,r5
  8016e4:	b009883a 	mov	r4,r22
  8016e8:	b80b883a 	mov	r5,r23
  8016ec:	100d883a 	mov	r6,r2
  8016f0:	180f883a 	mov	r7,r3
  8016f4:	08065c00 	call	8065c0 <__muldf3>
  8016f8:	1009883a 	mov	r4,r2
  8016fc:	180b883a 	mov	r5,r3
  801700:	2005883a 	mov	r2,r4
  801704:	2807883a 	mov	r3,r5
  801708:	a009883a 	mov	r4,r20
  80170c:	a80b883a 	mov	r5,r21
  801710:	100d883a 	mov	r6,r2
  801714:	180f883a 	mov	r7,r3
  801718:	080654c0 	call	80654c <__adddf3>
  80171c:	1009883a 	mov	r4,r2
  801720:	180b883a 	mov	r5,r3
  801724:	2005883a 	mov	r2,r4
  801728:	2807883a 	mov	r3,r5
  80172c:	1009883a 	mov	r4,r2
  801730:	180b883a 	mov	r5,r3
  801734:	08071140 	call	807114 <__truncdfsf2>
  801738:	e0bffd15 	stw	r2,-12(fp)
						temp = temp->next;
  80173c:	e0bffc17 	ldw	r2,-16(fp)
  801740:	10800217 	ldw	r2,8(r2)
  801744:	e0bffc15 	stw	r2,-16(fp)
					for(i = 1; i <= num_nodes; i++) sum += (alpha*pow((1-alpha), (1-i)));

					// Calculates the average frequency by using the exponential weights (alpha*pow((1-alpha), (1-i))/sum)
					i = num_nodes;
					temp = first;
					for(i = num_nodes; i >= 1; i--) {
  801748:	e0bff617 	ldw	r2,-40(fp)
  80174c:	10bfffc4 	addi	r2,r2,-1
  801750:	e0bff615 	stw	r2,-40(fp)
  801754:	e0bff617 	ldw	r2,-40(fp)
  801758:	10800048 	cmpgei	r2,r2,1
  80175c:	103f9c1e 	bne	r2,zero,8015d0 <calculate_average_frequency+0x3e0>
						av_freq = av_freq + ((temp->frequency)*((alpha*pow((1.0-alpha), (1.0-i)))/sum));
						temp = temp->next;
					}

				}
				break;
  801760:	00000306 	br	801770 <calculate_average_frequency+0x580>
			}
			default: {
				printf("ERROR: sc->average_type not recognized\n");
  801764:	010020b4 	movhi	r4,130
  801768:	21325e04 	addi	r4,r4,-13960
  80176c:	08086200 	call	808620 <puts>
			}
			break;
	}//end switch
	return av_freq;
  801770:	e0bffd17 	ldw	r2,-12(fp)
}
  801774:	e037883a 	mov	sp,fp
  801778:	dfc00917 	ldw	ra,36(sp)
  80177c:	df000817 	ldw	fp,32(sp)
  801780:	ddc00717 	ldw	r23,28(sp)
  801784:	dd800617 	ldw	r22,24(sp)
  801788:	dd400517 	ldw	r21,20(sp)
  80178c:	dd000417 	ldw	r20,16(sp)
  801790:	dcc00317 	ldw	r19,12(sp)
  801794:	dc800217 	ldw	r18,8(sp)
  801798:	dc400117 	ldw	r17,4(sp)
  80179c:	dc000017 	ldw	r16,0(sp)
  8017a0:	dec00a04 	addi	sp,sp,40
  8017a4:	f800283a 	ret

008017a8 <show_frequency_lcd>:


/* Show frequency in the second line of the LCD display */
void show_frequency_lcd ( float frequency )
{
  8017a8:	defff804 	addi	sp,sp,-32
  8017ac:	dfc00715 	stw	ra,28(sp)
  8017b0:	df000615 	stw	fp,24(sp)
  8017b4:	df000604 	addi	fp,sp,24
  8017b8:	e13ffb15 	stw	r4,-20(fp)

	char* s_freq;

	if (frequency < 10){
  8017bc:	e13ffb17 	ldw	r4,-20(fp)
  8017c0:	01504834 	movhi	r5,16672
  8017c4:	0805e980 	call	805e98 <__ltsf2>
  8017c8:	1004803a 	cmplt	r2,r2,zero
  8017cc:	1000011e 	bne	r2,zero,8017d4 <show_frequency_lcd+0x2c>
  8017d0:	00001a06 	br	80183c <show_frequency_lcd+0x94>

		sprintf(s_freq, "%.4f", frequency ); // It transform the frequency in a character array
  8017d4:	e13ffb17 	ldw	r4,-20(fp)
  8017d8:	0805fa80 	call	805fa8 <__extendsfdf2>
  8017dc:	100f883a 	mov	r7,r2
  8017e0:	1811883a 	mov	r8,r3
  8017e4:	e13ffa17 	ldw	r4,-24(fp)
  8017e8:	014020b4 	movhi	r5,130
  8017ec:	29726804 	addi	r5,r5,-13920
  8017f0:	380d883a 	mov	r6,r7
  8017f4:	400f883a 	mov	r7,r8
  8017f8:	08086a40 	call	8086a4 <sprintf>
		strcat(s_freq, " Hz"); 				 // Append the units
  8017fc:	e13ffa17 	ldw	r4,-24(fp)
  801800:	08087780 	call	808778 <strlen>
  801804:	1007883a 	mov	r3,r2
  801808:	e0bffa17 	ldw	r2,-24(fp)
  80180c:	1885883a 	add	r2,r3,r2
  801810:	1007883a 	mov	r3,r2
  801814:	00800804 	movi	r2,32
  801818:	18800005 	stb	r2,0(r3)
  80181c:	00801204 	movi	r2,72
  801820:	18800045 	stb	r2,1(r3)
  801824:	00801e84 	movi	r2,122
  801828:	18800085 	stb	r2,2(r3)
  80182c:	180000c5 	stb	zero,3(r3)
		lcd_write_second_line(s_freq);
  801830:	e13ffa17 	ldw	r4,-24(fp)
  801834:	0800cc00 	call	800cc0 <lcd_write_second_line>
  801838:	00009a06 	br	801aa4 <show_frequency_lcd+0x2fc>

	}else if ((frequency >= 10)&&(frequency < 1000)){
  80183c:	e03fff05 	stb	zero,-4(fp)
  801840:	e13ffb17 	ldw	r4,-20(fp)
  801844:	01504834 	movhi	r5,16672
  801848:	0805e200 	call	805e20 <__gesf2>
  80184c:	1004403a 	cmpge	r2,r2,zero
  801850:	1000011e 	bne	r2,zero,801858 <show_frequency_lcd+0xb0>
  801854:	00000206 	br	801860 <show_frequency_lcd+0xb8>
  801858:	00800044 	movi	r2,1
  80185c:	e0bfff05 	stb	r2,-4(fp)
  801860:	e0ffff03 	ldbu	r3,-4(fp)
  801864:	1880005c 	xori	r2,r3,1
  801868:	10803fcc 	andi	r2,r2,255
  80186c:	1004c03a 	cmpne	r2,r2,zero
  801870:	1000281e 	bne	r2,zero,801914 <show_frequency_lcd+0x16c>
  801874:	e03ffe05 	stb	zero,-8(fp)
  801878:	e13ffb17 	ldw	r4,-20(fp)
  80187c:	01511eb4 	movhi	r5,17530
  801880:	0805e980 	call	805e98 <__ltsf2>
  801884:	1004803a 	cmplt	r2,r2,zero
  801888:	1000011e 	bne	r2,zero,801890 <show_frequency_lcd+0xe8>
  80188c:	00000206 	br	801898 <show_frequency_lcd+0xf0>
  801890:	00800044 	movi	r2,1
  801894:	e0bffe05 	stb	r2,-8(fp)
  801898:	e0fffe03 	ldbu	r3,-8(fp)
  80189c:	1880005c 	xori	r2,r3,1
  8018a0:	10803fcc 	andi	r2,r2,255
  8018a4:	1004c03a 	cmpne	r2,r2,zero
  8018a8:	10001a1e 	bne	r2,zero,801914 <show_frequency_lcd+0x16c>

		sprintf(s_freq, "%.3f", frequency );
  8018ac:	e13ffb17 	ldw	r4,-20(fp)
  8018b0:	0805fa80 	call	805fa8 <__extendsfdf2>
  8018b4:	100f883a 	mov	r7,r2
  8018b8:	1811883a 	mov	r8,r3
  8018bc:	e13ffa17 	ldw	r4,-24(fp)
  8018c0:	014020b4 	movhi	r5,130
  8018c4:	29726a04 	addi	r5,r5,-13912
  8018c8:	380d883a 	mov	r6,r7
  8018cc:	400f883a 	mov	r7,r8
  8018d0:	08086a40 	call	8086a4 <sprintf>
		strcat(s_freq, " Hz");
  8018d4:	e13ffa17 	ldw	r4,-24(fp)
  8018d8:	08087780 	call	808778 <strlen>
  8018dc:	1007883a 	mov	r3,r2
  8018e0:	e0bffa17 	ldw	r2,-24(fp)
  8018e4:	1885883a 	add	r2,r3,r2
  8018e8:	1007883a 	mov	r3,r2
  8018ec:	00800804 	movi	r2,32
  8018f0:	18800005 	stb	r2,0(r3)
  8018f4:	00801204 	movi	r2,72
  8018f8:	18800045 	stb	r2,1(r3)
  8018fc:	00801e84 	movi	r2,122
  801900:	18800085 	stb	r2,2(r3)
  801904:	180000c5 	stb	zero,3(r3)
		lcd_write_second_line(s_freq);
  801908:	e13ffa17 	ldw	r4,-24(fp)
  80190c:	0800cc00 	call	800cc0 <lcd_write_second_line>

		sprintf(s_freq, "%.4f", frequency ); // It transform the frequency in a character array
		strcat(s_freq, " Hz"); 				 // Append the units
		lcd_write_second_line(s_freq);

	}else if ((frequency >= 10)&&(frequency < 1000)){
  801910:	00006406 	br	801aa4 <show_frequency_lcd+0x2fc>

		sprintf(s_freq, "%.3f", frequency );
		strcat(s_freq, " Hz");
		lcd_write_second_line(s_freq);

	}else if ((frequency >= 1000)&&(frequency < 1000000)){
  801914:	e03ffd05 	stb	zero,-12(fp)
  801918:	e13ffb17 	ldw	r4,-20(fp)
  80191c:	01511eb4 	movhi	r5,17530
  801920:	0805e200 	call	805e20 <__gesf2>
  801924:	1004403a 	cmpge	r2,r2,zero
  801928:	1000011e 	bne	r2,zero,801930 <show_frequency_lcd+0x188>
  80192c:	00000206 	br	801938 <show_frequency_lcd+0x190>
  801930:	00800044 	movi	r2,1
  801934:	e0bffd05 	stb	r2,-12(fp)
  801938:	e0fffd03 	ldbu	r3,-12(fp)
  80193c:	1880005c 	xori	r2,r3,1
  801940:	10803fcc 	andi	r2,r2,255
  801944:	1004c03a 	cmpne	r2,r2,zero
  801948:	10002f1e 	bne	r2,zero,801a08 <show_frequency_lcd+0x260>
  80194c:	e03ffc05 	stb	zero,-16(fp)
  801950:	e13ffb17 	ldw	r4,-20(fp)
  801954:	01525d34 	movhi	r5,18804
  801958:	29490004 	addi	r5,r5,9216
  80195c:	0805e980 	call	805e98 <__ltsf2>
  801960:	1004803a 	cmplt	r2,r2,zero
  801964:	1000011e 	bne	r2,zero,80196c <show_frequency_lcd+0x1c4>
  801968:	00000206 	br	801974 <show_frequency_lcd+0x1cc>
  80196c:	00800044 	movi	r2,1
  801970:	e0bffc05 	stb	r2,-16(fp)
  801974:	e0fffc03 	ldbu	r3,-16(fp)
  801978:	1880005c 	xori	r2,r3,1
  80197c:	10803fcc 	andi	r2,r2,255
  801980:	1004c03a 	cmpne	r2,r2,zero
  801984:	1000201e 	bne	r2,zero,801a08 <show_frequency_lcd+0x260>

		frequency = frequency/1000;
  801988:	e13ffb17 	ldw	r4,-20(fp)
  80198c:	01511eb4 	movhi	r5,17530
  801990:	0805cac0 	call	805cac <__divsf3>
  801994:	e0bffb15 	stw	r2,-20(fp)

		sprintf(s_freq, "%.3f", frequency );
  801998:	e13ffb17 	ldw	r4,-20(fp)
  80199c:	0805fa80 	call	805fa8 <__extendsfdf2>
  8019a0:	100f883a 	mov	r7,r2
  8019a4:	1811883a 	mov	r8,r3
  8019a8:	e13ffa17 	ldw	r4,-24(fp)
  8019ac:	014020b4 	movhi	r5,130
  8019b0:	29726a04 	addi	r5,r5,-13912
  8019b4:	380d883a 	mov	r6,r7
  8019b8:	400f883a 	mov	r7,r8
  8019bc:	08086a40 	call	8086a4 <sprintf>
		strcat(s_freq, " kHz");
  8019c0:	e13ffa17 	ldw	r4,-24(fp)
  8019c4:	08087780 	call	808778 <strlen>
  8019c8:	1007883a 	mov	r3,r2
  8019cc:	e0bffa17 	ldw	r2,-24(fp)
  8019d0:	1885883a 	add	r2,r3,r2
  8019d4:	1007883a 	mov	r3,r2
  8019d8:	00800804 	movi	r2,32
  8019dc:	18800005 	stb	r2,0(r3)
  8019e0:	00801ac4 	movi	r2,107
  8019e4:	18800045 	stb	r2,1(r3)
  8019e8:	00801204 	movi	r2,72
  8019ec:	18800085 	stb	r2,2(r3)
  8019f0:	00801e84 	movi	r2,122
  8019f4:	188000c5 	stb	r2,3(r3)
  8019f8:	18000105 	stb	zero,4(r3)
		lcd_write_second_line(s_freq);
  8019fc:	e13ffa17 	ldw	r4,-24(fp)
  801a00:	0800cc00 	call	800cc0 <lcd_write_second_line>

		sprintf(s_freq, "%.3f", frequency );
		strcat(s_freq, " Hz");
		lcd_write_second_line(s_freq);

	}else if ((frequency >= 1000)&&(frequency < 1000000)){
  801a04:	00002706 	br	801aa4 <show_frequency_lcd+0x2fc>

		sprintf(s_freq, "%.3f", frequency );
		strcat(s_freq, " kHz");
		lcd_write_second_line(s_freq);

	}else if (frequency >= 1000000){
  801a08:	e13ffb17 	ldw	r4,-20(fp)
  801a0c:	01525d34 	movhi	r5,18804
  801a10:	29490004 	addi	r5,r5,9216
  801a14:	0805e200 	call	805e20 <__gesf2>
  801a18:	1004403a 	cmpge	r2,r2,zero
  801a1c:	1000011e 	bne	r2,zero,801a24 <show_frequency_lcd+0x27c>
  801a20:	00002006 	br	801aa4 <show_frequency_lcd+0x2fc>

		frequency = frequency/1000000;
  801a24:	e13ffb17 	ldw	r4,-20(fp)
  801a28:	01525d34 	movhi	r5,18804
  801a2c:	29490004 	addi	r5,r5,9216
  801a30:	0805cac0 	call	805cac <__divsf3>
  801a34:	e0bffb15 	stw	r2,-20(fp)

		sprintf(s_freq, "%.3f", frequency );
  801a38:	e13ffb17 	ldw	r4,-20(fp)
  801a3c:	0805fa80 	call	805fa8 <__extendsfdf2>
  801a40:	100f883a 	mov	r7,r2
  801a44:	1811883a 	mov	r8,r3
  801a48:	e13ffa17 	ldw	r4,-24(fp)
  801a4c:	014020b4 	movhi	r5,130
  801a50:	29726a04 	addi	r5,r5,-13912
  801a54:	380d883a 	mov	r6,r7
  801a58:	400f883a 	mov	r7,r8
  801a5c:	08086a40 	call	8086a4 <sprintf>
		strcat(s_freq, " MHz");
  801a60:	e13ffa17 	ldw	r4,-24(fp)
  801a64:	08087780 	call	808778 <strlen>
  801a68:	1007883a 	mov	r3,r2
  801a6c:	e0bffa17 	ldw	r2,-24(fp)
  801a70:	1885883a 	add	r2,r3,r2
  801a74:	1007883a 	mov	r3,r2
  801a78:	00800804 	movi	r2,32
  801a7c:	18800005 	stb	r2,0(r3)
  801a80:	00801344 	movi	r2,77
  801a84:	18800045 	stb	r2,1(r3)
  801a88:	00801204 	movi	r2,72
  801a8c:	18800085 	stb	r2,2(r3)
  801a90:	00801e84 	movi	r2,122
  801a94:	188000c5 	stb	r2,3(r3)
  801a98:	18000105 	stb	zero,4(r3)
		lcd_write_second_line(s_freq);
  801a9c:	e13ffa17 	ldw	r4,-24(fp)
  801aa0:	0800cc00 	call	800cc0 <lcd_write_second_line>
	}
}
  801aa4:	e037883a 	mov	sp,fp
  801aa8:	dfc00117 	ldw	ra,4(sp)
  801aac:	df000017 	ldw	fp,0(sp)
  801ab0:	dec00204 	addi	sp,sp,8
  801ab4:	f800283a 	ret

00801ab8 <function_generator>:
//				  FUNCTIONS ASSOCIATED WITH THE FUNCTION GENERATOR				   //
/////////////////////////////////////////////////////////////////////////////////////

/* Instrument: Function generator */
void function_generator( void )
{
  801ab8:	defffd04 	addi	sp,sp,-12
  801abc:	dfc00215 	stw	ra,8(sp)
  801ac0:	df000115 	stw	fp,4(sp)
  801ac4:	df000104 	addi	fp,sp,4
	float freq;

	freq = 1/(sc.per_pwm*0.00000001); // Frequency of the output signal
  801ac8:	008020b4 	movhi	r2,130
  801acc:	10840904 	addi	r2,r2,4132
  801ad0:	11000317 	ldw	r4,12(r2)
  801ad4:	08071880 	call	807188 <__floatunsidf>
  801ad8:	100b883a 	mov	r5,r2
  801adc:	180d883a 	mov	r6,r3
  801ae0:	2809883a 	mov	r4,r5
  801ae4:	300b883a 	mov	r5,r6
  801ae8:	01b88c74 	movhi	r6,57905
  801aec:	31a30e84 	addi	r6,r6,-29638
  801af0:	01cf9174 	movhi	r7,15941
  801af4:	39de6384 	addi	r7,r7,31118
  801af8:	08065c00 	call	8065c0 <__muldf3>
  801afc:	1009883a 	mov	r4,r2
  801b00:	180b883a 	mov	r5,r3
  801b04:	2005883a 	mov	r2,r4
  801b08:	2807883a 	mov	r3,r5
  801b0c:	0009883a 	mov	r4,zero
  801b10:	014ffc34 	movhi	r5,16368
  801b14:	100d883a 	mov	r6,r2
  801b18:	180f883a 	mov	r7,r3
  801b1c:	08069840 	call	806984 <__divdf3>
  801b20:	1009883a 	mov	r4,r2
  801b24:	180b883a 	mov	r5,r3
  801b28:	2005883a 	mov	r2,r4
  801b2c:	2807883a 	mov	r3,r5
  801b30:	1009883a 	mov	r4,r2
  801b34:	180b883a 	mov	r5,r3
  801b38:	08071140 	call	807114 <__truncdfsf2>
  801b3c:	e0bfff15 	stw	r2,-4(fp)

	if (last_instrument != FUNCTION_GENERATOR) { // When the function generator is chosen, we do a reset of the ccp module ...
  801b40:	d0a00317 	ldw	r2,-32756(gp)
  801b44:	10800060 	cmpeqi	r2,r2,1
  801b48:	1000061e 	bne	r2,zero,801b64 <function_generator+0xac>
												// ... and configure the CCP in function generator mode
		last_instrument = FUNCTION_GENERATOR;
  801b4c:	00800044 	movi	r2,1
  801b50:	d0a00315 	stw	r2,-32756(gp)
		lcd_write_first_line("F. Generator");
  801b54:	010020b4 	movhi	r4,130
  801b58:	21326c04 	addi	r4,r4,-13904
  801b5c:	0800bac0 	call	800bac <lcd_write_first_line>
		reset_ccp();
  801b60:	0801c940 	call	801c94 <reset_ccp>
	}

	if (sc.square_activated == SQUARE_SIGNAL_ACTIVATED) { // Squared signal
  801b64:	008020b4 	movhi	r2,130
  801b68:	10840904 	addi	r2,r2,4132
  801b6c:	10800503 	ldbu	r2,20(r2)
  801b70:	10803fcc 	andi	r2,r2,255
  801b74:	1080201c 	xori	r2,r2,128
  801b78:	10bfe004 	addi	r2,r2,-128
  801b7c:	10800058 	cmpnei	r2,r2,1
  801b80:	1000071e 	bne	r2,zero,801ba0 <function_generator+0xe8>

		configuration_function_generator_square();
  801b84:	0801d880 	call	801d88 <configuration_function_generator_square>
		ccp_activate_square();
  801b88:	080207c0 	call	80207c <ccp_activate_square>
		IOWR(PIO_OUT_RED_BASE, 0, 0x0001); 			 // LEDR0 of the dev board is ON
  801b8c:	00c04034 	movhi	r3,256
  801b90:	18c44804 	addi	r3,r3,4384
  801b94:	00800044 	movi	r2,1
  801b98:	18800035 	stwio	r2,0(r3)
  801b9c:	00000606 	br	801bb8 <function_generator+0x100>

	} else { // Non-Square signal

		configuration_function_generator_non_square(); //it has to be configure in a loop
  801ba0:	0801edc0 	call	801edc <configuration_function_generator_non_square>
		ccp_activate_non_square();					   //it has to be configure in a loop
  801ba4:	08020d00 	call	8020d0 <ccp_activate_non_square>
		IOWR(PIO_OUT_RED_BASE, 0, 0x0002); 			 // LEDR0 of the dev board is ON
  801ba8:	00c04034 	movhi	r3,256
  801bac:	18c44804 	addi	r3,r3,4384
  801bb0:	00800084 	movi	r2,2
  801bb4:	18800035 	stwio	r2,0(r3)

	}

	show_frequency_lcd(freq); // Shows the frequency in the second line of the LCD
  801bb8:	e13fff17 	ldw	r4,-4(fp)
  801bbc:	08017a80 	call	8017a8 <show_frequency_lcd>

}
  801bc0:	e037883a 	mov	sp,fp
  801bc4:	dfc00117 	ldw	ra,4(sp)
  801bc8:	df000017 	ldw	fp,0(sp)
  801bcc:	dec00204 	addi	sp,sp,8
  801bd0:	f800283a 	ret

00801bd4 <write_ram_function_generator>:


/* Write signal values in the CCP's RAM */
void write_ram_function_generator(int *function, int num)
{
  801bd4:	defffc04 	addi	sp,sp,-16
  801bd8:	df000315 	stw	fp,12(sp)
  801bdc:	df000304 	addi	fp,sp,12
  801be0:	e13ffe15 	stw	r4,-8(fp)
  801be4:	e17fff15 	stw	r5,-4(fp)

	int i=0;
  801be8:	e03ffd15 	stw	zero,-12(fp)

	IOWR(PIO_EN_MUX_BASE,0,1);				// mux enabled
  801bec:	00c04034 	movhi	r3,256
  801bf0:	18c42804 	addi	r3,r3,4256
  801bf4:	00800044 	movi	r2,1
  801bf8:	18800035 	stwio	r2,0(r3)

	IOWR(PIO_DIREC_BASE,0,0xB); 			// write in RAM
  801bfc:	00c04034 	movhi	r3,256
  801c00:	18c42004 	addi	r3,r3,4224
  801c04:	008002c4 	movi	r2,11
  801c08:	18800035 	stwio	r2,0(r3)

	for (i = 0; i < num ; i++){
  801c0c:	e03ffd15 	stw	zero,-12(fp)
  801c10:	00001906 	br	801c78 <write_ram_function_generator+0xa4>
		IOWR(PIO_DIREC_RAM_BASE,0,i); 		// i position of the RAM
  801c14:	00c04034 	movhi	r3,256
  801c18:	18c41804 	addi	r3,r3,4192
  801c1c:	e0bffd17 	ldw	r2,-12(fp)
  801c20:	18800035 	stwio	r2,0(r3)
		IOWR(PIO_DATOS_BASE,0,function[i]&0x0ff); // value to introduce
  801c24:	e0bffd17 	ldw	r2,-12(fp)
  801c28:	1085883a 	add	r2,r2,r2
  801c2c:	1085883a 	add	r2,r2,r2
  801c30:	1007883a 	mov	r3,r2
  801c34:	e0bffe17 	ldw	r2,-8(fp)
  801c38:	1885883a 	add	r2,r3,r2
  801c3c:	10800017 	ldw	r2,0(r2)
  801c40:	10c03fcc 	andi	r3,r2,255
  801c44:	00804034 	movhi	r2,256
  801c48:	10840004 	addi	r2,r2,4096
  801c4c:	10c00035 	stwio	r3,0(r2)
		IOWR(PIO_WR_BASE,0,1); 				// Edge to ...
  801c50:	00c04034 	movhi	r3,256
  801c54:	18c41004 	addi	r3,r3,4160
  801c58:	00800044 	movi	r2,1
  801c5c:	18800035 	stwio	r2,0(r3)
		IOWR(PIO_WR_BASE,0,0); 				// ... write the value
  801c60:	00804034 	movhi	r2,256
  801c64:	10841004 	addi	r2,r2,4160
  801c68:	10000035 	stwio	zero,0(r2)

	IOWR(PIO_EN_MUX_BASE,0,1);				// mux enabled

	IOWR(PIO_DIREC_BASE,0,0xB); 			// write in RAM

	for (i = 0; i < num ; i++){
  801c6c:	e0bffd17 	ldw	r2,-12(fp)
  801c70:	10800044 	addi	r2,r2,1
  801c74:	e0bffd15 	stw	r2,-12(fp)
  801c78:	e0fffd17 	ldw	r3,-12(fp)
  801c7c:	e0bfff17 	ldw	r2,-4(fp)
  801c80:	18bfe416 	blt	r3,r2,801c14 <write_ram_function_generator+0x40>
		IOWR(PIO_DIREC_RAM_BASE,0,i); 		// i position of the RAM
		IOWR(PIO_DATOS_BASE,0,function[i]&0x0ff); // value to introduce
		IOWR(PIO_WR_BASE,0,1); 				// Edge to ...
		IOWR(PIO_WR_BASE,0,0); 				// ... write the value
	}
}
  801c84:	e037883a 	mov	sp,fp
  801c88:	df000017 	ldw	fp,0(sp)
  801c8c:	dec00104 	addi	sp,sp,4
  801c90:	f800283a 	ret

00801c94 <reset_ccp>:
//								  CCP CONFIGURATION								   //
/////////////////////////////////////////////////////////////////////////////////////

/* Reset of the CCP module */
void reset_ccp( void )
{
  801c94:	deffff04 	addi	sp,sp,-4
  801c98:	df000015 	stw	fp,0(sp)
  801c9c:	d839883a 	mov	fp,sp

	IOWR(PIO_CAPTURA_0_BASE, 2, 0x0); // Disable interruption in captura_0
  801ca0:	00804034 	movhi	r2,256
  801ca4:	10847a04 	addi	r2,r2,4584
  801ca8:	10000035 	stwio	zero,0(r2)
	IOWR(PIO_CAPTURA_0_BASE, 3, 0x1); // Erase the interruption flag of edgecapture register of captura_0,
  801cac:	00c04034 	movhi	r3,256
  801cb0:	18c47b04 	addi	r3,r3,4588
  801cb4:	00800044 	movi	r2,1
  801cb8:	18800035 	stwio	r2,0(r3)
									  //   that had been activated due to the input edge

	IOWR(PIO_ASYNC_RESET_BASE,0,1);
  801cbc:	00c04034 	movhi	r3,256
  801cc0:	18c43004 	addi	r3,r3,4288
  801cc4:	00800044 	movi	r2,1
  801cc8:	18800035 	stwio	r2,0(r3)
	IOWR(PIO_ASYNC_RESET_BASE,0,0);  // Reset of the CP module
  801ccc:	00804034 	movhi	r2,256
  801cd0:	10843004 	addi	r2,r2,4288
  801cd4:	10000035 	stwio	zero,0(r2)

	IOWR(PIO_EN_MUX_BASE,0,1);		 // mux enabled
  801cd8:	00c04034 	movhi	r3,256
  801cdc:	18c42804 	addi	r3,r3,4256
  801ce0:	00800044 	movi	r2,1
  801ce4:	18800035 	stwio	r2,0(r3)

}
  801ce8:	e037883a 	mov	sp,fp
  801cec:	df000017 	ldw	fp,0(sp)
  801cf0:	dec00104 	addi	sp,sp,4
  801cf4:	f800283a 	ret

00801cf8 <configuration_ccp_captura_0>:


/* CCP configuration in mode captura_0 */
void configuration_ccp_captura_0( void )
{
  801cf8:	deffff04 	addi	sp,sp,-4
  801cfc:	df000015 	stw	fp,0(sp)
  801d00:	d839883a 	mov	fp,sp

	IOWR(PIO_CAPTURA_0_BASE, 2, 0x01); // Enable interruption in captura_0
  801d04:	00c04034 	movhi	r3,256
  801d08:	18c47a04 	addi	r3,r3,4584
  801d0c:	00800044 	movi	r2,1
  801d10:	18800035 	stwio	r2,0(r3)
	IORD(PIO_CAPTURA_0_BASE, 2);
  801d14:	00804034 	movhi	r2,256
  801d18:	10847a04 	addi	r2,r2,4584
  801d1c:	10800037 	ldwio	r2,0(r2)
	IOWR(PIO_CAPTURA_0_BASE, 3, 0x01); // Erase the interruption flag of edgecapture register of captura_0,
  801d20:	00c04034 	movhi	r3,256
  801d24:	18c47b04 	addi	r3,r3,4588
  801d28:	00800044 	movi	r2,1
  801d2c:	18800035 	stwio	r2,0(r3)
	  	  	  	  	  	  	  	  	   //   that had been activated due to the input edge

	IOWR(PIO_EN_MUX_BASE,0,1);		   //  mux enabled
  801d30:	00c04034 	movhi	r3,256
  801d34:	18c42804 	addi	r3,r3,4256
  801d38:	00800044 	movi	r2,1
  801d3c:	18800035 	stwio	r2,0(r3)

	IOWR(PIO_DIREC_BASE,0,0x00); 	   // Select to write in the RConf (Configuration register of the CCP)
  801d40:	00804034 	movhi	r2,256
  801d44:	10842004 	addi	r2,r2,4224
  801d48:	10000035 	stwio	zero,0(r2)
	IOWR(PIO_DATOS_BASE,0,0x0001);     // CAPTURA_0 activated y and flag erased
  801d4c:	00c04034 	movhi	r3,256
  801d50:	18c40004 	addi	r3,r3,4096
  801d54:	00800044 	movi	r2,1
  801d58:	18800035 	stwio	r2,0(r3)
	IOWR(PIO_WR_BASE,0,1);			   // Edge ...
  801d5c:	00c04034 	movhi	r3,256
  801d60:	18c41004 	addi	r3,r3,4160
  801d64:	00800044 	movi	r2,1
  801d68:	18800035 	stwio	r2,0(r3)
	IOWR(PIO_WR_BASE,0,0);			   // ... to write in the CCP
  801d6c:	00804034 	movhi	r2,256
  801d70:	10841004 	addi	r2,r2,4160
  801d74:	10000035 	stwio	zero,0(r2)

}
  801d78:	e037883a 	mov	sp,fp
  801d7c:	df000017 	ldw	fp,0(sp)
  801d80:	dec00104 	addi	sp,sp,4
  801d84:	f800283a 	ret

00801d88 <configuration_function_generator_square>:

/* CCP configuration. To change the frequency in the function generator. SQUARE FUNCTION */
// The parameter Ton is changed automatically depending to a specific freqcuency         //
// The output frequency is fout = 100MHz / per_pwm						 		         //
void configuration_function_generator_square( void )
{
  801d88:	defffe04 	addi	sp,sp,-8
  801d8c:	dfc00115 	stw	ra,4(sp)
  801d90:	df000015 	stw	fp,0(sp)
  801d94:	d839883a 	mov	fp,sp

	IOWR(PIO_DIREC_BASE,0,0x0002);  // Select to write in the PWM period
  801d98:	00c04034 	movhi	r3,256
  801d9c:	18c42004 	addi	r3,r3,4224
  801da0:	00800084 	movi	r2,2
  801da4:	18800035 	stwio	r2,0(r3)
	IOWR(PIO_DATOS_BASE,0, sc.per_pwm);
  801da8:	008020b4 	movhi	r2,130
  801dac:	10840904 	addi	r2,r2,4132
  801db0:	10800317 	ldw	r2,12(r2)
  801db4:	1007883a 	mov	r3,r2
  801db8:	00804034 	movhi	r2,256
  801dbc:	10840004 	addi	r2,r2,4096
  801dc0:	10c00035 	stwio	r3,0(r2)
	IOWR(PIO_WR_BASE,0,1);
  801dc4:	00c04034 	movhi	r3,256
  801dc8:	18c41004 	addi	r3,r3,4160
  801dcc:	00800044 	movi	r2,1
  801dd0:	18800035 	stwio	r2,0(r3)
	IOWR(PIO_WR_BASE,0,0);			// Edge in wr to write
  801dd4:	00804034 	movhi	r2,256
  801dd8:	10841004 	addi	r2,r2,4160
  801ddc:	10000035 	stwio	zero,0(r2)
	IOWR(PIO_DIREC_BASE,0,0x0003);  // Select to write in the Ton of the PWM
  801de0:	00c04034 	movhi	r3,256
  801de4:	18c42004 	addi	r3,r3,4224
  801de8:	008000c4 	movi	r2,3
  801dec:	18800035 	stwio	r2,0(r3)
	IOWR(PIO_DATOS_BASE,0, (unsigned int)sc.ton_pwm);
  801df0:	008020b4 	movhi	r2,130
  801df4:	10840904 	addi	r2,r2,4132
  801df8:	10800417 	ldw	r2,16(r2)
  801dfc:	1007883a 	mov	r3,r2
  801e00:	00804034 	movhi	r2,256
  801e04:	10840004 	addi	r2,r2,4096
  801e08:	10c00035 	stwio	r3,0(r2)
	IOWR(PIO_WR_BASE,0,1);
  801e0c:	00c04034 	movhi	r3,256
  801e10:	18c41004 	addi	r3,r3,4160
  801e14:	00800044 	movi	r2,1
  801e18:	18800035 	stwio	r2,0(r3)
	IOWR(PIO_WR_BASE,0,0);			// Edge in wr
  801e1c:	00804034 	movhi	r2,256
  801e20:	10841004 	addi	r2,r2,4160
  801e24:	10000035 	stwio	zero,0(r2)


	IOWR(PIO_DIREC_BASE,0,0x0009); 	// Select to write in the PWM1 period
  801e28:	00c04034 	movhi	r3,256
  801e2c:	18c42004 	addi	r3,r3,4224
  801e30:	00800244 	movi	r2,9
  801e34:	18800035 	stwio	r2,0(r3)
	IOWR(PIO_DATOS_BASE,0, (unsigned int)(sc.per_pwm)/RAM_PWM_SIZE);
  801e38:	008020b4 	movhi	r2,130
  801e3c:	10840904 	addi	r2,r2,4132
  801e40:	11000317 	ldw	r4,12(r2)
  801e44:	01400904 	movi	r5,36
  801e48:	08074580 	call	807458 <__udivsi3>
  801e4c:	1007883a 	mov	r3,r2
  801e50:	00804034 	movhi	r2,256
  801e54:	10840004 	addi	r2,r2,4096
  801e58:	10c00035 	stwio	r3,0(r2)
	IOWR(PIO_WR_BASE,0,1);
  801e5c:	00c04034 	movhi	r3,256
  801e60:	18c41004 	addi	r3,r3,4160
  801e64:	00800044 	movi	r2,1
  801e68:	18800035 	stwio	r2,0(r3)
	IOWR(PIO_WR_BASE,0,0);			// Edge in wr
  801e6c:	00804034 	movhi	r2,256
  801e70:	10841004 	addi	r2,r2,4160
  801e74:	10000035 	stwio	zero,0(r2)
	IOWR(PIO_DIREC_BASE,0,0x000A);  // Select to write in the Ton of the PWM1
  801e78:	00c04034 	movhi	r3,256
  801e7c:	18c42004 	addi	r3,r3,4224
  801e80:	00800284 	movi	r2,10
  801e84:	18800035 	stwio	r2,0(r3)
	IOWR(PIO_DATOS_BASE,0, (unsigned int)((sc.per_pwm)/RAM_PWM_SIZE)/2);
  801e88:	008020b4 	movhi	r2,130
  801e8c:	10840904 	addi	r2,r2,4132
  801e90:	11000317 	ldw	r4,12(r2)
  801e94:	01401204 	movi	r5,72
  801e98:	08074580 	call	807458 <__udivsi3>
  801e9c:	1007883a 	mov	r3,r2
  801ea0:	00804034 	movhi	r2,256
  801ea4:	10840004 	addi	r2,r2,4096
  801ea8:	10c00035 	stwio	r3,0(r2)
	IOWR(PIO_WR_BASE,0,1);
  801eac:	00c04034 	movhi	r3,256
  801eb0:	18c41004 	addi	r3,r3,4160
  801eb4:	00800044 	movi	r2,1
  801eb8:	18800035 	stwio	r2,0(r3)
	IOWR(PIO_WR_BASE,0,0);			// Edge in wr
  801ebc:	00804034 	movhi	r2,256
  801ec0:	10841004 	addi	r2,r2,4160
  801ec4:	10000035 	stwio	zero,0(r2)

}
  801ec8:	e037883a 	mov	sp,fp
  801ecc:	dfc00117 	ldw	ra,4(sp)
  801ed0:	df000017 	ldw	fp,0(sp)
  801ed4:	dec00204 	addi	sp,sp,8
  801ed8:	f800283a 	ret

00801edc <configuration_function_generator_non_square>:


/* CCP configuration. To change the frequency in the function generator. NON SQUARE FUNCTION */
void configuration_function_generator_non_square( void )
{
  801edc:	defffe04 	addi	sp,sp,-8
  801ee0:	dfc00115 	stw	ra,4(sp)
  801ee4:	df000015 	stw	fp,0(sp)
  801ee8:	d839883a 	mov	fp,sp


	IOWR(PIO_DIREC_BASE,0,0x0002);      // Select to write in the PWM period
  801eec:	00c04034 	movhi	r3,256
  801ef0:	18c42004 	addi	r3,r3,4224
  801ef4:	00800084 	movi	r2,2
  801ef8:	18800035 	stwio	r2,0(r3)
	IOWR(PIO_DATOS_BASE,0, 0x000000FF); // 255
  801efc:	00c04034 	movhi	r3,256
  801f00:	18c40004 	addi	r3,r3,4096
  801f04:	00803fc4 	movi	r2,255
  801f08:	18800035 	stwio	r2,0(r3)
	IOWR(PIO_WR_BASE,0,1);
  801f0c:	00c04034 	movhi	r3,256
  801f10:	18c41004 	addi	r3,r3,4160
  801f14:	00800044 	movi	r2,1
  801f18:	18800035 	stwio	r2,0(r3)
	IOWR(PIO_WR_BASE,0,0);			    // Edge in wr
  801f1c:	00804034 	movhi	r2,256
  801f20:	10841004 	addi	r2,r2,4160
  801f24:	10000035 	stwio	zero,0(r2)
	IOWR(PIO_DIREC_BASE,0,0x0003);      // Select to write in the Ton of the PWM
  801f28:	00c04034 	movhi	r3,256
  801f2c:	18c42004 	addi	r3,r3,4224
  801f30:	008000c4 	movi	r2,3
  801f34:	18800035 	stwio	r2,0(r3)
	IOWR(PIO_DATOS_BASE,0, 0x0000007F); // 127 = 255/2
  801f38:	00c04034 	movhi	r3,256
  801f3c:	18c40004 	addi	r3,r3,4096
  801f40:	00801fc4 	movi	r2,127
  801f44:	18800035 	stwio	r2,0(r3)
	IOWR(PIO_WR_BASE,0,1);
  801f48:	00c04034 	movhi	r3,256
  801f4c:	18c41004 	addi	r3,r3,4160
  801f50:	00800044 	movi	r2,1
  801f54:	18800035 	stwio	r2,0(r3)
	IOWR(PIO_WR_BASE,0,0);			    // Edge in wr
  801f58:	00804034 	movhi	r2,256
  801f5c:	10841004 	addi	r2,r2,4160
  801f60:	10000035 	stwio	zero,0(r2)


	IOWR(PIO_DIREC_BASE,0,0x0009); 	    // Select to write in the PWM1 period
  801f64:	00c04034 	movhi	r3,256
  801f68:	18c42004 	addi	r3,r3,4224
  801f6c:	00800244 	movi	r2,9
  801f70:	18800035 	stwio	r2,0(r3)
	IOWR(PIO_DATOS_BASE,0, (sc.per_pwm)/RAM_PWM_SIZE);
  801f74:	008020b4 	movhi	r2,130
  801f78:	10840904 	addi	r2,r2,4132
  801f7c:	11000317 	ldw	r4,12(r2)
  801f80:	01400904 	movi	r5,36
  801f84:	08074580 	call	807458 <__udivsi3>
  801f88:	1007883a 	mov	r3,r2
  801f8c:	00804034 	movhi	r2,256
  801f90:	10840004 	addi	r2,r2,4096
  801f94:	10c00035 	stwio	r3,0(r2)
	IOWR(PIO_WR_BASE,0,1);
  801f98:	00c04034 	movhi	r3,256
  801f9c:	18c41004 	addi	r3,r3,4160
  801fa0:	00800044 	movi	r2,1
  801fa4:	18800035 	stwio	r2,0(r3)
	IOWR(PIO_WR_BASE,0,0);			    // Edge in wr
  801fa8:	00804034 	movhi	r2,256
  801fac:	10841004 	addi	r2,r2,4160
  801fb0:	10000035 	stwio	zero,0(r2)
	IOWR(PIO_DIREC_BASE,0,0x000A);      // Select to write in the Ton of the PWM1
  801fb4:	00c04034 	movhi	r3,256
  801fb8:	18c42004 	addi	r3,r3,4224
  801fbc:	00800284 	movi	r2,10
  801fc0:	18800035 	stwio	r2,0(r3)
	IOWR(PIO_DATOS_BASE,0, ((sc.per_pwm)/RAM_PWM_SIZE)/2);
  801fc4:	008020b4 	movhi	r2,130
  801fc8:	10840904 	addi	r2,r2,4132
  801fcc:	11000317 	ldw	r4,12(r2)
  801fd0:	01401204 	movi	r5,72
  801fd4:	08074580 	call	807458 <__udivsi3>
  801fd8:	1007883a 	mov	r3,r2
  801fdc:	00804034 	movhi	r2,256
  801fe0:	10840004 	addi	r2,r2,4096
  801fe4:	10c00035 	stwio	r3,0(r2)
	IOWR(PIO_WR_BASE,0,1);
  801fe8:	00c04034 	movhi	r3,256
  801fec:	18c41004 	addi	r3,r3,4160
  801ff0:	00800044 	movi	r2,1
  801ff4:	18800035 	stwio	r2,0(r3)
	IOWR(PIO_WR_BASE,0,0);			    // Edge in wr
  801ff8:	00804034 	movhi	r2,256
  801ffc:	10841004 	addi	r2,r2,4160
  802000:	10000035 	stwio	zero,0(r2)

}
  802004:	e037883a 	mov	sp,fp
  802008:	dfc00117 	ldw	ra,4(sp)
  80200c:	df000017 	ldw	fp,0(sp)
  802010:	dec00204 	addi	sp,sp,8
  802014:	f800283a 	ret

00802018 <configuration_function_generator_ton>:


/* CCP configuration. To change only Ton in the function generator */
void configuration_function_generator_ton( void )
{
  802018:	deffff04 	addi	sp,sp,-4
  80201c:	df000015 	stw	fp,0(sp)
  802020:	d839883a 	mov	fp,sp

	IOWR(PIO_DIREC_BASE,0,0x0003);  // Select to write in the Ton of the PWM
  802024:	00c04034 	movhi	r3,256
  802028:	18c42004 	addi	r3,r3,4224
  80202c:	008000c4 	movi	r2,3
  802030:	18800035 	stwio	r2,0(r3)
	IOWR(PIO_DATOS_BASE,0,sc.ton_pwm);
  802034:	008020b4 	movhi	r2,130
  802038:	10840904 	addi	r2,r2,4132
  80203c:	10800417 	ldw	r2,16(r2)
  802040:	1007883a 	mov	r3,r2
  802044:	00804034 	movhi	r2,256
  802048:	10840004 	addi	r2,r2,4096
  80204c:	10c00035 	stwio	r3,0(r2)
	IOWR(PIO_WR_BASE,0,1);
  802050:	00c04034 	movhi	r3,256
  802054:	18c41004 	addi	r3,r3,4160
  802058:	00800044 	movi	r2,1
  80205c:	18800035 	stwio	r2,0(r3)
	IOWR(PIO_WR_BASE,0,0);			// Edge in wr
  802060:	00804034 	movhi	r2,256
  802064:	10841004 	addi	r2,r2,4160
  802068:	10000035 	stwio	zero,0(r2)
}
  80206c:	e037883a 	mov	sp,fp
  802070:	df000017 	ldw	fp,0(sp)
  802074:	dec00104 	addi	sp,sp,4
  802078:	f800283a 	ret

0080207c <ccp_activate_square>:


/* CCP configuration. PWM functionality is activated. Square signal */
void ccp_activate_square( void )
{
  80207c:	deffff04 	addi	sp,sp,-4
  802080:	df000015 	stw	fp,0(sp)
  802084:	d839883a 	mov	fp,sp

	IOWR(PIO_DIREC_BASE,0,0x0); 	// Select to write in the BD0
  802088:	00804034 	movhi	r2,256
  80208c:	10842004 	addi	r2,r2,4224
  802090:	10000035 	stwio	zero,0(r2)
	IOWR(PIO_DATOS_BASE,0,0x0003);  // and PWM
  802094:	00c04034 	movhi	r3,256
  802098:	18c40004 	addi	r3,r3,4096
  80209c:	008000c4 	movi	r2,3
  8020a0:	18800035 	stwio	r2,0(r3)
	IOWR(PIO_WR_BASE,0,1);
  8020a4:	00c04034 	movhi	r3,256
  8020a8:	18c41004 	addi	r3,r3,4160
  8020ac:	00800044 	movi	r2,1
  8020b0:	18800035 	stwio	r2,0(r3)
	IOWR(PIO_WR_BASE,0,0);			// Edge in wr
  8020b4:	00804034 	movhi	r2,256
  8020b8:	10841004 	addi	r2,r2,4160
  8020bc:	10000035 	stwio	zero,0(r2)
}
  8020c0:	e037883a 	mov	sp,fp
  8020c4:	df000017 	ldw	fp,0(sp)
  8020c8:	dec00104 	addi	sp,sp,4
  8020cc:	f800283a 	ret

008020d0 <ccp_activate_non_square>:


/* CCP configuration. PWM functionality is activated. NON Square signal */
void ccp_activate_non_square( void )
{
  8020d0:	deffff04 	addi	sp,sp,-4
  8020d4:	df000015 	stw	fp,0(sp)
  8020d8:	d839883a 	mov	fp,sp

	IOWR(PIO_DIREC_BASE,0,0x0); 	// Select to write in the BD0
  8020dc:	00804034 	movhi	r2,256
  8020e0:	10842004 	addi	r2,r2,4224
  8020e4:	10000035 	stwio	zero,0(r2)
	IOWR(PIO_DATOS_BASE,0,0x0007);  // RAM and PWM signal
  8020e8:	00c04034 	movhi	r3,256
  8020ec:	18c40004 	addi	r3,r3,4096
  8020f0:	008001c4 	movi	r2,7
  8020f4:	18800035 	stwio	r2,0(r3)
	IOWR(PIO_WR_BASE,0,1);
  8020f8:	00c04034 	movhi	r3,256
  8020fc:	18c41004 	addi	r3,r3,4160
  802100:	00800044 	movi	r2,1
  802104:	18800035 	stwio	r2,0(r3)
	IOWR(PIO_WR_BASE,0,0);			// Edge in wr
  802108:	00804034 	movhi	r2,256
  80210c:	10841004 	addi	r2,r2,4160
  802110:	10000035 	stwio	zero,0(r2)
}
  802114:	e037883a 	mov	sp,fp
  802118:	df000017 	ldw	fp,0(sp)
  80211c:	dec00104 	addi	sp,sp,4
  802120:	f800283a 	ret

00802124 <system_config_init>:
//               	OTHER FUNCTIONS RELATED WITH THE INSTRUMENTS		             //
///////////////////////////////////////////////////////////////////////////////////////

/* Initialization of the system configuration parameters */
void system_config_init ( void )
{
  802124:	deffff04 	addi	sp,sp,-4
  802128:	df000015 	stw	fp,0(sp)
  80212c:	d839883a 	mov	fp,sp

	sc.activated_device = FREQUENCY_METER;
  802130:	008020b4 	movhi	r2,130
  802134:	10840904 	addi	r2,r2,4132
  802138:	10000005 	stb	zero,0(r2)
	sc.average_type =	SIMPLE_MOVING_AVERAGE;
  80213c:	008020b4 	movhi	r2,130
  802140:	10840904 	addi	r2,r2,4132
  802144:	10000205 	stb	zero,8(r2)
	sc.num_freq_nodes = NUM_FREQ_NODES_DEFAULT;
  802148:	00c020b4 	movhi	r3,130
  80214c:	18c40904 	addi	r3,r3,4132
  802150:	00800504 	movi	r2,20
  802154:	18800115 	stw	r2,4(r3)
	sc.per_pwm = PERIOD_PWM_DEFAULT;
  802158:	00c020b4 	movhi	r3,130
  80215c:	18c40904 	addi	r3,r3,4132
  802160:	00938804 	movi	r2,20000
  802164:	18800315 	stw	r2,12(r3)
	sc.ton_pwm = TON_PWM_DEFAULT;
  802168:	00c020b4 	movhi	r3,130
  80216c:	18c40904 	addi	r3,r3,4132
  802170:	0089c404 	movi	r2,10000
  802174:	18800415 	stw	r2,16(r3)
	sc.square_activated = SQUARE_SIGNAL_ACTIVATED;
  802178:	00c020b4 	movhi	r3,130
  80217c:	18c40904 	addi	r3,r3,4132
  802180:	00800044 	movi	r2,1
  802184:	18800505 	stb	r2,20(r3)

}
  802188:	e037883a 	mov	sp,fp
  80218c:	df000017 	ldw	fp,0(sp)
  802190:	dec00104 	addi	sp,sp,4
  802194:	f800283a 	ret

00802198 <assign_interruptions>:


/* Assigns the interruption functions */
void assign_interruptions( void )
{
  802198:	defffd04 	addi	sp,sp,-12
  80219c:	dfc00215 	stw	ra,8(sp)
  8021a0:	df000115 	stw	fp,4(sp)
  8021a4:	df000104 	addi	fp,sp,4
	printf("assign_interruptions\n");
  8021a8:	010020b4 	movhi	r4,130
  8021ac:	21327004 	addi	r4,r4,-13888
  8021b0:	08086200 	call	808620 <puts>

	// Enable the EDGE buttons
	IOWR(PIO_IN_KEY_EDGE_BASE, 3, 0x07); // Clear the edge interruption flag
  8021b4:	00c04034 	movhi	r3,256
  8021b8:	18c49704 	addi	r3,r3,4700
  8021bc:	008001c4 	movi	r2,7
  8021c0:	18800035 	stwio	r2,0(r3)
	IOWR(PIO_IN_KEY_EDGE_BASE, 2, 0x07); // Enable edge interruption
  8021c4:	00c04034 	movhi	r3,256
  8021c8:	18c49604 	addi	r3,r3,4696
  8021cc:	008001c4 	movi	r2,7
  8021d0:	18800035 	stwio	r2,0(r3)


	// Assign interruptions
	alt_ic_isr_register(PIO_CAPTURA_0_IRQ_INTERRUPT_CONTROLLER_ID, PIO_CAPTURA_0_IRQ, (void *)interrupt_captura_0, NULL, NULL);
  8021d4:	d8000015 	stw	zero,0(sp)
  8021d8:	0009883a 	mov	r4,zero
  8021dc:	014000c4 	movi	r5,3
  8021e0:	01802034 	movhi	r6,128
  8021e4:	3188bb04 	addi	r6,r6,8940
  8021e8:	000f883a 	mov	r7,zero
  8021ec:	08100840 	call	810084 <alt_ic_isr_register>
	alt_ic_isr_register(PIO_IN_KEY_EDGE_IRQ_INTERRUPT_CONTROLLER_ID, PIO_IN_KEY_EDGE_IRQ, (void *)edge_button_interrupts , NULL, NULL);
  8021f0:	d8000015 	stw	zero,0(sp)
  8021f4:	0009883a 	mov	r4,zero
  8021f8:	01400144 	movi	r5,5
  8021fc:	01802034 	movhi	r6,128
  802200:	31890c04 	addi	r6,r6,9264
  802204:	000f883a 	mov	r7,zero
  802208:	08100840 	call	810084 <alt_ic_isr_register>

}
  80220c:	e037883a 	mov	sp,fp
  802210:	dfc00117 	ldw	ra,4(sp)
  802214:	df000017 	ldw	fp,0(sp)
  802218:	dec00204 	addi	sp,sp,8
  80221c:	f800283a 	ret

00802220 <decimal_to_binary>:


/* To convert decimal number to binary number */
void decimal_to_binary(long decimal, char *binario,int tam)
{
  802220:	defff904 	addi	sp,sp,-28
  802224:	df000615 	stw	fp,24(sp)
  802228:	df000604 	addi	fp,sp,24
  80222c:	e13ffd15 	stw	r4,-12(fp)
  802230:	e17ffe15 	stw	r5,-8(fp)
  802234:	e1bfff15 	stw	r6,-4(fp)

   int c, d, count = 0;
  802238:	e03ffa15 	stw	zero,-24(fp)

   for ( c = (tam - 1) ; c >= 0 ; c-- )
  80223c:	e0bfff17 	ldw	r2,-4(fp)
  802240:	10bfffc4 	addi	r2,r2,-1
  802244:	e0bffc15 	stw	r2,-16(fp)
  802248:	00001c06 	br	8022bc <decimal_to_binary+0x9c>
   {
	  d = decimal >> c;
  80224c:	e0fffd17 	ldw	r3,-12(fp)
  802250:	e0bffc17 	ldw	r2,-16(fp)
  802254:	1885d83a 	sra	r2,r3,r2
  802258:	e0bffb15 	stw	r2,-20(fp)

	  if ( d & 1 ) *(binario+count) = 1 + '0';
  80225c:	e0bffb17 	ldw	r2,-20(fp)
  802260:	1080004c 	andi	r2,r2,1
  802264:	10803fcc 	andi	r2,r2,255
  802268:	1005003a 	cmpeq	r2,r2,zero
  80226c:	1000071e 	bne	r2,zero,80228c <decimal_to_binary+0x6c>
  802270:	e0bffa17 	ldw	r2,-24(fp)
  802274:	1007883a 	mov	r3,r2
  802278:	e0bffe17 	ldw	r2,-8(fp)
  80227c:	1887883a 	add	r3,r3,r2
  802280:	00800c44 	movi	r2,49
  802284:	18800005 	stb	r2,0(r3)
  802288:	00000606 	br	8022a4 <decimal_to_binary+0x84>
	  else	*(binario+count) = 0 + '0';
  80228c:	e0bffa17 	ldw	r2,-24(fp)
  802290:	1007883a 	mov	r3,r2
  802294:	e0bffe17 	ldw	r2,-8(fp)
  802298:	1887883a 	add	r3,r3,r2
  80229c:	00800c04 	movi	r2,48
  8022a0:	18800005 	stb	r2,0(r3)

	  count++;
  8022a4:	e0bffa17 	ldw	r2,-24(fp)
  8022a8:	10800044 	addi	r2,r2,1
  8022ac:	e0bffa15 	stw	r2,-24(fp)
void decimal_to_binary(long decimal, char *binario,int tam)
{

   int c, d, count = 0;

   for ( c = (tam - 1) ; c >= 0 ; c-- )
  8022b0:	e0bffc17 	ldw	r2,-16(fp)
  8022b4:	10bfffc4 	addi	r2,r2,-1
  8022b8:	e0bffc15 	stw	r2,-16(fp)
  8022bc:	e0bffc17 	ldw	r2,-16(fp)
  8022c0:	1004403a 	cmpge	r2,r2,zero
  8022c4:	103fe11e 	bne	r2,zero,80224c <decimal_to_binary+0x2c>
	  if ( d & 1 ) *(binario+count) = 1 + '0';
	  else	*(binario+count) = 0 + '0';

	  count++;
   }
   *(binario+count) = '\0';
  8022c8:	e0bffa17 	ldw	r2,-24(fp)
  8022cc:	1007883a 	mov	r3,r2
  8022d0:	e0bffe17 	ldw	r2,-8(fp)
  8022d4:	1885883a 	add	r2,r3,r2
  8022d8:	10000005 	stb	zero,0(r2)
}
  8022dc:	e037883a 	mov	sp,fp
  8022e0:	df000017 	ldw	fp,0(sp)
  8022e4:	dec00104 	addi	sp,sp,4
  8022e8:	f800283a 	ret

008022ec <interrupt_captura_0>:
//                       		    INTERRUPTS   				                     //
///////////////////////////////////////////////////////////////////////////////////////

/* Interruption of the external signal to meassure the frequency. Used by the frequency meter */
void interrupt_captura_0(void* context)
{
  8022ec:	defffe04 	addi	sp,sp,-8
  8022f0:	df000115 	stw	fp,4(sp)
  8022f4:	df000104 	addi	fp,sp,4
  8022f8:	e13fff15 	stw	r4,-4(fp)

	//printf("external interrupt\n");

	IOWR(PIO_EN_MUX_BASE,0,1);		 // mux enabled
  8022fc:	00c04034 	movhi	r3,256
  802300:	18c42804 	addi	r3,r3,4256
  802304:	00800044 	movi	r2,1
  802308:	18800035 	stwio	r2,0(r3)
	IOWR(PIO_SEL_SALIDA_BASE,0,0x9); // Select to show captura_0 at the output
  80230c:	00c04034 	movhi	r3,256
  802310:	18c40804 	addi	r3,r3,4128
  802314:	00800244 	movi	r2,9
  802318:	18800035 	stwio	r2,0(r3)

	if (captura_valida == 0) { // If the VITask program does not finish to use the previous values of captura and capturaant,
  80231c:	d0a73f17 	ldw	r2,-25348(gp)
  802320:	1004c03a 	cmpne	r2,r2,zero
  802324:	1000261e 	bne	r2,zero,8023c0 <interrupt_captura_0+0xd4>
							   //  we do not modified them in order to not have any inconsistency with the data

		IOWR(PIO_DIREC_BASE,0,0x00); 	 // Select to write in RConf
  802328:	00804034 	movhi	r2,256
  80232c:	10842004 	addi	r2,r2,4224
  802330:	10000035 	stwio	zero,0(r2)
		IOWR(PIO_DATOS_BASE,0,0x0009);	 // Stop the captura and continue in capture mode ("1001" in RConf)
  802334:	00c04034 	movhi	r3,256
  802338:	18c40004 	addi	r3,r3,4096
  80233c:	00800244 	movi	r2,9
  802340:	18800035 	stwio	r2,0(r3)
		IOWR(PIO_WR_BASE,0,1);
  802344:	00c04034 	movhi	r3,256
  802348:	18c41004 	addi	r3,r3,4160
  80234c:	00800044 	movi	r2,1
  802350:	18800035 	stwio	r2,0(r3)
		IOWR(PIO_WR_BASE,0,0);  		 // Edge in wr
  802354:	00804034 	movhi	r2,256
  802358:	10841004 	addi	r2,r2,4160
  80235c:	10000035 	stwio	zero,0(r2)

		captura = (IORD(PIO_IN_32_BASE, 0)); // Get the last captured value and stores it in 'captura'
  802360:	00804034 	movhi	r2,256
  802364:	10846404 	addi	r2,r2,4496
  802368:	10800037 	ldwio	r2,0(r2)
  80236c:	d0a00215 	stw	r2,-32760(gp)

		IOWR(PIO_DIREC_BASE,0,0x00); 	 // Select to write in RConf
  802370:	00804034 	movhi	r2,256
  802374:	10842004 	addi	r2,r2,4224
  802378:	10000035 	stwio	zero,0(r2)
		IOWR(PIO_DATOS_BASE,0,0x0019);   // Active lec to show the previous capture
  80237c:	00c04034 	movhi	r3,256
  802380:	18c40004 	addi	r3,r3,4096
  802384:	00800644 	movi	r2,25
  802388:	18800035 	stwio	r2,0(r3)
		IOWR(PIO_WR_BASE,0,1);
  80238c:	00c04034 	movhi	r3,256
  802390:	18c41004 	addi	r3,r3,4160
  802394:	00800044 	movi	r2,1
  802398:	18800035 	stwio	r2,0(r3)
		IOWR(PIO_WR_BASE,0,0); 		     // Edge in wr
  80239c:	00804034 	movhi	r2,256
  8023a0:	10841004 	addi	r2,r2,4160
  8023a4:	10000035 	stwio	zero,0(r2)

		capturaant = (IORD(PIO_IN_32_BASE, 0)); // Get the previous of the last capture value, and stores it in 'capturaant'
  8023a8:	00804034 	movhi	r2,256
  8023ac:	10846404 	addi	r2,r2,4496
  8023b0:	10800037 	ldwio	r2,0(r2)
  8023b4:	d0a74215 	stw	r2,-25336(gp)

		captura_valida = 1;
  8023b8:	00800044 	movi	r2,1
  8023bc:	d0a73f15 	stw	r2,-25348(gp)

	}

	IOWR(PIO_CAPTURA_0_BASE, 2, 0x0); 	// Interruption is disabled
  8023c0:	00804034 	movhi	r2,256
  8023c4:	10847a04 	addi	r2,r2,4584
  8023c8:	10000035 	stwio	zero,0(r2)
	IOWR(PIO_CAPTURA_0_BASE, 3, 0x1);  	// Clear the flag of the edgecapture register
  8023cc:	00c04034 	movhi	r3,256
  8023d0:	18c47b04 	addi	r3,r3,4588
  8023d4:	00800044 	movi	r2,1
  8023d8:	18800035 	stwio	r2,0(r3)
	IORD(PIO_CAPTURA_0_BASE, 3); 		// Delay
  8023dc:	00804034 	movhi	r2,256
  8023e0:	10847b04 	addi	r2,r2,4588
  8023e4:	10800037 	ldwio	r2,0(r2)

	IOWR(PIO_DIREC_BASE,0,0x0); 	 	// Select write in RConf
  8023e8:	00804034 	movhi	r2,256
  8023ec:	10842004 	addi	r2,r2,4224
  8023f0:	10000035 	stwio	zero,0(r2)
	IOWR(PIO_DATOS_BASE,0,0x0001);	 	// Desactivates 'lec' and continues in capture mode (RConf)
  8023f4:	00c04034 	movhi	r3,256
  8023f8:	18c40004 	addi	r3,r3,4096
  8023fc:	00800044 	movi	r2,1
  802400:	18800035 	stwio	r2,0(r3)
	IOWR(PIO_WR_BASE,0,1);  		 	// Edge ...
  802404:	00c04034 	movhi	r3,256
  802408:	18c41004 	addi	r3,r3,4160
  80240c:	00800044 	movi	r2,1
  802410:	18800035 	stwio	r2,0(r3)
	IOWR(PIO_WR_BASE,0,0);  		 	// ... to write
  802414:	00804034 	movhi	r2,256
  802418:	10841004 	addi	r2,r2,4160
  80241c:	10000035 	stwio	zero,0(r2)

}
  802420:	e037883a 	mov	sp,fp
  802424:	df000017 	ldw	fp,0(sp)
  802428:	dec00104 	addi	sp,sp,4
  80242c:	f800283a 	ret

00802430 <edge_button_interrupts>:


/* Interruption function of the edge activated buttons */
void edge_button_interrupts(void* context)
{
  802430:	defff704 	addi	sp,sp,-36
  802434:	dfc00815 	stw	ra,32(sp)
  802438:	df000715 	stw	fp,28(sp)
  80243c:	df000704 	addi	fp,sp,28
  802440:	e13fff15 	stw	r4,-4(fp)

	volatile int button;
	char* text;
	button = IORD(PIO_IN_KEY_EDGE_BASE, 3); //read the state of the edge capture register of the buttons
  802444:	00804034 	movhi	r2,256
  802448:	10849704 	addi	r2,r2,4700
  80244c:	10800037 	ldwio	r2,0(r2)
  802450:	e0bffe15 	stw	r2,-8(fp)

	if (button == 1) {
  802454:	e0bffe17 	ldw	r2,-8(fp)
  802458:	10800058 	cmpnei	r2,r2,1
  80245c:	1000021e 	bne	r2,zero,802468 <edge_button_interrupts+0x38>

		reset_ccp();
  802460:	0801c940 	call	801c94 <reset_ccp>
  802464:	00002306 	br	8024f4 <edge_button_interrupts+0xc4>

	} else if (button == 2) {
  802468:	e0bffe17 	ldw	r2,-8(fp)
  80246c:	10800098 	cmpnei	r2,r2,2
  802470:	1000111e 	bne	r2,zero,8024b8 <edge_button_interrupts+0x88>

		sprintf(text, "MAC-%.2x%.2x%.2x%.2x%.2x%.2x", (int)DEFAULT_SOURCE_MAC_5, (int)DEFAULT_SOURCE_MAC_4,
  802474:	00800bc4 	movi	r2,47
  802478:	d8800015 	stw	r2,0(sp)
  80247c:	00800504 	movi	r2,20
  802480:	d8800115 	stw	r2,4(sp)
  802484:	008019c4 	movi	r2,103
  802488:	d8800215 	stw	r2,8(sp)
  80248c:	008028c4 	movi	r2,163
  802490:	d8800315 	stw	r2,12(sp)
  802494:	e13ffd17 	ldw	r4,-12(fp)
  802498:	014020b4 	movhi	r5,130
  80249c:	29727604 	addi	r5,r5,-13864
  8024a0:	000d883a 	mov	r6,zero
  8024a4:	01c02004 	movi	r7,128
  8024a8:	08086a40 	call	8086a4 <sprintf>
				(int)DEFAULT_SOURCE_MAC_3, (int)DEFAULT_SOURCE_MAC_2, (int)DEFAULT_SOURCE_MAC_1, (int)DEFAULT_SOURCE_MAC_0);
		lcd_write_second_line(text);
  8024ac:	e13ffd17 	ldw	r4,-12(fp)
  8024b0:	0800cc00 	call	800cc0 <lcd_write_second_line>
  8024b4:	00000f06 	br	8024f4 <edge_button_interrupts+0xc4>
		//usleep(500000); // 0.5 seconds

	} else if (button == 4) {
  8024b8:	e0bffe17 	ldw	r2,-8(fp)
  8024bc:	10800118 	cmpnei	r2,r2,4
  8024c0:	10000c1e 	bne	r2,zero,8024f4 <edge_button_interrupts+0xc4>

		sprintf(text, "%d.%d.%d.%d", (int)DEFAULT_IP_SOURCE_3,  (int)DEFAULT_IP_SOURCE_2, (int)DEFAULT_IP_SOURCE_1,  (int)DEFAULT_IP_SOURCE_0);
  8024c4:	00800144 	movi	r2,5
  8024c8:	d8800015 	stw	r2,0(sp)
  8024cc:	008016c4 	movi	r2,91
  8024d0:	d8800115 	stw	r2,4(sp)
  8024d4:	e13ffd17 	ldw	r4,-12(fp)
  8024d8:	014020b4 	movhi	r5,130
  8024dc:	29727e04 	addi	r5,r5,-13832
  8024e0:	01802b04 	movi	r6,172
  8024e4:	01c004c4 	movi	r7,19
  8024e8:	08086a40 	call	8086a4 <sprintf>
		lcd_write_second_line(text);
  8024ec:	e13ffd17 	ldw	r4,-12(fp)
  8024f0:	0800cc00 	call	800cc0 <lcd_write_second_line>
		//usleep(500000); // 0.5 seconds

	}

	IOWR(PIO_IN_KEY_EDGE_BASE, 3, 0xF); // Clear the edge interruption flags
  8024f4:	00c04034 	movhi	r3,256
  8024f8:	18c49704 	addi	r3,r3,4700
  8024fc:	008003c4 	movi	r2,15
  802500:	18800035 	stwio	r2,0(r3)
}
  802504:	e037883a 	mov	sp,fp
  802508:	dfc00117 	ldw	ra,4(sp)
  80250c:	df000017 	ldw	fp,0(sp)
  802510:	dec00204 	addi	sp,sp,8
  802514:	f800283a 	ret

00802518 <ethernet_interrupts>:


/* Ethernet interrupt. Is called when we received a packet from the network */
void ethernet_interrupts()
{
  802518:	defff204 	addi	sp,sp,-56
  80251c:	dfc00d15 	stw	ra,52(sp)
  802520:	df000c15 	stw	fp,48(sp)
  802524:	dc400b15 	stw	r17,44(sp)
  802528:	dc000a15 	stw	r16,40(sp)
  80252c:	df000a04 	addi	fp,sp,40

	packet_num++;
  802530:	d0a74717 	ldw	r2,-25316(gp)
  802534:	10800044 	addi	r2,r2,1
  802538:	d0a74715 	stw	r2,-25316(gp)
    aaa=ReceivePacket(RXT,&rx_len);
  80253c:	010020b4 	movhi	r4,130
  802540:	21029c04 	addi	r4,r4,2672
  802544:	d1674804 	addi	r5,gp,-25312
  802548:	08006140 	call	800614 <ReceivePacket>
  80254c:	d0a74615 	stw	r2,-25320(gp)
    if(!aaa)
  802550:	d0a74617 	ldw	r2,-25320(gp)
  802554:	1004c03a 	cmpne	r2,r2,zero
  802558:	10019f1e 	bne	r2,zero,802bd8 <ethernet_interrupts+0x6c0>
    {
      if (pkt_is_viprotocol(RXT, rx_len)) {
  80255c:	d0a74817 	ldw	r2,-25312(gp)
  802560:	100b883a 	mov	r5,r2
  802564:	010020b4 	movhi	r4,130
  802568:	21029c04 	addi	r4,r4,2672
  80256c:	0802ee40 	call	802ee4 <pkt_is_viprotocol>
  802570:	1005003a 	cmpeq	r2,r2,zero
  802574:	10017f1e 	bne	r2,zero,802b74 <ethernet_interrupts+0x65c>

    		struct pkt_buffer *pkt;
    		pkt = (struct pkt_buffer *)RXT;
  802578:	008020b4 	movhi	r2,130
  80257c:	10829c04 	addi	r2,r2,2672
  802580:	e0bffe15 	stw	r2,-8(fp)

    		int command=0;
  802584:	e03ffd15 	stw	zero,-12(fp)
    		// Extract the command from the packet
    		command += pkt->ip.udp.data[3]&0x0ff;
  802588:	e0bffe17 	ldw	r2,-8(fp)
  80258c:	10800b43 	ldbu	r2,45(r2)
  802590:	10803fcc 	andi	r2,r2,255
  802594:	1080201c 	xori	r2,r2,128
  802598:	10bfe004 	addi	r2,r2,-128
  80259c:	10c03fcc 	andi	r3,r2,255
  8025a0:	e0bffd17 	ldw	r2,-12(fp)
  8025a4:	10c5883a 	add	r2,r2,r3
  8025a8:	e0bffd15 	stw	r2,-12(fp)
    		command += (pkt->ip.udp.data[2] << 8)&0x0ff00;
  8025ac:	e0bffe17 	ldw	r2,-8(fp)
  8025b0:	10800b03 	ldbu	r2,44(r2)
  8025b4:	10803fcc 	andi	r2,r2,255
  8025b8:	1080201c 	xori	r2,r2,128
  8025bc:	10bfe004 	addi	r2,r2,-128
  8025c0:	1004923a 	slli	r2,r2,8
  8025c4:	10ffc00c 	andi	r3,r2,65280
  8025c8:	e0bffd17 	ldw	r2,-12(fp)
  8025cc:	10c5883a 	add	r2,r2,r3
  8025d0:	e0bffd15 	stw	r2,-12(fp)
    		command += (pkt->ip.udp.data[1] << 16)&0x0ff0000;
  8025d4:	e0bffe17 	ldw	r2,-8(fp)
  8025d8:	10800ac3 	ldbu	r2,43(r2)
  8025dc:	10803fcc 	andi	r2,r2,255
  8025e0:	1080201c 	xori	r2,r2,128
  8025e4:	10bfe004 	addi	r2,r2,-128
  8025e8:	1004943a 	slli	r2,r2,16
  8025ec:	10c03fec 	andhi	r3,r2,255
  8025f0:	e0bffd17 	ldw	r2,-12(fp)
  8025f4:	10c5883a 	add	r2,r2,r3
  8025f8:	e0bffd15 	stw	r2,-12(fp)
    		command += (pkt->ip.udp.data[0] << 24)&0x0ff000000;
  8025fc:	e0bffe17 	ldw	r2,-8(fp)
  802600:	10800a83 	ldbu	r2,42(r2)
  802604:	10803fcc 	andi	r2,r2,255
  802608:	1080201c 	xori	r2,r2,128
  80260c:	10bfe004 	addi	r2,r2,-128
  802610:	1004963a 	slli	r2,r2,24
  802614:	10ffc02c 	andhi	r3,r2,65280
  802618:	e0bffd17 	ldw	r2,-12(fp)
  80261c:	1885883a 	add	r2,r3,r2
  802620:	e0bffd15 	stw	r2,-12(fp)

    		switch (command) {
  802624:	e0bffd17 	ldw	r2,-12(fp)
  802628:	10bfe704 	addi	r2,r2,-100
  80262c:	e0bfff15 	stw	r2,-4(fp)
  802630:	e0ffff17 	ldw	r3,-4(fp)
  802634:	18800368 	cmpgeui	r2,r3,13
  802638:	1001671e 	bne	r2,zero,802bd8 <ethernet_interrupts+0x6c0>
  80263c:	e13fff17 	ldw	r4,-4(fp)
  802640:	e13fff17 	ldw	r4,-4(fp)
  802644:	2105883a 	add	r2,r4,r4
  802648:	1087883a 	add	r3,r2,r2
  80264c:	00802034 	movhi	r2,128
  802650:	10899804 	addi	r2,r2,9824
  802654:	1885883a 	add	r2,r3,r2
  802658:	10800017 	ldw	r2,0(r2)
  80265c:	1000683a 	jmp	r2
  802660:	00802694 	movui	r2,154
  802664:	008026a4 	muli	r2,zero,154
  802668:	00802768 	cmpgeui	r2,zero,157
  80266c:	00802820 	cmpeqi	r2,zero,160
  802670:	00802830 	cmpltui	r2,zero,160
  802674:	00802844 	movi	r2,161
  802678:	00802858 	cmpnei	r2,zero,161
  80267c:	0080286c 	andhi	r2,zero,161
  802680:	008028e8 	cmpgeui	r2,zero,163
  802684:	008028fc 	xorhi	r2,zero,163
  802688:	0080290c 	andi	r2,zero,164
  80268c:	00802a20 	cmpeqi	r2,zero,168
  802690:	00802b68 	cmpgeui	r2,zero,173

				case CMD_ACTIVATE_FREQ_METER:
				{
					// Activation of the frequency meter

					sc.activated_device = FREQUENCY_METER;
  802694:	008020b4 	movhi	r2,130
  802698:	10840904 	addi	r2,r2,4132
  80269c:	10000005 	stb	zero,0(r2)

	    			//printf("\n CMD_ACTIVATE_FREQ_METER\n");
					break;
  8026a0:	00014d06 	br	802bd8 <ethernet_interrupts+0x6c0>
				}
				case CMD_FREQ_REQUEST:
				{	// The client requests the current average frequency

	    			pkt_changes_to_send(pkt);
  8026a4:	e13ffe17 	ldw	r4,-8(fp)
  8026a8:	08034800 	call	803480 <pkt_changes_to_send>

					// Send command CMD_FREQ_ANSWER to the destination
	    			pkt->ip.udp.data[0] = (unsigned char)CMD_FREQ_ANSWER >> 24;
  8026ac:	e0bffe17 	ldw	r2,-8(fp)
  8026b0:	10000a85 	stb	zero,42(r2)
	    			pkt->ip.udp.data[1] = (unsigned char)CMD_FREQ_ANSWER >> 16;
  8026b4:	e0bffe17 	ldw	r2,-8(fp)
  8026b8:	10000ac5 	stb	zero,43(r2)
	    			pkt->ip.udp.data[2] = (unsigned char)CMD_FREQ_ANSWER >> 8;
  8026bc:	e0bffe17 	ldw	r2,-8(fp)
  8026c0:	10000b05 	stb	zero,44(r2)
	    			pkt->ip.udp.data[3] = (unsigned char)CMD_FREQ_ANSWER;
  8026c4:	e0fffe17 	ldw	r3,-8(fp)
  8026c8:	00801c44 	movi	r2,113
  8026cc:	18800b45 	stb	r2,45(r3)

	    			// Pointer to char to extract the bytes of the float number and put them on
	    			//  the packet to send (the network is big endian)
					char *s_freq;
					s_freq = (char *)&frecuencia;
  8026d0:	d0a74404 	addi	r2,gp,-25328
  8026d4:	e0bffc15 	stw	r2,-16(fp)
					pkt->ip.udp.data[7] = s_freq[0]&0x0ff;
  8026d8:	e0bffc17 	ldw	r2,-16(fp)
  8026dc:	10c00003 	ldbu	r3,0(r2)
  8026e0:	00bfffc4 	movi	r2,-1
  8026e4:	1884703a 	and	r2,r3,r2
  8026e8:	1007883a 	mov	r3,r2
  8026ec:	e0bffe17 	ldw	r2,-8(fp)
  8026f0:	10c00c45 	stb	r3,49(r2)
					pkt->ip.udp.data[6] = s_freq[1]&0x0ff;
  8026f4:	e0bffc17 	ldw	r2,-16(fp)
  8026f8:	10800044 	addi	r2,r2,1
  8026fc:	10c00003 	ldbu	r3,0(r2)
  802700:	00bfffc4 	movi	r2,-1
  802704:	1884703a 	and	r2,r3,r2
  802708:	1007883a 	mov	r3,r2
  80270c:	e0bffe17 	ldw	r2,-8(fp)
  802710:	10c00c05 	stb	r3,48(r2)
					pkt->ip.udp.data[5] = s_freq[2]&0x0ff;
  802714:	e0bffc17 	ldw	r2,-16(fp)
  802718:	10800084 	addi	r2,r2,2
  80271c:	10c00003 	ldbu	r3,0(r2)
  802720:	00bfffc4 	movi	r2,-1
  802724:	1884703a 	and	r2,r3,r2
  802728:	1007883a 	mov	r3,r2
  80272c:	e0bffe17 	ldw	r2,-8(fp)
  802730:	10c00bc5 	stb	r3,47(r2)
					pkt->ip.udp.data[4] = s_freq[3]&0x0ff;
  802734:	e0bffc17 	ldw	r2,-16(fp)
  802738:	108000c4 	addi	r2,r2,3
  80273c:	10c00003 	ldbu	r3,0(r2)
  802740:	00bfffc4 	movi	r2,-1
  802744:	1884703a 	and	r2,r3,r2
  802748:	1007883a 	mov	r3,r2
  80274c:	e0bffe17 	ldw	r2,-8(fp)
  802750:	10c00b85 	stb	r3,46(r2)

	    			TransmitPacket(RXT,PKT_LENGTH);
  802754:	010020b4 	movhi	r4,130
  802758:	21029c04 	addi	r4,r4,2672
  80275c:	01401484 	movi	r5,82
  802760:	08004f80 	call	8004f8 <TransmitPacket>

	    			//printf("\n CMD_FREQ_REQUEST\n");
					break;
  802764:	00011c06 	br	802bd8 <ethernet_interrupts+0x6c0>
				}
				case CMD_NFREQ_NODES:
				{
					// To change the number of nodes of the frequency average

	    			int num=0;
  802768:	e03ffb15 	stw	zero,-20(fp)
	    			delete_list();
  80276c:	080103c0 	call	80103c <delete_list>
	    			num += pkt->ip.udp.data[7]&0x0ff;
  802770:	e0bffe17 	ldw	r2,-8(fp)
  802774:	10800c43 	ldbu	r2,49(r2)
  802778:	10803fcc 	andi	r2,r2,255
  80277c:	1080201c 	xori	r2,r2,128
  802780:	10bfe004 	addi	r2,r2,-128
  802784:	10c03fcc 	andi	r3,r2,255
  802788:	e0bffb17 	ldw	r2,-20(fp)
  80278c:	10c5883a 	add	r2,r2,r3
  802790:	e0bffb15 	stw	r2,-20(fp)
					num += (pkt->ip.udp.data[6] << 8)&0x0ff00;
  802794:	e0bffe17 	ldw	r2,-8(fp)
  802798:	10800c03 	ldbu	r2,48(r2)
  80279c:	10803fcc 	andi	r2,r2,255
  8027a0:	1080201c 	xori	r2,r2,128
  8027a4:	10bfe004 	addi	r2,r2,-128
  8027a8:	1004923a 	slli	r2,r2,8
  8027ac:	10ffc00c 	andi	r3,r2,65280
  8027b0:	e0bffb17 	ldw	r2,-20(fp)
  8027b4:	10c5883a 	add	r2,r2,r3
  8027b8:	e0bffb15 	stw	r2,-20(fp)
					num += (pkt->ip.udp.data[5] << 16)&0x0ff0000;
  8027bc:	e0bffe17 	ldw	r2,-8(fp)
  8027c0:	10800bc3 	ldbu	r2,47(r2)
  8027c4:	10803fcc 	andi	r2,r2,255
  8027c8:	1080201c 	xori	r2,r2,128
  8027cc:	10bfe004 	addi	r2,r2,-128
  8027d0:	1004943a 	slli	r2,r2,16
  8027d4:	10c03fec 	andhi	r3,r2,255
  8027d8:	e0bffb17 	ldw	r2,-20(fp)
  8027dc:	10c5883a 	add	r2,r2,r3
  8027e0:	e0bffb15 	stw	r2,-20(fp)
					num += (pkt->ip.udp.data[4] << 24)&0x0ff000000;
  8027e4:	e0bffe17 	ldw	r2,-8(fp)
  8027e8:	10800b83 	ldbu	r2,46(r2)
  8027ec:	10803fcc 	andi	r2,r2,255
  8027f0:	1080201c 	xori	r2,r2,128
  8027f4:	10bfe004 	addi	r2,r2,-128
  8027f8:	1004963a 	slli	r2,r2,24
  8027fc:	10ffc02c 	andhi	r3,r2,65280
  802800:	e0bffb17 	ldw	r2,-20(fp)
  802804:	1885883a 	add	r2,r3,r2
  802808:	e0bffb15 	stw	r2,-20(fp)

	    			sc.num_freq_nodes = (int)num;
  80280c:	00c020b4 	movhi	r3,130
  802810:	18c40904 	addi	r3,r3,4132
  802814:	e0bffb17 	ldw	r2,-20(fp)
  802818:	18800115 	stw	r2,4(r3)

	    			//printf("\n CMD_NFREQ_NODES, num = %d\n", num);
					break;
  80281c:	0000ee06 	br	802bd8 <ethernet_interrupts+0x6c0>
				}
				case CMD_AV_SIMPLE:
				{
					// Simple average

					sc.average_type = SIMPLE_MOVING_AVERAGE;
  802820:	008020b4 	movhi	r2,130
  802824:	10840904 	addi	r2,r2,4132
  802828:	10000205 	stb	zero,8(r2)

	    			//printf("\n CMD_AV_SIMPLE\n");
					break;
  80282c:	0000ea06 	br	802bd8 <ethernet_interrupts+0x6c0>
				}
				case CMD_AV_WEIGHTED:
				{
					// Weighted average

					sc.average_type = WEIGHTED_MOVING_AVERAGE;
  802830:	00c020b4 	movhi	r3,130
  802834:	18c40904 	addi	r3,r3,4132
  802838:	00800044 	movi	r2,1
  80283c:	18800205 	stb	r2,8(r3)

	    			//printf("\n CMD_AV_WEIGHTED\n");
					break;
  802840:	0000e506 	br	802bd8 <ethernet_interrupts+0x6c0>
				}
				case CMD_AV_EXP:
				{
					// Exponential average

					sc.average_type = EXPONENTIAL_MOVING_AVERAGE;
  802844:	00c020b4 	movhi	r3,130
  802848:	18c40904 	addi	r3,r3,4132
  80284c:	00800084 	movi	r2,2
  802850:	18800205 	stb	r2,8(r3)

	    			//printf("\n CMD_AV_EXP\n");
					break;
  802854:	0000e006 	br	802bd8 <ethernet_interrupts+0x6c0>
				}
				case CMD_ACTIVATE_FUNC_GEN:
				{
					// Activation of the function generator

					sc.activated_device = FUNCTION_GENERATOR;
  802858:	00c020b4 	movhi	r3,130
  80285c:	18c40904 	addi	r3,r3,4132
  802860:	00800044 	movi	r2,1
  802864:	18800005 	stb	r2,0(r3)

	    			//printf("\n CMD_ACTIVATE_FUNC_GEN\n");
					break;
  802868:	0000db06 	br	802bd8 <ethernet_interrupts+0x6c0>
				}
				case CMD_RAM_VALUES:
				{
					// Change the RAM values of the CCP
					int i=0;
  80286c:	e03ffa15 	stw	zero,-24(fp)
					for(i = 0; i < RAM_PWM_SIZE; i++) {
  802870:	e03ffa15 	stw	zero,-24(fp)
  802874:	00001406 	br	8028c8 <ethernet_interrupts+0x3b0>

						custom_signal[i] = (unsigned int)pkt->ip.udp.data[4+i];
  802878:	e17ffa17 	ldw	r5,-24(fp)
  80287c:	e0bffa17 	ldw	r2,-24(fp)
  802880:	10c00104 	addi	r3,r2,4
  802884:	e0bffe17 	ldw	r2,-8(fp)
  802888:	10c5883a 	add	r2,r2,r3
  80288c:	10800a84 	addi	r2,r2,42
  802890:	10800003 	ldbu	r2,0(r2)
  802894:	10803fcc 	andi	r2,r2,255
  802898:	1080201c 	xori	r2,r2,128
  80289c:	10bfe004 	addi	r2,r2,-128
  8028a0:	1009883a 	mov	r4,r2
  8028a4:	00c020b4 	movhi	r3,130
  8028a8:	18cc0f04 	addi	r3,r3,12348
  8028ac:	2945883a 	add	r2,r5,r5
  8028b0:	1085883a 	add	r2,r2,r2
  8028b4:	10c5883a 	add	r2,r2,r3
  8028b8:	11000015 	stw	r4,0(r2)
				}
				case CMD_RAM_VALUES:
				{
					// Change the RAM values of the CCP
					int i=0;
					for(i = 0; i < RAM_PWM_SIZE; i++) {
  8028bc:	e0bffa17 	ldw	r2,-24(fp)
  8028c0:	10800044 	addi	r2,r2,1
  8028c4:	e0bffa15 	stw	r2,-24(fp)
  8028c8:	e0bffa17 	ldw	r2,-24(fp)
  8028cc:	10800910 	cmplti	r2,r2,36
  8028d0:	103fe91e 	bne	r2,zero,802878 <ethernet_interrupts+0x360>

						custom_signal[i] = (unsigned int)pkt->ip.udp.data[4+i];

					}

	    			write_ram_function_generator(custom_signal, RAM_PWM_SIZE);
  8028d4:	010020b4 	movhi	r4,130
  8028d8:	210c0f04 	addi	r4,r4,12348
  8028dc:	01400904 	movi	r5,36
  8028e0:	0801bd40 	call	801bd4 <write_ram_function_generator>

	    			//printf("\n CMD_RAM_VALUES\n");
					break;
  8028e4:	0000bc06 	br	802bd8 <ethernet_interrupts+0x6c0>
				}
				case CMD_FG_SQUARE:
				{
					// Square signal in the function generator

					sc.square_activated = SQUARE_SIGNAL_ACTIVATED;
  8028e8:	00c020b4 	movhi	r3,130
  8028ec:	18c40904 	addi	r3,r3,4132
  8028f0:	00800044 	movi	r2,1
  8028f4:	18800505 	stb	r2,20(r3)

	    			//printf("\n CMD_FG_SQUARE\n");
					break;
  8028f8:	0000b706 	br	802bd8 <ethernet_interrupts+0x6c0>
				}
				case CMD_FG_NON_SQUARE:
				{
					// Non square signal in the function generator

					sc.square_activated = NON_SQUARE_SIGNAL_ACTIVATED;
  8028fc:	008020b4 	movhi	r2,130
  802900:	10840904 	addi	r2,r2,4132
  802904:	10000505 	stb	zero,20(r2)

	    			//printf("\n CMD_FG_NON_SQUARE\n");
					break;
  802908:	0000b306 	br	802bd8 <ethernet_interrupts+0x6c0>
				case CMD_FG_CHANGE_FREQ:
				{
					// Change the frequency (and also Ton) of the function generator's signal
					//	Fout = 100MHz/per_pwm

	    			int new_freq=0;
  80290c:	e03ff915 	stw	zero,-28(fp)
	    			// Extract the new frequency from the packet
	    			new_freq += pkt->ip.udp.data[7]&0x0ff;
  802910:	e0bffe17 	ldw	r2,-8(fp)
  802914:	10800c43 	ldbu	r2,49(r2)
  802918:	10803fcc 	andi	r2,r2,255
  80291c:	1080201c 	xori	r2,r2,128
  802920:	10bfe004 	addi	r2,r2,-128
  802924:	10c03fcc 	andi	r3,r2,255
  802928:	e0bff917 	ldw	r2,-28(fp)
  80292c:	10c5883a 	add	r2,r2,r3
  802930:	e0bff915 	stw	r2,-28(fp)
	    			new_freq += (pkt->ip.udp.data[6] << 8)&0x0ff00;
  802934:	e0bffe17 	ldw	r2,-8(fp)
  802938:	10800c03 	ldbu	r2,48(r2)
  80293c:	10803fcc 	andi	r2,r2,255
  802940:	1080201c 	xori	r2,r2,128
  802944:	10bfe004 	addi	r2,r2,-128
  802948:	1004923a 	slli	r2,r2,8
  80294c:	10ffc00c 	andi	r3,r2,65280
  802950:	e0bff917 	ldw	r2,-28(fp)
  802954:	10c5883a 	add	r2,r2,r3
  802958:	e0bff915 	stw	r2,-28(fp)
					new_freq += (pkt->ip.udp.data[5] << 16)&0x0ff0000;
  80295c:	e0bffe17 	ldw	r2,-8(fp)
  802960:	10800bc3 	ldbu	r2,47(r2)
  802964:	10803fcc 	andi	r2,r2,255
  802968:	1080201c 	xori	r2,r2,128
  80296c:	10bfe004 	addi	r2,r2,-128
  802970:	1004943a 	slli	r2,r2,16
  802974:	10c03fec 	andhi	r3,r2,255
  802978:	e0bff917 	ldw	r2,-28(fp)
  80297c:	10c5883a 	add	r2,r2,r3
  802980:	e0bff915 	stw	r2,-28(fp)
					new_freq += (pkt->ip.udp.data[4] << 24)&0x0ff000000;
  802984:	e0bffe17 	ldw	r2,-8(fp)
  802988:	10800b83 	ldbu	r2,46(r2)
  80298c:	10803fcc 	andi	r2,r2,255
  802990:	1080201c 	xori	r2,r2,128
  802994:	10bfe004 	addi	r2,r2,-128
  802998:	1004963a 	slli	r2,r2,24
  80299c:	10ffc02c 	andhi	r3,r2,65280
  8029a0:	e0bff917 	ldw	r2,-28(fp)
  8029a4:	1885883a 	add	r2,r3,r2
  8029a8:	e0bff915 	stw	r2,-28(fp)

	    			sc.per_pwm = (unsigned int)(100e6/new_freq);
  8029ac:	e13ff917 	ldw	r4,-28(fp)
  8029b0:	0806f0c0 	call	806f0c <__floatsidf>
  8029b4:	100f883a 	mov	r7,r2
  8029b8:	1811883a 	mov	r8,r3
  8029bc:	0009883a 	mov	r4,zero
  8029c0:	01506634 	movhi	r5,16792
  8029c4:	2975e104 	addi	r5,r5,-10364
  8029c8:	380d883a 	mov	r6,r7
  8029cc:	400f883a 	mov	r7,r8
  8029d0:	08069840 	call	806984 <__divdf3>
  8029d4:	1009883a 	mov	r4,r2
  8029d8:	180b883a 	mov	r5,r3
  8029dc:	2005883a 	mov	r2,r4
  8029e0:	2807883a 	mov	r3,r5
  8029e4:	1009883a 	mov	r4,r2
  8029e8:	180b883a 	mov	r5,r3
  8029ec:	08057700 	call	805770 <__fixunsdfsi>
  8029f0:	1007883a 	mov	r3,r2
  8029f4:	008020b4 	movhi	r2,130
  8029f8:	10840904 	addi	r2,r2,4132
  8029fc:	10c00315 	stw	r3,12(r2)
	    			sc.ton_pwm = sc.per_pwm/2;
  802a00:	008020b4 	movhi	r2,130
  802a04:	10840904 	addi	r2,r2,4132
  802a08:	10800317 	ldw	r2,12(r2)
  802a0c:	1006d07a 	srli	r3,r2,1
  802a10:	008020b4 	movhi	r2,130
  802a14:	10840904 	addi	r2,r2,4132
  802a18:	10c00415 	stw	r3,16(r2)

	    			//printf("\n CMD_FG_CHANGE_FREQ, freq = %d\, sc.per_pwm = %d, sc.ton_pwm = %d \n", (unsigned int)new_freq, sc.per_pwm, sc.ton_pwm);
					break;
  802a1c:	00006e06 	br	802bd8 <ethernet_interrupts+0x6c0>
				case CMD_FG_CHANGE_TON:
				{
					// Change the Ton of the function generator's signal. We receive the
					//	Duty cycle --> Ton = per_pwm/(100/DC)

	    			int new_dc=0;
  802a20:	e03ff815 	stw	zero,-32(fp)
					// Extract the new duty cycle from the packet to change Ton
	    			new_dc += pkt->ip.udp.data[7]&0x0ff;
  802a24:	e0bffe17 	ldw	r2,-8(fp)
  802a28:	10800c43 	ldbu	r2,49(r2)
  802a2c:	10803fcc 	andi	r2,r2,255
  802a30:	1080201c 	xori	r2,r2,128
  802a34:	10bfe004 	addi	r2,r2,-128
  802a38:	10c03fcc 	andi	r3,r2,255
  802a3c:	e0bff817 	ldw	r2,-32(fp)
  802a40:	10c5883a 	add	r2,r2,r3
  802a44:	e0bff815 	stw	r2,-32(fp)
					new_dc += (pkt->ip.udp.data[6] << 8)&0x0ff00;
  802a48:	e0bffe17 	ldw	r2,-8(fp)
  802a4c:	10800c03 	ldbu	r2,48(r2)
  802a50:	10803fcc 	andi	r2,r2,255
  802a54:	1080201c 	xori	r2,r2,128
  802a58:	10bfe004 	addi	r2,r2,-128
  802a5c:	1004923a 	slli	r2,r2,8
  802a60:	10ffc00c 	andi	r3,r2,65280
  802a64:	e0bff817 	ldw	r2,-32(fp)
  802a68:	10c5883a 	add	r2,r2,r3
  802a6c:	e0bff815 	stw	r2,-32(fp)
					new_dc += (pkt->ip.udp.data[5] << 16)&0x0ff0000;
  802a70:	e0bffe17 	ldw	r2,-8(fp)
  802a74:	10800bc3 	ldbu	r2,47(r2)
  802a78:	10803fcc 	andi	r2,r2,255
  802a7c:	1080201c 	xori	r2,r2,128
  802a80:	10bfe004 	addi	r2,r2,-128
  802a84:	1004943a 	slli	r2,r2,16
  802a88:	10c03fec 	andhi	r3,r2,255
  802a8c:	e0bff817 	ldw	r2,-32(fp)
  802a90:	10c5883a 	add	r2,r2,r3
  802a94:	e0bff815 	stw	r2,-32(fp)
					new_dc += (pkt->ip.udp.data[4] << 24)&0x0ff000000;
  802a98:	e0bffe17 	ldw	r2,-8(fp)
  802a9c:	10800b83 	ldbu	r2,46(r2)
  802aa0:	10803fcc 	andi	r2,r2,255
  802aa4:	1080201c 	xori	r2,r2,128
  802aa8:	10bfe004 	addi	r2,r2,-128
  802aac:	1004963a 	slli	r2,r2,24
  802ab0:	10ffc02c 	andhi	r3,r2,65280
  802ab4:	e0bff817 	ldw	r2,-32(fp)
  802ab8:	1885883a 	add	r2,r3,r2
  802abc:	e0bff815 	stw	r2,-32(fp)

					if ((new_dc > 0) && (new_dc <= 100)) {
  802ac0:	e0bff817 	ldw	r2,-32(fp)
  802ac4:	10800050 	cmplti	r2,r2,1
  802ac8:	1000431e 	bne	r2,zero,802bd8 <ethernet_interrupts+0x6c0>
  802acc:	e0bff817 	ldw	r2,-32(fp)
  802ad0:	10801948 	cmpgei	r2,r2,101
  802ad4:	1000401e 	bne	r2,zero,802bd8 <ethernet_interrupts+0x6c0>

						sc.ton_pwm = (unsigned int)(sc.per_pwm/(100.0/new_dc));
  802ad8:	008020b4 	movhi	r2,130
  802adc:	10840904 	addi	r2,r2,4132
  802ae0:	11000317 	ldw	r4,12(r2)
  802ae4:	08071880 	call	807188 <__floatunsidf>
  802ae8:	1021883a 	mov	r16,r2
  802aec:	1823883a 	mov	r17,r3
  802af0:	e13ff817 	ldw	r4,-32(fp)
  802af4:	0806f0c0 	call	806f0c <__floatsidf>
  802af8:	100f883a 	mov	r7,r2
  802afc:	1811883a 	mov	r8,r3
  802b00:	0009883a 	mov	r4,zero
  802b04:	01501674 	movhi	r5,16473
  802b08:	380d883a 	mov	r6,r7
  802b0c:	400f883a 	mov	r7,r8
  802b10:	08069840 	call	806984 <__divdf3>
  802b14:	1009883a 	mov	r4,r2
  802b18:	180b883a 	mov	r5,r3
  802b1c:	2005883a 	mov	r2,r4
  802b20:	2807883a 	mov	r3,r5
  802b24:	8009883a 	mov	r4,r16
  802b28:	880b883a 	mov	r5,r17
  802b2c:	100d883a 	mov	r6,r2
  802b30:	180f883a 	mov	r7,r3
  802b34:	08069840 	call	806984 <__divdf3>
  802b38:	1009883a 	mov	r4,r2
  802b3c:	180b883a 	mov	r5,r3
  802b40:	2005883a 	mov	r2,r4
  802b44:	2807883a 	mov	r3,r5
  802b48:	1009883a 	mov	r4,r2
  802b4c:	180b883a 	mov	r5,r3
  802b50:	08057700 	call	805770 <__fixunsdfsi>
  802b54:	1007883a 	mov	r3,r2
  802b58:	008020b4 	movhi	r2,130
  802b5c:	10840904 	addi	r2,r2,4132
  802b60:	10c00415 	stw	r3,16(r2)
					}

	    			//printf("\n CMD_FG_CHANGE_TON, dcycle = %x %d %d\n", new_dc, sc.per_pwm, sc.ton_pwm);
					break;
  802b64:	00001c06 	br	802bd8 <ethernet_interrupts+0x6c0>
				}
				case CMD_RESET:
				{
					// Reset of the system

	    			reset_ccp();
  802b68:	0801c940 	call	801c94 <reset_ccp>
	    			system_config_init();
  802b6c:	08021240 	call	802124 <system_config_init>
  802b70:	00001906 	br	802bd8 <ethernet_interrupts+0x6c0>
					//printf("WARNING: Unknown Command = %.2x%.2x%.2x%.2x ! -- We do not do anything!\n", pkt->ip.udp.data[0], pkt->ip.udp.data[1], pkt->ip.udp.data[2], pkt->ip.udp.data[3]);
					break;
    		}

      }//end if(packet_is_for_me())
      else if (pkt_is_arprequest(RXT, rx_len)) { // If we receive an ARP Request
  802b74:	d0a74817 	ldw	r2,-25312(gp)
  802b78:	100b883a 	mov	r5,r2
  802b7c:	010020b4 	movhi	r4,130
  802b80:	21029c04 	addi	r4,r4,2672
  802b84:	080325c0 	call	80325c <pkt_is_arprequest>
  802b88:	1005003a 	cmpeq	r2,r2,zero
  802b8c:	1000121e 	bne	r2,zero,802bd8 <ethernet_interrupts+0x6c0>

    	  //printf("---- PACKET ARP FOR ME -----\n");
    	  struct pkt_buffer_2 *pkt;

    	  pkt = (struct pkt_buffer_2 *)RXT;
  802b90:	008020b4 	movhi	r2,130
  802b94:	10829c04 	addi	r2,r2,2672
  802b98:	e0bff715 	stw	r2,-36(fp)
    	  int pkt_length;
    	  pkt_length = rx_len - 4; //do not count the Ethernet CRC
  802b9c:	d0a74817 	ldw	r2,-25312(gp)
  802ba0:	10bfff04 	addi	r2,r2,-4
  802ba4:	e0bff615 	stw	r2,-40(fp)

    	  // Now we change the content of the packet in order to send
    	  //   an ARP Replay
    	  pkt_arp_changes_to_send(pkt);
  802ba8:	e13ff717 	ldw	r4,-36(fp)
  802bac:	08036ac0 	call	8036ac <pkt_arp_changes_to_send>
    	  if (pkt_length == 42) pkt_length += 18; // 18 bytes of padding (any value)
  802bb0:	e0bff617 	ldw	r2,-40(fp)
  802bb4:	10800a98 	cmpnei	r2,r2,42
  802bb8:	1000031e 	bne	r2,zero,802bc8 <ethernet_interrupts+0x6b0>
  802bbc:	e0bff617 	ldw	r2,-40(fp)
  802bc0:	10800484 	addi	r2,r2,18
  802bc4:	e0bff615 	stw	r2,-40(fp)
    	  TransmitPacket(RXT, pkt_length); // the length of ARP replay is always 60 bytes
  802bc8:	e17ff617 	ldw	r5,-40(fp)
  802bcc:	010020b4 	movhi	r4,130
  802bd0:	21029c04 	addi	r4,r4,2672
  802bd4:	08004f80 	call	8004f8 <TransmitPacket>

      }
    }
    //TransmitPacket(0,0x00);
}
  802bd8:	e037883a 	mov	sp,fp
  802bdc:	dfc00317 	ldw	ra,12(sp)
  802be0:	df000217 	ldw	fp,8(sp)
  802be4:	dc400117 	ldw	r17,4(sp)
  802be8:	dc000017 	ldw	r16,0(sp)
  802bec:	dec00404 	addi	sp,sp,16
  802bf0:	f800283a 	ret

00802bf4 <assign_pkt_defaults>:
//                       		 NETWORK CONNECTION				                     //
///////////////////////////////////////////////////////////////////////////////////////

/* Assign default values to the fields of the pkt */
void assign_pkt_defaults( struct pkt_buffer *pkt )
{
  802bf4:	defffe04 	addi	sp,sp,-8
  802bf8:	df000115 	stw	fp,4(sp)
  802bfc:	df000104 	addi	fp,sp,4
  802c00:	e13fff15 	stw	r4,-4(fp)

	// Ethernet header
	pkt->mac_dest0 = DEFAULT_DEST_MAC_0;
  802c04:	e0ffff17 	ldw	r3,-4(fp)
  802c08:	00bfffc4 	movi	r2,-1
  802c0c:	18800145 	stb	r2,5(r3)
	pkt->mac_dest1 = DEFAULT_DEST_MAC_1;
  802c10:	e0ffff17 	ldw	r3,-4(fp)
  802c14:	00bfffc4 	movi	r2,-1
  802c18:	18800105 	stb	r2,4(r3)
	pkt->mac_dest2 = DEFAULT_DEST_MAC_2;
  802c1c:	e0ffff17 	ldw	r3,-4(fp)
  802c20:	00bfffc4 	movi	r2,-1
  802c24:	188000c5 	stb	r2,3(r3)
	pkt->mac_dest3 = DEFAULT_DEST_MAC_3;
  802c28:	e0ffff17 	ldw	r3,-4(fp)
  802c2c:	00bfffc4 	movi	r2,-1
  802c30:	18800085 	stb	r2,2(r3)
	pkt->mac_dest4 = DEFAULT_DEST_MAC_4;
  802c34:	e0ffff17 	ldw	r3,-4(fp)
  802c38:	00bfffc4 	movi	r2,-1
  802c3c:	18800045 	stb	r2,1(r3)
	pkt->mac_dest5 = DEFAULT_DEST_MAC_5;
  802c40:	e0ffff17 	ldw	r3,-4(fp)
  802c44:	00bfffc4 	movi	r2,-1
  802c48:	18800005 	stb	r2,0(r3)
	pkt->mac_source0 = DEFAULT_SOURCE_MAC_0;
  802c4c:	e0ffff17 	ldw	r3,-4(fp)
  802c50:	00bfe8c4 	movi	r2,-93
  802c54:	188002c5 	stb	r2,11(r3)
	pkt->mac_source1 = DEFAULT_SOURCE_MAC_1;
  802c58:	e0ffff17 	ldw	r3,-4(fp)
  802c5c:	008019c4 	movi	r2,103
  802c60:	18800285 	stb	r2,10(r3)
	pkt->mac_source2 = DEFAULT_SOURCE_MAC_2;
  802c64:	e0ffff17 	ldw	r3,-4(fp)
  802c68:	00800504 	movi	r2,20
  802c6c:	18800245 	stb	r2,9(r3)
	pkt->mac_source3 = DEFAULT_SOURCE_MAC_3;
  802c70:	e0ffff17 	ldw	r3,-4(fp)
  802c74:	00800bc4 	movi	r2,47
  802c78:	18800205 	stb	r2,8(r3)
	pkt->mac_source4 = DEFAULT_SOURCE_MAC_4;
  802c7c:	e0ffff17 	ldw	r3,-4(fp)
  802c80:	00bfe004 	movi	r2,-128
  802c84:	188001c5 	stb	r2,7(r3)
	pkt->mac_source5 = DEFAULT_SOURCE_MAC_5;
  802c88:	e0bfff17 	ldw	r2,-4(fp)
  802c8c:	10000185 	stb	zero,6(r2)
	pkt->ethertype_h = DEFAULT_ETHERTYPE_H;
  802c90:	e0ffff17 	ldw	r3,-4(fp)
  802c94:	00800204 	movi	r2,8
  802c98:	18800305 	stb	r2,12(r3)
	pkt->ethertype_l = DEFAULT_ETHERTYPE_L;
  802c9c:	e0bfff17 	ldw	r2,-4(fp)
  802ca0:	10000345 	stb	zero,13(r2)

	// IP header
	pkt->ip.version_ihl = DEFAULT_VERSION_IHL;
  802ca4:	e0ffff17 	ldw	r3,-4(fp)
  802ca8:	00801144 	movi	r2,69
  802cac:	18800385 	stb	r2,14(r3)
	pkt->ip.dscp_ecn = DEFAULT_DSCP_ECN;
  802cb0:	e0bfff17 	ldw	r2,-4(fp)
  802cb4:	100003c5 	stb	zero,15(r2)
	pkt->ip.iplength_h = DEFAULT_IP_LENGTH_H;
  802cb8:	e0bfff17 	ldw	r2,-4(fp)
  802cbc:	10000405 	stb	zero,16(r2)
	pkt->ip.iplength_l = DEFAULT_IP_LENGTH_L;
  802cc0:	e0ffff17 	ldw	r3,-4(fp)
  802cc4:	00801104 	movi	r2,68
  802cc8:	18800445 	stb	r2,17(r3)
	pkt->ip.id_h = DEFAULT_ID_H;
  802ccc:	e0bfff17 	ldw	r2,-4(fp)
  802cd0:	10000485 	stb	zero,18(r2)
	pkt->ip.id_l = DEFAULT_ID_L;
  802cd4:	e0bfff17 	ldw	r2,-4(fp)
  802cd8:	100004c5 	stb	zero,19(r2)
	pkt->ip.flags_offset_h = DEFAULT_FLAGS_OFFSET_H;
  802cdc:	e0ffff17 	ldw	r3,-4(fp)
  802ce0:	00801004 	movi	r2,64
  802ce4:	18800505 	stb	r2,20(r3)
	pkt->ip.flags_offset_l = DEFAULT_FLAGS_OFFSET_L;
  802ce8:	e0bfff17 	ldw	r2,-4(fp)
  802cec:	10000545 	stb	zero,21(r2)
	pkt->ip.ttl = DEFAULT_TTL;
  802cf0:	e0ffff17 	ldw	r3,-4(fp)
  802cf4:	00bfe004 	movi	r2,-128
  802cf8:	18800585 	stb	r2,22(r3)
	pkt->ip.protocol = DEFAULT_PROTOCOL;
  802cfc:	e0ffff17 	ldw	r3,-4(fp)
  802d00:	00800444 	movi	r2,17
  802d04:	188005c5 	stb	r2,23(r3)
	pkt->ip.ipcrc_h = DEFAULT_IP_CRC_H;
  802d08:	e0bfff17 	ldw	r2,-4(fp)
  802d0c:	10000605 	stb	zero,24(r2)
	pkt->ip.ipcrc_l = DEFAULT_IP_CRC_L;
  802d10:	e0bfff17 	ldw	r2,-4(fp)
  802d14:	10000645 	stb	zero,25(r2)
	pkt->ip.ipsource0 = DEFAULT_IP_SOURCE_0;
  802d18:	e0ffff17 	ldw	r3,-4(fp)
  802d1c:	008016c4 	movi	r2,91
  802d20:	18800745 	stb	r2,29(r3)
	pkt->ip.ipsource1 = DEFAULT_IP_SOURCE_1;
  802d24:	e0ffff17 	ldw	r3,-4(fp)
  802d28:	00800144 	movi	r2,5
  802d2c:	18800705 	stb	r2,28(r3)
	pkt->ip.ipsource2 = DEFAULT_IP_SOURCE_2;
  802d30:	e0ffff17 	ldw	r3,-4(fp)
  802d34:	008004c4 	movi	r2,19
  802d38:	188006c5 	stb	r2,27(r3)
	pkt->ip.ipsource3 = DEFAULT_IP_SOURCE_3;
  802d3c:	e0ffff17 	ldw	r3,-4(fp)
  802d40:	00bfeb04 	movi	r2,-84
  802d44:	18800685 	stb	r2,26(r3)
	pkt->ip.ipdest0 = DEFAULT_IP_DEST_0;
  802d48:	e0ffff17 	ldw	r3,-4(fp)
  802d4c:	008018c4 	movi	r2,99
  802d50:	18800845 	stb	r2,33(r3)
	pkt->ip.ipdest1 = DEFAULT_IP_DEST_1;
  802d54:	e0ffff17 	ldw	r3,-4(fp)
  802d58:	00800144 	movi	r2,5
  802d5c:	18800805 	stb	r2,32(r3)
	pkt->ip.ipdest2 = DEFAULT_IP_DEST_2;
  802d60:	e0ffff17 	ldw	r3,-4(fp)
  802d64:	008004c4 	movi	r2,19
  802d68:	188007c5 	stb	r2,31(r3)
	pkt->ip.ipdest3 = DEFAULT_IP_DEST_3;
  802d6c:	e0ffff17 	ldw	r3,-4(fp)
  802d70:	00bfeb04 	movi	r2,-84
  802d74:	18800785 	stb	r2,30(r3)

	// UDP header
	pkt->ip.udp.source_port_h = DEFAULT_SOURCE_PORT_H;
  802d78:	e0bfff17 	ldw	r2,-4(fp)
  802d7c:	10000885 	stb	zero,34(r2)
	pkt->ip.udp.source_port_l = DEFAULT_SOURCE_PORT_L;
  802d80:	e0ffff17 	ldw	r3,-4(fp)
  802d84:	00801404 	movi	r2,80
  802d88:	188008c5 	stb	r2,35(r3)
	pkt->ip.udp.dest_port_h = DEFAULT_DEST_PORT_H;
  802d8c:	e0bfff17 	ldw	r2,-4(fp)
  802d90:	10000905 	stb	zero,36(r2)
	pkt->ip.udp.dest_port_l = DEFAULT_DEST_PORT_L;
  802d94:	e0ffff17 	ldw	r3,-4(fp)
  802d98:	00801404 	movi	r2,80
  802d9c:	18800945 	stb	r2,37(r3)
	pkt->ip.udp.udplength_h = DEFAULT_UDP_LENGTH_H;
  802da0:	e0bfff17 	ldw	r2,-4(fp)
  802da4:	10000985 	stb	zero,38(r2)
	pkt->ip.udp.udplength_l = DEFAULT_UDP_LENGTH_L;
  802da8:	e0ffff17 	ldw	r3,-4(fp)
  802dac:	00800c04 	movi	r2,48
  802db0:	188009c5 	stb	r2,39(r3)
	pkt->ip.udp.crc_h = DEFAULT_UDP_CRC_H;
  802db4:	e0bfff17 	ldw	r2,-4(fp)
  802db8:	10000a05 	stb	zero,40(r2)
	pkt->ip.udp.crc_l = DEFAULT_UDP_CRC_L;
  802dbc:	e0bfff17 	ldw	r2,-4(fp)
  802dc0:	10000a45 	stb	zero,41(r2)

}
  802dc4:	e037883a 	mov	sp,fp
  802dc8:	df000017 	ldw	fp,0(sp)
  802dcc:	dec00104 	addi	sp,sp,4
  802dd0:	f800283a 	ret

00802dd4 <calculate_ip_checksum>:


/* Calculate the IP checksum */
unsigned int calculate_ip_checksum( struct pkt_buffer *pkt)
{
  802dd4:	defffa04 	addi	sp,sp,-24
  802dd8:	df000515 	stw	fp,20(sp)
  802ddc:	df000504 	addi	fp,sp,20
  802de0:	e13fff15 	stw	r4,-4(fp)

	char *ptr;
	int i;
	unsigned int sum = 0, sum_aux;
  802de4:	e03ffc15 	stw	zero,-16(fp)

	ptr = (char *)pkt;
  802de8:	e0bfff17 	ldw	r2,-4(fp)
  802dec:	e0bffe15 	stw	r2,-8(fp)
	ptr += ETHERNET_HEADER_LENGTH; //ptr pointing to the first field of the IP header
  802df0:	e0bffe17 	ldw	r2,-8(fp)
  802df4:	10800384 	addi	r2,r2,14
  802df8:	e0bffe15 	stw	r2,-8(fp)
	sum = 0xffff;
  802dfc:	00bfffd4 	movui	r2,65535
  802e00:	e0bffc15 	stw	r2,-16(fp)

	for (i = 0; i < IP_HEADER_LENGTH/2; i++) {
  802e04:	e03ffd15 	stw	zero,-12(fp)
  802e08:	00002106 	br	802e90 <calculate_ip_checksum+0xbc>
		sum += ((*(ptr)&0xff)<<8) | (*(ptr+1)&0xff);
  802e0c:	e0bffe17 	ldw	r2,-8(fp)
  802e10:	10800003 	ldbu	r2,0(r2)
  802e14:	10803fcc 	andi	r2,r2,255
  802e18:	1080201c 	xori	r2,r2,128
  802e1c:	10bfe004 	addi	r2,r2,-128
  802e20:	10803fcc 	andi	r2,r2,255
  802e24:	1006923a 	slli	r3,r2,8
  802e28:	e0bffe17 	ldw	r2,-8(fp)
  802e2c:	10800044 	addi	r2,r2,1
  802e30:	10800003 	ldbu	r2,0(r2)
  802e34:	10803fcc 	andi	r2,r2,255
  802e38:	1080201c 	xori	r2,r2,128
  802e3c:	10bfe004 	addi	r2,r2,-128
  802e40:	10803fcc 	andi	r2,r2,255
  802e44:	1884b03a 	or	r2,r3,r2
  802e48:	1007883a 	mov	r3,r2
  802e4c:	e0bffc17 	ldw	r2,-16(fp)
  802e50:	10c5883a 	add	r2,r2,r3
  802e54:	e0bffc15 	stw	r2,-16(fp)
		ptr += 2;
  802e58:	e0bffe17 	ldw	r2,-8(fp)
  802e5c:	10800084 	addi	r2,r2,2
  802e60:	e0bffe15 	stw	r2,-8(fp)
		if (sum > 0xffff) sum -= 0xffff;
  802e64:	e0fffc17 	ldw	r3,-16(fp)
  802e68:	00bfffd4 	movui	r2,65535
  802e6c:	10c0052e 	bgeu	r2,r3,802e84 <calculate_ip_checksum+0xb0>
  802e70:	e0bffc17 	ldw	r2,-16(fp)
  802e74:	00fffff4 	movhi	r3,65535
  802e78:	18c00044 	addi	r3,r3,1
  802e7c:	10c5883a 	add	r2,r2,r3
  802e80:	e0bffc15 	stw	r2,-16(fp)

	ptr = (char *)pkt;
	ptr += ETHERNET_HEADER_LENGTH; //ptr pointing to the first field of the IP header
	sum = 0xffff;

	for (i = 0; i < IP_HEADER_LENGTH/2; i++) {
  802e84:	e0bffd17 	ldw	r2,-12(fp)
  802e88:	10800044 	addi	r2,r2,1
  802e8c:	e0bffd15 	stw	r2,-12(fp)
  802e90:	e0bffd17 	ldw	r2,-12(fp)
  802e94:	10800290 	cmplti	r2,r2,10
  802e98:	103fdc1e 	bne	r2,zero,802e0c <calculate_ip_checksum+0x38>
		sum += ((*(ptr)&0xff)<<8) | (*(ptr+1)&0xff);
		ptr += 2;
		if (sum > 0xffff) sum -= 0xffff;
	}

	sum_aux = sum&0x0ffff;
  802e9c:	e0bffc17 	ldw	r2,-16(fp)
  802ea0:	10bfffcc 	andi	r2,r2,65535
  802ea4:	e0bffb15 	stw	r2,-20(fp)

	// return ones's complement
	return ~sum_aux;
  802ea8:	e0bffb17 	ldw	r2,-20(fp)
  802eac:	0084303a 	nor	r2,zero,r2
}
  802eb0:	e037883a 	mov	sp,fp
  802eb4:	df000017 	ldw	fp,0(sp)
  802eb8:	dec00104 	addi	sp,sp,4
  802ebc:	f800283a 	ret

00802ec0 <calculate_udp_checksum>:


/* Calculate the UDP checksum (it's optional) */
unsigned int calculate_udp_checksum( struct pkt_buffer *pkt)
{
  802ec0:	defffe04 	addi	sp,sp,-8
  802ec4:	df000115 	stw	fp,4(sp)
  802ec8:	df000104 	addi	fp,sp,4
  802ecc:	e13fff15 	stw	r4,-4(fp)

	/*	It's optional. We do not use it. When it's not used
	 * 		the checksum value is 0x0000
	 */

	return 0;
  802ed0:	0005883a 	mov	r2,zero

}
  802ed4:	e037883a 	mov	sp,fp
  802ed8:	df000017 	ldw	fp,0(sp)
  802edc:	dec00104 	addi	sp,sp,4
  802ee0:	f800283a 	ret

00802ee4 <pkt_is_viprotocol>:


/* To determine if a received packet is for me or not */
int pkt_is_viprotocol(unsigned char *buffer, int rx_len)
{
  802ee4:	defffa04 	addi	sp,sp,-24
  802ee8:	df000515 	stw	fp,20(sp)
  802eec:	df000504 	addi	fp,sp,20
  802ef0:	e13ffd15 	stw	r4,-12(fp)
  802ef4:	e17ffe15 	stw	r5,-8(fp)

	// Packet IS a vi_protocol packet      --> return 1
	// Packet IS NOT a vi_protocol packet  --> return 0

	int pkt_length = 0;
  802ef8:	e03ffc15 	stw	zero,-16(fp)
	struct pkt_buffer *pkt;
	pkt = (struct pkt_buffer *)buffer;
  802efc:	e0bffd17 	ldw	r2,-12(fp)
  802f00:	e0bffb15 	stw	r2,-20(fp)

	pkt_length = rx_len - 4; // we don't count the four bytes of FCS (Ethernet checksum)
  802f04:	e0bffe17 	ldw	r2,-8(fp)
  802f08:	10bfff04 	addi	r2,r2,-4
  802f0c:	e0bffc15 	stw	r2,-16(fp)

	// Check whether the packet length is the expected one
	if (pkt_length != PKT_LENGTH) return 0;
  802f10:	e0bffc17 	ldw	r2,-16(fp)
  802f14:	108014a0 	cmpeqi	r2,r2,82
  802f18:	1000021e 	bne	r2,zero,802f24 <pkt_is_viprotocol+0x40>
  802f1c:	e03fff15 	stw	zero,-4(fp)
  802f20:	0000c906 	br	803248 <pkt_is_viprotocol+0x364>

	// Check Ethernet header
	// MAC is broadcast
	if ( (pkt->mac_dest5 == (char)0xFF) && (pkt->mac_dest4 == (char)0xFF) && (pkt->mac_dest3 == (char)0xFF)
  802f24:	e0bffb17 	ldw	r2,-20(fp)
  802f28:	10800003 	ldbu	r2,0(r2)
  802f2c:	10803fcc 	andi	r2,r2,255
  802f30:	1080201c 	xori	r2,r2,128
  802f34:	10bfe004 	addi	r2,r2,-128
  802f38:	10bfffd8 	cmpnei	r2,r2,-1
  802f3c:	1000271e 	bne	r2,zero,802fdc <pkt_is_viprotocol+0xf8>
  802f40:	e0bffb17 	ldw	r2,-20(fp)
  802f44:	10800043 	ldbu	r2,1(r2)
  802f48:	10803fcc 	andi	r2,r2,255
  802f4c:	1080201c 	xori	r2,r2,128
  802f50:	10bfe004 	addi	r2,r2,-128
  802f54:	10bfffd8 	cmpnei	r2,r2,-1
  802f58:	1000201e 	bne	r2,zero,802fdc <pkt_is_viprotocol+0xf8>
  802f5c:	e0bffb17 	ldw	r2,-20(fp)
  802f60:	10800083 	ldbu	r2,2(r2)
  802f64:	10803fcc 	andi	r2,r2,255
  802f68:	1080201c 	xori	r2,r2,128
  802f6c:	10bfe004 	addi	r2,r2,-128
  802f70:	10bfffd8 	cmpnei	r2,r2,-1
  802f74:	1000191e 	bne	r2,zero,802fdc <pkt_is_viprotocol+0xf8>
  802f78:	e0bffb17 	ldw	r2,-20(fp)
  802f7c:	108000c3 	ldbu	r2,3(r2)
  802f80:	10803fcc 	andi	r2,r2,255
  802f84:	1080201c 	xori	r2,r2,128
  802f88:	10bfe004 	addi	r2,r2,-128
  802f8c:	10bfffd8 	cmpnei	r2,r2,-1
  802f90:	1000121e 	bne	r2,zero,802fdc <pkt_is_viprotocol+0xf8>
  802f94:	e0bffb17 	ldw	r2,-20(fp)
  802f98:	10800103 	ldbu	r2,4(r2)
  802f9c:	10803fcc 	andi	r2,r2,255
  802fa0:	1080201c 	xori	r2,r2,128
  802fa4:	10bfe004 	addi	r2,r2,-128
  802fa8:	10bfffd8 	cmpnei	r2,r2,-1
  802fac:	10000b1e 	bne	r2,zero,802fdc <pkt_is_viprotocol+0xf8>
  802fb0:	e0bffb17 	ldw	r2,-20(fp)
  802fb4:	10800143 	ldbu	r2,5(r2)
  802fb8:	10803fcc 	andi	r2,r2,255
  802fbc:	1080201c 	xori	r2,r2,128
  802fc0:	10bfe004 	addi	r2,r2,-128
  802fc4:	10bfffd8 	cmpnei	r2,r2,-1
  802fc8:	1000041e 	bne	r2,zero,802fdc <pkt_is_viprotocol+0xf8>
			&& (pkt->mac_dest2 == (char)0xFF) && (pkt->mac_dest1 == (char)0xFF) && (pkt->mac_dest0 == (char)0xFF)) {
		pkt_length = rx_len - 4; //is just an assignment to complete the if statement
  802fcc:	e0bffe17 	ldw	r2,-8(fp)
  802fd0:	10bfff04 	addi	r2,r2,-4
  802fd4:	e0bffc15 	stw	r2,-16(fp)
	// Check whether the packet length is the expected one
	if (pkt_length != PKT_LENGTH) return 0;

	// Check Ethernet header
	// MAC is broadcast
	if ( (pkt->mac_dest5 == (char)0xFF) && (pkt->mac_dest4 == (char)0xFF) && (pkt->mac_dest3 == (char)0xFF)
  802fd8:	00003f06 	br	8030d8 <pkt_is_viprotocol+0x1f4>
			&& (pkt->mac_dest2 == (char)0xFF) && (pkt->mac_dest1 == (char)0xFF) && (pkt->mac_dest0 == (char)0xFF)) {
		pkt_length = rx_len - 4; //is just an assignment to complete the if statement
	} else { // IF it's not not my MAC
		if (pkt->mac_dest5 != (char)DEFAULT_SOURCE_MAC_5) return 0;
  802fdc:	e0bffb17 	ldw	r2,-20(fp)
  802fe0:	10800003 	ldbu	r2,0(r2)
  802fe4:	10803fcc 	andi	r2,r2,255
  802fe8:	1080201c 	xori	r2,r2,128
  802fec:	10bfe004 	addi	r2,r2,-128
  802ff0:	1005003a 	cmpeq	r2,r2,zero
  802ff4:	1000021e 	bne	r2,zero,803000 <pkt_is_viprotocol+0x11c>
  802ff8:	e03fff15 	stw	zero,-4(fp)
  802ffc:	00009206 	br	803248 <pkt_is_viprotocol+0x364>
		else if (pkt->mac_dest5 != (char)DEFAULT_SOURCE_MAC_5) return 0;
  803000:	e0bffb17 	ldw	r2,-20(fp)
  803004:	10800003 	ldbu	r2,0(r2)
  803008:	10803fcc 	andi	r2,r2,255
  80300c:	1080201c 	xori	r2,r2,128
  803010:	10bfe004 	addi	r2,r2,-128
  803014:	1005003a 	cmpeq	r2,r2,zero
  803018:	1000021e 	bne	r2,zero,803024 <pkt_is_viprotocol+0x140>
  80301c:	e03fff15 	stw	zero,-4(fp)
  803020:	00008906 	br	803248 <pkt_is_viprotocol+0x364>
		else if (pkt->mac_dest4 != (char)DEFAULT_SOURCE_MAC_4) return 0;
  803024:	e0bffb17 	ldw	r2,-20(fp)
  803028:	10800043 	ldbu	r2,1(r2)
  80302c:	10803fcc 	andi	r2,r2,255
  803030:	1080201c 	xori	r2,r2,128
  803034:	10bfe004 	addi	r2,r2,-128
  803038:	10bfe020 	cmpeqi	r2,r2,-128
  80303c:	1000021e 	bne	r2,zero,803048 <pkt_is_viprotocol+0x164>
  803040:	e03fff15 	stw	zero,-4(fp)
  803044:	00008006 	br	803248 <pkt_is_viprotocol+0x364>
		else if (pkt->mac_dest3 != (char)DEFAULT_SOURCE_MAC_3) return 0;
  803048:	e0bffb17 	ldw	r2,-20(fp)
  80304c:	10800083 	ldbu	r2,2(r2)
  803050:	10803fcc 	andi	r2,r2,255
  803054:	1080201c 	xori	r2,r2,128
  803058:	10bfe004 	addi	r2,r2,-128
  80305c:	10800be0 	cmpeqi	r2,r2,47
  803060:	1000021e 	bne	r2,zero,80306c <pkt_is_viprotocol+0x188>
  803064:	e03fff15 	stw	zero,-4(fp)
  803068:	00007706 	br	803248 <pkt_is_viprotocol+0x364>
		else if (pkt->mac_dest2 != (char)DEFAULT_SOURCE_MAC_2) return 0;
  80306c:	e0bffb17 	ldw	r2,-20(fp)
  803070:	108000c3 	ldbu	r2,3(r2)
  803074:	10803fcc 	andi	r2,r2,255
  803078:	1080201c 	xori	r2,r2,128
  80307c:	10bfe004 	addi	r2,r2,-128
  803080:	10800520 	cmpeqi	r2,r2,20
  803084:	1000021e 	bne	r2,zero,803090 <pkt_is_viprotocol+0x1ac>
  803088:	e03fff15 	stw	zero,-4(fp)
  80308c:	00006e06 	br	803248 <pkt_is_viprotocol+0x364>
		else if (pkt->mac_dest1 != (char)DEFAULT_SOURCE_MAC_1) return 0;
  803090:	e0bffb17 	ldw	r2,-20(fp)
  803094:	10800103 	ldbu	r2,4(r2)
  803098:	10803fcc 	andi	r2,r2,255
  80309c:	1080201c 	xori	r2,r2,128
  8030a0:	10bfe004 	addi	r2,r2,-128
  8030a4:	108019e0 	cmpeqi	r2,r2,103
  8030a8:	1000021e 	bne	r2,zero,8030b4 <pkt_is_viprotocol+0x1d0>
  8030ac:	e03fff15 	stw	zero,-4(fp)
  8030b0:	00006506 	br	803248 <pkt_is_viprotocol+0x364>
		else if (pkt->mac_dest0 != (char)DEFAULT_SOURCE_MAC_0) return 0;
  8030b4:	e0bffb17 	ldw	r2,-20(fp)
  8030b8:	10800143 	ldbu	r2,5(r2)
  8030bc:	10803fcc 	andi	r2,r2,255
  8030c0:	1080201c 	xori	r2,r2,128
  8030c4:	10bfe004 	addi	r2,r2,-128
  8030c8:	10bfe8e0 	cmpeqi	r2,r2,-93
  8030cc:	1000021e 	bne	r2,zero,8030d8 <pkt_is_viprotocol+0x1f4>
  8030d0:	e03fff15 	stw	zero,-4(fp)
  8030d4:	00005c06 	br	803248 <pkt_is_viprotocol+0x364>
	}

	// Check the IP header
	// If it's not my IP address
	if (pkt->ip.ipdest3 != (char)DEFAULT_IP_SOURCE_3) return 0;
  8030d8:	e0bffb17 	ldw	r2,-20(fp)
  8030dc:	10800783 	ldbu	r2,30(r2)
  8030e0:	10803fcc 	andi	r2,r2,255
  8030e4:	1080201c 	xori	r2,r2,128
  8030e8:	10bfe004 	addi	r2,r2,-128
  8030ec:	10bfeb20 	cmpeqi	r2,r2,-84
  8030f0:	1000021e 	bne	r2,zero,8030fc <pkt_is_viprotocol+0x218>
  8030f4:	e03fff15 	stw	zero,-4(fp)
  8030f8:	00005306 	br	803248 <pkt_is_viprotocol+0x364>
	else if (pkt->ip.ipdest2 != (char)DEFAULT_IP_SOURCE_2) return 0;
  8030fc:	e0bffb17 	ldw	r2,-20(fp)
  803100:	108007c3 	ldbu	r2,31(r2)
  803104:	10803fcc 	andi	r2,r2,255
  803108:	1080201c 	xori	r2,r2,128
  80310c:	10bfe004 	addi	r2,r2,-128
  803110:	108004e0 	cmpeqi	r2,r2,19
  803114:	1000021e 	bne	r2,zero,803120 <pkt_is_viprotocol+0x23c>
  803118:	e03fff15 	stw	zero,-4(fp)
  80311c:	00004a06 	br	803248 <pkt_is_viprotocol+0x364>
	else if (pkt->ip.ipdest1 != (char)DEFAULT_IP_SOURCE_1) return 0;
  803120:	e0bffb17 	ldw	r2,-20(fp)
  803124:	10800803 	ldbu	r2,32(r2)
  803128:	10803fcc 	andi	r2,r2,255
  80312c:	1080201c 	xori	r2,r2,128
  803130:	10bfe004 	addi	r2,r2,-128
  803134:	10800160 	cmpeqi	r2,r2,5
  803138:	1000021e 	bne	r2,zero,803144 <pkt_is_viprotocol+0x260>
  80313c:	e03fff15 	stw	zero,-4(fp)
  803140:	00004106 	br	803248 <pkt_is_viprotocol+0x364>
	else if (pkt->ip.ipdest0 != (char)DEFAULT_IP_SOURCE_0) return 0;
  803144:	e0bffb17 	ldw	r2,-20(fp)
  803148:	10800843 	ldbu	r2,33(r2)
  80314c:	10803fcc 	andi	r2,r2,255
  803150:	1080201c 	xori	r2,r2,128
  803154:	10bfe004 	addi	r2,r2,-128
  803158:	108016e0 	cmpeqi	r2,r2,91
  80315c:	1000021e 	bne	r2,zero,803168 <pkt_is_viprotocol+0x284>
  803160:	e03fff15 	stw	zero,-4(fp)
  803164:	00003806 	br	803248 <pkt_is_viprotocol+0x364>


	// Check the IP Length
	if (pkt->ip.iplength_h != (char)DEFAULT_IP_LENGTH_H) return 0;
  803168:	e0bffb17 	ldw	r2,-20(fp)
  80316c:	10800403 	ldbu	r2,16(r2)
  803170:	10803fcc 	andi	r2,r2,255
  803174:	1080201c 	xori	r2,r2,128
  803178:	10bfe004 	addi	r2,r2,-128
  80317c:	1005003a 	cmpeq	r2,r2,zero
  803180:	1000021e 	bne	r2,zero,80318c <pkt_is_viprotocol+0x2a8>
  803184:	e03fff15 	stw	zero,-4(fp)
  803188:	00002f06 	br	803248 <pkt_is_viprotocol+0x364>
	else if (pkt->ip.iplength_l != (char)DEFAULT_IP_LENGTH_L) return 0;
  80318c:	e0bffb17 	ldw	r2,-20(fp)
  803190:	10800443 	ldbu	r2,17(r2)
  803194:	10803fcc 	andi	r2,r2,255
  803198:	1080201c 	xori	r2,r2,128
  80319c:	10bfe004 	addi	r2,r2,-128
  8031a0:	10801120 	cmpeqi	r2,r2,68
  8031a4:	1000021e 	bne	r2,zero,8031b0 <pkt_is_viprotocol+0x2cc>
  8031a8:	e03fff15 	stw	zero,-4(fp)
  8031ac:	00002606 	br	803248 <pkt_is_viprotocol+0x364>


	// Check the UDP header
	// Destination port
	if (pkt->ip.udp.dest_port_h != (char)DEFAULT_SOURCE_PORT_H) return 0;
  8031b0:	e0bffb17 	ldw	r2,-20(fp)
  8031b4:	10800903 	ldbu	r2,36(r2)
  8031b8:	10803fcc 	andi	r2,r2,255
  8031bc:	1080201c 	xori	r2,r2,128
  8031c0:	10bfe004 	addi	r2,r2,-128
  8031c4:	1005003a 	cmpeq	r2,r2,zero
  8031c8:	1000021e 	bne	r2,zero,8031d4 <pkt_is_viprotocol+0x2f0>
  8031cc:	e03fff15 	stw	zero,-4(fp)
  8031d0:	00001d06 	br	803248 <pkt_is_viprotocol+0x364>
	else if (pkt->ip.udp.dest_port_l != (char)DEFAULT_SOURCE_PORT_L) return 0;
  8031d4:	e0bffb17 	ldw	r2,-20(fp)
  8031d8:	10800943 	ldbu	r2,37(r2)
  8031dc:	10803fcc 	andi	r2,r2,255
  8031e0:	1080201c 	xori	r2,r2,128
  8031e4:	10bfe004 	addi	r2,r2,-128
  8031e8:	10801420 	cmpeqi	r2,r2,80
  8031ec:	1000021e 	bne	r2,zero,8031f8 <pkt_is_viprotocol+0x314>
  8031f0:	e03fff15 	stw	zero,-4(fp)
  8031f4:	00001406 	br	803248 <pkt_is_viprotocol+0x364>

	// UDP Length
	if (pkt->ip.udp.udplength_h != (char)DEFAULT_UDP_LENGTH_H) return 0;
  8031f8:	e0bffb17 	ldw	r2,-20(fp)
  8031fc:	10800983 	ldbu	r2,38(r2)
  803200:	10803fcc 	andi	r2,r2,255
  803204:	1080201c 	xori	r2,r2,128
  803208:	10bfe004 	addi	r2,r2,-128
  80320c:	1005003a 	cmpeq	r2,r2,zero
  803210:	1000021e 	bne	r2,zero,80321c <pkt_is_viprotocol+0x338>
  803214:	e03fff15 	stw	zero,-4(fp)
  803218:	00000b06 	br	803248 <pkt_is_viprotocol+0x364>
	else if (pkt->ip.udp.udplength_l != (char)DEFAULT_UDP_LENGTH_L) return 0;
  80321c:	e0bffb17 	ldw	r2,-20(fp)
  803220:	108009c3 	ldbu	r2,39(r2)
  803224:	10803fcc 	andi	r2,r2,255
  803228:	1080201c 	xori	r2,r2,128
  80322c:	10bfe004 	addi	r2,r2,-128
  803230:	10800c20 	cmpeqi	r2,r2,48
  803234:	1000021e 	bne	r2,zero,803240 <pkt_is_viprotocol+0x35c>
  803238:	e03fff15 	stw	zero,-4(fp)
  80323c:	00000206 	br	803248 <pkt_is_viprotocol+0x364>

	return 1; //the packet is a vi_protocol packet!!
  803240:	00800044 	movi	r2,1
  803244:	e0bfff15 	stw	r2,-4(fp)
  803248:	e0bfff17 	ldw	r2,-4(fp)
}
  80324c:	e037883a 	mov	sp,fp
  803250:	df000017 	ldw	fp,0(sp)
  803254:	dec00104 	addi	sp,sp,4
  803258:	f800283a 	ret

0080325c <pkt_is_arprequest>:


/* To determine if a received packet is an ARP Request for me */
int pkt_is_arprequest(unsigned char *buffer, int rx_len)
{
  80325c:	defffa04 	addi	sp,sp,-24
  803260:	df000515 	stw	fp,20(sp)
  803264:	df000504 	addi	fp,sp,20
  803268:	e13ffd15 	stw	r4,-12(fp)
  80326c:	e17ffe15 	stw	r5,-8(fp)

	// Packet IS an ARP Request packet asking me      --> return 1
	// Packet IS NOT an ARP Request packet asking me  --> return 0

	int pkt_length = 0;
  803270:	e03ffc15 	stw	zero,-16(fp)
	struct pkt_buffer_2 *pkt;			// ARP buffer
	pkt = (struct pkt_buffer_2 *)buffer;
  803274:	e0bffd17 	ldw	r2,-12(fp)
  803278:	e0bffb15 	stw	r2,-20(fp)

	pkt_length = rx_len - 4; // we don't count the four bytes of FCS (Ethernet checksum)
  80327c:	e0bffe17 	ldw	r2,-8(fp)
  803280:	10bfff04 	addi	r2,r2,-4
  803284:	e0bffc15 	stw	r2,-16(fp)

	// Ethertype ARP (0x0806)
	if ((pkt->ethertype_h == 0x08) && (pkt->ethertype_l == 0x06)) {
  803288:	e0bffb17 	ldw	r2,-20(fp)
  80328c:	10800303 	ldbu	r2,12(r2)
  803290:	10803fcc 	andi	r2,r2,255
  803294:	1080201c 	xori	r2,r2,128
  803298:	10bfe004 	addi	r2,r2,-128
  80329c:	10800218 	cmpnei	r2,r2,8
  8032a0:	10000e1e 	bne	r2,zero,8032dc <pkt_is_arprequest+0x80>
  8032a4:	e0bffb17 	ldw	r2,-20(fp)
  8032a8:	10800343 	ldbu	r2,13(r2)
  8032ac:	10803fcc 	andi	r2,r2,255
  8032b0:	1080201c 	xori	r2,r2,128
  8032b4:	10bfe004 	addi	r2,r2,-128
  8032b8:	10800198 	cmpnei	r2,r2,6
  8032bc:	1000071e 	bne	r2,zero,8032dc <pkt_is_arprequest+0x80>
		pkt_length = rx_len - 4;//is just an assignment to complete the if statement
  8032c0:	e0bffe17 	ldw	r2,-8(fp)
  8032c4:	10bfff04 	addi	r2,r2,-4
  8032c8:	e0bffc15 	stw	r2,-16(fp)
	} else {
		return 0;
	}

	// Check whether the packet length is the expected one
	if ((pkt_length == 42) || (pkt_length == 60)) {
  8032cc:	e0bffc17 	ldw	r2,-16(fp)
  8032d0:	10800aa0 	cmpeqi	r2,r2,42
  8032d4:	1000061e 	bne	r2,zero,8032f0 <pkt_is_arprequest+0x94>
  8032d8:	00000206 	br	8032e4 <pkt_is_arprequest+0x88>

	// Ethertype ARP (0x0806)
	if ((pkt->ethertype_h == 0x08) && (pkt->ethertype_l == 0x06)) {
		pkt_length = rx_len - 4;//is just an assignment to complete the if statement
	} else {
		return 0;
  8032dc:	e03fff15 	stw	zero,-4(fp)
  8032e0:	00006206 	br	80346c <pkt_is_arprequest+0x210>
	}

	// Check whether the packet length is the expected one
	if ((pkt_length == 42) || (pkt_length == 60)) {
  8032e4:	e0bffc17 	ldw	r2,-16(fp)
  8032e8:	10800f18 	cmpnei	r2,r2,60
  8032ec:	10000b1e 	bne	r2,zero,80331c <pkt_is_arprequest+0xc0>
		pkt_length = rx_len - 4; // it's just an assignment to complete the if statement
  8032f0:	e0bffe17 	ldw	r2,-8(fp)
  8032f4:	10bfff04 	addi	r2,r2,-4
  8032f8:	e0bffc15 	stw	r2,-16(fp)
		return 0;
	}

	// Check Ethernet header
	// MAC is broadcast
	if ( (pkt->mac_dest5 == (char)0xFF) && (pkt->mac_dest4 == (char)0xFF) && (pkt->mac_dest3 == (char)0xFF)
  8032fc:	e0bffb17 	ldw	r2,-20(fp)
  803300:	10800003 	ldbu	r2,0(r2)
  803304:	10803fcc 	andi	r2,r2,255
  803308:	1080201c 	xori	r2,r2,128
  80330c:	10bfe004 	addi	r2,r2,-128
  803310:	10bfffe0 	cmpeqi	r2,r2,-1
  803314:	1000031e 	bne	r2,zero,803324 <pkt_is_arprequest+0xc8>
  803318:	00002806 	br	8033bc <pkt_is_arprequest+0x160>

	// Check whether the packet length is the expected one
	if ((pkt_length == 42) || (pkt_length == 60)) {
		pkt_length = rx_len - 4; // it's just an assignment to complete the if statement
	} else {
		return 0;
  80331c:	e03fff15 	stw	zero,-4(fp)
  803320:	00005206 	br	80346c <pkt_is_arprequest+0x210>
	}

	// Check Ethernet header
	// MAC is broadcast
	if ( (pkt->mac_dest5 == (char)0xFF) && (pkt->mac_dest4 == (char)0xFF) && (pkt->mac_dest3 == (char)0xFF)
  803324:	e0bffb17 	ldw	r2,-20(fp)
  803328:	10800043 	ldbu	r2,1(r2)
  80332c:	10803fcc 	andi	r2,r2,255
  803330:	1080201c 	xori	r2,r2,128
  803334:	10bfe004 	addi	r2,r2,-128
  803338:	10bfffd8 	cmpnei	r2,r2,-1
  80333c:	10001f1e 	bne	r2,zero,8033bc <pkt_is_arprequest+0x160>
  803340:	e0bffb17 	ldw	r2,-20(fp)
  803344:	10800083 	ldbu	r2,2(r2)
  803348:	10803fcc 	andi	r2,r2,255
  80334c:	1080201c 	xori	r2,r2,128
  803350:	10bfe004 	addi	r2,r2,-128
  803354:	10bfffd8 	cmpnei	r2,r2,-1
  803358:	1000181e 	bne	r2,zero,8033bc <pkt_is_arprequest+0x160>
  80335c:	e0bffb17 	ldw	r2,-20(fp)
  803360:	108000c3 	ldbu	r2,3(r2)
  803364:	10803fcc 	andi	r2,r2,255
  803368:	1080201c 	xori	r2,r2,128
  80336c:	10bfe004 	addi	r2,r2,-128
  803370:	10bfffd8 	cmpnei	r2,r2,-1
  803374:	1000111e 	bne	r2,zero,8033bc <pkt_is_arprequest+0x160>
  803378:	e0bffb17 	ldw	r2,-20(fp)
  80337c:	10800103 	ldbu	r2,4(r2)
  803380:	10803fcc 	andi	r2,r2,255
  803384:	1080201c 	xori	r2,r2,128
  803388:	10bfe004 	addi	r2,r2,-128
  80338c:	10bfffd8 	cmpnei	r2,r2,-1
  803390:	10000a1e 	bne	r2,zero,8033bc <pkt_is_arprequest+0x160>
  803394:	e0bffb17 	ldw	r2,-20(fp)
  803398:	10800143 	ldbu	r2,5(r2)
  80339c:	10803fcc 	andi	r2,r2,255
  8033a0:	1080201c 	xori	r2,r2,128
  8033a4:	10bfe004 	addi	r2,r2,-128
  8033a8:	10bfffd8 	cmpnei	r2,r2,-1
  8033ac:	1000031e 	bne	r2,zero,8033bc <pkt_is_arprequest+0x160>
			&& (pkt->mac_dest2 == (char)0xFF) && (pkt->mac_dest1 == (char)0xFF) && (pkt->mac_dest0 == (char)0xFF)) {
		pkt_length = rx_len - 4; // it's just an assignment to complete the if statement
  8033b0:	e0bffe17 	ldw	r2,-8(fp)
  8033b4:	10bfff04 	addi	r2,r2,-4
  8033b8:	e0bffc15 	stw	r2,-16(fp)
	}

	// OPcode ARP request
	if (pkt->arp.opcode_l != 0x01) return 0;
  8033bc:	e0bffb17 	ldw	r2,-20(fp)
  8033c0:	10800543 	ldbu	r2,21(r2)
  8033c4:	10803fcc 	andi	r2,r2,255
  8033c8:	1080201c 	xori	r2,r2,128
  8033cc:	10bfe004 	addi	r2,r2,-128
  8033d0:	10800060 	cmpeqi	r2,r2,1
  8033d4:	1000021e 	bne	r2,zero,8033e0 <pkt_is_arprequest+0x184>
  8033d8:	e03fff15 	stw	zero,-4(fp)
  8033dc:	00002306 	br	80346c <pkt_is_arprequest+0x210>

	// We verify if the ARP Request is requesting my MAC (we see whether the target IP Address is my IP Address or not)
	if ( (pkt->arp.iptarget3 == (char)DEFAULT_IP_SOURCE_3) && (pkt->arp.iptarget2 == (char)DEFAULT_IP_SOURCE_2)
  8033e0:	e0bffb17 	ldw	r2,-20(fp)
  8033e4:	10800983 	ldbu	r2,38(r2)
  8033e8:	10803fcc 	andi	r2,r2,255
  8033ec:	1080201c 	xori	r2,r2,128
  8033f0:	10bfe004 	addi	r2,r2,-128
  8033f4:	10bfeb18 	cmpnei	r2,r2,-84
  8033f8:	10001b1e 	bne	r2,zero,803468 <pkt_is_arprequest+0x20c>
  8033fc:	e0bffb17 	ldw	r2,-20(fp)
  803400:	108009c3 	ldbu	r2,39(r2)
  803404:	10803fcc 	andi	r2,r2,255
  803408:	1080201c 	xori	r2,r2,128
  80340c:	10bfe004 	addi	r2,r2,-128
  803410:	108004d8 	cmpnei	r2,r2,19
  803414:	1000141e 	bne	r2,zero,803468 <pkt_is_arprequest+0x20c>
  803418:	e0bffb17 	ldw	r2,-20(fp)
  80341c:	10800a03 	ldbu	r2,40(r2)
  803420:	10803fcc 	andi	r2,r2,255
  803424:	1080201c 	xori	r2,r2,128
  803428:	10bfe004 	addi	r2,r2,-128
  80342c:	10800158 	cmpnei	r2,r2,5
  803430:	10000d1e 	bne	r2,zero,803468 <pkt_is_arprequest+0x20c>
  803434:	e0bffb17 	ldw	r2,-20(fp)
  803438:	10800a43 	ldbu	r2,41(r2)
  80343c:	10803fcc 	andi	r2,r2,255
  803440:	1080201c 	xori	r2,r2,128
  803444:	10bfe004 	addi	r2,r2,-128
  803448:	108016d8 	cmpnei	r2,r2,91
  80344c:	1000061e 	bne	r2,zero,803468 <pkt_is_arprequest+0x20c>
			&& (pkt->arp.iptarget1 == (char)DEFAULT_IP_SOURCE_1) && (pkt->arp.iptarget0 == (char)DEFAULT_IP_SOURCE_0)) {
		pkt_length = rx_len - 4; // it's just an assignment to complete the if statement
  803450:	e0bffe17 	ldw	r2,-8(fp)
  803454:	10bfff04 	addi	r2,r2,-4
  803458:	e0bffc15 	stw	r2,-16(fp)
	} else {
		return 0;
	}

	return 1;
  80345c:	00800044 	movi	r2,1
  803460:	e0bfff15 	stw	r2,-4(fp)
  803464:	00000106 	br	80346c <pkt_is_arprequest+0x210>
	// We verify if the ARP Request is requesting my MAC (we see whether the target IP Address is my IP Address or not)
	if ( (pkt->arp.iptarget3 == (char)DEFAULT_IP_SOURCE_3) && (pkt->arp.iptarget2 == (char)DEFAULT_IP_SOURCE_2)
			&& (pkt->arp.iptarget1 == (char)DEFAULT_IP_SOURCE_1) && (pkt->arp.iptarget0 == (char)DEFAULT_IP_SOURCE_0)) {
		pkt_length = rx_len - 4; // it's just an assignment to complete the if statement
	} else {
		return 0;
  803468:	e03fff15 	stw	zero,-4(fp)
  80346c:	e0bfff17 	ldw	r2,-4(fp)
	}

	return 1;
}
  803470:	e037883a 	mov	sp,fp
  803474:	df000017 	ldw	fp,0(sp)
  803478:	dec00104 	addi	sp,sp,4
  80347c:	f800283a 	ret

00803480 <pkt_changes_to_send>:


/* Change header parameters in order to send the packet to the client */
void pkt_changes_to_send(struct pkt_buffer *pkt)
{
  803480:	defffb04 	addi	sp,sp,-20
  803484:	dfc00415 	stw	ra,16(sp)
  803488:	df000315 	stw	fp,12(sp)
  80348c:	df000304 	addi	fp,sp,12
  803490:	e13fff15 	stw	r4,-4(fp)
	//

	unsigned int ip_checksum, udp_checksum;

	// Ethernet changes
	pkt->mac_dest0 = pkt->mac_source0;
  803494:	e0bfff17 	ldw	r2,-4(fp)
  803498:	10c002c3 	ldbu	r3,11(r2)
  80349c:	e0bfff17 	ldw	r2,-4(fp)
  8034a0:	10c00145 	stb	r3,5(r2)
	pkt->mac_dest1 = pkt->mac_source1;
  8034a4:	e0bfff17 	ldw	r2,-4(fp)
  8034a8:	10c00283 	ldbu	r3,10(r2)
  8034ac:	e0bfff17 	ldw	r2,-4(fp)
  8034b0:	10c00105 	stb	r3,4(r2)
	pkt->mac_dest2 = pkt->mac_source2;
  8034b4:	e0bfff17 	ldw	r2,-4(fp)
  8034b8:	10c00243 	ldbu	r3,9(r2)
  8034bc:	e0bfff17 	ldw	r2,-4(fp)
  8034c0:	10c000c5 	stb	r3,3(r2)
	pkt->mac_dest3 = pkt->mac_source3;
  8034c4:	e0bfff17 	ldw	r2,-4(fp)
  8034c8:	10c00203 	ldbu	r3,8(r2)
  8034cc:	e0bfff17 	ldw	r2,-4(fp)
  8034d0:	10c00085 	stb	r3,2(r2)
	pkt->mac_dest4 = pkt->mac_source4;
  8034d4:	e0bfff17 	ldw	r2,-4(fp)
  8034d8:	10c001c3 	ldbu	r3,7(r2)
  8034dc:	e0bfff17 	ldw	r2,-4(fp)
  8034e0:	10c00045 	stb	r3,1(r2)
	pkt->mac_dest5 = pkt->mac_source5;
  8034e4:	e0bfff17 	ldw	r2,-4(fp)
  8034e8:	10c00183 	ldbu	r3,6(r2)
  8034ec:	e0bfff17 	ldw	r2,-4(fp)
  8034f0:	10c00005 	stb	r3,0(r2)
	pkt->mac_source0 = DEFAULT_SOURCE_MAC_0;
  8034f4:	e0ffff17 	ldw	r3,-4(fp)
  8034f8:	00bfe8c4 	movi	r2,-93
  8034fc:	188002c5 	stb	r2,11(r3)
	pkt->mac_source1 = DEFAULT_SOURCE_MAC_1;
  803500:	e0ffff17 	ldw	r3,-4(fp)
  803504:	008019c4 	movi	r2,103
  803508:	18800285 	stb	r2,10(r3)
	pkt->mac_source2 = DEFAULT_SOURCE_MAC_2;
  80350c:	e0ffff17 	ldw	r3,-4(fp)
  803510:	00800504 	movi	r2,20
  803514:	18800245 	stb	r2,9(r3)
	pkt->mac_source3 = DEFAULT_SOURCE_MAC_3;
  803518:	e0ffff17 	ldw	r3,-4(fp)
  80351c:	00800bc4 	movi	r2,47
  803520:	18800205 	stb	r2,8(r3)
	pkt->mac_source4 = DEFAULT_SOURCE_MAC_4;
  803524:	e0ffff17 	ldw	r3,-4(fp)
  803528:	00bfe004 	movi	r2,-128
  80352c:	188001c5 	stb	r2,7(r3)
	pkt->mac_source5 = DEFAULT_SOURCE_MAC_5;
  803530:	e0bfff17 	ldw	r2,-4(fp)
  803534:	10000185 	stb	zero,6(r2)

	// IP changes
	pkt->ip.ttl = DEFAULT_TTL;
  803538:	e0ffff17 	ldw	r3,-4(fp)
  80353c:	00bfe004 	movi	r2,-128
  803540:	18800585 	stb	r2,22(r3)
	pkt->ip.ipdest0 = pkt->ip.ipsource0;
  803544:	e0bfff17 	ldw	r2,-4(fp)
  803548:	10c00743 	ldbu	r3,29(r2)
  80354c:	e0bfff17 	ldw	r2,-4(fp)
  803550:	10c00845 	stb	r3,33(r2)
	pkt->ip.ipdest1 = pkt->ip.ipsource1;
  803554:	e0bfff17 	ldw	r2,-4(fp)
  803558:	10c00703 	ldbu	r3,28(r2)
  80355c:	e0bfff17 	ldw	r2,-4(fp)
  803560:	10c00805 	stb	r3,32(r2)
	pkt->ip.ipdest2 = pkt->ip.ipsource2;
  803564:	e0bfff17 	ldw	r2,-4(fp)
  803568:	10c006c3 	ldbu	r3,27(r2)
  80356c:	e0bfff17 	ldw	r2,-4(fp)
  803570:	10c007c5 	stb	r3,31(r2)
	pkt->ip.ipdest3 = pkt->ip.ipsource3;
  803574:	e0bfff17 	ldw	r2,-4(fp)
  803578:	10c00683 	ldbu	r3,26(r2)
  80357c:	e0bfff17 	ldw	r2,-4(fp)
  803580:	10c00785 	stb	r3,30(r2)
	pkt->ip.ipsource0 = DEFAULT_IP_SOURCE_0;
  803584:	e0ffff17 	ldw	r3,-4(fp)
  803588:	008016c4 	movi	r2,91
  80358c:	18800745 	stb	r2,29(r3)
	pkt->ip.ipsource1 = DEFAULT_IP_SOURCE_1;
  803590:	e0ffff17 	ldw	r3,-4(fp)
  803594:	00800144 	movi	r2,5
  803598:	18800705 	stb	r2,28(r3)
	pkt->ip.ipsource2 = DEFAULT_IP_SOURCE_2;
  80359c:	e0ffff17 	ldw	r3,-4(fp)
  8035a0:	008004c4 	movi	r2,19
  8035a4:	188006c5 	stb	r2,27(r3)
	pkt->ip.ipsource3 = DEFAULT_IP_SOURCE_3;
  8035a8:	e0ffff17 	ldw	r3,-4(fp)
  8035ac:	00bfeb04 	movi	r2,-84
  8035b0:	18800685 	stb	r2,26(r3)

	pkt->ip.ipcrc_l = 0x00;	// we clear it because the field is used to ...
  8035b4:	e0bfff17 	ldw	r2,-4(fp)
  8035b8:	10000645 	stb	zero,25(r2)
	pkt->ip.ipcrc_h = 0x00;	// ... calculate the IP checksum
  8035bc:	e0bfff17 	ldw	r2,-4(fp)
  8035c0:	10000605 	stb	zero,24(r2)
	ip_checksum = calculate_ip_checksum(pkt);
  8035c4:	e13fff17 	ldw	r4,-4(fp)
  8035c8:	0802dd40 	call	802dd4 <calculate_ip_checksum>
  8035cc:	e0bffe15 	stw	r2,-8(fp)
	pkt->ip.ipcrc_l = (char)ip_checksum&0xff;
  8035d0:	e0bffe17 	ldw	r2,-8(fp)
  8035d4:	1007883a 	mov	r3,r2
  8035d8:	00bfffc4 	movi	r2,-1
  8035dc:	1884703a 	and	r2,r3,r2
  8035e0:	1007883a 	mov	r3,r2
  8035e4:	e0bfff17 	ldw	r2,-4(fp)
  8035e8:	10c00645 	stb	r3,25(r2)
	pkt->ip.ipcrc_h = (char)(ip_checksum >> 8)&0xff;
  8035ec:	e0bffe17 	ldw	r2,-8(fp)
  8035f0:	1004d23a 	srli	r2,r2,8
  8035f4:	1007883a 	mov	r3,r2
  8035f8:	00bfffc4 	movi	r2,-1
  8035fc:	1884703a 	and	r2,r3,r2
  803600:	1007883a 	mov	r3,r2
  803604:	e0bfff17 	ldw	r2,-4(fp)
  803608:	10c00605 	stb	r3,24(r2)

	// UDP changes
	pkt->ip.udp.dest_port_h = pkt->ip.udp.source_port_h;
  80360c:	e0bfff17 	ldw	r2,-4(fp)
  803610:	10c00883 	ldbu	r3,34(r2)
  803614:	e0bfff17 	ldw	r2,-4(fp)
  803618:	10c00905 	stb	r3,36(r2)
	pkt->ip.udp.dest_port_l = pkt->ip.udp.source_port_l;
  80361c:	e0bfff17 	ldw	r2,-4(fp)
  803620:	10c008c3 	ldbu	r3,35(r2)
  803624:	e0bfff17 	ldw	r2,-4(fp)
  803628:	10c00945 	stb	r3,37(r2)
	pkt->ip.udp.source_port_h = DEFAULT_SOURCE_PORT_H;
  80362c:	e0bfff17 	ldw	r2,-4(fp)
  803630:	10000885 	stb	zero,34(r2)
	pkt->ip.udp.source_port_l = DEFAULT_SOURCE_PORT_L;
  803634:	e0ffff17 	ldw	r3,-4(fp)
  803638:	00801404 	movi	r2,80
  80363c:	188008c5 	stb	r2,35(r3)

	pkt->ip.udp.crc_h = 0x00; // we clear it because the field is used to ...
  803640:	e0bfff17 	ldw	r2,-4(fp)
  803644:	10000a05 	stb	zero,40(r2)
	pkt->ip.udp.crc_l = 0x00; // ... calculate the UDP checksum
  803648:	e0bfff17 	ldw	r2,-4(fp)
  80364c:	10000a45 	stb	zero,41(r2)
	udp_checksum = calculate_udp_checksum(pkt); // UDP checksum
  803650:	e13fff17 	ldw	r4,-4(fp)
  803654:	0802ec00 	call	802ec0 <calculate_udp_checksum>
  803658:	e0bffd15 	stw	r2,-12(fp)
	pkt->ip.udp.crc_l = (char)udp_checksum&0xff;
  80365c:	e0bffd17 	ldw	r2,-12(fp)
  803660:	1007883a 	mov	r3,r2
  803664:	00bfffc4 	movi	r2,-1
  803668:	1884703a 	and	r2,r3,r2
  80366c:	1007883a 	mov	r3,r2
  803670:	e0bfff17 	ldw	r2,-4(fp)
  803674:	10c00a45 	stb	r3,41(r2)
	pkt->ip.udp.crc_h = (char)(udp_checksum >> 8)&0xff;
  803678:	e0bffd17 	ldw	r2,-12(fp)
  80367c:	1004d23a 	srli	r2,r2,8
  803680:	1007883a 	mov	r3,r2
  803684:	00bfffc4 	movi	r2,-1
  803688:	1884703a 	and	r2,r3,r2
  80368c:	1007883a 	mov	r3,r2
  803690:	e0bfff17 	ldw	r2,-4(fp)
  803694:	10c00a05 	stb	r3,40(r2)

}
  803698:	e037883a 	mov	sp,fp
  80369c:	dfc00117 	ldw	ra,4(sp)
  8036a0:	df000017 	ldw	fp,0(sp)
  8036a4:	dec00204 	addi	sp,sp,8
  8036a8:	f800283a 	ret

008036ac <pkt_arp_changes_to_send>:


/* Change ARP Request fields in order to send the ARP Replay */
void pkt_arp_changes_to_send(struct pkt_buffer_2 *pkt)
{
  8036ac:	defffe04 	addi	sp,sp,-8
  8036b0:	df000115 	stw	fp,4(sp)
  8036b4:	df000104 	addi	fp,sp,4
  8036b8:	e13fff15 	stw	r4,-4(fp)

	// Ethernet Header
	// Changes: MAC dest/source
	pkt->mac_dest5 = pkt->arp.mac_sender5;
  8036bc:	e0bfff17 	ldw	r2,-4(fp)
  8036c0:	10c00583 	ldbu	r3,22(r2)
  8036c4:	e0bfff17 	ldw	r2,-4(fp)
  8036c8:	10c00005 	stb	r3,0(r2)
	pkt->mac_dest4 = pkt->arp.mac_sender4;
  8036cc:	e0bfff17 	ldw	r2,-4(fp)
  8036d0:	10c005c3 	ldbu	r3,23(r2)
  8036d4:	e0bfff17 	ldw	r2,-4(fp)
  8036d8:	10c00045 	stb	r3,1(r2)
	pkt->mac_dest3 = pkt->arp.mac_sender3;
  8036dc:	e0bfff17 	ldw	r2,-4(fp)
  8036e0:	10c00603 	ldbu	r3,24(r2)
  8036e4:	e0bfff17 	ldw	r2,-4(fp)
  8036e8:	10c00085 	stb	r3,2(r2)
	pkt->mac_dest2 = pkt->arp.mac_sender2;
  8036ec:	e0bfff17 	ldw	r2,-4(fp)
  8036f0:	10c00643 	ldbu	r3,25(r2)
  8036f4:	e0bfff17 	ldw	r2,-4(fp)
  8036f8:	10c000c5 	stb	r3,3(r2)
	pkt->mac_dest1 = pkt->arp.mac_sender1;
  8036fc:	e0bfff17 	ldw	r2,-4(fp)
  803700:	10c00683 	ldbu	r3,26(r2)
  803704:	e0bfff17 	ldw	r2,-4(fp)
  803708:	10c00105 	stb	r3,4(r2)
	pkt->mac_dest0 = pkt->arp.mac_sender0;
  80370c:	e0bfff17 	ldw	r2,-4(fp)
  803710:	10c006c3 	ldbu	r3,27(r2)
  803714:	e0bfff17 	ldw	r2,-4(fp)
  803718:	10c00145 	stb	r3,5(r2)

	pkt->mac_source5 = DEFAULT_SOURCE_MAC_5;
  80371c:	e0bfff17 	ldw	r2,-4(fp)
  803720:	10000185 	stb	zero,6(r2)
	pkt->mac_source4 = DEFAULT_SOURCE_MAC_4;
  803724:	e0ffff17 	ldw	r3,-4(fp)
  803728:	00bfe004 	movi	r2,-128
  80372c:	188001c5 	stb	r2,7(r3)
	pkt->mac_source3 = DEFAULT_SOURCE_MAC_3;
  803730:	e0ffff17 	ldw	r3,-4(fp)
  803734:	00800bc4 	movi	r2,47
  803738:	18800205 	stb	r2,8(r3)
	pkt->mac_source2 = DEFAULT_SOURCE_MAC_2;
  80373c:	e0ffff17 	ldw	r3,-4(fp)
  803740:	00800504 	movi	r2,20
  803744:	18800245 	stb	r2,9(r3)
	pkt->mac_source1 = DEFAULT_SOURCE_MAC_1;
  803748:	e0ffff17 	ldw	r3,-4(fp)
  80374c:	008019c4 	movi	r2,103
  803750:	18800285 	stb	r2,10(r3)
	pkt->mac_source0 = DEFAULT_SOURCE_MAC_0;
  803754:	e0ffff17 	ldw	r3,-4(fp)
  803758:	00bfe8c4 	movi	r2,-93
  80375c:	188002c5 	stb	r2,11(r3)

	// ARP Header
	// Changes: OPCode, Sender/Target MAC, Sender/Target IP
	pkt->arp.opcode_l = 0x02; // ARP Replay
  803760:	e0ffff17 	ldw	r3,-4(fp)
  803764:	00800084 	movi	r2,2
  803768:	18800545 	stb	r2,21(r3)

	pkt->arp.mac_target5 = pkt->arp.mac_sender5;
  80376c:	e0bfff17 	ldw	r2,-4(fp)
  803770:	10c00583 	ldbu	r3,22(r2)
  803774:	e0bfff17 	ldw	r2,-4(fp)
  803778:	10c00805 	stb	r3,32(r2)
	pkt->arp.mac_target4 = pkt->arp.mac_sender4;
  80377c:	e0bfff17 	ldw	r2,-4(fp)
  803780:	10c005c3 	ldbu	r3,23(r2)
  803784:	e0bfff17 	ldw	r2,-4(fp)
  803788:	10c00845 	stb	r3,33(r2)
	pkt->arp.mac_target3 = pkt->arp.mac_sender3;
  80378c:	e0bfff17 	ldw	r2,-4(fp)
  803790:	10c00603 	ldbu	r3,24(r2)
  803794:	e0bfff17 	ldw	r2,-4(fp)
  803798:	10c00885 	stb	r3,34(r2)
	pkt->arp.mac_target2 = pkt->arp.mac_sender2;
  80379c:	e0bfff17 	ldw	r2,-4(fp)
  8037a0:	10c00643 	ldbu	r3,25(r2)
  8037a4:	e0bfff17 	ldw	r2,-4(fp)
  8037a8:	10c008c5 	stb	r3,35(r2)
	pkt->arp.mac_target1 = pkt->arp.mac_sender1;
  8037ac:	e0bfff17 	ldw	r2,-4(fp)
  8037b0:	10c00683 	ldbu	r3,26(r2)
  8037b4:	e0bfff17 	ldw	r2,-4(fp)
  8037b8:	10c00905 	stb	r3,36(r2)
	pkt->arp.mac_target0 = pkt->arp.mac_sender0;
  8037bc:	e0bfff17 	ldw	r2,-4(fp)
  8037c0:	10c006c3 	ldbu	r3,27(r2)
  8037c4:	e0bfff17 	ldw	r2,-4(fp)
  8037c8:	10c00945 	stb	r3,37(r2)

	pkt->arp.iptarget3 = pkt->arp.ipsender3;
  8037cc:	e0bfff17 	ldw	r2,-4(fp)
  8037d0:	10c00703 	ldbu	r3,28(r2)
  8037d4:	e0bfff17 	ldw	r2,-4(fp)
  8037d8:	10c00985 	stb	r3,38(r2)
	pkt->arp.iptarget2 = pkt->arp.ipsender2;
  8037dc:	e0bfff17 	ldw	r2,-4(fp)
  8037e0:	10c00743 	ldbu	r3,29(r2)
  8037e4:	e0bfff17 	ldw	r2,-4(fp)
  8037e8:	10c009c5 	stb	r3,39(r2)
	pkt->arp.iptarget1 = pkt->arp.ipsender1;
  8037ec:	e0bfff17 	ldw	r2,-4(fp)
  8037f0:	10c00783 	ldbu	r3,30(r2)
  8037f4:	e0bfff17 	ldw	r2,-4(fp)
  8037f8:	10c00a05 	stb	r3,40(r2)
	pkt->arp.iptarget0 = pkt->arp.ipsender0;
  8037fc:	e0bfff17 	ldw	r2,-4(fp)
  803800:	10c007c3 	ldbu	r3,31(r2)
  803804:	e0bfff17 	ldw	r2,-4(fp)
  803808:	10c00a45 	stb	r3,41(r2)

	pkt->arp.mac_sender5 = DEFAULT_SOURCE_MAC_5;
  80380c:	e0bfff17 	ldw	r2,-4(fp)
  803810:	10000585 	stb	zero,22(r2)
	pkt->arp.mac_sender4 = DEFAULT_SOURCE_MAC_4;
  803814:	e0ffff17 	ldw	r3,-4(fp)
  803818:	00bfe004 	movi	r2,-128
  80381c:	188005c5 	stb	r2,23(r3)
	pkt->arp.mac_sender3 = DEFAULT_SOURCE_MAC_3;
  803820:	e0ffff17 	ldw	r3,-4(fp)
  803824:	00800bc4 	movi	r2,47
  803828:	18800605 	stb	r2,24(r3)
	pkt->arp.mac_sender2 = DEFAULT_SOURCE_MAC_2;
  80382c:	e0ffff17 	ldw	r3,-4(fp)
  803830:	00800504 	movi	r2,20
  803834:	18800645 	stb	r2,25(r3)
	pkt->arp.mac_sender1 = DEFAULT_SOURCE_MAC_1;
  803838:	e0ffff17 	ldw	r3,-4(fp)
  80383c:	008019c4 	movi	r2,103
  803840:	18800685 	stb	r2,26(r3)
	pkt->arp.mac_sender0 = DEFAULT_SOURCE_MAC_0;
  803844:	e0ffff17 	ldw	r3,-4(fp)
  803848:	00bfe8c4 	movi	r2,-93
  80384c:	188006c5 	stb	r2,27(r3)

	pkt->arp.ipsender3 = DEFAULT_IP_SOURCE_3;
  803850:	e0ffff17 	ldw	r3,-4(fp)
  803854:	00bfeb04 	movi	r2,-84
  803858:	18800705 	stb	r2,28(r3)
	pkt->arp.ipsender2 = DEFAULT_IP_SOURCE_2;
  80385c:	e0ffff17 	ldw	r3,-4(fp)
  803860:	008004c4 	movi	r2,19
  803864:	18800745 	stb	r2,29(r3)
	pkt->arp.ipsender1 = DEFAULT_IP_SOURCE_1;
  803868:	e0ffff17 	ldw	r3,-4(fp)
  80386c:	00800144 	movi	r2,5
  803870:	18800785 	stb	r2,30(r3)
	pkt->arp.ipsender0 = DEFAULT_IP_SOURCE_0;
  803874:	e0ffff17 	ldw	r3,-4(fp)
  803878:	008016c4 	movi	r2,91
  80387c:	188007c5 	stb	r2,31(r3)

}
  803880:	e037883a 	mov	sp,fp
  803884:	df000017 	ldw	fp,0(sp)
  803888:	dec00104 	addi	sp,sp,4
  80388c:	f800283a 	ret

00803890 <pow>:
  803890:	deffee04 	addi	sp,sp,-72
  803894:	ddc01015 	stw	r23,64(sp)
  803898:	05c020b4 	movhi	r23,130
  80389c:	bdfb2704 	addi	r23,r23,-4964
  8038a0:	dd800f15 	stw	r22,60(sp)
  8038a4:	dd400e15 	stw	r21,56(sp)
  8038a8:	dd000d15 	stw	r20,52(sp)
  8038ac:	dcc00c15 	stw	r19,48(sp)
  8038b0:	dc800b15 	stw	r18,44(sp)
  8038b4:	dc400a15 	stw	r17,40(sp)
  8038b8:	dc000915 	stw	r16,36(sp)
  8038bc:	2029883a 	mov	r20,r4
  8038c0:	dfc01115 	stw	ra,68(sp)
  8038c4:	3025883a 	mov	r18,r6
  8038c8:	282b883a 	mov	r21,r5
  8038cc:	3827883a 	mov	r19,r7
  8038d0:	0803d180 	call	803d18 <__ieee754_pow>
  8038d4:	b9000017 	ldw	r4,0(r23)
  8038d8:	05bfffc4 	movi	r22,-1
  8038dc:	1021883a 	mov	r16,r2
  8038e0:	1823883a 	mov	r17,r3
  8038e4:	25800426 	beq	r4,r22,8038f8 <pow+0x68>
  8038e8:	9009883a 	mov	r4,r18
  8038ec:	980b883a 	mov	r5,r19
  8038f0:	08053140 	call	805314 <__isnand>
  8038f4:	10000d26 	beq	r2,zero,80392c <pow+0x9c>
  8038f8:	8005883a 	mov	r2,r16
  8038fc:	8807883a 	mov	r3,r17
  803900:	dfc01117 	ldw	ra,68(sp)
  803904:	ddc01017 	ldw	r23,64(sp)
  803908:	dd800f17 	ldw	r22,60(sp)
  80390c:	dd400e17 	ldw	r21,56(sp)
  803910:	dd000d17 	ldw	r20,52(sp)
  803914:	dcc00c17 	ldw	r19,48(sp)
  803918:	dc800b17 	ldw	r18,44(sp)
  80391c:	dc400a17 	ldw	r17,40(sp)
  803920:	dc000917 	ldw	r16,36(sp)
  803924:	dec01204 	addi	sp,sp,72
  803928:	f800283a 	ret
  80392c:	a009883a 	mov	r4,r20
  803930:	a80b883a 	mov	r5,r21
  803934:	08053140 	call	805314 <__isnand>
  803938:	1000151e 	bne	r2,zero,803990 <pow+0x100>
  80393c:	000d883a 	mov	r6,zero
  803940:	000f883a 	mov	r7,zero
  803944:	a009883a 	mov	r4,r20
  803948:	a80b883a 	mov	r5,r21
  80394c:	0806bdc0 	call	806bdc <__eqdf2>
  803950:	1000541e 	bne	r2,zero,803aa4 <pow+0x214>
  803954:	000d883a 	mov	r6,zero
  803958:	000f883a 	mov	r7,zero
  80395c:	9009883a 	mov	r4,r18
  803960:	980b883a 	mov	r5,r19
  803964:	0806bdc0 	call	806bdc <__eqdf2>
  803968:	10002c1e 	bne	r2,zero,803a1c <pow+0x18c>
  80396c:	b8800017 	ldw	r2,0(r23)
  803970:	d8000615 	stw	zero,24(sp)
  803974:	d8000715 	stw	zero,28(sp)
  803978:	10001226 	beq	r2,zero,8039c4 <pow+0x134>
  80397c:	008ffc34 	movhi	r2,16368
  803980:	d8800715 	stw	r2,28(sp)
  803984:	dc000617 	ldw	r16,24(sp)
  803988:	dc400717 	ldw	r17,28(sp)
  80398c:	003fda06 	br	8038f8 <pow+0x68>
  803990:	000d883a 	mov	r6,zero
  803994:	000f883a 	mov	r7,zero
  803998:	9009883a 	mov	r4,r18
  80399c:	980b883a 	mov	r5,r19
  8039a0:	0806bdc0 	call	806bdc <__eqdf2>
  8039a4:	103fd41e 	bne	r2,zero,8038f8 <pow+0x68>
  8039a8:	b8c00017 	ldw	r3,0(r23)
  8039ac:	010ffc34 	movhi	r4,16368
  8039b0:	d8000615 	stw	zero,24(sp)
  8039b4:	d9000715 	stw	r4,28(sp)
  8039b8:	1d801526 	beq	r3,r22,803a10 <pow+0x180>
  8039bc:	00800084 	movi	r2,2
  8039c0:	18801326 	beq	r3,r2,803a10 <pow+0x180>
  8039c4:	008020b4 	movhi	r2,130
  8039c8:	10b28104 	addi	r2,r2,-13820
  8039cc:	00c00044 	movi	r3,1
  8039d0:	d809883a 	mov	r4,sp
  8039d4:	dcc00515 	stw	r19,20(sp)
  8039d8:	dd400315 	stw	r21,12(sp)
  8039dc:	d8800115 	stw	r2,4(sp)
  8039e0:	d8c00015 	stw	r3,0(sp)
  8039e4:	dc800415 	stw	r18,16(sp)
  8039e8:	dd000215 	stw	r20,8(sp)
  8039ec:	d8000815 	stw	zero,32(sp)
  8039f0:	08053440 	call	805344 <matherr>
  8039f4:	10002726 	beq	r2,zero,803a94 <pow+0x204>
  8039f8:	d8800817 	ldw	r2,32(sp)
  8039fc:	103fe126 	beq	r2,zero,803984 <pow+0xf4>
  803a00:	0807d900 	call	807d90 <__errno>
  803a04:	d8c00817 	ldw	r3,32(sp)
  803a08:	10c00015 	stw	r3,0(r2)
  803a0c:	003fdd06 	br	803984 <pow+0xf4>
  803a10:	d9000715 	stw	r4,28(sp)
  803a14:	d8000615 	stw	zero,24(sp)
  803a18:	003fda06 	br	803984 <pow+0xf4>
  803a1c:	9009883a 	mov	r4,r18
  803a20:	980b883a 	mov	r5,r19
  803a24:	08052f80 	call	8052f8 <finite>
  803a28:	103fb326 	beq	r2,zero,8038f8 <pow+0x68>
  803a2c:	000d883a 	mov	r6,zero
  803a30:	000f883a 	mov	r7,zero
  803a34:	9009883a 	mov	r4,r18
  803a38:	980b883a 	mov	r5,r19
  803a3c:	0806dfc0 	call	806dfc <__ltdf2>
  803a40:	103fad0e 	bge	r2,zero,8038f8 <pow+0x68>
  803a44:	b9000017 	ldw	r4,0(r23)
  803a48:	00800044 	movi	r2,1
  803a4c:	00c020b4 	movhi	r3,130
  803a50:	18f28104 	addi	r3,r3,-13820
  803a54:	d8800015 	stw	r2,0(sp)
  803a58:	d8c00115 	stw	r3,4(sp)
  803a5c:	dd400315 	stw	r21,12(sp)
  803a60:	dcc00515 	stw	r19,20(sp)
  803a64:	d8000815 	stw	zero,32(sp)
  803a68:	dd000215 	stw	r20,8(sp)
  803a6c:	dc800415 	stw	r18,16(sp)
  803a70:	20005626 	beq	r4,zero,803bcc <pow+0x33c>
  803a74:	00bffc34 	movhi	r2,65520
  803a78:	d8800715 	stw	r2,28(sp)
  803a7c:	00800084 	movi	r2,2
  803a80:	d8000615 	stw	zero,24(sp)
  803a84:	20800326 	beq	r4,r2,803a94 <pow+0x204>
  803a88:	d809883a 	mov	r4,sp
  803a8c:	08053440 	call	805344 <matherr>
  803a90:	103fd91e 	bne	r2,zero,8039f8 <pow+0x168>
  803a94:	0807d900 	call	807d90 <__errno>
  803a98:	00c00844 	movi	r3,33
  803a9c:	10c00015 	stw	r3,0(r2)
  803aa0:	003fd506 	br	8039f8 <pow+0x168>
  803aa4:	8009883a 	mov	r4,r16
  803aa8:	880b883a 	mov	r5,r17
  803aac:	08052f80 	call	8052f8 <finite>
  803ab0:	10002426 	beq	r2,zero,803b44 <pow+0x2b4>
  803ab4:	000d883a 	mov	r6,zero
  803ab8:	000f883a 	mov	r7,zero
  803abc:	8009883a 	mov	r4,r16
  803ac0:	880b883a 	mov	r5,r17
  803ac4:	0806bdc0 	call	806bdc <__eqdf2>
  803ac8:	103f8b1e 	bne	r2,zero,8038f8 <pow+0x68>
  803acc:	a009883a 	mov	r4,r20
  803ad0:	a80b883a 	mov	r5,r21
  803ad4:	08052f80 	call	8052f8 <finite>
  803ad8:	103f8726 	beq	r2,zero,8038f8 <pow+0x68>
  803adc:	9009883a 	mov	r4,r18
  803ae0:	980b883a 	mov	r5,r19
  803ae4:	08052f80 	call	8052f8 <finite>
  803ae8:	103f8326 	beq	r2,zero,8038f8 <pow+0x68>
  803aec:	b9000017 	ldw	r4,0(r23)
  803af0:	00800104 	movi	r2,4
  803af4:	d8800015 	stw	r2,0(sp)
  803af8:	00c020b4 	movhi	r3,130
  803afc:	18f28104 	addi	r3,r3,-13820
  803b00:	00800084 	movi	r2,2
  803b04:	d8c00115 	stw	r3,4(sp)
  803b08:	dd400315 	stw	r21,12(sp)
  803b0c:	dcc00515 	stw	r19,20(sp)
  803b10:	d8000815 	stw	zero,32(sp)
  803b14:	dd000215 	stw	r20,8(sp)
  803b18:	dc800415 	stw	r18,16(sp)
  803b1c:	d8000615 	stw	zero,24(sp)
  803b20:	d8000715 	stw	zero,28(sp)
  803b24:	20800326 	beq	r4,r2,803b34 <pow+0x2a4>
  803b28:	d809883a 	mov	r4,sp
  803b2c:	08053440 	call	805344 <matherr>
  803b30:	103fb11e 	bne	r2,zero,8039f8 <pow+0x168>
  803b34:	0807d900 	call	807d90 <__errno>
  803b38:	00c00884 	movi	r3,34
  803b3c:	10c00015 	stw	r3,0(r2)
  803b40:	003fad06 	br	8039f8 <pow+0x168>
  803b44:	a009883a 	mov	r4,r20
  803b48:	a80b883a 	mov	r5,r21
  803b4c:	08052f80 	call	8052f8 <finite>
  803b50:	103fd826 	beq	r2,zero,803ab4 <pow+0x224>
  803b54:	9009883a 	mov	r4,r18
  803b58:	980b883a 	mov	r5,r19
  803b5c:	08052f80 	call	8052f8 <finite>
  803b60:	103fd426 	beq	r2,zero,803ab4 <pow+0x224>
  803b64:	880b883a 	mov	r5,r17
  803b68:	8009883a 	mov	r4,r16
  803b6c:	08053140 	call	805314 <__isnand>
  803b70:	10001926 	beq	r2,zero,803bd8 <pow+0x348>
  803b74:	bc000017 	ldw	r16,0(r23)
  803b78:	00800044 	movi	r2,1
  803b7c:	00c020b4 	movhi	r3,130
  803b80:	18f28104 	addi	r3,r3,-13820
  803b84:	d8800015 	stw	r2,0(sp)
  803b88:	d8c00115 	stw	r3,4(sp)
  803b8c:	dd400315 	stw	r21,12(sp)
  803b90:	dcc00515 	stw	r19,20(sp)
  803b94:	d8000815 	stw	zero,32(sp)
  803b98:	dd000215 	stw	r20,8(sp)
  803b9c:	dc800415 	stw	r18,16(sp)
  803ba0:	80000a26 	beq	r16,zero,803bcc <pow+0x33c>
  803ba4:	0009883a 	mov	r4,zero
  803ba8:	000d883a 	mov	r6,zero
  803bac:	000b883a 	mov	r5,zero
  803bb0:	000f883a 	mov	r7,zero
  803bb4:	08069840 	call	806984 <__divdf3>
  803bb8:	d8800615 	stw	r2,24(sp)
  803bbc:	00800084 	movi	r2,2
  803bc0:	d8c00715 	stw	r3,28(sp)
  803bc4:	80bfb01e 	bne	r16,r2,803a88 <pow+0x1f8>
  803bc8:	003fb206 	br	803a94 <pow+0x204>
  803bcc:	d8000615 	stw	zero,24(sp)
  803bd0:	d8000715 	stw	zero,28(sp)
  803bd4:	003fac06 	br	803a88 <pow+0x1f8>
  803bd8:	b8800017 	ldw	r2,0(r23)
  803bdc:	00c000c4 	movi	r3,3
  803be0:	010020b4 	movhi	r4,130
  803be4:	21328104 	addi	r4,r4,-13820
  803be8:	d8c00015 	stw	r3,0(sp)
  803bec:	d9000115 	stw	r4,4(sp)
  803bf0:	d8000815 	stw	zero,32(sp)
  803bf4:	dd000215 	stw	r20,8(sp)
  803bf8:	dd400315 	stw	r21,12(sp)
  803bfc:	dc800415 	stw	r18,16(sp)
  803c00:	dcc00515 	stw	r19,20(sp)
  803c04:	1000251e 	bne	r2,zero,803c9c <pow+0x40c>
  803c08:	05b80034 	movhi	r22,57344
  803c0c:	0091fc34 	movhi	r2,18416
  803c10:	10bfffc4 	addi	r2,r2,-1
  803c14:	000d883a 	mov	r6,zero
  803c18:	000f883a 	mov	r7,zero
  803c1c:	a80b883a 	mov	r5,r21
  803c20:	a009883a 	mov	r4,r20
  803c24:	d8800715 	stw	r2,28(sp)
  803c28:	dd800615 	stw	r22,24(sp)
  803c2c:	0806dfc0 	call	806dfc <__ltdf2>
  803c30:	103fbd0e 	bge	r2,zero,803b28 <pow+0x298>
  803c34:	0005883a 	mov	r2,zero
  803c38:	00cff834 	movhi	r3,16352
  803c3c:	180f883a 	mov	r7,r3
  803c40:	100d883a 	mov	r6,r2
  803c44:	980b883a 	mov	r5,r19
  803c48:	9009883a 	mov	r4,r18
  803c4c:	08065c00 	call	8065c0 <__muldf3>
  803c50:	1009883a 	mov	r4,r2
  803c54:	180b883a 	mov	r5,r3
  803c58:	1021883a 	mov	r16,r2
  803c5c:	1823883a 	mov	r17,r3
  803c60:	080535c0 	call	80535c <rint>
  803c64:	180f883a 	mov	r7,r3
  803c68:	8009883a 	mov	r4,r16
  803c6c:	880b883a 	mov	r5,r17
  803c70:	100d883a 	mov	r6,r2
  803c74:	0806c640 	call	806c64 <__nedf2>
  803c78:	10000426 	beq	r2,zero,803c8c <pow+0x3fc>
  803c7c:	00b1fc34 	movhi	r2,51184
  803c80:	10bfffc4 	addi	r2,r2,-1
  803c84:	dd800615 	stw	r22,24(sp)
  803c88:	d8800715 	stw	r2,28(sp)
  803c8c:	b8c00017 	ldw	r3,0(r23)
  803c90:	00800084 	movi	r2,2
  803c94:	18bfa41e 	bne	r3,r2,803b28 <pow+0x298>
  803c98:	003fa606 	br	803b34 <pow+0x2a4>
  803c9c:	009ffc34 	movhi	r2,32752
  803ca0:	000d883a 	mov	r6,zero
  803ca4:	000f883a 	mov	r7,zero
  803ca8:	a80b883a 	mov	r5,r21
  803cac:	a009883a 	mov	r4,r20
  803cb0:	d8800715 	stw	r2,28(sp)
  803cb4:	d8000615 	stw	zero,24(sp)
  803cb8:	0806dfc0 	call	806dfc <__ltdf2>
  803cbc:	103ff30e 	bge	r2,zero,803c8c <pow+0x3fc>
  803cc0:	0005883a 	mov	r2,zero
  803cc4:	00cff834 	movhi	r3,16352
  803cc8:	180f883a 	mov	r7,r3
  803ccc:	100d883a 	mov	r6,r2
  803cd0:	980b883a 	mov	r5,r19
  803cd4:	9009883a 	mov	r4,r18
  803cd8:	08065c00 	call	8065c0 <__muldf3>
  803cdc:	1009883a 	mov	r4,r2
  803ce0:	180b883a 	mov	r5,r3
  803ce4:	1021883a 	mov	r16,r2
  803ce8:	1823883a 	mov	r17,r3
  803cec:	080535c0 	call	80535c <rint>
  803cf0:	180f883a 	mov	r7,r3
  803cf4:	8009883a 	mov	r4,r16
  803cf8:	880b883a 	mov	r5,r17
  803cfc:	100d883a 	mov	r6,r2
  803d00:	0806c640 	call	806c64 <__nedf2>
  803d04:	103fe126 	beq	r2,zero,803c8c <pow+0x3fc>
  803d08:	00bffc34 	movhi	r2,65520
  803d0c:	d8800715 	stw	r2,28(sp)
  803d10:	d8000615 	stw	zero,24(sp)
  803d14:	003fdd06 	br	803c8c <pow+0x3fc>

00803d18 <__ieee754_pow>:
  803d18:	deffbb04 	addi	sp,sp,-276
  803d1c:	3005883a 	mov	r2,r6
  803d20:	dd404015 	stw	r21,256(sp)
  803d24:	dd003f15 	stw	r20,252(sp)
  803d28:	d9802815 	stw	r6,160(sp)
  803d2c:	2029883a 	mov	r20,r4
  803d30:	282b883a 	mov	r21,r5
  803d34:	3009883a 	mov	r4,r6
  803d38:	380b883a 	mov	r5,r7
  803d3c:	01a00034 	movhi	r6,32768
  803d40:	31bfffc4 	addi	r6,r6,-1
  803d44:	dc003b15 	stw	r16,236(sp)
  803d48:	29a0703a 	and	r16,r5,r6
  803d4c:	1404b03a 	or	r2,r2,r16
  803d50:	dd804115 	stw	r22,260(sp)
  803d54:	dc403c15 	stw	r17,240(sp)
  803d58:	d9c02915 	stw	r7,164(sp)
  803d5c:	382d883a 	mov	r22,r7
  803d60:	dfc04415 	stw	ra,272(sp)
  803d64:	200f883a 	mov	r7,r4
  803d68:	df004315 	stw	fp,268(sp)
  803d6c:	ddc04215 	stw	r23,264(sp)
  803d70:	dcc03e15 	stw	r19,248(sp)
  803d74:	dc803d15 	stw	r18,244(sp)
  803d78:	a023883a 	mov	r17,r20
  803d7c:	2809883a 	mov	r4,r5
  803d80:	10000826 	beq	r2,zero,803da4 <__ieee754_pow+0x8c>
  803d84:	a9a4703a 	and	r18,r21,r6
  803d88:	009ffc34 	movhi	r2,32752
  803d8c:	a827883a 	mov	r19,r21
  803d90:	1480180e 	bge	r2,r18,803df4 <__ieee754_pow+0xdc>
  803d94:	00b00434 	movhi	r2,49168
  803d98:	9085883a 	add	r2,r18,r2
  803d9c:	8884b03a 	or	r2,r17,r2
  803da0:	1000321e 	bne	r2,zero,803e6c <__ieee754_pow+0x154>
  803da4:	0009883a 	mov	r4,zero
  803da8:	014ffc34 	movhi	r5,16368
  803dac:	d9002815 	stw	r4,160(sp)
  803db0:	d9402915 	stw	r5,164(sp)
  803db4:	d9002817 	ldw	r4,160(sp)
  803db8:	d9402917 	ldw	r5,164(sp)
  803dbc:	2005883a 	mov	r2,r4
  803dc0:	2807883a 	mov	r3,r5
  803dc4:	dfc04417 	ldw	ra,272(sp)
  803dc8:	df004317 	ldw	fp,268(sp)
  803dcc:	ddc04217 	ldw	r23,264(sp)
  803dd0:	dd804117 	ldw	r22,260(sp)
  803dd4:	dd404017 	ldw	r21,256(sp)
  803dd8:	dd003f17 	ldw	r20,252(sp)
  803ddc:	dcc03e17 	ldw	r19,248(sp)
  803de0:	dc803d17 	ldw	r18,244(sp)
  803de4:	dc403c17 	ldw	r17,240(sp)
  803de8:	dc003b17 	ldw	r16,236(sp)
  803dec:	dec04504 	addi	sp,sp,276
  803df0:	f800283a 	ret
  803df4:	90802b26 	beq	r18,r2,803ea4 <__ieee754_pow+0x18c>
  803df8:	143fe616 	blt	r2,r16,803d94 <__ieee754_pow+0x7c>
  803dfc:	80806126 	beq	r16,r2,803f84 <__ieee754_pow+0x26c>
  803e00:	982e403a 	cmpge	r23,r19,zero
  803e04:	b8004e26 	beq	r23,zero,803f40 <__ieee754_pow+0x228>
  803e08:	0039883a 	mov	fp,zero
  803e0c:	3800281e 	bne	r7,zero,803eb0 <__ieee754_pow+0x198>
  803e10:	009ffc34 	movhi	r2,32752
  803e14:	80804f26 	beq	r16,r2,803f54 <__ieee754_pow+0x23c>
  803e18:	008ffc34 	movhi	r2,16368
  803e1c:	80808226 	beq	r16,r2,804028 <__ieee754_pow+0x310>
  803e20:	00900034 	movhi	r2,16384
  803e24:	20828426 	beq	r4,r2,804838 <__ieee754_pow+0xb20>
  803e28:	008ff834 	movhi	r2,16352
  803e2c:	2080201e 	bne	r4,r2,803eb0 <__ieee754_pow+0x198>
  803e30:	98001f16 	blt	r19,zero,803eb0 <__ieee754_pow+0x198>
  803e34:	a80b883a 	mov	r5,r21
  803e38:	a009883a 	mov	r4,r20
  803e3c:	dfc04417 	ldw	ra,272(sp)
  803e40:	df004317 	ldw	fp,268(sp)
  803e44:	ddc04217 	ldw	r23,264(sp)
  803e48:	dd804117 	ldw	r22,260(sp)
  803e4c:	dd404017 	ldw	r21,256(sp)
  803e50:	dd003f17 	ldw	r20,252(sp)
  803e54:	dcc03e17 	ldw	r19,248(sp)
  803e58:	dc803d17 	ldw	r18,244(sp)
  803e5c:	dc403c17 	ldw	r17,240(sp)
  803e60:	dc003b17 	ldw	r16,236(sp)
  803e64:	dec04504 	addi	sp,sp,276
  803e68:	08050181 	jmpi	805018 <__ieee754_sqrt>
  803e6c:	010020b4 	movhi	r4,130
  803e70:	2132ec04 	addi	r4,r4,-13392
  803e74:	dfc04417 	ldw	ra,272(sp)
  803e78:	df004317 	ldw	fp,268(sp)
  803e7c:	ddc04217 	ldw	r23,264(sp)
  803e80:	dd804117 	ldw	r22,260(sp)
  803e84:	dd404017 	ldw	r21,256(sp)
  803e88:	dd003f17 	ldw	r20,252(sp)
  803e8c:	dcc03e17 	ldw	r19,248(sp)
  803e90:	dc803d17 	ldw	r18,244(sp)
  803e94:	dc403c17 	ldw	r17,240(sp)
  803e98:	dc003b17 	ldw	r16,236(sp)
  803e9c:	dec04504 	addi	sp,sp,276
  803ea0:	080534c1 	jmpi	80534c <nan>
  803ea4:	a03fbb1e 	bne	r20,zero,803d94 <__ieee754_pow+0x7c>
  803ea8:	003fd306 	br	803df8 <__ieee754_pow+0xe0>
  803eac:	0039883a 	mov	fp,zero
  803eb0:	a009883a 	mov	r4,r20
  803eb4:	a80b883a 	mov	r5,r21
  803eb8:	08052e00 	call	8052e0 <fabs>
  803ebc:	1015883a 	mov	r10,r2
  803ec0:	1817883a 	mov	r11,r3
  803ec4:	88001226 	beq	r17,zero,803f10 <__ieee754_pow+0x1f8>
  803ec8:	9804d7fa 	srli	r2,r19,31
  803ecc:	10bfffc4 	addi	r2,r2,-1
  803ed0:	1706b03a 	or	r3,r2,fp
  803ed4:	d8802515 	stw	r2,148(sp)
  803ed8:	18002c1e 	bne	r3,zero,803f8c <__ieee754_pow+0x274>
  803edc:	a80f883a 	mov	r7,r21
  803ee0:	a009883a 	mov	r4,r20
  803ee4:	a80b883a 	mov	r5,r21
  803ee8:	a00d883a 	mov	r6,r20
  803eec:	08064cc0 	call	8064cc <__subdf3>
  803ef0:	1009883a 	mov	r4,r2
  803ef4:	180b883a 	mov	r5,r3
  803ef8:	100d883a 	mov	r6,r2
  803efc:	180f883a 	mov	r7,r3
  803f00:	08069840 	call	806984 <__divdf3>
  803f04:	d8802815 	stw	r2,160(sp)
  803f08:	d8c02915 	stw	r3,164(sp)
  803f0c:	003fa906 	br	803db4 <__ieee754_pow+0x9c>
  803f10:	009ffc34 	movhi	r2,32752
  803f14:	90800326 	beq	r18,r2,803f24 <__ieee754_pow+0x20c>
  803f18:	90000226 	beq	r18,zero,803f24 <__ieee754_pow+0x20c>
  803f1c:	008ffc34 	movhi	r2,16368
  803f20:	90bfe91e 	bne	r18,r2,803ec8 <__ieee754_pow+0x1b0>
  803f24:	b0026316 	blt	r22,zero,8048b4 <__ieee754_pow+0xb9c>
  803f28:	5011883a 	mov	r8,r10
  803f2c:	5813883a 	mov	r9,r11
  803f30:	b8023126 	beq	r23,zero,8047f8 <__ieee754_pow+0xae0>
  803f34:	da002815 	stw	r8,160(sp)
  803f38:	da402915 	stw	r9,164(sp)
  803f3c:	003f9d06 	br	803db4 <__ieee754_pow+0x9c>
  803f40:	0090d034 	movhi	r2,17216
  803f44:	10bfffc4 	addi	r2,r2,-1
  803f48:	1400270e 	bge	r2,r16,803fe8 <__ieee754_pow+0x2d0>
  803f4c:	07000084 	movi	fp,2
  803f50:	003fae06 	br	803e0c <__ieee754_pow+0xf4>
  803f54:	00b00434 	movhi	r2,49168
  803f58:	9085883a 	add	r2,r18,r2
  803f5c:	8884b03a 	or	r2,r17,r2
  803f60:	103f9026 	beq	r2,zero,803da4 <__ieee754_pow+0x8c>
  803f64:	008ffc34 	movhi	r2,16368
  803f68:	10bfffc4 	addi	r2,r2,-1
  803f6c:	1482d00e 	bge	r2,r18,804ab0 <__ieee754_pow+0xd98>
  803f70:	b03f900e 	bge	r22,zero,803db4 <__ieee754_pow+0x9c>
  803f74:	0005883a 	mov	r2,zero
  803f78:	d8802815 	stw	r2,160(sp)
  803f7c:	d8802915 	stw	r2,164(sp)
  803f80:	003f8c06 	br	803db4 <__ieee754_pow+0x9c>
  803f84:	383f9e26 	beq	r7,zero,803e00 <__ieee754_pow+0xe8>
  803f88:	003f8206 	br	803d94 <__ieee754_pow+0x7c>
  803f8c:	00907834 	movhi	r2,16864
  803f90:	1400290e 	bge	r2,r16,804038 <__ieee754_pow+0x320>
  803f94:	0090fc34 	movhi	r2,17392
  803f98:	1402500e 	bge	r2,r16,8048dc <__ieee754_pow+0xbc4>
  803f9c:	008ffc34 	movhi	r2,16368
  803fa0:	10bfffc4 	addi	r2,r2,-1
  803fa4:	14800b0e 	bge	r2,r18,803fd4 <__ieee754_pow+0x2bc>
  803fa8:	05800b0e 	bge	zero,r22,803fd8 <__ieee754_pow+0x2c0>
  803fac:	00a20034 	movhi	r2,34816
  803fb0:	109d6704 	addi	r2,r2,30108
  803fb4:	00df8e34 	movhi	r3,32312
  803fb8:	18f90f04 	addi	r3,r3,-7108
  803fbc:	100d883a 	mov	r6,r2
  803fc0:	180f883a 	mov	r7,r3
  803fc4:	1009883a 	mov	r4,r2
  803fc8:	180b883a 	mov	r5,r3
  803fcc:	08065c00 	call	8065c0 <__muldf3>
  803fd0:	003fcc06 	br	803f04 <__ieee754_pow+0x1ec>
  803fd4:	b03ff516 	blt	r22,zero,803fac <__ieee754_pow+0x294>
  803fd8:	0007883a 	mov	r3,zero
  803fdc:	d8c02815 	stw	r3,160(sp)
  803fe0:	d8c02915 	stw	r3,164(sp)
  803fe4:	003f7306 	br	803db4 <__ieee754_pow+0x9c>
  803fe8:	008ffc34 	movhi	r2,16368
  803fec:	10bfffc4 	addi	r2,r2,-1
  803ff0:	143f850e 	bge	r2,r16,803e08 <__ieee754_pow+0xf0>
  803ff4:	8005d53a 	srai	r2,r16,20
  803ff8:	01400504 	movi	r5,20
  803ffc:	10ff0044 	addi	r3,r2,-1023
  804000:	28c3e10e 	bge	r5,r3,804f88 <__ieee754_pow+0x1270>
  804004:	00800d04 	movi	r2,52
  804008:	10c5c83a 	sub	r2,r2,r3
  80400c:	3886d83a 	srl	r3,r7,r2
  804010:	1884983a 	sll	r2,r3,r2
  804014:	38bf7c1e 	bne	r7,r2,803e08 <__ieee754_pow+0xf0>
  804018:	18c0004c 	andi	r3,r3,1
  80401c:	00800084 	movi	r2,2
  804020:	10f9c83a 	sub	fp,r2,r3
  804024:	003f7906 	br	803e0c <__ieee754_pow+0xf4>
  804028:	b0038516 	blt	r22,zero,804e40 <__ieee754_pow+0x1128>
  80402c:	dd002815 	stw	r20,160(sp)
  804030:	dd402915 	stw	r21,164(sp)
  804034:	003f5f06 	br	803db4 <__ieee754_pow+0x9c>
  804038:	00800434 	movhi	r2,16
  80403c:	10bfffc4 	addi	r2,r2,-1
  804040:	1482900e 	bge	r2,r18,804a84 <__ieee754_pow+0xd6c>
  804044:	000b883a 	mov	r5,zero
  804048:	9005d53a 	srai	r2,r18,20
  80404c:	00c00434 	movhi	r3,16
  804050:	18ffffc4 	addi	r3,r3,-1
  804054:	90c8703a 	and	r4,r18,r3
  804058:	2887883a 	add	r3,r5,r2
  80405c:	18bf0044 	addi	r2,r3,-1023
  804060:	d8800015 	stw	r2,0(sp)
  804064:	00800134 	movhi	r2,4
  804068:	10a62384 	addi	r2,r2,-26482
  80406c:	250ffc34 	orhi	r20,r4,16368
  804070:	1101ee0e 	bge	r2,r4,80482c <__ieee754_pow+0xb14>
  804074:	00800334 	movhi	r2,12
  804078:	10ad9e44 	addi	r2,r2,-18823
  80407c:	1101e716 	blt	r2,r4,80481c <__ieee754_pow+0xb04>
  804080:	01000044 	movi	r4,1
  804084:	04000334 	movhi	r16,12
  804088:	200890fa 	slli	r4,r4,3
  80408c:	da800115 	stw	r10,4(sp)
  804090:	dd000215 	stw	r20,8(sp)
  804094:	d9002c15 	stw	r4,176(sp)
  804098:	d9402c17 	ldw	r5,176(sp)
  80409c:	010020b4 	movhi	r4,130
  8040a0:	21328204 	addi	r4,r4,-13816
  8040a4:	a02bd07a 	srai	r21,r20,1
  8040a8:	2909883a 	add	r4,r5,r4
  8040ac:	25800017 	ldw	r22,0(r4)
  8040b0:	25c00117 	ldw	r23,4(r4)
  8040b4:	a00b883a 	mov	r5,r20
  8040b8:	5009883a 	mov	r4,r10
  8040bc:	b00d883a 	mov	r6,r22
  8040c0:	b80f883a 	mov	r7,r23
  8040c4:	08064cc0 	call	8064cc <__subdf3>
  8040c8:	d9000117 	ldw	r4,4(sp)
  8040cc:	a00b883a 	mov	r5,r20
  8040d0:	b00d883a 	mov	r6,r22
  8040d4:	b80f883a 	mov	r7,r23
  8040d8:	1025883a 	mov	r18,r2
  8040dc:	1827883a 	mov	r19,r3
  8040e0:	080654c0 	call	80654c <__adddf3>
  8040e4:	0011883a 	mov	r8,zero
  8040e8:	024ffc34 	movhi	r9,16368
  8040ec:	480b883a 	mov	r5,r9
  8040f0:	4009883a 	mov	r4,r8
  8040f4:	180f883a 	mov	r7,r3
  8040f8:	100d883a 	mov	r6,r2
  8040fc:	08069840 	call	806984 <__divdf3>
  804100:	d8c02e15 	stw	r3,184(sp)
  804104:	d8800f15 	stw	r2,60(sp)
  804108:	d8802d15 	stw	r2,180(sp)
  80410c:	d8802e17 	ldw	r2,184(sp)
  804110:	d9800f17 	ldw	r6,60(sp)
  804114:	9009883a 	mov	r4,r18
  804118:	980b883a 	mov	r5,r19
  80411c:	100f883a 	mov	r7,r2
  804120:	dc800b15 	stw	r18,44(sp)
  804124:	dcc00c15 	stw	r19,48(sp)
  804128:	d8801015 	stw	r2,64(sp)
  80412c:	08065c00 	call	8065c0 <__muldf3>
  804130:	d8c03015 	stw	r3,192(sp)
  804134:	d9003017 	ldw	r4,192(sp)
  804138:	d8802f15 	stw	r2,188(sp)
  80413c:	d8800315 	stw	r2,12(sp)
  804140:	ad480034 	orhi	r21,r21,8192
  804144:	0005883a 	mov	r2,zero
  804148:	ac2b883a 	add	r21,r21,r16
  80414c:	000b883a 	mov	r5,zero
  804150:	1021883a 	mov	r16,r2
  804154:	2005883a 	mov	r2,r4
  804158:	800d883a 	mov	r6,r16
  80415c:	a80f883a 	mov	r7,r21
  804160:	d9000415 	stw	r4,16(sp)
  804164:	d9002715 	stw	r4,156(sp)
  804168:	d9402615 	stw	r5,152(sp)
  80416c:	d9401615 	stw	r5,88(sp)
  804170:	d9001715 	stw	r4,92(sp)
  804174:	100b883a 	mov	r5,r2
  804178:	0009883a 	mov	r4,zero
  80417c:	08065c00 	call	8065c0 <__muldf3>
  804180:	d9000b17 	ldw	r4,44(sp)
  804184:	980b883a 	mov	r5,r19
  804188:	180f883a 	mov	r7,r3
  80418c:	100d883a 	mov	r6,r2
  804190:	08064cc0 	call	8064cc <__subdf3>
  804194:	8009883a 	mov	r4,r16
  804198:	a80b883a 	mov	r5,r21
  80419c:	b80f883a 	mov	r7,r23
  8041a0:	b00d883a 	mov	r6,r22
  8041a4:	1021883a 	mov	r16,r2
  8041a8:	1823883a 	mov	r17,r3
  8041ac:	08064cc0 	call	8064cc <__subdf3>
  8041b0:	d9000117 	ldw	r4,4(sp)
  8041b4:	a00b883a 	mov	r5,r20
  8041b8:	180f883a 	mov	r7,r3
  8041bc:	100d883a 	mov	r6,r2
  8041c0:	08064cc0 	call	8064cc <__subdf3>
  8041c4:	d9001617 	ldw	r4,88(sp)
  8041c8:	d9402717 	ldw	r5,156(sp)
  8041cc:	180f883a 	mov	r7,r3
  8041d0:	100d883a 	mov	r6,r2
  8041d4:	08065c00 	call	8065c0 <__muldf3>
  8041d8:	180f883a 	mov	r7,r3
  8041dc:	880b883a 	mov	r5,r17
  8041e0:	8009883a 	mov	r4,r16
  8041e4:	100d883a 	mov	r6,r2
  8041e8:	08064cc0 	call	8064cc <__subdf3>
  8041ec:	d9000f17 	ldw	r4,60(sp)
  8041f0:	d9402e17 	ldw	r5,184(sp)
  8041f4:	180f883a 	mov	r7,r3
  8041f8:	100d883a 	mov	r6,r2
  8041fc:	08065c00 	call	8065c0 <__muldf3>
  804200:	d9000317 	ldw	r4,12(sp)
  804204:	d9403017 	ldw	r5,192(sp)
  804208:	d8803115 	stw	r2,196(sp)
  80420c:	200d883a 	mov	r6,r4
  804210:	280f883a 	mov	r7,r5
  804214:	d8c03215 	stw	r3,200(sp)
  804218:	08065c00 	call	8065c0 <__muldf3>
  80421c:	1009883a 	mov	r4,r2
  804220:	180b883a 	mov	r5,r3
  804224:	100d883a 	mov	r6,r2
  804228:	180f883a 	mov	r7,r3
  80422c:	1021883a 	mov	r16,r2
  804230:	1823883a 	mov	r17,r3
  804234:	08065c00 	call	8065c0 <__muldf3>
  804238:	02129174 	movhi	r8,19013
  80423c:	4213bbc4 	addi	r8,r8,20207
  804240:	024ff2b4 	movhi	r9,16330
  804244:	4a5f8a04 	addi	r9,r9,32296
  804248:	480f883a 	mov	r7,r9
  80424c:	8009883a 	mov	r4,r16
  804250:	880b883a 	mov	r5,r17
  804254:	400d883a 	mov	r6,r8
  804258:	1029883a 	mov	r20,r2
  80425c:	182b883a 	mov	r21,r3
  804260:	08065c00 	call	8065c0 <__muldf3>
  804264:	0224f2b4 	movhi	r8,37834
  804268:	4236d944 	addi	r8,r8,-9371
  80426c:	024ff3b4 	movhi	r9,16334
  804270:	4a619284 	addi	r9,r9,-31158
  804274:	480f883a 	mov	r7,r9
  804278:	400d883a 	mov	r6,r8
  80427c:	180b883a 	mov	r5,r3
  804280:	1009883a 	mov	r4,r2
  804284:	080654c0 	call	80654c <__adddf3>
  804288:	180f883a 	mov	r7,r3
  80428c:	8009883a 	mov	r4,r16
  804290:	880b883a 	mov	r5,r17
  804294:	100d883a 	mov	r6,r2
  804298:	08065c00 	call	8065c0 <__muldf3>
  80429c:	022a4774 	movhi	r8,43293
  8042a0:	42104044 	addi	r8,r8,16641
  8042a4:	024ff474 	movhi	r9,16337
  8042a8:	4a5d1804 	addi	r9,r9,29792
  8042ac:	480f883a 	mov	r7,r9
  8042b0:	400d883a 	mov	r6,r8
  8042b4:	180b883a 	mov	r5,r3
  8042b8:	1009883a 	mov	r4,r2
  8042bc:	080654c0 	call	80654c <__adddf3>
  8042c0:	180f883a 	mov	r7,r3
  8042c4:	8009883a 	mov	r4,r16
  8042c8:	880b883a 	mov	r5,r17
  8042cc:	100d883a 	mov	r6,r2
  8042d0:	08065c00 	call	8065c0 <__muldf3>
  8042d4:	021463f4 	movhi	r8,20879
  8042d8:	42099344 	addi	r8,r8,9805
  8042dc:	024ff574 	movhi	r9,16341
  8042e0:	4a555544 	addi	r9,r9,21845
  8042e4:	480f883a 	mov	r7,r9
  8042e8:	400d883a 	mov	r6,r8
  8042ec:	180b883a 	mov	r5,r3
  8042f0:	1009883a 	mov	r4,r2
  8042f4:	080654c0 	call	80654c <__adddf3>
  8042f8:	180f883a 	mov	r7,r3
  8042fc:	8009883a 	mov	r4,r16
  804300:	880b883a 	mov	r5,r17
  804304:	100d883a 	mov	r6,r2
  804308:	08065c00 	call	8065c0 <__muldf3>
  80430c:	0236dc34 	movhi	r8,56176
  804310:	422affc4 	addi	r8,r8,-21505
  804314:	024ff6f4 	movhi	r9,16347
  804318:	4a5b6d84 	addi	r9,r9,28086
  80431c:	480f883a 	mov	r7,r9
  804320:	400d883a 	mov	r6,r8
  804324:	180b883a 	mov	r5,r3
  804328:	1009883a 	mov	r4,r2
  80432c:	080654c0 	call	80654c <__adddf3>
  804330:	180f883a 	mov	r7,r3
  804334:	8009883a 	mov	r4,r16
  804338:	880b883a 	mov	r5,r17
  80433c:	100d883a 	mov	r6,r2
  804340:	08065c00 	call	8065c0 <__muldf3>
  804344:	020cccf4 	movhi	r8,13107
  804348:	420cc0c4 	addi	r8,r8,13059
  80434c:	024ff8f4 	movhi	r9,16355
  804350:	4a4cccc4 	addi	r9,r9,13107
  804354:	480f883a 	mov	r7,r9
  804358:	400d883a 	mov	r6,r8
  80435c:	180b883a 	mov	r5,r3
  804360:	1009883a 	mov	r4,r2
  804364:	080654c0 	call	80654c <__adddf3>
  804368:	180f883a 	mov	r7,r3
  80436c:	a80b883a 	mov	r5,r21
  804370:	a009883a 	mov	r4,r20
  804374:	100d883a 	mov	r6,r2
  804378:	08065c00 	call	8065c0 <__muldf3>
  80437c:	d9000317 	ldw	r4,12(sp)
  804380:	d9403017 	ldw	r5,192(sp)
  804384:	d9801617 	ldw	r6,88(sp)
  804388:	d9c02717 	ldw	r7,156(sp)
  80438c:	1021883a 	mov	r16,r2
  804390:	1823883a 	mov	r17,r3
  804394:	080654c0 	call	80654c <__adddf3>
  804398:	d9003117 	ldw	r4,196(sp)
  80439c:	d9403217 	ldw	r5,200(sp)
  8043a0:	180f883a 	mov	r7,r3
  8043a4:	100d883a 	mov	r6,r2
  8043a8:	d9001415 	stw	r4,80(sp)
  8043ac:	d9401515 	stw	r5,84(sp)
  8043b0:	08065c00 	call	8065c0 <__muldf3>
  8043b4:	180f883a 	mov	r7,r3
  8043b8:	8009883a 	mov	r4,r16
  8043bc:	880b883a 	mov	r5,r17
  8043c0:	100d883a 	mov	r6,r2
  8043c4:	080654c0 	call	80654c <__adddf3>
  8043c8:	d9001617 	ldw	r4,88(sp)
  8043cc:	d9402717 	ldw	r5,156(sp)
  8043d0:	d8803315 	stw	r2,204(sp)
  8043d4:	200d883a 	mov	r6,r4
  8043d8:	280f883a 	mov	r7,r5
  8043dc:	d8c03415 	stw	r3,208(sp)
  8043e0:	08065c00 	call	8065c0 <__muldf3>
  8043e4:	182f883a 	mov	r23,r3
  8043e8:	05500234 	movhi	r21,16392
  8043ec:	0029883a 	mov	r20,zero
  8043f0:	b80b883a 	mov	r5,r23
  8043f4:	a00d883a 	mov	r6,r20
  8043f8:	a80f883a 	mov	r7,r21
  8043fc:	1009883a 	mov	r4,r2
  804400:	d8800715 	stw	r2,28(sp)
  804404:	d8c00815 	stw	r3,32(sp)
  804408:	080654c0 	call	80654c <__adddf3>
  80440c:	d9003317 	ldw	r4,204(sp)
  804410:	d9403417 	ldw	r5,208(sp)
  804414:	180f883a 	mov	r7,r3
  804418:	100d883a 	mov	r6,r2
  80441c:	d9000515 	stw	r4,20(sp)
  804420:	d9400615 	stw	r5,24(sp)
  804424:	080654c0 	call	80654c <__adddf3>
  804428:	d9001617 	ldw	r4,88(sp)
  80442c:	d9402717 	ldw	r5,156(sp)
  804430:	0025883a 	mov	r18,zero
  804434:	900d883a 	mov	r6,r18
  804438:	180f883a 	mov	r7,r3
  80443c:	1823883a 	mov	r17,r3
  804440:	08065c00 	call	8065c0 <__muldf3>
  804444:	d9001417 	ldw	r4,80(sp)
  804448:	d9403217 	ldw	r5,200(sp)
  80444c:	880f883a 	mov	r7,r17
  804450:	900d883a 	mov	r6,r18
  804454:	d8803515 	stw	r2,212(sp)
  804458:	d8c03615 	stw	r3,216(sp)
  80445c:	08065c00 	call	8065c0 <__muldf3>
  804460:	a80f883a 	mov	r7,r21
  804464:	880b883a 	mov	r5,r17
  804468:	000d883a 	mov	r6,zero
  80446c:	9009883a 	mov	r4,r18
  804470:	1021883a 	mov	r16,r2
  804474:	1823883a 	mov	r17,r3
  804478:	08064cc0 	call	8064cc <__subdf3>
  80447c:	d9800717 	ldw	r6,28(sp)
  804480:	b80f883a 	mov	r7,r23
  804484:	180b883a 	mov	r5,r3
  804488:	1009883a 	mov	r4,r2
  80448c:	08064cc0 	call	8064cc <__subdf3>
  804490:	d9000517 	ldw	r4,20(sp)
  804494:	d9403417 	ldw	r5,208(sp)
  804498:	180f883a 	mov	r7,r3
  80449c:	100d883a 	mov	r6,r2
  8044a0:	08064cc0 	call	8064cc <__subdf3>
  8044a4:	d9000317 	ldw	r4,12(sp)
  8044a8:	d9403017 	ldw	r5,192(sp)
  8044ac:	180f883a 	mov	r7,r3
  8044b0:	100d883a 	mov	r6,r2
  8044b4:	08065c00 	call	8065c0 <__muldf3>
  8044b8:	180f883a 	mov	r7,r3
  8044bc:	880b883a 	mov	r5,r17
  8044c0:	8009883a 	mov	r4,r16
  8044c4:	100d883a 	mov	r6,r2
  8044c8:	080654c0 	call	80654c <__adddf3>
  8044cc:	102d883a 	mov	r22,r2
  8044d0:	d9003617 	ldw	r4,216(sp)
  8044d4:	d8803517 	ldw	r2,212(sp)
  8044d8:	d9403617 	ldw	r5,216(sp)
  8044dc:	182f883a 	mov	r23,r3
  8044e0:	b00d883a 	mov	r6,r22
  8044e4:	b80f883a 	mov	r7,r23
  8044e8:	d9000a15 	stw	r4,40(sp)
  8044ec:	1009883a 	mov	r4,r2
  8044f0:	054ffbf4 	movhi	r21,16367
  8044f4:	ad71c244 	addi	r21,r21,-14583
  8044f8:	dd800d15 	stw	r22,52(sp)
  8044fc:	ddc00e15 	stw	r23,56(sp)
  804500:	05380034 	movhi	r20,57344
  804504:	d8800915 	stw	r2,36(sp)
  804508:	080654c0 	call	80654c <__adddf3>
  80450c:	180b883a 	mov	r5,r3
  804510:	a00d883a 	mov	r6,r20
  804514:	a80f883a 	mov	r7,r21
  804518:	9009883a 	mov	r4,r18
  80451c:	1823883a 	mov	r17,r3
  804520:	08065c00 	call	8065c0 <__muldf3>
  804524:	020516f4 	movhi	r8,5211
  804528:	42007d44 	addi	r8,r8,501
  80452c:	026f8fb4 	movhi	r9,48702
  804530:	4a4bf804 	addi	r9,r9,12256
  804534:	480f883a 	mov	r7,r9
  804538:	400d883a 	mov	r6,r8
  80453c:	880b883a 	mov	r5,r17
  804540:	9009883a 	mov	r4,r18
  804544:	d8803715 	stw	r2,220(sp)
  804548:	d8c03815 	stw	r3,224(sp)
  80454c:	08065c00 	call	8065c0 <__muldf3>
  804550:	d9800917 	ldw	r6,36(sp)
  804554:	d9c03617 	ldw	r7,216(sp)
  804558:	880b883a 	mov	r5,r17
  80455c:	9009883a 	mov	r4,r18
  804560:	1021883a 	mov	r16,r2
  804564:	1823883a 	mov	r17,r3
  804568:	08064cc0 	call	8064cc <__subdf3>
  80456c:	d9000d17 	ldw	r4,52(sp)
  804570:	b80b883a 	mov	r5,r23
  804574:	180f883a 	mov	r7,r3
  804578:	100d883a 	mov	r6,r2
  80457c:	08064cc0 	call	8064cc <__subdf3>
  804580:	180b883a 	mov	r5,r3
  804584:	a80f883a 	mov	r7,r21
  804588:	01b70eb4 	movhi	r6,56378
  80458c:	3180ff44 	addi	r6,r6,1021
  804590:	1009883a 	mov	r4,r2
  804594:	08065c00 	call	8065c0 <__muldf3>
  804598:	180f883a 	mov	r7,r3
  80459c:	880b883a 	mov	r5,r17
  8045a0:	8009883a 	mov	r4,r16
  8045a4:	100d883a 	mov	r6,r2
  8045a8:	080654c0 	call	80654c <__adddf3>
  8045ac:	d9402c17 	ldw	r5,176(sp)
  8045b0:	010020b4 	movhi	r4,130
  8045b4:	21328604 	addi	r4,r4,-13800
  8045b8:	2909883a 	add	r4,r5,r4
  8045bc:	22400117 	ldw	r9,4(r4)
  8045c0:	22000017 	ldw	r8,0(r4)
  8045c4:	180b883a 	mov	r5,r3
  8045c8:	480f883a 	mov	r7,r9
  8045cc:	400d883a 	mov	r6,r8
  8045d0:	1009883a 	mov	r4,r2
  8045d4:	080654c0 	call	80654c <__adddf3>
  8045d8:	d9000017 	ldw	r4,0(sp)
  8045dc:	182f883a 	mov	r23,r3
  8045e0:	102d883a 	mov	r22,r2
  8045e4:	0806f0c0 	call	806f0c <__floatsidf>
  8045e8:	d9402c17 	ldw	r5,176(sp)
  8045ec:	010020b4 	movhi	r4,130
  8045f0:	21328a04 	addi	r4,r4,-13784
  8045f4:	b00d883a 	mov	r6,r22
  8045f8:	2911883a 	add	r8,r5,r4
  8045fc:	d9003717 	ldw	r4,220(sp)
  804600:	d9403817 	ldw	r5,224(sp)
  804604:	45000017 	ldw	r20,0(r8)
  804608:	d9002315 	stw	r4,140(sp)
  80460c:	d9003817 	ldw	r4,224(sp)
  804610:	45400117 	ldw	r21,4(r8)
  804614:	b80f883a 	mov	r7,r23
  804618:	d9002415 	stw	r4,144(sp)
  80461c:	d9002317 	ldw	r4,140(sp)
  804620:	1021883a 	mov	r16,r2
  804624:	1823883a 	mov	r17,r3
  804628:	dd802115 	stw	r22,132(sp)
  80462c:	ddc02215 	stw	r23,136(sp)
  804630:	080654c0 	call	80654c <__adddf3>
  804634:	180b883a 	mov	r5,r3
  804638:	1009883a 	mov	r4,r2
  80463c:	a00d883a 	mov	r6,r20
  804640:	a80f883a 	mov	r7,r21
  804644:	080654c0 	call	80654c <__adddf3>
  804648:	180f883a 	mov	r7,r3
  80464c:	8009883a 	mov	r4,r16
  804650:	880b883a 	mov	r5,r17
  804654:	100d883a 	mov	r6,r2
  804658:	080654c0 	call	80654c <__adddf3>
  80465c:	180b883a 	mov	r5,r3
  804660:	0009883a 	mov	r4,zero
  804664:	800d883a 	mov	r6,r16
  804668:	880f883a 	mov	r7,r17
  80466c:	d9001b15 	stw	r4,108(sp)
  804670:	d8c01c15 	stw	r3,112(sp)
  804674:	08064cc0 	call	8064cc <__subdf3>
  804678:	180b883a 	mov	r5,r3
  80467c:	a80f883a 	mov	r7,r21
  804680:	1009883a 	mov	r4,r2
  804684:	a00d883a 	mov	r6,r20
  804688:	08064cc0 	call	8064cc <__subdf3>
  80468c:	d9802317 	ldw	r6,140(sp)
  804690:	d9c03817 	ldw	r7,224(sp)
  804694:	180b883a 	mov	r5,r3
  804698:	1009883a 	mov	r4,r2
  80469c:	08064cc0 	call	8064cc <__subdf3>
  8046a0:	d9002117 	ldw	r4,132(sp)
  8046a4:	1011883a 	mov	r8,r2
  8046a8:	1813883a 	mov	r9,r3
  8046ac:	b80b883a 	mov	r5,r23
  8046b0:	480f883a 	mov	r7,r9
  8046b4:	400d883a 	mov	r6,r8
  8046b8:	08064cc0 	call	8064cc <__subdf3>
  8046bc:	1823883a 	mov	r17,r3
  8046c0:	d8c02517 	ldw	r3,148(sp)
  8046c4:	1021883a 	mov	r16,r2
  8046c8:	e0bfffc4 	addi	r2,fp,-1
  8046cc:	1884b03a 	or	r2,r3,r2
  8046d0:	1000731e 	bne	r2,zero,8048a0 <__ieee754_pow+0xb88>
  8046d4:	0009883a 	mov	r4,zero
  8046d8:	016ffc34 	movhi	r5,49136
  8046dc:	d9001915 	stw	r4,100(sp)
  8046e0:	d9401a15 	stw	r5,104(sp)
  8046e4:	d9402917 	ldw	r5,164(sp)
  8046e8:	d9002817 	ldw	r4,160(sp)
  8046ec:	0029883a 	mov	r20,zero
  8046f0:	a00d883a 	mov	r6,r20
  8046f4:	280f883a 	mov	r7,r5
  8046f8:	2827883a 	mov	r19,r5
  8046fc:	08064cc0 	call	8064cc <__subdf3>
  804700:	d9001b17 	ldw	r4,108(sp)
  804704:	d9401c17 	ldw	r5,112(sp)
  804708:	180f883a 	mov	r7,r3
  80470c:	100d883a 	mov	r6,r2
  804710:	08065c00 	call	8065c0 <__muldf3>
  804714:	d9c02917 	ldw	r7,164(sp)
  804718:	d9802817 	ldw	r6,160(sp)
  80471c:	880b883a 	mov	r5,r17
  804720:	8009883a 	mov	r4,r16
  804724:	1823883a 	mov	r17,r3
  804728:	1021883a 	mov	r16,r2
  80472c:	08065c00 	call	8065c0 <__muldf3>
  804730:	180f883a 	mov	r7,r3
  804734:	880b883a 	mov	r5,r17
  804738:	8009883a 	mov	r4,r16
  80473c:	100d883a 	mov	r6,r2
  804740:	080654c0 	call	80654c <__adddf3>
  804744:	d9401c17 	ldw	r5,112(sp)
  804748:	d9001b17 	ldw	r4,108(sp)
  80474c:	a00d883a 	mov	r6,r20
  804750:	980f883a 	mov	r7,r19
  804754:	1029883a 	mov	r20,r2
  804758:	182b883a 	mov	r21,r3
  80475c:	08065c00 	call	8065c0 <__muldf3>
  804760:	1025883a 	mov	r18,r2
  804764:	1827883a 	mov	r19,r3
  804768:	a009883a 	mov	r4,r20
  80476c:	a80b883a 	mov	r5,r21
  804770:	900d883a 	mov	r6,r18
  804774:	980f883a 	mov	r7,r19
  804778:	dd001d15 	stw	r20,116(sp)
  80477c:	dc801f15 	stw	r18,124(sp)
  804780:	dd401e15 	stw	r21,120(sp)
  804784:	dcc02015 	stw	r19,128(sp)
  804788:	080654c0 	call	80654c <__adddf3>
  80478c:	1823883a 	mov	r17,r3
  804790:	01102434 	movhi	r4,16528
  804794:	213fffc4 	addi	r4,r4,-1
  804798:	1021883a 	mov	r16,r2
  80479c:	182f883a 	mov	r23,r3
  8047a0:	dc401815 	stw	r17,96(sp)
  8047a4:	100b883a 	mov	r5,r2
  8047a8:	20c02c0e 	bge	r4,r3,80485c <__ieee754_pow+0xb44>
  8047ac:	00afdc34 	movhi	r2,49008
  8047b0:	1885883a 	add	r2,r3,r2
  8047b4:	2884b03a 	or	r2,r5,r2
  8047b8:	1001a626 	beq	r2,zero,804e54 <__ieee754_pow+0x113c>
  8047bc:	04220034 	movhi	r16,34816
  8047c0:	841d6704 	addi	r16,r16,30108
  8047c4:	045f8e34 	movhi	r17,32312
  8047c8:	8c790f04 	addi	r17,r17,-7108
  8047cc:	d9401a17 	ldw	r5,104(sp)
  8047d0:	d9001917 	ldw	r4,100(sp)
  8047d4:	800d883a 	mov	r6,r16
  8047d8:	880f883a 	mov	r7,r17
  8047dc:	08065c00 	call	8065c0 <__muldf3>
  8047e0:	180b883a 	mov	r5,r3
  8047e4:	800d883a 	mov	r6,r16
  8047e8:	880f883a 	mov	r7,r17
  8047ec:	1009883a 	mov	r4,r2
  8047f0:	08065c00 	call	8065c0 <__muldf3>
  8047f4:	003dc306 	br	803f04 <__ieee754_pow+0x1ec>
  8047f8:	00b00434 	movhi	r2,49168
  8047fc:	9085883a 	add	r2,r18,r2
  804800:	e084b03a 	or	r2,fp,r2
  804804:	1000af1e 	bne	r2,zero,804ac4 <__ieee754_pow+0xdac>
  804808:	480f883a 	mov	r7,r9
  80480c:	4009883a 	mov	r4,r8
  804810:	480b883a 	mov	r5,r9
  804814:	400d883a 	mov	r6,r8
  804818:	003db406 	br	803eec <__ieee754_pow+0x1d4>
  80481c:	00bffc34 	movhi	r2,65520
  804820:	18ff0084 	addi	r3,r3,-1022
  804824:	a0a9883a 	add	r20,r20,r2
  804828:	d8c00015 	stw	r3,0(sp)
  80482c:	0009883a 	mov	r4,zero
  804830:	04000234 	movhi	r16,8
  804834:	003e1406 	br	804088 <__ieee754_pow+0x370>
  804838:	a80f883a 	mov	r7,r21
  80483c:	a009883a 	mov	r4,r20
  804840:	a80b883a 	mov	r5,r21
  804844:	a00d883a 	mov	r6,r20
  804848:	08065c00 	call	8065c0 <__muldf3>
  80484c:	180b883a 	mov	r5,r3
  804850:	d8802815 	stw	r2,160(sp)
  804854:	d9402915 	stw	r5,164(sp)
  804858:	003d5606 	br	803db4 <__ieee754_pow+0x9c>
  80485c:	d9001817 	ldw	r4,96(sp)
  804860:	00a00034 	movhi	r2,32768
  804864:	10bfffc4 	addi	r2,r2,-1
  804868:	00d02474 	movhi	r3,16529
  80486c:	18f2ffc4 	addi	r3,r3,-13313
  804870:	20b8703a 	and	fp,r4,r2
  804874:	1f009d0e 	bge	r3,fp,804aec <__ieee754_pow+0xdd4>
  804878:	008fdbf4 	movhi	r2,16239
  80487c:	108d0004 	addi	r2,r2,13312
  804880:	2085883a 	add	r2,r4,r2
  804884:	1144b03a 	or	r2,r2,r5
  804888:	1001c626 	beq	r2,zero,804fa4 <__ieee754_pow+0x128c>
  80488c:	0430be74 	movhi	r16,49913
  804890:	843cd644 	addi	r16,r16,-3239
  804894:	04406974 	movhi	r17,421
  804898:	8c5b87c4 	addi	r17,r17,28191
  80489c:	003fcb06 	br	8047cc <__ieee754_pow+0xab4>
  8048a0:	0005883a 	mov	r2,zero
  8048a4:	00cffc34 	movhi	r3,16368
  8048a8:	d8801915 	stw	r2,100(sp)
  8048ac:	d8c01a15 	stw	r3,104(sp)
  8048b0:	003f8c06 	br	8046e4 <__ieee754_pow+0x9cc>
  8048b4:	0005883a 	mov	r2,zero
  8048b8:	00cffc34 	movhi	r3,16368
  8048bc:	180b883a 	mov	r5,r3
  8048c0:	580f883a 	mov	r7,r11
  8048c4:	1009883a 	mov	r4,r2
  8048c8:	500d883a 	mov	r6,r10
  8048cc:	08069840 	call	806984 <__divdf3>
  8048d0:	1011883a 	mov	r8,r2
  8048d4:	1813883a 	mov	r9,r3
  8048d8:	003d9506 	br	803f30 <__ieee754_pow+0x218>
  8048dc:	008ffc34 	movhi	r2,16368
  8048e0:	10bfff84 	addi	r2,r2,-2
  8048e4:	14bdbb0e 	bge	r2,r18,803fd4 <__ieee754_pow+0x2bc>
  8048e8:	008ffc34 	movhi	r2,16368
  8048ec:	14bdae16 	blt	r2,r18,803fa8 <__ieee754_pow+0x290>
  8048f0:	580b883a 	mov	r5,r11
  8048f4:	5009883a 	mov	r4,r10
  8048f8:	000d883a 	mov	r6,zero
  8048fc:	100f883a 	mov	r7,r2
  804900:	08064cc0 	call	8064cc <__subdf3>
  804904:	1021883a 	mov	r16,r2
  804908:	1823883a 	mov	r17,r3
  80490c:	00980034 	movhi	r2,24576
  804910:	00cffdf4 	movhi	r3,16375
  804914:	18c551c4 	addi	r3,r3,5447
  804918:	8009883a 	mov	r4,r16
  80491c:	880b883a 	mov	r5,r17
  804920:	180f883a 	mov	r7,r3
  804924:	100d883a 	mov	r6,r2
  804928:	08065c00 	call	8065c0 <__muldf3>
  80492c:	023e17b4 	movhi	r8,63582
  804930:	4237d104 	addi	r8,r8,-8380
  804934:	024f9574 	movhi	r9,15957
  804938:	4a6b82c4 	addi	r9,r9,-20981
  80493c:	480f883a 	mov	r7,r9
  804940:	400d883a 	mov	r6,r8
  804944:	8009883a 	mov	r4,r16
  804948:	880b883a 	mov	r5,r17
  80494c:	102d883a 	mov	r22,r2
  804950:	182f883a 	mov	r23,r3
  804954:	08065c00 	call	8065c0 <__muldf3>
  804958:	8009883a 	mov	r4,r16
  80495c:	880b883a 	mov	r5,r17
  804960:	800d883a 	mov	r6,r16
  804964:	880f883a 	mov	r7,r17
  804968:	d8802a15 	stw	r2,168(sp)
  80496c:	d8c02b15 	stw	r3,172(sp)
  804970:	08065c00 	call	8065c0 <__muldf3>
  804974:	0011883a 	mov	r8,zero
  804978:	026ff434 	movhi	r9,49104
  80497c:	480f883a 	mov	r7,r9
  804980:	8009883a 	mov	r4,r16
  804984:	880b883a 	mov	r5,r17
  804988:	400d883a 	mov	r6,r8
  80498c:	1029883a 	mov	r20,r2
  804990:	182b883a 	mov	r21,r3
  804994:	08065c00 	call	8065c0 <__muldf3>
  804998:	02155574 	movhi	r8,21845
  80499c:	42155544 	addi	r8,r8,21845
  8049a0:	024ff574 	movhi	r9,16341
  8049a4:	4a555544 	addi	r9,r9,21845
  8049a8:	480f883a 	mov	r7,r9
  8049ac:	400d883a 	mov	r6,r8
  8049b0:	180b883a 	mov	r5,r3
  8049b4:	1009883a 	mov	r4,r2
  8049b8:	080654c0 	call	80654c <__adddf3>
  8049bc:	180f883a 	mov	r7,r3
  8049c0:	8009883a 	mov	r4,r16
  8049c4:	880b883a 	mov	r5,r17
  8049c8:	100d883a 	mov	r6,r2
  8049cc:	08065c00 	call	8065c0 <__muldf3>
  8049d0:	0011883a 	mov	r8,zero
  8049d4:	024ff834 	movhi	r9,16352
  8049d8:	480b883a 	mov	r5,r9
  8049dc:	4009883a 	mov	r4,r8
  8049e0:	180f883a 	mov	r7,r3
  8049e4:	100d883a 	mov	r6,r2
  8049e8:	08064cc0 	call	8064cc <__subdf3>
  8049ec:	180f883a 	mov	r7,r3
  8049f0:	a80b883a 	mov	r5,r21
  8049f4:	a009883a 	mov	r4,r20
  8049f8:	100d883a 	mov	r6,r2
  8049fc:	08065c00 	call	8065c0 <__muldf3>
  804a00:	02194b34 	movhi	r8,25900
  804a04:	4220bf84 	addi	r8,r8,-32002
  804a08:	026ffdf4 	movhi	r9,49143
  804a0c:	4a4551c4 	addi	r9,r9,5447
  804a10:	480f883a 	mov	r7,r9
  804a14:	400d883a 	mov	r6,r8
  804a18:	180b883a 	mov	r5,r3
  804a1c:	1009883a 	mov	r4,r2
  804a20:	08065c00 	call	8065c0 <__muldf3>
  804a24:	d9402b17 	ldw	r5,172(sp)
  804a28:	d9002a17 	ldw	r4,168(sp)
  804a2c:	180f883a 	mov	r7,r3
  804a30:	100d883a 	mov	r6,r2
  804a34:	080654c0 	call	80654c <__adddf3>
  804a38:	100d883a 	mov	r6,r2
  804a3c:	b009883a 	mov	r4,r22
  804a40:	b80b883a 	mov	r5,r23
  804a44:	180f883a 	mov	r7,r3
  804a48:	1021883a 	mov	r16,r2
  804a4c:	1823883a 	mov	r17,r3
  804a50:	080654c0 	call	80654c <__adddf3>
  804a54:	180b883a 	mov	r5,r3
  804a58:	0009883a 	mov	r4,zero
  804a5c:	b00d883a 	mov	r6,r22
  804a60:	b80f883a 	mov	r7,r23
  804a64:	d9001b15 	stw	r4,108(sp)
  804a68:	d8c01c15 	stw	r3,112(sp)
  804a6c:	08064cc0 	call	8064cc <__subdf3>
  804a70:	1011883a 	mov	r8,r2
  804a74:	1813883a 	mov	r9,r3
  804a78:	8009883a 	mov	r4,r16
  804a7c:	880b883a 	mov	r5,r17
  804a80:	003f0b06 	br	8046b0 <__ieee754_pow+0x998>
  804a84:	0005883a 	mov	r2,zero
  804a88:	00d0d034 	movhi	r3,17216
  804a8c:	580b883a 	mov	r5,r11
  804a90:	5009883a 	mov	r4,r10
  804a94:	180f883a 	mov	r7,r3
  804a98:	100d883a 	mov	r6,r2
  804a9c:	08065c00 	call	8065c0 <__muldf3>
  804aa0:	1015883a 	mov	r10,r2
  804aa4:	1825883a 	mov	r18,r3
  804aa8:	017ff2c4 	movi	r5,-53
  804aac:	003d6606 	br	804048 <__ieee754_pow+0x330>
  804ab0:	b03d300e 	bge	r22,zero,803f74 <__ieee754_pow+0x25c>
  804ab4:	d9402917 	ldw	r5,164(sp)
  804ab8:	28e0003c 	xorhi	r3,r5,32768
  804abc:	d8c02915 	stw	r3,164(sp)
  804ac0:	003cbc06 	br	803db4 <__ieee754_pow+0x9c>
  804ac4:	00800044 	movi	r2,1
  804ac8:	e0bd1a1e 	bne	fp,r2,803f34 <__ieee754_pow+0x21c>
  804acc:	48e0003c 	xorhi	r3,r9,32768
  804ad0:	da002815 	stw	r8,160(sp)
  804ad4:	d8c02915 	stw	r3,164(sp)
  804ad8:	003cb606 	br	803db4 <__ieee754_pow+0x9c>
  804adc:	d9001817 	ldw	r4,96(sp)
  804ae0:	00a00034 	movhi	r2,32768
  804ae4:	10bfffc4 	addi	r2,r2,-1
  804ae8:	20b8703a 	and	fp,r4,r2
  804aec:	008ff834 	movhi	r2,16352
  804af0:	1700fc16 	blt	r2,fp,804ee4 <__ieee754_pow+0x11cc>
  804af4:	0039883a 	mov	fp,zero
  804af8:	d8001315 	stw	zero,76(sp)
  804afc:	0025883a 	mov	r18,zero
  804b00:	0005883a 	mov	r2,zero
  804b04:	00cff9b4 	movhi	r3,16358
  804b08:	18cb90c4 	addi	r3,r3,11843
  804b0c:	9009883a 	mov	r4,r18
  804b10:	b80b883a 	mov	r5,r23
  804b14:	180f883a 	mov	r7,r3
  804b18:	100d883a 	mov	r6,r2
  804b1c:	08065c00 	call	8065c0 <__muldf3>
  804b20:	d9c02017 	ldw	r7,128(sp)
  804b24:	d9801f17 	ldw	r6,124(sp)
  804b28:	9009883a 	mov	r4,r18
  804b2c:	b80b883a 	mov	r5,r23
  804b30:	b823883a 	mov	r17,r23
  804b34:	102d883a 	mov	r22,r2
  804b38:	182f883a 	mov	r23,r3
  804b3c:	08064cc0 	call	8064cc <__subdf3>
  804b40:	d9401e17 	ldw	r5,120(sp)
  804b44:	d9001d17 	ldw	r4,116(sp)
  804b48:	180f883a 	mov	r7,r3
  804b4c:	100d883a 	mov	r6,r2
  804b50:	08064cc0 	call	8064cc <__subdf3>
  804b54:	023fbeb4 	movhi	r8,65274
  804b58:	420e7bc4 	addi	r8,r8,14831
  804b5c:	024ff9b4 	movhi	r9,16358
  804b60:	4a4b9084 	addi	r9,r9,11842
  804b64:	480f883a 	mov	r7,r9
  804b68:	400d883a 	mov	r6,r8
  804b6c:	180b883a 	mov	r5,r3
  804b70:	1009883a 	mov	r4,r2
  804b74:	08065c00 	call	8065c0 <__muldf3>
  804b78:	02032a34 	movhi	r8,3240
  804b7c:	421b0e44 	addi	r8,r8,27705
  804b80:	026f8834 	movhi	r9,48672
  804b84:	4a571844 	addi	r9,r9,23649
  804b88:	480f883a 	mov	r7,r9
  804b8c:	400d883a 	mov	r6,r8
  804b90:	9009883a 	mov	r4,r18
  804b94:	880b883a 	mov	r5,r17
  804b98:	1021883a 	mov	r16,r2
  804b9c:	1823883a 	mov	r17,r3
  804ba0:	08065c00 	call	8065c0 <__muldf3>
  804ba4:	180f883a 	mov	r7,r3
  804ba8:	880b883a 	mov	r5,r17
  804bac:	8009883a 	mov	r4,r16
  804bb0:	100d883a 	mov	r6,r2
  804bb4:	080654c0 	call	80654c <__adddf3>
  804bb8:	100d883a 	mov	r6,r2
  804bbc:	b009883a 	mov	r4,r22
  804bc0:	b80b883a 	mov	r5,r23
  804bc4:	180f883a 	mov	r7,r3
  804bc8:	1021883a 	mov	r16,r2
  804bcc:	1823883a 	mov	r17,r3
  804bd0:	080654c0 	call	80654c <__adddf3>
  804bd4:	1009883a 	mov	r4,r2
  804bd8:	180b883a 	mov	r5,r3
  804bdc:	b00d883a 	mov	r6,r22
  804be0:	b80f883a 	mov	r7,r23
  804be4:	d8803915 	stw	r2,228(sp)
  804be8:	d8c03a15 	stw	r3,232(sp)
  804bec:	d8801115 	stw	r2,68(sp)
  804bf0:	d8c01215 	stw	r3,72(sp)
  804bf4:	08064cc0 	call	8064cc <__subdf3>
  804bf8:	180f883a 	mov	r7,r3
  804bfc:	8009883a 	mov	r4,r16
  804c00:	880b883a 	mov	r5,r17
  804c04:	100d883a 	mov	r6,r2
  804c08:	08064cc0 	call	8064cc <__subdf3>
  804c0c:	d9001117 	ldw	r4,68(sp)
  804c10:	d9403a17 	ldw	r5,232(sp)
  804c14:	1029883a 	mov	r20,r2
  804c18:	200d883a 	mov	r6,r4
  804c1c:	280f883a 	mov	r7,r5
  804c20:	182b883a 	mov	r21,r3
  804c24:	08065c00 	call	8065c0 <__muldf3>
  804c28:	1021883a 	mov	r16,r2
  804c2c:	1823883a 	mov	r17,r3
  804c30:	009caff4 	movhi	r2,29375
  804c34:	10a93404 	addi	r2,r2,-23344
  804c38:	00cf99b4 	movhi	r3,15974
  804c3c:	18cdda44 	addi	r3,r3,14185
  804c40:	8009883a 	mov	r4,r16
  804c44:	880b883a 	mov	r5,r17
  804c48:	180f883a 	mov	r7,r3
  804c4c:	100d883a 	mov	r6,r2
  804c50:	08065c00 	call	8065c0 <__muldf3>
  804c54:	023174b4 	movhi	r8,50642
  804c58:	421afc44 	addi	r8,r8,27633
  804c5c:	024faf34 	movhi	r9,16060
  804c60:	4a6f5044 	addi	r9,r9,-17087
  804c64:	480f883a 	mov	r7,r9
  804c68:	400d883a 	mov	r6,r8
  804c6c:	180b883a 	mov	r5,r3
  804c70:	1009883a 	mov	r4,r2
  804c74:	08064cc0 	call	8064cc <__subdf3>
  804c78:	180f883a 	mov	r7,r3
  804c7c:	8009883a 	mov	r4,r16
  804c80:	880b883a 	mov	r5,r17
  804c84:	100d883a 	mov	r6,r2
  804c88:	08065c00 	call	8065c0 <__muldf3>
  804c8c:	022bc9b4 	movhi	r8,44838
  804c90:	42378b04 	addi	r8,r8,-8660
  804c94:	024fc474 	movhi	r9,16145
  804c98:	4a559a84 	addi	r9,r9,22122
  804c9c:	480f883a 	mov	r7,r9
  804ca0:	400d883a 	mov	r6,r8
  804ca4:	180b883a 	mov	r5,r3
  804ca8:	1009883a 	mov	r4,r2
  804cac:	080654c0 	call	80654c <__adddf3>
  804cb0:	180f883a 	mov	r7,r3
  804cb4:	8009883a 	mov	r4,r16
  804cb8:	880b883a 	mov	r5,r17
  804cbc:	100d883a 	mov	r6,r2
  804cc0:	08065c00 	call	8065c0 <__muldf3>
  804cc4:	0205aff4 	movhi	r8,5823
  804cc8:	422f64c4 	addi	r8,r8,-17005
  804ccc:	024fd9f4 	movhi	r9,16231
  804cd0:	4a705b04 	addi	r9,r9,-16020
  804cd4:	480f883a 	mov	r7,r9
  804cd8:	400d883a 	mov	r6,r8
  804cdc:	180b883a 	mov	r5,r3
  804ce0:	1009883a 	mov	r4,r2
  804ce4:	08064cc0 	call	8064cc <__subdf3>
  804ce8:	180f883a 	mov	r7,r3
  804cec:	8009883a 	mov	r4,r16
  804cf0:	880b883a 	mov	r5,r17
  804cf4:	100d883a 	mov	r6,r2
  804cf8:	08065c00 	call	8065c0 <__muldf3>
  804cfc:	02155574 	movhi	r8,21845
  804d00:	42154f84 	addi	r8,r8,21822
  804d04:	024ff174 	movhi	r9,16325
  804d08:	4a555544 	addi	r9,r9,21845
  804d0c:	480f883a 	mov	r7,r9
  804d10:	400d883a 	mov	r6,r8
  804d14:	180b883a 	mov	r5,r3
  804d18:	1009883a 	mov	r4,r2
  804d1c:	080654c0 	call	80654c <__adddf3>
  804d20:	180f883a 	mov	r7,r3
  804d24:	8009883a 	mov	r4,r16
  804d28:	880b883a 	mov	r5,r17
  804d2c:	100d883a 	mov	r6,r2
  804d30:	08065c00 	call	8065c0 <__muldf3>
  804d34:	d9001117 	ldw	r4,68(sp)
  804d38:	d9403a17 	ldw	r5,232(sp)
  804d3c:	180f883a 	mov	r7,r3
  804d40:	100d883a 	mov	r6,r2
  804d44:	08064cc0 	call	8064cc <__subdf3>
  804d48:	d9001117 	ldw	r4,68(sp)
  804d4c:	d9403a17 	ldw	r5,232(sp)
  804d50:	100d883a 	mov	r6,r2
  804d54:	180f883a 	mov	r7,r3
  804d58:	1021883a 	mov	r16,r2
  804d5c:	1823883a 	mov	r17,r3
  804d60:	08065c00 	call	8065c0 <__muldf3>
  804d64:	0011883a 	mov	r8,zero
  804d68:	02500034 	movhi	r9,16384
  804d6c:	480f883a 	mov	r7,r9
  804d70:	400d883a 	mov	r6,r8
  804d74:	8009883a 	mov	r4,r16
  804d78:	880b883a 	mov	r5,r17
  804d7c:	1021883a 	mov	r16,r2
  804d80:	1823883a 	mov	r17,r3
  804d84:	08064cc0 	call	8064cc <__subdf3>
  804d88:	180f883a 	mov	r7,r3
  804d8c:	880b883a 	mov	r5,r17
  804d90:	8009883a 	mov	r4,r16
  804d94:	100d883a 	mov	r6,r2
  804d98:	08069840 	call	806984 <__divdf3>
  804d9c:	d9001117 	ldw	r4,68(sp)
  804da0:	d9403a17 	ldw	r5,232(sp)
  804da4:	a00d883a 	mov	r6,r20
  804da8:	a80f883a 	mov	r7,r21
  804dac:	1025883a 	mov	r18,r2
  804db0:	1827883a 	mov	r19,r3
  804db4:	08065c00 	call	8065c0 <__muldf3>
  804db8:	180f883a 	mov	r7,r3
  804dbc:	a009883a 	mov	r4,r20
  804dc0:	a80b883a 	mov	r5,r21
  804dc4:	100d883a 	mov	r6,r2
  804dc8:	080654c0 	call	80654c <__adddf3>
  804dcc:	180f883a 	mov	r7,r3
  804dd0:	980b883a 	mov	r5,r19
  804dd4:	9009883a 	mov	r4,r18
  804dd8:	100d883a 	mov	r6,r2
  804ddc:	08064cc0 	call	8064cc <__subdf3>
  804de0:	d9801117 	ldw	r6,68(sp)
  804de4:	d9c03a17 	ldw	r7,232(sp)
  804de8:	180b883a 	mov	r5,r3
  804dec:	1009883a 	mov	r4,r2
  804df0:	08064cc0 	call	8064cc <__subdf3>
  804df4:	0011883a 	mov	r8,zero
  804df8:	024ffc34 	movhi	r9,16368
  804dfc:	480b883a 	mov	r5,r9
  804e00:	180f883a 	mov	r7,r3
  804e04:	4009883a 	mov	r4,r8
  804e08:	100d883a 	mov	r6,r2
  804e0c:	08064cc0 	call	8064cc <__subdf3>
  804e10:	100b883a 	mov	r5,r2
  804e14:	d8801317 	ldw	r2,76(sp)
  804e18:	10d5883a 	add	r10,r2,r3
  804e1c:	5005d53a 	srai	r2,r10,20
  804e20:	0080720e 	bge	zero,r2,804fec <__ieee754_pow+0x12d4>
  804e24:	2811883a 	mov	r8,r5
  804e28:	5013883a 	mov	r9,r10
  804e2c:	d9c01a17 	ldw	r7,104(sp)
  804e30:	d9801917 	ldw	r6,100(sp)
  804e34:	480b883a 	mov	r5,r9
  804e38:	4009883a 	mov	r4,r8
  804e3c:	003e8206 	br	804848 <__ieee754_pow+0xb30>
  804e40:	0009883a 	mov	r4,zero
  804e44:	800b883a 	mov	r5,r16
  804e48:	a80f883a 	mov	r7,r21
  804e4c:	a00d883a 	mov	r6,r20
  804e50:	003c2b06 	br	803f00 <__ieee754_pow+0x1e8>
  804e54:	d9001d17 	ldw	r4,116(sp)
  804e58:	00994b34 	movhi	r2,25900
  804e5c:	10a0bf84 	addi	r2,r2,-32002
  804e60:	00cf25f4 	movhi	r3,15511
  804e64:	18c551c4 	addi	r3,r3,5447
  804e68:	a80b883a 	mov	r5,r21
  804e6c:	180f883a 	mov	r7,r3
  804e70:	100d883a 	mov	r6,r2
  804e74:	080654c0 	call	80654c <__adddf3>
  804e78:	d9801f17 	ldw	r6,124(sp)
  804e7c:	880b883a 	mov	r5,r17
  804e80:	8009883a 	mov	r4,r16
  804e84:	980f883a 	mov	r7,r19
  804e88:	1021883a 	mov	r16,r2
  804e8c:	1823883a 	mov	r17,r3
  804e90:	08064cc0 	call	8064cc <__subdf3>
  804e94:	180f883a 	mov	r7,r3
  804e98:	880b883a 	mov	r5,r17
  804e9c:	8009883a 	mov	r4,r16
  804ea0:	100d883a 	mov	r6,r2
  804ea4:	0806cec0 	call	806cec <__gtdf2>
  804ea8:	00bf0c0e 	bge	zero,r2,804adc <__ieee754_pow+0xdc4>
  804eac:	04220034 	movhi	r16,34816
  804eb0:	841d6704 	addi	r16,r16,30108
  804eb4:	045f8e34 	movhi	r17,32312
  804eb8:	8c790f04 	addi	r17,r17,-7108
  804ebc:	d9401a17 	ldw	r5,104(sp)
  804ec0:	d9001917 	ldw	r4,100(sp)
  804ec4:	800d883a 	mov	r6,r16
  804ec8:	880f883a 	mov	r7,r17
  804ecc:	08065c00 	call	8065c0 <__muldf3>
  804ed0:	180b883a 	mov	r5,r3
  804ed4:	800d883a 	mov	r6,r16
  804ed8:	880f883a 	mov	r7,r17
  804edc:	1009883a 	mov	r4,r2
  804ee0:	003e5906 	br	804848 <__ieee754_pow+0xb30>
  804ee4:	e005d53a 	srai	r2,fp,20
  804ee8:	01800434 	movhi	r6,16
  804eec:	d9401817 	ldw	r5,96(sp)
  804ef0:	10bf0084 	addi	r2,r2,-1022
  804ef4:	308dd83a 	sra	r6,r6,r2
  804ef8:	02000434 	movhi	r8,16
  804efc:	423fffc4 	addi	r8,r8,-1
  804f00:	0005883a 	mov	r2,zero
  804f04:	298d883a 	add	r6,r5,r6
  804f08:	318b883a 	add	r5,r6,r6
  804f0c:	320e703a 	and	r7,r6,r8
  804f10:	1013883a 	mov	r9,r2
  804f14:	280ad57a 	srli	r5,r5,21
  804f18:	d8801817 	ldw	r2,96(sp)
  804f1c:	01000504 	movi	r4,20
  804f20:	297f0044 	addi	r5,r5,-1023
  804f24:	4151d83a 	sra	r8,r8,r5
  804f28:	39c00434 	orhi	r7,r7,16
  804f2c:	2149c83a 	sub	r4,r4,r5
  804f30:	0210303a 	nor	r8,zero,r8
  804f34:	3939d83a 	sra	fp,r7,r4
  804f38:	320e703a 	and	r7,r6,r8
  804f3c:	10002916 	blt	r2,zero,804fe4 <__ieee754_pow+0x12cc>
  804f40:	d9402017 	ldw	r5,128(sp)
  804f44:	d9001f17 	ldw	r4,124(sp)
  804f48:	480d883a 	mov	r6,r9
  804f4c:	08064cc0 	call	8064cc <__subdf3>
  804f50:	180b883a 	mov	r5,r3
  804f54:	d9402015 	stw	r5,128(sp)
  804f58:	280f883a 	mov	r7,r5
  804f5c:	d9001d17 	ldw	r4,116(sp)
  804f60:	d9401e17 	ldw	r5,120(sp)
  804f64:	1007883a 	mov	r3,r2
  804f68:	180d883a 	mov	r6,r3
  804f6c:	d8801f15 	stw	r2,124(sp)
  804f70:	080654c0 	call	80654c <__adddf3>
  804f74:	180b883a 	mov	r5,r3
  804f78:	e006953a 	slli	r3,fp,20
  804f7c:	282f883a 	mov	r23,r5
  804f80:	d8c01315 	stw	r3,76(sp)
  804f84:	003edd06 	br	804afc <__ieee754_pow+0xde4>
  804f88:	383bc81e 	bne	r7,zero,803eac <__ieee754_pow+0x194>
  804f8c:	28c5c83a 	sub	r2,r5,r3
  804f90:	8087d83a 	sra	r3,r16,r2
  804f94:	1884983a 	sll	r2,r3,r2
  804f98:	80801b26 	beq	r16,r2,805008 <__ieee754_pow+0x12f0>
  804f9c:	0039883a 	mov	fp,zero
  804fa0:	003b9d06 	br	803e18 <__ieee754_pow+0x100>
  804fa4:	d9801f17 	ldw	r6,124(sp)
  804fa8:	8009883a 	mov	r4,r16
  804fac:	880b883a 	mov	r5,r17
  804fb0:	980f883a 	mov	r7,r19
  804fb4:	08064cc0 	call	8064cc <__subdf3>
  804fb8:	d9001d17 	ldw	r4,116(sp)
  804fbc:	a80b883a 	mov	r5,r21
  804fc0:	180f883a 	mov	r7,r3
  804fc4:	100d883a 	mov	r6,r2
  804fc8:	0806e840 	call	806e84 <__ledf2>
  804fcc:	00bfc516 	blt	zero,r2,804ee4 <__ieee754_pow+0x11cc>
  804fd0:	0430be74 	movhi	r16,49913
  804fd4:	843cd644 	addi	r16,r16,-3239
  804fd8:	04406974 	movhi	r17,421
  804fdc:	8c5b87c4 	addi	r17,r17,28191
  804fe0:	003fb606 	br	804ebc <__ieee754_pow+0x11a4>
  804fe4:	0739c83a 	sub	fp,zero,fp
  804fe8:	003fd506 	br	804f40 <__ieee754_pow+0x1228>
  804fec:	2809883a 	mov	r4,r5
  804ff0:	e00d883a 	mov	r6,fp
  804ff4:	180b883a 	mov	r5,r3
  804ff8:	080556c0 	call	80556c <scalbn>
  804ffc:	1011883a 	mov	r8,r2
  805000:	1813883a 	mov	r9,r3
  805004:	003f8906 	br	804e2c <__ieee754_pow+0x1114>
  805008:	18c0004c 	andi	r3,r3,1
  80500c:	00800084 	movi	r2,2
  805010:	10f9c83a 	sub	fp,r2,r3
  805014:	003b8006 	br	803e18 <__ieee754_pow+0x100>

00805018 <__ieee754_sqrt>:
  805018:	defffd04 	addi	sp,sp,-12
  80501c:	dc000015 	stw	r16,0(sp)
  805020:	009ffc34 	movhi	r2,32752
  805024:	2021883a 	mov	r16,r4
  805028:	291ffc2c 	andhi	r4,r5,32752
  80502c:	dc400115 	stw	r17,4(sp)
  805030:	dfc00215 	stw	ra,8(sp)
  805034:	2823883a 	mov	r17,r5
  805038:	280f883a 	mov	r7,r5
  80503c:	2807883a 	mov	r3,r5
  805040:	8011883a 	mov	r8,r16
  805044:	20807d26 	beq	r4,r2,80523c <__ieee754_sqrt+0x224>
  805048:	01408d0e 	bge	zero,r5,805280 <__ieee754_sqrt+0x268>
  80504c:	380dd53a 	srai	r6,r7,20
  805050:	3000131e 	bne	r6,zero,8050a0 <__ieee754_sqrt+0x88>
  805054:	1800041e 	bne	r3,zero,805068 <__ieee754_sqrt+0x50>
  805058:	400ed2fa 	srli	r7,r8,11
  80505c:	31bffac4 	addi	r6,r6,-21
  805060:	4010957a 	slli	r8,r8,21
  805064:	383ffc26 	beq	r7,zero,805058 <__ieee754_sqrt+0x40>
  805068:	3880042c 	andhi	r2,r7,16
  80506c:	1000991e 	bne	r2,zero,8052d4 <__ieee754_sqrt+0x2bc>
  805070:	0009883a 	mov	r4,zero
  805074:	39cf883a 	add	r7,r7,r7
  805078:	3880042c 	andhi	r2,r7,16
  80507c:	21000044 	addi	r4,r4,1
  805080:	103ffc26 	beq	r2,zero,805074 <__ieee754_sqrt+0x5c>
  805084:	00800804 	movi	r2,32
  805088:	1105c83a 	sub	r2,r2,r4
  80508c:	4086d83a 	srl	r3,r8,r2
  805090:	4110983a 	sll	r8,r8,r4
  805094:	3105c83a 	sub	r2,r6,r4
  805098:	38ceb03a 	or	r7,r7,r3
  80509c:	11800044 	addi	r6,r2,1
  8050a0:	31bf0044 	addi	r6,r6,-1023
  8050a4:	30c0004c 	andi	r3,r6,1
  8050a8:	00800434 	movhi	r2,16
  8050ac:	10bfffc4 	addi	r2,r2,-1
  8050b0:	3884703a 	and	r2,r7,r2
  8050b4:	1807003a 	cmpeq	r3,r3,zero
  8050b8:	11000434 	orhi	r4,r2,16
  8050bc:	18005426 	beq	r3,zero,805210 <__ieee754_sqrt+0x1f8>
  8050c0:	4004d7fa 	srli	r2,r8,31
  8050c4:	4207883a 	add	r3,r8,r8
  8050c8:	02800834 	movhi	r10,32
  8050cc:	1105883a 	add	r2,r2,r4
  8050d0:	2089883a 	add	r4,r4,r2
  8050d4:	0011883a 	mov	r8,zero
  8050d8:	000b883a 	mov	r5,zero
  8050dc:	0013883a 	mov	r9,zero
  8050e0:	02c00584 	movi	r11,22
  8050e4:	520f883a 	add	r7,r10,r8
  8050e8:	1804d7fa 	srli	r2,r3,31
  8050ec:	4a400044 	addi	r9,r9,1
  8050f0:	18c7883a 	add	r3,r3,r3
  8050f4:	21c00316 	blt	r4,r7,805104 <__ieee754_sqrt+0xec>
  8050f8:	21c9c83a 	sub	r4,r4,r7
  8050fc:	2a8b883a 	add	r5,r5,r10
  805100:	51d1883a 	add	r8,r10,r7
  805104:	1105883a 	add	r2,r2,r4
  805108:	5014d07a 	srli	r10,r10,1
  80510c:	2089883a 	add	r4,r4,r2
  805110:	4afff41e 	bne	r9,r11,8050e4 <__ieee754_sqrt+0xcc>
  805114:	02600034 	movhi	r9,32768
  805118:	0017883a 	mov	r11,zero
  80511c:	0019883a 	mov	r12,zero
  805120:	0015883a 	mov	r10,zero
  805124:	4821883a 	mov	r16,r9
  805128:	03c00804 	movi	r15,32
  80512c:	00000806 	br	805150 <__ieee754_sqrt+0x138>
  805130:	22003426 	beq	r4,r8,805204 <__ieee754_sqrt+0x1ec>
  805134:	1804d7fa 	srli	r2,r3,31
  805138:	52800044 	addi	r10,r10,1
  80513c:	18c7883a 	add	r3,r3,r3
  805140:	1105883a 	add	r2,r2,r4
  805144:	2089883a 	add	r4,r4,r2
  805148:	4812d07a 	srli	r9,r9,1
  80514c:	53c01326 	beq	r10,r15,80519c <__ieee754_sqrt+0x184>
  805150:	4acf883a 	add	r7,r9,r11
  805154:	413ff60e 	bge	r8,r4,805130 <__ieee754_sqrt+0x118>
  805158:	38a0002c 	andhi	r2,r7,32768
  80515c:	3a57883a 	add	r11,r7,r9
  805160:	14002426 	beq	r2,r16,8051f4 <__ieee754_sqrt+0x1dc>
  805164:	4005883a 	mov	r2,r8
  805168:	2209c83a 	sub	r4,r4,r8
  80516c:	19c0012e 	bgeu	r3,r7,805174 <__ieee754_sqrt+0x15c>
  805170:	213fffc4 	addi	r4,r4,-1
  805174:	19c7c83a 	sub	r3,r3,r7
  805178:	1011883a 	mov	r8,r2
  80517c:	1804d7fa 	srli	r2,r3,31
  805180:	52800044 	addi	r10,r10,1
  805184:	6259883a 	add	r12,r12,r9
  805188:	1105883a 	add	r2,r2,r4
  80518c:	18c7883a 	add	r3,r3,r3
  805190:	2089883a 	add	r4,r4,r2
  805194:	4812d07a 	srli	r9,r9,1
  805198:	53ffed1e 	bne	r10,r15,805150 <__ieee754_sqrt+0x138>
  80519c:	20c4b03a 	or	r2,r4,r3
  8051a0:	1000201e 	bne	r2,zero,805224 <__ieee754_sqrt+0x20c>
  8051a4:	600ed07a 	srli	r7,r12,1
  8051a8:	2880004c 	andi	r2,r5,1
  8051ac:	1005003a 	cmpeq	r2,r2,zero
  8051b0:	1000011e 	bne	r2,zero,8051b8 <__ieee754_sqrt+0x1a0>
  8051b4:	39e00034 	orhi	r7,r7,32768
  8051b8:	300dd07a 	srai	r6,r6,1
  8051bc:	280bd07a 	srai	r5,r5,1
  8051c0:	010ff834 	movhi	r4,16352
  8051c4:	300c953a 	slli	r6,r6,20
  8051c8:	290b883a 	add	r5,r5,r4
  8051cc:	3821883a 	mov	r16,r7
  8051d0:	299d883a 	add	r14,r5,r6
  8051d4:	7023883a 	mov	r17,r14
  8051d8:	8005883a 	mov	r2,r16
  8051dc:	8807883a 	mov	r3,r17
  8051e0:	dfc00217 	ldw	ra,8(sp)
  8051e4:	dc400117 	ldw	r17,4(sp)
  8051e8:	dc000017 	ldw	r16,0(sp)
  8051ec:	dec00304 	addi	sp,sp,12
  8051f0:	f800283a 	ret
  8051f4:	5884703a 	and	r2,r11,r2
  8051f8:	103fda1e 	bne	r2,zero,805164 <__ieee754_sqrt+0x14c>
  8051fc:	40800044 	addi	r2,r8,1
  805200:	003fd906 	br	805168 <__ieee754_sqrt+0x150>
  805204:	19ffd42e 	bgeu	r3,r7,805158 <__ieee754_sqrt+0x140>
  805208:	2011883a 	mov	r8,r4
  80520c:	003fc906 	br	805134 <__ieee754_sqrt+0x11c>
  805210:	4004d7fa 	srli	r2,r8,31
  805214:	4211883a 	add	r8,r8,r8
  805218:	1105883a 	add	r2,r2,r4
  80521c:	2089883a 	add	r4,r4,r2
  805220:	003fa706 	br	8050c0 <__ieee754_sqrt+0xa8>
  805224:	00bfffc4 	movi	r2,-1
  805228:	60802726 	beq	r12,r2,8052c8 <__ieee754_sqrt+0x2b0>
  80522c:	6080004c 	andi	r2,r12,1
  805230:	6085883a 	add	r2,r12,r2
  805234:	100ed07a 	srli	r7,r2,1
  805238:	003fdb06 	br	8051a8 <__ieee754_sqrt+0x190>
  80523c:	8009883a 	mov	r4,r16
  805240:	800d883a 	mov	r6,r16
  805244:	08065c00 	call	8065c0 <__muldf3>
  805248:	180f883a 	mov	r7,r3
  80524c:	880b883a 	mov	r5,r17
  805250:	8009883a 	mov	r4,r16
  805254:	100d883a 	mov	r6,r2
  805258:	080654c0 	call	80654c <__adddf3>
  80525c:	1021883a 	mov	r16,r2
  805260:	1823883a 	mov	r17,r3
  805264:	8005883a 	mov	r2,r16
  805268:	8807883a 	mov	r3,r17
  80526c:	dfc00217 	ldw	ra,8(sp)
  805270:	dc400117 	ldw	r17,4(sp)
  805274:	dc000017 	ldw	r16,0(sp)
  805278:	dec00304 	addi	sp,sp,12
  80527c:	f800283a 	ret
  805280:	00a00034 	movhi	r2,32768
  805284:	10bfffc4 	addi	r2,r2,-1
  805288:	2884703a 	and	r2,r5,r2
  80528c:	8084b03a 	or	r2,r16,r2
  805290:	103fd126 	beq	r2,zero,8051d8 <__ieee754_sqrt+0x1c0>
  805294:	283f6d26 	beq	r5,zero,80504c <__ieee754_sqrt+0x34>
  805298:	280f883a 	mov	r7,r5
  80529c:	8009883a 	mov	r4,r16
  8052a0:	800d883a 	mov	r6,r16
  8052a4:	08064cc0 	call	8064cc <__subdf3>
  8052a8:	1009883a 	mov	r4,r2
  8052ac:	180b883a 	mov	r5,r3
  8052b0:	100d883a 	mov	r6,r2
  8052b4:	180f883a 	mov	r7,r3
  8052b8:	08069840 	call	806984 <__divdf3>
  8052bc:	1021883a 	mov	r16,r2
  8052c0:	1823883a 	mov	r17,r3
  8052c4:	003fc406 	br	8051d8 <__ieee754_sqrt+0x1c0>
  8052c8:	29400044 	addi	r5,r5,1
  8052cc:	000f883a 	mov	r7,zero
  8052d0:	003fb506 	br	8051a8 <__ieee754_sqrt+0x190>
  8052d4:	0009883a 	mov	r4,zero
  8052d8:	00800804 	movi	r2,32
  8052dc:	003f6b06 	br	80508c <__ieee754_sqrt+0x74>

008052e0 <fabs>:
  8052e0:	01e00034 	movhi	r7,32768
  8052e4:	39ffffc4 	addi	r7,r7,-1
  8052e8:	394e703a 	and	r7,r7,r5
  8052ec:	2005883a 	mov	r2,r4
  8052f0:	3807883a 	mov	r3,r7
  8052f4:	f800283a 	ret

008052f8 <finite>:
  8052f8:	00a00034 	movhi	r2,32768
  8052fc:	10bfffc4 	addi	r2,r2,-1
  805300:	2884703a 	and	r2,r5,r2
  805304:	01600434 	movhi	r5,32784
  805308:	1145883a 	add	r2,r2,r5
  80530c:	1004d7fa 	srli	r2,r2,31
  805310:	f800283a 	ret

00805314 <__isnand>:
  805314:	200d883a 	mov	r6,r4
  805318:	0109c83a 	sub	r4,zero,r4
  80531c:	2188b03a 	or	r4,r4,r6
  805320:	2008d7fa 	srli	r4,r4,31
  805324:	00a00034 	movhi	r2,32768
  805328:	10bfffc4 	addi	r2,r2,-1
  80532c:	1144703a 	and	r2,r2,r5
  805330:	2088b03a 	or	r4,r4,r2
  805334:	009ffc34 	movhi	r2,32752
  805338:	1105c83a 	sub	r2,r2,r4
  80533c:	1004d7fa 	srli	r2,r2,31
  805340:	f800283a 	ret

00805344 <matherr>:
  805344:	0005883a 	mov	r2,zero
  805348:	f800283a 	ret

0080534c <nan>:
  80534c:	015ffe34 	movhi	r5,32760
  805350:	0005883a 	mov	r2,zero
  805354:	2807883a 	mov	r3,r5
  805358:	f800283a 	ret

0080535c <rint>:
  80535c:	2015883a 	mov	r10,r4
  805360:	2809d53a 	srai	r4,r5,20
  805364:	defff904 	addi	sp,sp,-28
  805368:	034004c4 	movi	r13,19
  80536c:	2101ffcc 	andi	r4,r4,2047
  805370:	227f0044 	addi	r9,r4,-1023
  805374:	dc800415 	stw	r18,16(sp)
  805378:	dfc00615 	stw	ra,24(sp)
  80537c:	dcc00515 	stw	r19,20(sp)
  805380:	dc400315 	stw	r17,12(sp)
  805384:	dc000215 	stw	r16,8(sp)
  805388:	2817883a 	mov	r11,r5
  80538c:	500d883a 	mov	r6,r10
  805390:	2824d7fa 	srli	r18,r5,31
  805394:	6a403016 	blt	r13,r9,805458 <rint+0xfc>
  805398:	48004916 	blt	r9,zero,8054c0 <rint+0x164>
  80539c:	00800434 	movhi	r2,16
  8053a0:	10bfffc4 	addi	r2,r2,-1
  8053a4:	1247d83a 	sra	r3,r2,r9
  8053a8:	2809883a 	mov	r4,r5
  8053ac:	1944703a 	and	r2,r3,r5
  8053b0:	5084b03a 	or	r2,r10,r2
  8053b4:	10001f26 	beq	r2,zero,805434 <rint+0xd8>
  8053b8:	180ad07a 	srli	r5,r3,1
  8053bc:	5944703a 	and	r2,r11,r5
  8053c0:	5084b03a 	or	r2,r10,r2
  8053c4:	10000626 	beq	r2,zero,8053e0 <rint+0x84>
  8053c8:	4b406626 	beq	r9,r13,805564 <rint+0x208>
  8053cc:	00c000b4 	movhi	r3,2
  8053d0:	1a47d83a 	sra	r3,r3,r9
  8053d4:	0144303a 	nor	r2,zero,r5
  8053d8:	5884703a 	and	r2,r11,r2
  8053dc:	10c8b03a 	or	r4,r2,r3
  8053e0:	900690fa 	slli	r3,r18,3
  8053e4:	008020b4 	movhi	r2,130
  8053e8:	10b28e04 	addi	r2,r2,-13768
  8053ec:	200f883a 	mov	r7,r4
  8053f0:	1887883a 	add	r3,r3,r2
  8053f4:	1c000017 	ldw	r16,0(r3)
  8053f8:	1c400117 	ldw	r17,4(r3)
  8053fc:	8009883a 	mov	r4,r16
  805400:	880b883a 	mov	r5,r17
  805404:	080654c0 	call	80654c <__adddf3>
  805408:	d8800015 	stw	r2,0(sp)
  80540c:	d8c00115 	stw	r3,4(sp)
  805410:	d8800017 	ldw	r2,0(sp)
  805414:	d8c00117 	ldw	r3,4(sp)
  805418:	880f883a 	mov	r7,r17
  80541c:	800d883a 	mov	r6,r16
  805420:	180b883a 	mov	r5,r3
  805424:	1009883a 	mov	r4,r2
  805428:	08064cc0 	call	8064cc <__subdf3>
  80542c:	1015883a 	mov	r10,r2
  805430:	1817883a 	mov	r11,r3
  805434:	5005883a 	mov	r2,r10
  805438:	5807883a 	mov	r3,r11
  80543c:	dfc00617 	ldw	ra,24(sp)
  805440:	dcc00517 	ldw	r19,20(sp)
  805444:	dc800417 	ldw	r18,16(sp)
  805448:	dc400317 	ldw	r17,12(sp)
  80544c:	dc000217 	ldw	r16,8(sp)
  805450:	dec00704 	addi	sp,sp,28
  805454:	f800283a 	ret
  805458:	00800cc4 	movi	r2,51
  80545c:	12400f16 	blt	r2,r9,80549c <rint+0x140>
  805460:	213efb44 	addi	r4,r4,-1043
  805464:	00bfffc4 	movi	r2,-1
  805468:	1104d83a 	srl	r2,r2,r4
  80546c:	5086703a 	and	r3,r10,r2
  805470:	183ff026 	beq	r3,zero,805434 <rint+0xd8>
  805474:	100ad07a 	srli	r5,r2,1
  805478:	5144703a 	and	r2,r10,r5
  80547c:	10000526 	beq	r2,zero,805494 <rint+0x138>
  805480:	00d00034 	movhi	r3,16384
  805484:	1907d83a 	sra	r3,r3,r4
  805488:	0144303a 	nor	r2,zero,r5
  80548c:	5084703a 	and	r2,r10,r2
  805490:	10ccb03a 	or	r6,r2,r3
  805494:	5809883a 	mov	r4,r11
  805498:	003fd106 	br	8053e0 <rint+0x84>
  80549c:	00810004 	movi	r2,1024
  8054a0:	48bfe41e 	bne	r9,r2,805434 <rint+0xd8>
  8054a4:	5009883a 	mov	r4,r10
  8054a8:	500d883a 	mov	r6,r10
  8054ac:	280f883a 	mov	r7,r5
  8054b0:	080654c0 	call	80654c <__adddf3>
  8054b4:	1015883a 	mov	r10,r2
  8054b8:	1817883a 	mov	r11,r3
  8054bc:	003fdd06 	br	805434 <rint+0xd8>
  8054c0:	04e00034 	movhi	r19,32768
  8054c4:	9cffffc4 	addi	r19,r19,-1
  8054c8:	2cc4703a 	and	r2,r5,r19
  8054cc:	5084b03a 	or	r2,r10,r2
  8054d0:	103fd826 	beq	r2,zero,805434 <rint+0xd8>
  8054d4:	00c00434 	movhi	r3,16
  8054d8:	18ffffc4 	addi	r3,r3,-1
  8054dc:	28c6703a 	and	r3,r5,r3
  8054e0:	50c6b03a 	or	r3,r10,r3
  8054e4:	00cdc83a 	sub	r6,zero,r3
  8054e8:	900a90fa 	slli	r5,r18,3
  8054ec:	1986b03a 	or	r3,r3,r6
  8054f0:	010020b4 	movhi	r4,130
  8054f4:	21328e04 	addi	r4,r4,-13768
  8054f8:	1806d33a 	srli	r3,r3,12
  8054fc:	290b883a 	add	r5,r5,r4
  805500:	2c000017 	ldw	r16,0(r5)
  805504:	2c400117 	ldw	r17,4(r5)
  805508:	593fffac 	andhi	r4,r11,65534
  80550c:	18c0022c 	andhi	r3,r3,8
  805510:	1906b03a 	or	r3,r3,r4
  805514:	500d883a 	mov	r6,r10
  805518:	180f883a 	mov	r7,r3
  80551c:	8009883a 	mov	r4,r16
  805520:	880b883a 	mov	r5,r17
  805524:	080654c0 	call	80654c <__adddf3>
  805528:	d8800015 	stw	r2,0(sp)
  80552c:	d8c00115 	stw	r3,4(sp)
  805530:	d8800017 	ldw	r2,0(sp)
  805534:	d8c00117 	ldw	r3,4(sp)
  805538:	880f883a 	mov	r7,r17
  80553c:	800d883a 	mov	r6,r16
  805540:	180b883a 	mov	r5,r3
  805544:	1009883a 	mov	r4,r2
  805548:	08064cc0 	call	8064cc <__subdf3>
  80554c:	901297fa 	slli	r9,r18,31
  805550:	98d0703a 	and	r8,r19,r3
  805554:	1015883a 	mov	r10,r2
  805558:	4250b03a 	or	r8,r8,r9
  80555c:	4017883a 	mov	r11,r8
  805560:	003fb406 	br	805434 <rint+0xd8>
  805564:	01900034 	movhi	r6,16384
  805568:	003f9d06 	br	8053e0 <rint+0x84>

0080556c <scalbn>:
  80556c:	2011883a 	mov	r8,r4
  805570:	291ffc2c 	andhi	r4,r5,32752
  805574:	2009d53a 	srai	r4,r4,20
  805578:	defffd04 	addi	sp,sp,-12
  80557c:	dc000015 	stw	r16,0(sp)
  805580:	dfc00215 	stw	ra,8(sp)
  805584:	dc400115 	stw	r17,4(sp)
  805588:	2813883a 	mov	r9,r5
  80558c:	2815883a 	mov	r10,r5
  805590:	3021883a 	mov	r16,r6
  805594:	2000281e 	bne	r4,zero,805638 <scalbn+0xcc>
  805598:	00a00034 	movhi	r2,32768
  80559c:	10bfffc4 	addi	r2,r2,-1
  8055a0:	2884703a 	and	r2,r5,r2
  8055a4:	4084b03a 	or	r2,r8,r2
  8055a8:	10001826 	beq	r2,zero,80560c <scalbn+0xa0>
  8055ac:	0005883a 	mov	r2,zero
  8055b0:	00d0d434 	movhi	r3,17232
  8055b4:	4009883a 	mov	r4,r8
  8055b8:	100d883a 	mov	r6,r2
  8055bc:	180f883a 	mov	r7,r3
  8055c0:	08065c00 	call	8065c0 <__muldf3>
  8055c4:	100b883a 	mov	r5,r2
  8055c8:	1011883a 	mov	r8,r2
  8055cc:	00bffff4 	movhi	r2,65535
  8055d0:	108f2c04 	addi	r2,r2,15536
  8055d4:	180d883a 	mov	r6,r3
  8055d8:	1813883a 	mov	r9,r3
  8055dc:	8080120e 	bge	r16,r2,805628 <scalbn+0xbc>
  8055e0:	00b0be74 	movhi	r2,49913
  8055e4:	10bcd644 	addi	r2,r2,-3239
  8055e8:	00c06974 	movhi	r3,421
  8055ec:	18db87c4 	addi	r3,r3,28191
  8055f0:	2809883a 	mov	r4,r5
  8055f4:	180f883a 	mov	r7,r3
  8055f8:	300b883a 	mov	r5,r6
  8055fc:	100d883a 	mov	r6,r2
  805600:	08065c00 	call	8065c0 <__muldf3>
  805604:	1011883a 	mov	r8,r2
  805608:	1813883a 	mov	r9,r3
  80560c:	4005883a 	mov	r2,r8
  805610:	4807883a 	mov	r3,r9
  805614:	dfc00217 	ldw	ra,8(sp)
  805618:	dc400117 	ldw	r17,4(sp)
  80561c:	dc000017 	ldw	r16,0(sp)
  805620:	dec00304 	addi	sp,sp,12
  805624:	f800283a 	ret
  805628:	189ffc2c 	andhi	r2,r3,32752
  80562c:	1005d53a 	srai	r2,r2,20
  805630:	1815883a 	mov	r10,r3
  805634:	113ff284 	addi	r4,r2,-54
  805638:	0081ffc4 	movi	r2,2047
  80563c:	20801126 	beq	r4,r2,805684 <scalbn+0x118>
  805640:	2409883a 	add	r4,r4,r16
  805644:	0081ff84 	movi	r2,2046
  805648:	11001c16 	blt	r2,r4,8056bc <scalbn+0x150>
  80564c:	0100290e 	bge	zero,r4,8056f4 <scalbn+0x188>
  805650:	200a953a 	slli	r5,r4,20
  805654:	01200434 	movhi	r4,32784
  805658:	213fffc4 	addi	r4,r4,-1
  80565c:	5108703a 	and	r4,r10,r4
  805660:	2148b03a 	or	r4,r4,r5
  805664:	2013883a 	mov	r9,r4
  805668:	4005883a 	mov	r2,r8
  80566c:	4807883a 	mov	r3,r9
  805670:	dfc00217 	ldw	ra,8(sp)
  805674:	dc400117 	ldw	r17,4(sp)
  805678:	dc000017 	ldw	r16,0(sp)
  80567c:	dec00304 	addi	sp,sp,12
  805680:	f800283a 	ret
  805684:	480f883a 	mov	r7,r9
  805688:	4009883a 	mov	r4,r8
  80568c:	480b883a 	mov	r5,r9
  805690:	400d883a 	mov	r6,r8
  805694:	080654c0 	call	80654c <__adddf3>
  805698:	1011883a 	mov	r8,r2
  80569c:	1813883a 	mov	r9,r3
  8056a0:	4005883a 	mov	r2,r8
  8056a4:	4807883a 	mov	r3,r9
  8056a8:	dfc00217 	ldw	ra,8(sp)
  8056ac:	dc400117 	ldw	r17,4(sp)
  8056b0:	dc000017 	ldw	r16,0(sp)
  8056b4:	dec00304 	addi	sp,sp,12
  8056b8:	f800283a 	ret
  8056bc:	04220034 	movhi	r16,34816
  8056c0:	841d6704 	addi	r16,r16,30108
  8056c4:	045f8e34 	movhi	r17,32312
  8056c8:	8c790f04 	addi	r17,r17,-7108
  8056cc:	480f883a 	mov	r7,r9
  8056d0:	400d883a 	mov	r6,r8
  8056d4:	8009883a 	mov	r4,r16
  8056d8:	880b883a 	mov	r5,r17
  8056dc:	080574c0 	call	80574c <copysign>
  8056e0:	180b883a 	mov	r5,r3
  8056e4:	800d883a 	mov	r6,r16
  8056e8:	880f883a 	mov	r7,r17
  8056ec:	1009883a 	mov	r4,r2
  8056f0:	003fc306 	br	805600 <scalbn+0x94>
  8056f4:	00bff284 	movi	r2,-54
  8056f8:	11000716 	blt	r2,r4,805718 <scalbn+0x1ac>
  8056fc:	00b0d414 	movui	r2,50000
  805700:	143fee16 	blt	r2,r16,8056bc <scalbn+0x150>
  805704:	0430be74 	movhi	r16,49913
  805708:	843cd644 	addi	r16,r16,-3239
  80570c:	04406974 	movhi	r17,421
  805710:	8c5b87c4 	addi	r17,r17,28191
  805714:	003fed06 	br	8056cc <scalbn+0x160>
  805718:	21000d84 	addi	r4,r4,54
  80571c:	2008953a 	slli	r4,r4,20
  805720:	01e00434 	movhi	r7,32784
  805724:	39ffffc4 	addi	r7,r7,-1
  805728:	51ce703a 	and	r7,r10,r7
  80572c:	390eb03a 	or	r7,r7,r4
  805730:	024f2434 	movhi	r9,15504
  805734:	4009883a 	mov	r4,r8
  805738:	0011883a 	mov	r8,zero
  80573c:	380b883a 	mov	r5,r7
  805740:	400d883a 	mov	r6,r8
  805744:	480f883a 	mov	r7,r9
  805748:	003fad06 	br	805600 <scalbn+0x94>

0080574c <copysign>:
  80574c:	3813883a 	mov	r9,r7
  805750:	01e00034 	movhi	r7,32768
  805754:	39ffffc4 	addi	r7,r7,-1
  805758:	394e703a 	and	r7,r7,r5
  80575c:	4aa0002c 	andhi	r10,r9,32768
  805760:	3a8eb03a 	or	r7,r7,r10
  805764:	2005883a 	mov	r2,r4
  805768:	3807883a 	mov	r3,r7
  80576c:	f800283a 	ret

00805770 <__fixunsdfsi>:
  805770:	defffb04 	addi	sp,sp,-20
  805774:	dc400115 	stw	r17,4(sp)
  805778:	dc000015 	stw	r16,0(sp)
  80577c:	04507834 	movhi	r17,16864
  805780:	0021883a 	mov	r16,zero
  805784:	800d883a 	mov	r6,r16
  805788:	880f883a 	mov	r7,r17
  80578c:	dcc00315 	stw	r19,12(sp)
  805790:	dc800215 	stw	r18,8(sp)
  805794:	2827883a 	mov	r19,r5
  805798:	2025883a 	mov	r18,r4
  80579c:	dfc00415 	stw	ra,16(sp)
  8057a0:	0806d740 	call	806d74 <__gedf2>
  8057a4:	000d883a 	mov	r6,zero
  8057a8:	880f883a 	mov	r7,r17
  8057ac:	980b883a 	mov	r5,r19
  8057b0:	9009883a 	mov	r4,r18
  8057b4:	10000d16 	blt	r2,zero,8057ec <__fixunsdfsi+0x7c>
  8057b8:	08064cc0 	call	8064cc <__subdf3>
  8057bc:	180b883a 	mov	r5,r3
  8057c0:	1009883a 	mov	r4,r2
  8057c4:	08070040 	call	807004 <__fixdfsi>
  8057c8:	00e00034 	movhi	r3,32768
  8057cc:	10c5883a 	add	r2,r2,r3
  8057d0:	dfc00417 	ldw	ra,16(sp)
  8057d4:	dcc00317 	ldw	r19,12(sp)
  8057d8:	dc800217 	ldw	r18,8(sp)
  8057dc:	dc400117 	ldw	r17,4(sp)
  8057e0:	dc000017 	ldw	r16,0(sp)
  8057e4:	dec00504 	addi	sp,sp,20
  8057e8:	f800283a 	ret
  8057ec:	980b883a 	mov	r5,r19
  8057f0:	9009883a 	mov	r4,r18
  8057f4:	08070040 	call	807004 <__fixdfsi>
  8057f8:	dfc00417 	ldw	ra,16(sp)
  8057fc:	dcc00317 	ldw	r19,12(sp)
  805800:	dc800217 	ldw	r18,8(sp)
  805804:	dc400117 	ldw	r17,4(sp)
  805808:	dc000017 	ldw	r16,0(sp)
  80580c:	dec00504 	addi	sp,sp,20
  805810:	f800283a 	ret

00805814 <_fpadd_parts>:
  805814:	21c00017 	ldw	r7,0(r4)
  805818:	02000044 	movi	r8,1
  80581c:	41c0332e 	bgeu	r8,r7,8058ec <_fpadd_parts+0xd8>
  805820:	28800017 	ldw	r2,0(r5)
  805824:	4080462e 	bgeu	r8,r2,805940 <_fpadd_parts+0x12c>
  805828:	00c00104 	movi	r3,4
  80582c:	38c06b26 	beq	r7,r3,8059dc <_fpadd_parts+0x1c8>
  805830:	10c04326 	beq	r2,r3,805940 <_fpadd_parts+0x12c>
  805834:	00c00084 	movi	r3,2
  805838:	10c02e26 	beq	r2,r3,8058f4 <_fpadd_parts+0xe0>
  80583c:	38c04026 	beq	r7,r3,805940 <_fpadd_parts+0x12c>
  805840:	22800217 	ldw	r10,8(r4)
  805844:	28c00217 	ldw	r3,8(r5)
  805848:	23000317 	ldw	r12,12(r4)
  80584c:	2a400317 	ldw	r9,12(r5)
  805850:	50cfc83a 	sub	r7,r10,r3
  805854:	3817883a 	mov	r11,r7
  805858:	38004f16 	blt	r7,zero,805998 <_fpadd_parts+0x184>
  80585c:	008007c4 	movi	r2,31
  805860:	11c03316 	blt	r2,r7,805930 <_fpadd_parts+0x11c>
  805864:	02c0540e 	bge	zero,r11,8059b8 <_fpadd_parts+0x1a4>
  805868:	41c4983a 	sll	r2,r8,r7
  80586c:	49c6d83a 	srl	r3,r9,r7
  805870:	10bfffc4 	addi	r2,r2,-1
  805874:	4884703a 	and	r2,r9,r2
  805878:	1004c03a 	cmpne	r2,r2,zero
  80587c:	1892b03a 	or	r9,r3,r2
  805880:	20c00117 	ldw	r3,4(r4)
  805884:	28800117 	ldw	r2,4(r5)
  805888:	18803c26 	beq	r3,r2,80597c <_fpadd_parts+0x168>
  80588c:	18002f26 	beq	r3,zero,80594c <_fpadd_parts+0x138>
  805890:	4b05c83a 	sub	r2,r9,r12
  805894:	10004216 	blt	r2,zero,8059a0 <_fpadd_parts+0x18c>
  805898:	32800215 	stw	r10,8(r6)
  80589c:	30800315 	stw	r2,12(r6)
  8058a0:	30000115 	stw	zero,4(r6)
  8058a4:	31000317 	ldw	r4,12(r6)
  8058a8:	01d00034 	movhi	r7,16384
  8058ac:	39ffff84 	addi	r7,r7,-2
  8058b0:	20bfffc4 	addi	r2,r4,-1
  8058b4:	2007883a 	mov	r3,r4
  8058b8:	38800836 	bltu	r7,r2,8058dc <_fpadd_parts+0xc8>
  8058bc:	31400217 	ldw	r5,8(r6)
  8058c0:	18c9883a 	add	r4,r3,r3
  8058c4:	20bfffc4 	addi	r2,r4,-1
  8058c8:	297fffc4 	addi	r5,r5,-1
  8058cc:	2007883a 	mov	r3,r4
  8058d0:	38bffb2e 	bgeu	r7,r2,8058c0 <_fpadd_parts+0xac>
  8058d4:	31400215 	stw	r5,8(r6)
  8058d8:	31000315 	stw	r4,12(r6)
  8058dc:	008000c4 	movi	r2,3
  8058e0:	30800015 	stw	r2,0(r6)
  8058e4:	20001b16 	blt	r4,zero,805954 <_fpadd_parts+0x140>
  8058e8:	3009883a 	mov	r4,r6
  8058ec:	2005883a 	mov	r2,r4
  8058f0:	f800283a 	ret
  8058f4:	38fffd1e 	bne	r7,r3,8058ec <_fpadd_parts+0xd8>
  8058f8:	31c00015 	stw	r7,0(r6)
  8058fc:	20800117 	ldw	r2,4(r4)
  805900:	30800115 	stw	r2,4(r6)
  805904:	20c00217 	ldw	r3,8(r4)
  805908:	30c00215 	stw	r3,8(r6)
  80590c:	20800317 	ldw	r2,12(r4)
  805910:	30800315 	stw	r2,12(r6)
  805914:	20c00117 	ldw	r3,4(r4)
  805918:	28800117 	ldw	r2,4(r5)
  80591c:	3009883a 	mov	r4,r6
  805920:	1886703a 	and	r3,r3,r2
  805924:	2005883a 	mov	r2,r4
  805928:	30c00115 	stw	r3,4(r6)
  80592c:	f800283a 	ret
  805930:	1a801716 	blt	r3,r10,805990 <_fpadd_parts+0x17c>
  805934:	1815883a 	mov	r10,r3
  805938:	0019883a 	mov	r12,zero
  80593c:	003fd006 	br	805880 <_fpadd_parts+0x6c>
  805940:	2809883a 	mov	r4,r5
  805944:	2005883a 	mov	r2,r4
  805948:	f800283a 	ret
  80594c:	6245c83a 	sub	r2,r12,r9
  805950:	003fd006 	br	805894 <_fpadd_parts+0x80>
  805954:	30800217 	ldw	r2,8(r6)
  805958:	2006d07a 	srli	r3,r4,1
  80595c:	2100004c 	andi	r4,r4,1
  805960:	10800044 	addi	r2,r2,1
  805964:	1906b03a 	or	r3,r3,r4
  805968:	3009883a 	mov	r4,r6
  80596c:	30800215 	stw	r2,8(r6)
  805970:	2005883a 	mov	r2,r4
  805974:	30c00315 	stw	r3,12(r6)
  805978:	f800283a 	ret
  80597c:	4b09883a 	add	r4,r9,r12
  805980:	30c00115 	stw	r3,4(r6)
  805984:	32800215 	stw	r10,8(r6)
  805988:	31000315 	stw	r4,12(r6)
  80598c:	003fd306 	br	8058dc <_fpadd_parts+0xc8>
  805990:	0013883a 	mov	r9,zero
  805994:	003fba06 	br	805880 <_fpadd_parts+0x6c>
  805998:	01cfc83a 	sub	r7,zero,r7
  80599c:	003faf06 	br	80585c <_fpadd_parts+0x48>
  8059a0:	0089c83a 	sub	r4,zero,r2
  8059a4:	00800044 	movi	r2,1
  8059a8:	30800115 	stw	r2,4(r6)
  8059ac:	32800215 	stw	r10,8(r6)
  8059b0:	31000315 	stw	r4,12(r6)
  8059b4:	003fbb06 	br	8058a4 <_fpadd_parts+0x90>
  8059b8:	583fb126 	beq	r11,zero,805880 <_fpadd_parts+0x6c>
  8059bc:	41c4983a 	sll	r2,r8,r7
  8059c0:	61c6d83a 	srl	r3,r12,r7
  8059c4:	51d5883a 	add	r10,r10,r7
  8059c8:	10bfffc4 	addi	r2,r2,-1
  8059cc:	6084703a 	and	r2,r12,r2
  8059d0:	1004c03a 	cmpne	r2,r2,zero
  8059d4:	1898b03a 	or	r12,r3,r2
  8059d8:	003fa906 	br	805880 <_fpadd_parts+0x6c>
  8059dc:	11ffc31e 	bne	r2,r7,8058ec <_fpadd_parts+0xd8>
  8059e0:	28c00117 	ldw	r3,4(r5)
  8059e4:	20800117 	ldw	r2,4(r4)
  8059e8:	10ffc026 	beq	r2,r3,8058ec <_fpadd_parts+0xd8>
  8059ec:	010020b4 	movhi	r4,130
  8059f0:	21329204 	addi	r4,r4,-13752
  8059f4:	003fbd06 	br	8058ec <_fpadd_parts+0xd8>

008059f8 <__subsf3>:
  8059f8:	deffef04 	addi	sp,sp,-68
  8059fc:	dcc00f15 	stw	r19,60(sp)
  805a00:	dcc00204 	addi	r19,sp,8
  805a04:	dc400e15 	stw	r17,56(sp)
  805a08:	d9000015 	stw	r4,0(sp)
  805a0c:	d9400115 	stw	r5,4(sp)
  805a10:	d809883a 	mov	r4,sp
  805a14:	980b883a 	mov	r5,r19
  805a18:	dc400604 	addi	r17,sp,24
  805a1c:	dfc01015 	stw	ra,64(sp)
  805a20:	08076e00 	call	8076e0 <__unpack_f>
  805a24:	d9000104 	addi	r4,sp,4
  805a28:	880b883a 	mov	r5,r17
  805a2c:	08076e00 	call	8076e0 <__unpack_f>
  805a30:	d8800717 	ldw	r2,28(sp)
  805a34:	9809883a 	mov	r4,r19
  805a38:	880b883a 	mov	r5,r17
  805a3c:	d9800a04 	addi	r6,sp,40
  805a40:	1080005c 	xori	r2,r2,1
  805a44:	d8800715 	stw	r2,28(sp)
  805a48:	08058140 	call	805814 <_fpadd_parts>
  805a4c:	1009883a 	mov	r4,r2
  805a50:	08075800 	call	807580 <__pack_f>
  805a54:	dfc01017 	ldw	ra,64(sp)
  805a58:	dcc00f17 	ldw	r19,60(sp)
  805a5c:	dc400e17 	ldw	r17,56(sp)
  805a60:	dec01104 	addi	sp,sp,68
  805a64:	f800283a 	ret

00805a68 <__addsf3>:
  805a68:	deffef04 	addi	sp,sp,-68
  805a6c:	dcc00f15 	stw	r19,60(sp)
  805a70:	dcc00204 	addi	r19,sp,8
  805a74:	dc400e15 	stw	r17,56(sp)
  805a78:	d9000015 	stw	r4,0(sp)
  805a7c:	d9400115 	stw	r5,4(sp)
  805a80:	d809883a 	mov	r4,sp
  805a84:	980b883a 	mov	r5,r19
  805a88:	dc400604 	addi	r17,sp,24
  805a8c:	dfc01015 	stw	ra,64(sp)
  805a90:	08076e00 	call	8076e0 <__unpack_f>
  805a94:	d9000104 	addi	r4,sp,4
  805a98:	880b883a 	mov	r5,r17
  805a9c:	08076e00 	call	8076e0 <__unpack_f>
  805aa0:	d9800a04 	addi	r6,sp,40
  805aa4:	9809883a 	mov	r4,r19
  805aa8:	880b883a 	mov	r5,r17
  805aac:	08058140 	call	805814 <_fpadd_parts>
  805ab0:	1009883a 	mov	r4,r2
  805ab4:	08075800 	call	807580 <__pack_f>
  805ab8:	dfc01017 	ldw	ra,64(sp)
  805abc:	dcc00f17 	ldw	r19,60(sp)
  805ac0:	dc400e17 	ldw	r17,56(sp)
  805ac4:	dec01104 	addi	sp,sp,68
  805ac8:	f800283a 	ret

00805acc <__mulsf3>:
  805acc:	deffef04 	addi	sp,sp,-68
  805ad0:	dc400f15 	stw	r17,60(sp)
  805ad4:	dc400204 	addi	r17,sp,8
  805ad8:	dc000e15 	stw	r16,56(sp)
  805adc:	d9000015 	stw	r4,0(sp)
  805ae0:	d9400115 	stw	r5,4(sp)
  805ae4:	d809883a 	mov	r4,sp
  805ae8:	880b883a 	mov	r5,r17
  805aec:	dc000604 	addi	r16,sp,24
  805af0:	dfc01015 	stw	ra,64(sp)
  805af4:	08076e00 	call	8076e0 <__unpack_f>
  805af8:	d9000104 	addi	r4,sp,4
  805afc:	800b883a 	mov	r5,r16
  805b00:	08076e00 	call	8076e0 <__unpack_f>
  805b04:	d9000217 	ldw	r4,8(sp)
  805b08:	00800044 	movi	r2,1
  805b0c:	01400104 	movi	r5,4
  805b10:	1100142e 	bgeu	r2,r4,805b64 <__mulsf3+0x98>
  805b14:	d8c00617 	ldw	r3,24(sp)
  805b18:	10c0052e 	bgeu	r2,r3,805b30 <__mulsf3+0x64>
  805b1c:	21400f26 	beq	r4,r5,805b5c <__mulsf3+0x90>
  805b20:	19405d26 	beq	r3,r5,805c98 <__mulsf3+0x1cc>
  805b24:	00800084 	movi	r2,2
  805b28:	20800e26 	beq	r4,r2,805b64 <__mulsf3+0x98>
  805b2c:	1880181e 	bne	r3,r2,805b90 <__mulsf3+0xc4>
  805b30:	d8c00717 	ldw	r3,28(sp)
  805b34:	d8800317 	ldw	r2,12(sp)
  805b38:	8009883a 	mov	r4,r16
  805b3c:	10c4c03a 	cmpne	r2,r2,r3
  805b40:	d8800715 	stw	r2,28(sp)
  805b44:	08075800 	call	807580 <__pack_f>
  805b48:	dfc01017 	ldw	ra,64(sp)
  805b4c:	dc400f17 	ldw	r17,60(sp)
  805b50:	dc000e17 	ldw	r16,56(sp)
  805b54:	dec01104 	addi	sp,sp,68
  805b58:	f800283a 	ret
  805b5c:	00800084 	movi	r2,2
  805b60:	18804f26 	beq	r3,r2,805ca0 <__mulsf3+0x1d4>
  805b64:	d8800317 	ldw	r2,12(sp)
  805b68:	d8c00717 	ldw	r3,28(sp)
  805b6c:	8809883a 	mov	r4,r17
  805b70:	10c4c03a 	cmpne	r2,r2,r3
  805b74:	d8800315 	stw	r2,12(sp)
  805b78:	08075800 	call	807580 <__pack_f>
  805b7c:	dfc01017 	ldw	ra,64(sp)
  805b80:	dc400f17 	ldw	r17,60(sp)
  805b84:	dc000e17 	ldw	r16,56(sp)
  805b88:	dec01104 	addi	sp,sp,68
  805b8c:	f800283a 	ret
  805b90:	d8800517 	ldw	r2,20(sp)
  805b94:	da000917 	ldw	r8,36(sp)
  805b98:	0013883a 	mov	r9,zero
  805b9c:	0007883a 	mov	r3,zero
  805ba0:	480f883a 	mov	r7,r9
  805ba4:	180b883a 	mov	r5,r3
  805ba8:	400d883a 	mov	r6,r8
  805bac:	1009883a 	mov	r4,r2
  805bb0:	08074680 	call	807468 <__muldi3>
  805bb4:	da800417 	ldw	r10,16(sp)
  805bb8:	d9800817 	ldw	r6,32(sp)
  805bbc:	da400317 	ldw	r9,12(sp)
  805bc0:	52800084 	addi	r10,r10,2
  805bc4:	3295883a 	add	r10,r6,r10
  805bc8:	d9800717 	ldw	r6,28(sp)
  805bcc:	180b883a 	mov	r5,r3
  805bd0:	180f883a 	mov	r7,r3
  805bd4:	4992c03a 	cmpne	r9,r9,r6
  805bd8:	da400b15 	stw	r9,44(sp)
  805bdc:	1007883a 	mov	r3,r2
  805be0:	da800c15 	stw	r10,48(sp)
  805be4:	2800070e 	bge	r5,zero,805c04 <__mulsf3+0x138>
  805be8:	2880004c 	andi	r2,r5,1
  805bec:	1005003a 	cmpeq	r2,r2,zero
  805bf0:	500d883a 	mov	r6,r10
  805bf4:	10001e26 	beq	r2,zero,805c70 <__mulsf3+0x1a4>
  805bf8:	380ed07a 	srli	r7,r7,1
  805bfc:	31800044 	addi	r6,r6,1
  805c00:	d9800c15 	stw	r6,48(sp)
  805c04:	01100034 	movhi	r4,16384
  805c08:	213fffc4 	addi	r4,r4,-1
  805c0c:	21c00b36 	bltu	r4,r7,805c3c <__mulsf3+0x170>
  805c10:	d8800c17 	ldw	r2,48(sp)
  805c14:	00000206 	br	805c20 <__mulsf3+0x154>
  805c18:	18c7883a 	add	r3,r3,r3
  805c1c:	21c00636 	bltu	r4,r7,805c38 <__mulsf3+0x16c>
  805c20:	10bfffc4 	addi	r2,r2,-1
  805c24:	39cf883a 	add	r7,r7,r7
  805c28:	183ffb0e 	bge	r3,zero,805c18 <__mulsf3+0x14c>
  805c2c:	39c00054 	ori	r7,r7,1
  805c30:	18c7883a 	add	r3,r3,r3
  805c34:	21fffa2e 	bgeu	r4,r7,805c20 <__mulsf3+0x154>
  805c38:	d8800c15 	stw	r2,48(sp)
  805c3c:	39001fcc 	andi	r4,r7,127
  805c40:	00801004 	movi	r2,64
  805c44:	20800d26 	beq	r4,r2,805c7c <__mulsf3+0x1b0>
  805c48:	008000c4 	movi	r2,3
  805c4c:	d9000a04 	addi	r4,sp,40
  805c50:	d9c00d15 	stw	r7,52(sp)
  805c54:	d8800a15 	stw	r2,40(sp)
  805c58:	08075800 	call	807580 <__pack_f>
  805c5c:	dfc01017 	ldw	ra,64(sp)
  805c60:	dc400f17 	ldw	r17,60(sp)
  805c64:	dc000e17 	ldw	r16,56(sp)
  805c68:	dec01104 	addi	sp,sp,68
  805c6c:	f800283a 	ret
  805c70:	1804d07a 	srli	r2,r3,1
  805c74:	10e00034 	orhi	r3,r2,32768
  805c78:	003fdf06 	br	805bf8 <__mulsf3+0x12c>
  805c7c:	3880200c 	andi	r2,r7,128
  805c80:	103ff11e 	bne	r2,zero,805c48 <__mulsf3+0x17c>
  805c84:	183ff026 	beq	r3,zero,805c48 <__mulsf3+0x17c>
  805c88:	3907883a 	add	r3,r7,r4
  805c8c:	00bfe004 	movi	r2,-128
  805c90:	188e703a 	and	r7,r3,r2
  805c94:	003fec06 	br	805c48 <__mulsf3+0x17c>
  805c98:	00800084 	movi	r2,2
  805c9c:	20bfa41e 	bne	r4,r2,805b30 <__mulsf3+0x64>
  805ca0:	010020b4 	movhi	r4,130
  805ca4:	21329204 	addi	r4,r4,-13752
  805ca8:	003fb306 	br	805b78 <__mulsf3+0xac>

00805cac <__divsf3>:
  805cac:	defff304 	addi	sp,sp,-52
  805cb0:	dc400b15 	stw	r17,44(sp)
  805cb4:	dc400204 	addi	r17,sp,8
  805cb8:	dc000a15 	stw	r16,40(sp)
  805cbc:	d9000015 	stw	r4,0(sp)
  805cc0:	d9400115 	stw	r5,4(sp)
  805cc4:	d809883a 	mov	r4,sp
  805cc8:	880b883a 	mov	r5,r17
  805ccc:	dc000604 	addi	r16,sp,24
  805cd0:	dfc00c15 	stw	ra,48(sp)
  805cd4:	08076e00 	call	8076e0 <__unpack_f>
  805cd8:	d9000104 	addi	r4,sp,4
  805cdc:	800b883a 	mov	r5,r16
  805ce0:	08076e00 	call	8076e0 <__unpack_f>
  805ce4:	d9000217 	ldw	r4,8(sp)
  805ce8:	00800044 	movi	r2,1
  805cec:	01800104 	movi	r6,4
  805cf0:	11000a2e 	bgeu	r2,r4,805d1c <__divsf3+0x70>
  805cf4:	d9400617 	ldw	r5,24(sp)
  805cf8:	1140432e 	bgeu	r2,r5,805e08 <__divsf3+0x15c>
  805cfc:	d8800317 	ldw	r2,12(sp)
  805d00:	d8c00717 	ldw	r3,28(sp)
  805d04:	10c4f03a 	xor	r2,r2,r3
  805d08:	d8800315 	stw	r2,12(sp)
  805d0c:	21800226 	beq	r4,r6,805d18 <__divsf3+0x6c>
  805d10:	00800084 	movi	r2,2
  805d14:	2080101e 	bne	r4,r2,805d58 <__divsf3+0xac>
  805d18:	29000726 	beq	r5,r4,805d38 <__divsf3+0x8c>
  805d1c:	8809883a 	mov	r4,r17
  805d20:	08075800 	call	807580 <__pack_f>
  805d24:	dfc00c17 	ldw	ra,48(sp)
  805d28:	dc400b17 	ldw	r17,44(sp)
  805d2c:	dc000a17 	ldw	r16,40(sp)
  805d30:	dec00d04 	addi	sp,sp,52
  805d34:	f800283a 	ret
  805d38:	010020b4 	movhi	r4,130
  805d3c:	21329204 	addi	r4,r4,-13752
  805d40:	08075800 	call	807580 <__pack_f>
  805d44:	dfc00c17 	ldw	ra,48(sp)
  805d48:	dc400b17 	ldw	r17,44(sp)
  805d4c:	dc000a17 	ldw	r16,40(sp)
  805d50:	dec00d04 	addi	sp,sp,52
  805d54:	f800283a 	ret
  805d58:	29802d26 	beq	r5,r6,805e10 <__divsf3+0x164>
  805d5c:	28801a26 	beq	r5,r2,805dc8 <__divsf3+0x11c>
  805d60:	d8c00417 	ldw	r3,16(sp)
  805d64:	d8800817 	ldw	r2,32(sp)
  805d68:	d9000517 	ldw	r4,20(sp)
  805d6c:	d9800917 	ldw	r6,36(sp)
  805d70:	1885c83a 	sub	r2,r3,r2
  805d74:	d8800415 	stw	r2,16(sp)
  805d78:	2180032e 	bgeu	r4,r6,805d88 <__divsf3+0xdc>
  805d7c:	10bfffc4 	addi	r2,r2,-1
  805d80:	d8800415 	stw	r2,16(sp)
  805d84:	2109883a 	add	r4,r4,r4
  805d88:	01500034 	movhi	r5,16384
  805d8c:	0007883a 	mov	r3,zero
  805d90:	0005883a 	mov	r2,zero
  805d94:	01c007c4 	movi	r7,31
  805d98:	10800044 	addi	r2,r2,1
  805d9c:	21800236 	bltu	r4,r6,805da8 <__divsf3+0xfc>
  805da0:	1946b03a 	or	r3,r3,r5
  805da4:	2189c83a 	sub	r4,r4,r6
  805da8:	280ad07a 	srli	r5,r5,1
  805dac:	2109883a 	add	r4,r4,r4
  805db0:	11fff91e 	bne	r2,r7,805d98 <__divsf3+0xec>
  805db4:	19401fcc 	andi	r5,r3,127
  805db8:	00801004 	movi	r2,64
  805dbc:	28800a26 	beq	r5,r2,805de8 <__divsf3+0x13c>
  805dc0:	d8c00515 	stw	r3,20(sp)
  805dc4:	003fd506 	br	805d1c <__divsf3+0x70>
  805dc8:	8809883a 	mov	r4,r17
  805dcc:	d9800215 	stw	r6,8(sp)
  805dd0:	08075800 	call	807580 <__pack_f>
  805dd4:	dfc00c17 	ldw	ra,48(sp)
  805dd8:	dc400b17 	ldw	r17,44(sp)
  805ddc:	dc000a17 	ldw	r16,40(sp)
  805de0:	dec00d04 	addi	sp,sp,52
  805de4:	f800283a 	ret
  805de8:	1880200c 	andi	r2,r3,128
  805dec:	103ff41e 	bne	r2,zero,805dc0 <__divsf3+0x114>
  805df0:	203ff326 	beq	r4,zero,805dc0 <__divsf3+0x114>
  805df4:	1947883a 	add	r3,r3,r5
  805df8:	00bfe004 	movi	r2,-128
  805dfc:	1886703a 	and	r3,r3,r2
  805e00:	d8c00515 	stw	r3,20(sp)
  805e04:	003fc506 	br	805d1c <__divsf3+0x70>
  805e08:	8009883a 	mov	r4,r16
  805e0c:	003fc406 	br	805d20 <__divsf3+0x74>
  805e10:	8809883a 	mov	r4,r17
  805e14:	d8000515 	stw	zero,20(sp)
  805e18:	d8000415 	stw	zero,16(sp)
  805e1c:	003fc006 	br	805d20 <__divsf3+0x74>

00805e20 <__gesf2>:
  805e20:	defff304 	addi	sp,sp,-52
  805e24:	dc400b15 	stw	r17,44(sp)
  805e28:	dc400204 	addi	r17,sp,8
  805e2c:	dc000a15 	stw	r16,40(sp)
  805e30:	d9000015 	stw	r4,0(sp)
  805e34:	d9400115 	stw	r5,4(sp)
  805e38:	d809883a 	mov	r4,sp
  805e3c:	880b883a 	mov	r5,r17
  805e40:	dc000604 	addi	r16,sp,24
  805e44:	dfc00c15 	stw	ra,48(sp)
  805e48:	08076e00 	call	8076e0 <__unpack_f>
  805e4c:	d9000104 	addi	r4,sp,4
  805e50:	800b883a 	mov	r5,r16
  805e54:	08076e00 	call	8076e0 <__unpack_f>
  805e58:	d8800217 	ldw	r2,8(sp)
  805e5c:	00c00044 	movi	r3,1
  805e60:	01bfffc4 	movi	r6,-1
  805e64:	1880062e 	bgeu	r3,r2,805e80 <__gesf2+0x60>
  805e68:	d8800617 	ldw	r2,24(sp)
  805e6c:	8809883a 	mov	r4,r17
  805e70:	800b883a 	mov	r5,r16
  805e74:	1880022e 	bgeu	r3,r2,805e80 <__gesf2+0x60>
  805e78:	08077a80 	call	8077a8 <__fpcmp_parts_f>
  805e7c:	100d883a 	mov	r6,r2
  805e80:	3005883a 	mov	r2,r6
  805e84:	dfc00c17 	ldw	ra,48(sp)
  805e88:	dc400b17 	ldw	r17,44(sp)
  805e8c:	dc000a17 	ldw	r16,40(sp)
  805e90:	dec00d04 	addi	sp,sp,52
  805e94:	f800283a 	ret

00805e98 <__ltsf2>:
  805e98:	defff304 	addi	sp,sp,-52
  805e9c:	dc400b15 	stw	r17,44(sp)
  805ea0:	dc400204 	addi	r17,sp,8
  805ea4:	dc000a15 	stw	r16,40(sp)
  805ea8:	d9000015 	stw	r4,0(sp)
  805eac:	d9400115 	stw	r5,4(sp)
  805eb0:	d809883a 	mov	r4,sp
  805eb4:	880b883a 	mov	r5,r17
  805eb8:	dc000604 	addi	r16,sp,24
  805ebc:	dfc00c15 	stw	ra,48(sp)
  805ec0:	08076e00 	call	8076e0 <__unpack_f>
  805ec4:	d9000104 	addi	r4,sp,4
  805ec8:	800b883a 	mov	r5,r16
  805ecc:	08076e00 	call	8076e0 <__unpack_f>
  805ed0:	d8800217 	ldw	r2,8(sp)
  805ed4:	00c00044 	movi	r3,1
  805ed8:	180d883a 	mov	r6,r3
  805edc:	1880062e 	bgeu	r3,r2,805ef8 <__ltsf2+0x60>
  805ee0:	d8800617 	ldw	r2,24(sp)
  805ee4:	8809883a 	mov	r4,r17
  805ee8:	800b883a 	mov	r5,r16
  805eec:	1880022e 	bgeu	r3,r2,805ef8 <__ltsf2+0x60>
  805ef0:	08077a80 	call	8077a8 <__fpcmp_parts_f>
  805ef4:	100d883a 	mov	r6,r2
  805ef8:	3005883a 	mov	r2,r6
  805efc:	dfc00c17 	ldw	ra,48(sp)
  805f00:	dc400b17 	ldw	r17,44(sp)
  805f04:	dc000a17 	ldw	r16,40(sp)
  805f08:	dec00d04 	addi	sp,sp,52
  805f0c:	f800283a 	ret

00805f10 <__floatsisf>:
  805f10:	2006d7fa 	srli	r3,r4,31
  805f14:	defffa04 	addi	sp,sp,-24
  805f18:	008000c4 	movi	r2,3
  805f1c:	dfc00515 	stw	ra,20(sp)
  805f20:	dc000415 	stw	r16,16(sp)
  805f24:	d8800015 	stw	r2,0(sp)
  805f28:	d8c00115 	stw	r3,4(sp)
  805f2c:	2000081e 	bne	r4,zero,805f50 <__floatsisf+0x40>
  805f30:	00800084 	movi	r2,2
  805f34:	d8800015 	stw	r2,0(sp)
  805f38:	d809883a 	mov	r4,sp
  805f3c:	08075800 	call	807580 <__pack_f>
  805f40:	dfc00517 	ldw	ra,20(sp)
  805f44:	dc000417 	ldw	r16,16(sp)
  805f48:	dec00604 	addi	sp,sp,24
  805f4c:	f800283a 	ret
  805f50:	00800784 	movi	r2,30
  805f54:	1807003a 	cmpeq	r3,r3,zero
  805f58:	d8800215 	stw	r2,8(sp)
  805f5c:	18000e1e 	bne	r3,zero,805f98 <__floatsisf+0x88>
  805f60:	00a00034 	movhi	r2,32768
  805f64:	20800e26 	beq	r4,r2,805fa0 <__floatsisf+0x90>
  805f68:	0121c83a 	sub	r16,zero,r4
  805f6c:	8009883a 	mov	r4,r16
  805f70:	dc000315 	stw	r16,12(sp)
  805f74:	08075000 	call	807500 <__clzsi2>
  805f78:	117fffc4 	addi	r5,r2,-1
  805f7c:	017fee0e 	bge	zero,r5,805f38 <__floatsisf+0x28>
  805f80:	d8800217 	ldw	r2,8(sp)
  805f84:	8146983a 	sll	r3,r16,r5
  805f88:	1145c83a 	sub	r2,r2,r5
  805f8c:	d8c00315 	stw	r3,12(sp)
  805f90:	d8800215 	stw	r2,8(sp)
  805f94:	003fe806 	br	805f38 <__floatsisf+0x28>
  805f98:	2021883a 	mov	r16,r4
  805f9c:	003ff306 	br	805f6c <__floatsisf+0x5c>
  805fa0:	00b3c034 	movhi	r2,52992
  805fa4:	003fe606 	br	805f40 <__floatsisf+0x30>

00805fa8 <__extendsfdf2>:
  805fa8:	defff904 	addi	sp,sp,-28
  805fac:	d9000115 	stw	r4,4(sp)
  805fb0:	d9400204 	addi	r5,sp,8
  805fb4:	d9000104 	addi	r4,sp,4
  805fb8:	dfc00615 	stw	ra,24(sp)
  805fbc:	08076e00 	call	8076e0 <__unpack_f>
  805fc0:	d9c00517 	ldw	r7,20(sp)
  805fc4:	0011883a 	mov	r8,zero
  805fc8:	400697ba 	slli	r3,r8,30
  805fcc:	3812d0ba 	srli	r9,r7,2
  805fd0:	380497ba 	slli	r2,r7,30
  805fd4:	d9000217 	ldw	r4,8(sp)
  805fd8:	d9400317 	ldw	r5,12(sp)
  805fdc:	d9800417 	ldw	r6,16(sp)
  805fe0:	48c6b03a 	or	r3,r9,r3
  805fe4:	100f883a 	mov	r7,r2
  805fe8:	d8c00015 	stw	r3,0(sp)
  805fec:	08070dc0 	call	8070dc <__make_dp>
  805ff0:	dfc00617 	ldw	ra,24(sp)
  805ff4:	dec00704 	addi	sp,sp,28
  805ff8:	f800283a 	ret

00805ffc <__floatunsisf>:
  805ffc:	defff904 	addi	sp,sp,-28
  806000:	dc400515 	stw	r17,20(sp)
  806004:	dc000415 	stw	r16,16(sp)
  806008:	dfc00615 	stw	ra,24(sp)
  80600c:	04400784 	movi	r17,30
  806010:	2021883a 	mov	r16,r4
  806014:	d8000115 	stw	zero,4(sp)
  806018:	2000091e 	bne	r4,zero,806040 <__floatunsisf+0x44>
  80601c:	00800084 	movi	r2,2
  806020:	d8800015 	stw	r2,0(sp)
  806024:	d809883a 	mov	r4,sp
  806028:	08075800 	call	807580 <__pack_f>
  80602c:	dfc00617 	ldw	ra,24(sp)
  806030:	dc400517 	ldw	r17,20(sp)
  806034:	dc000417 	ldw	r16,16(sp)
  806038:	dec00704 	addi	sp,sp,28
  80603c:	f800283a 	ret
  806040:	008000c4 	movi	r2,3
  806044:	d9000315 	stw	r4,12(sp)
  806048:	d8800015 	stw	r2,0(sp)
  80604c:	dc400215 	stw	r17,8(sp)
  806050:	08075000 	call	807500 <__clzsi2>
  806054:	117fffc4 	addi	r5,r2,-1
  806058:	0147c83a 	sub	r3,zero,r5
  80605c:	00800044 	movi	r2,1
  806060:	10c4983a 	sll	r2,r2,r3
  806064:	80c6d83a 	srl	r3,r16,r3
  806068:	8949c83a 	sub	r4,r17,r5
  80606c:	10bfffc4 	addi	r2,r2,-1
  806070:	8084703a 	and	r2,r16,r2
  806074:	1004c03a 	cmpne	r2,r2,zero
  806078:	1886b03a 	or	r3,r3,r2
  80607c:	28000c16 	blt	r5,zero,8060b0 <__floatunsisf+0xb4>
  806080:	8144983a 	sll	r2,r16,r5
  806084:	8947c83a 	sub	r3,r17,r5
  806088:	283fe626 	beq	r5,zero,806024 <__floatunsisf+0x28>
  80608c:	d809883a 	mov	r4,sp
  806090:	d8800315 	stw	r2,12(sp)
  806094:	d8c00215 	stw	r3,8(sp)
  806098:	08075800 	call	807580 <__pack_f>
  80609c:	dfc00617 	ldw	ra,24(sp)
  8060a0:	dc400517 	ldw	r17,20(sp)
  8060a4:	dc000417 	ldw	r16,16(sp)
  8060a8:	dec00704 	addi	sp,sp,28
  8060ac:	f800283a 	ret
  8060b0:	d8c00315 	stw	r3,12(sp)
  8060b4:	d9000215 	stw	r4,8(sp)
  8060b8:	003fda06 	br	806024 <__floatunsisf+0x28>

008060bc <_fpadd_parts>:
  8060bc:	defff804 	addi	sp,sp,-32
  8060c0:	dcc00315 	stw	r19,12(sp)
  8060c4:	2027883a 	mov	r19,r4
  8060c8:	21000017 	ldw	r4,0(r4)
  8060cc:	00c00044 	movi	r3,1
  8060d0:	dd400515 	stw	r21,20(sp)
  8060d4:	dd000415 	stw	r20,16(sp)
  8060d8:	ddc00715 	stw	r23,28(sp)
  8060dc:	dd800615 	stw	r22,24(sp)
  8060e0:	dc800215 	stw	r18,8(sp)
  8060e4:	dc400115 	stw	r17,4(sp)
  8060e8:	dc000015 	stw	r16,0(sp)
  8060ec:	282b883a 	mov	r21,r5
  8060f0:	3029883a 	mov	r20,r6
  8060f4:	1900632e 	bgeu	r3,r4,806284 <_fpadd_parts+0x1c8>
  8060f8:	28800017 	ldw	r2,0(r5)
  8060fc:	1880812e 	bgeu	r3,r2,806304 <_fpadd_parts+0x248>
  806100:	00c00104 	movi	r3,4
  806104:	20c0dc26 	beq	r4,r3,806478 <_fpadd_parts+0x3bc>
  806108:	10c07e26 	beq	r2,r3,806304 <_fpadd_parts+0x248>
  80610c:	00c00084 	movi	r3,2
  806110:	10c06726 	beq	r2,r3,8062b0 <_fpadd_parts+0x1f4>
  806114:	20c07b26 	beq	r4,r3,806304 <_fpadd_parts+0x248>
  806118:	9dc00217 	ldw	r23,8(r19)
  80611c:	28c00217 	ldw	r3,8(r5)
  806120:	9c400317 	ldw	r17,12(r19)
  806124:	2bc00317 	ldw	r15,12(r5)
  806128:	b8cdc83a 	sub	r6,r23,r3
  80612c:	9c800417 	ldw	r18,16(r19)
  806130:	2c000417 	ldw	r16,16(r5)
  806134:	3009883a 	mov	r4,r6
  806138:	30009716 	blt	r6,zero,806398 <_fpadd_parts+0x2dc>
  80613c:	00800fc4 	movi	r2,63
  806140:	11806b16 	blt	r2,r6,8062f0 <_fpadd_parts+0x234>
  806144:	0100a40e 	bge	zero,r4,8063d8 <_fpadd_parts+0x31c>
  806148:	35bff804 	addi	r22,r6,-32
  80614c:	b000bc16 	blt	r22,zero,806440 <_fpadd_parts+0x384>
  806150:	8596d83a 	srl	r11,r16,r22
  806154:	0019883a 	mov	r12,zero
  806158:	0013883a 	mov	r9,zero
  80615c:	01000044 	movi	r4,1
  806160:	0015883a 	mov	r10,zero
  806164:	b000be16 	blt	r22,zero,806460 <_fpadd_parts+0x3a4>
  806168:	2590983a 	sll	r8,r4,r22
  80616c:	000f883a 	mov	r7,zero
  806170:	00bfffc4 	movi	r2,-1
  806174:	3889883a 	add	r4,r7,r2
  806178:	408b883a 	add	r5,r8,r2
  80617c:	21cd803a 	cmpltu	r6,r4,r7
  806180:	314b883a 	add	r5,r6,r5
  806184:	7904703a 	and	r2,r15,r4
  806188:	8146703a 	and	r3,r16,r5
  80618c:	10c4b03a 	or	r2,r2,r3
  806190:	10000226 	beq	r2,zero,80619c <_fpadd_parts+0xe0>
  806194:	02400044 	movi	r9,1
  806198:	0015883a 	mov	r10,zero
  80619c:	5a5eb03a 	or	r15,r11,r9
  8061a0:	62a0b03a 	or	r16,r12,r10
  8061a4:	99400117 	ldw	r5,4(r19)
  8061a8:	a8800117 	ldw	r2,4(r21)
  8061ac:	28806e26 	beq	r5,r2,806368 <_fpadd_parts+0x2ac>
  8061b0:	28006626 	beq	r5,zero,80634c <_fpadd_parts+0x290>
  8061b4:	7c45c83a 	sub	r2,r15,r17
  8061b8:	7889803a 	cmpltu	r4,r15,r2
  8061bc:	8487c83a 	sub	r3,r16,r18
  8061c0:	1909c83a 	sub	r4,r3,r4
  8061c4:	100d883a 	mov	r6,r2
  8061c8:	200f883a 	mov	r7,r4
  8061cc:	38007716 	blt	r7,zero,8063ac <_fpadd_parts+0x2f0>
  8061d0:	a5c00215 	stw	r23,8(r20)
  8061d4:	a1c00415 	stw	r7,16(r20)
  8061d8:	a0000115 	stw	zero,4(r20)
  8061dc:	a1800315 	stw	r6,12(r20)
  8061e0:	a2000317 	ldw	r8,12(r20)
  8061e4:	a2400417 	ldw	r9,16(r20)
  8061e8:	00bfffc4 	movi	r2,-1
  8061ec:	408b883a 	add	r5,r8,r2
  8061f0:	2a09803a 	cmpltu	r4,r5,r8
  8061f4:	488d883a 	add	r6,r9,r2
  8061f8:	01c40034 	movhi	r7,4096
  8061fc:	39ffffc4 	addi	r7,r7,-1
  806200:	218d883a 	add	r6,r4,r6
  806204:	39801736 	bltu	r7,r6,806264 <_fpadd_parts+0x1a8>
  806208:	31c06526 	beq	r6,r7,8063a0 <_fpadd_parts+0x2e4>
  80620c:	a3000217 	ldw	r12,8(r20)
  806210:	4209883a 	add	r4,r8,r8
  806214:	00bfffc4 	movi	r2,-1
  806218:	220f803a 	cmpltu	r7,r4,r8
  80621c:	4a4b883a 	add	r5,r9,r9
  806220:	394f883a 	add	r7,r7,r5
  806224:	2095883a 	add	r10,r4,r2
  806228:	3897883a 	add	r11,r7,r2
  80622c:	510d803a 	cmpltu	r6,r10,r4
  806230:	6099883a 	add	r12,r12,r2
  806234:	32d7883a 	add	r11,r6,r11
  806238:	00840034 	movhi	r2,4096
  80623c:	10bfffc4 	addi	r2,r2,-1
  806240:	2011883a 	mov	r8,r4
  806244:	3813883a 	mov	r9,r7
  806248:	a1000315 	stw	r4,12(r20)
  80624c:	a1c00415 	stw	r7,16(r20)
  806250:	a3000215 	stw	r12,8(r20)
  806254:	12c00336 	bltu	r2,r11,806264 <_fpadd_parts+0x1a8>
  806258:	58bfed1e 	bne	r11,r2,806210 <_fpadd_parts+0x154>
  80625c:	00bfff84 	movi	r2,-2
  806260:	12bfeb2e 	bgeu	r2,r10,806210 <_fpadd_parts+0x154>
  806264:	a2800417 	ldw	r10,16(r20)
  806268:	008000c4 	movi	r2,3
  80626c:	00c80034 	movhi	r3,8192
  806270:	18ffffc4 	addi	r3,r3,-1
  806274:	a2400317 	ldw	r9,12(r20)
  806278:	a0800015 	stw	r2,0(r20)
  80627c:	1a802336 	bltu	r3,r10,80630c <_fpadd_parts+0x250>
  806280:	a027883a 	mov	r19,r20
  806284:	9805883a 	mov	r2,r19
  806288:	ddc00717 	ldw	r23,28(sp)
  80628c:	dd800617 	ldw	r22,24(sp)
  806290:	dd400517 	ldw	r21,20(sp)
  806294:	dd000417 	ldw	r20,16(sp)
  806298:	dcc00317 	ldw	r19,12(sp)
  80629c:	dc800217 	ldw	r18,8(sp)
  8062a0:	dc400117 	ldw	r17,4(sp)
  8062a4:	dc000017 	ldw	r16,0(sp)
  8062a8:	dec00804 	addi	sp,sp,32
  8062ac:	f800283a 	ret
  8062b0:	20fff41e 	bne	r4,r3,806284 <_fpadd_parts+0x1c8>
  8062b4:	31000015 	stw	r4,0(r6)
  8062b8:	98800117 	ldw	r2,4(r19)
  8062bc:	30800115 	stw	r2,4(r6)
  8062c0:	98c00217 	ldw	r3,8(r19)
  8062c4:	30c00215 	stw	r3,8(r6)
  8062c8:	98800317 	ldw	r2,12(r19)
  8062cc:	30800315 	stw	r2,12(r6)
  8062d0:	98c00417 	ldw	r3,16(r19)
  8062d4:	30c00415 	stw	r3,16(r6)
  8062d8:	98800117 	ldw	r2,4(r19)
  8062dc:	28c00117 	ldw	r3,4(r5)
  8062e0:	3027883a 	mov	r19,r6
  8062e4:	10c4703a 	and	r2,r2,r3
  8062e8:	30800115 	stw	r2,4(r6)
  8062ec:	003fe506 	br	806284 <_fpadd_parts+0x1c8>
  8062f0:	1dc02616 	blt	r3,r23,80638c <_fpadd_parts+0x2d0>
  8062f4:	0023883a 	mov	r17,zero
  8062f8:	182f883a 	mov	r23,r3
  8062fc:	0025883a 	mov	r18,zero
  806300:	003fa806 	br	8061a4 <_fpadd_parts+0xe8>
  806304:	a827883a 	mov	r19,r21
  806308:	003fde06 	br	806284 <_fpadd_parts+0x1c8>
  80630c:	01800044 	movi	r6,1
  806310:	500497fa 	slli	r2,r10,31
  806314:	4808d07a 	srli	r4,r9,1
  806318:	518ad83a 	srl	r5,r10,r6
  80631c:	a2000217 	ldw	r8,8(r20)
  806320:	1108b03a 	or	r4,r2,r4
  806324:	0007883a 	mov	r3,zero
  806328:	4984703a 	and	r2,r9,r6
  80632c:	208cb03a 	or	r6,r4,r2
  806330:	28ceb03a 	or	r7,r5,r3
  806334:	42000044 	addi	r8,r8,1
  806338:	a027883a 	mov	r19,r20
  80633c:	a1c00415 	stw	r7,16(r20)
  806340:	a2000215 	stw	r8,8(r20)
  806344:	a1800315 	stw	r6,12(r20)
  806348:	003fce06 	br	806284 <_fpadd_parts+0x1c8>
  80634c:	8bc5c83a 	sub	r2,r17,r15
  806350:	8889803a 	cmpltu	r4,r17,r2
  806354:	9407c83a 	sub	r3,r18,r16
  806358:	1909c83a 	sub	r4,r3,r4
  80635c:	100d883a 	mov	r6,r2
  806360:	200f883a 	mov	r7,r4
  806364:	003f9906 	br	8061cc <_fpadd_parts+0x110>
  806368:	7c45883a 	add	r2,r15,r17
  80636c:	13c9803a 	cmpltu	r4,r2,r15
  806370:	8487883a 	add	r3,r16,r18
  806374:	20c9883a 	add	r4,r4,r3
  806378:	a1400115 	stw	r5,4(r20)
  80637c:	a5c00215 	stw	r23,8(r20)
  806380:	a0800315 	stw	r2,12(r20)
  806384:	a1000415 	stw	r4,16(r20)
  806388:	003fb606 	br	806264 <_fpadd_parts+0x1a8>
  80638c:	001f883a 	mov	r15,zero
  806390:	0021883a 	mov	r16,zero
  806394:	003f8306 	br	8061a4 <_fpadd_parts+0xe8>
  806398:	018dc83a 	sub	r6,zero,r6
  80639c:	003f6706 	br	80613c <_fpadd_parts+0x80>
  8063a0:	00bfff84 	movi	r2,-2
  8063a4:	117faf36 	bltu	r2,r5,806264 <_fpadd_parts+0x1a8>
  8063a8:	003f9806 	br	80620c <_fpadd_parts+0x150>
  8063ac:	0005883a 	mov	r2,zero
  8063b0:	1189c83a 	sub	r4,r2,r6
  8063b4:	1105803a 	cmpltu	r2,r2,r4
  8063b8:	01cbc83a 	sub	r5,zero,r7
  8063bc:	2885c83a 	sub	r2,r5,r2
  8063c0:	01800044 	movi	r6,1
  8063c4:	a1800115 	stw	r6,4(r20)
  8063c8:	a5c00215 	stw	r23,8(r20)
  8063cc:	a1000315 	stw	r4,12(r20)
  8063d0:	a0800415 	stw	r2,16(r20)
  8063d4:	003f8206 	br	8061e0 <_fpadd_parts+0x124>
  8063d8:	203f7226 	beq	r4,zero,8061a4 <_fpadd_parts+0xe8>
  8063dc:	35bff804 	addi	r22,r6,-32
  8063e0:	b9af883a 	add	r23,r23,r6
  8063e4:	b0003116 	blt	r22,zero,8064ac <_fpadd_parts+0x3f0>
  8063e8:	959ad83a 	srl	r13,r18,r22
  8063ec:	001d883a 	mov	r14,zero
  8063f0:	000f883a 	mov	r7,zero
  8063f4:	01000044 	movi	r4,1
  8063f8:	0011883a 	mov	r8,zero
  8063fc:	b0002516 	blt	r22,zero,806494 <_fpadd_parts+0x3d8>
  806400:	2594983a 	sll	r10,r4,r22
  806404:	0013883a 	mov	r9,zero
  806408:	00bfffc4 	movi	r2,-1
  80640c:	4889883a 	add	r4,r9,r2
  806410:	508b883a 	add	r5,r10,r2
  806414:	224d803a 	cmpltu	r6,r4,r9
  806418:	314b883a 	add	r5,r6,r5
  80641c:	8904703a 	and	r2,r17,r4
  806420:	9146703a 	and	r3,r18,r5
  806424:	10c4b03a 	or	r2,r2,r3
  806428:	10000226 	beq	r2,zero,806434 <_fpadd_parts+0x378>
  80642c:	01c00044 	movi	r7,1
  806430:	0011883a 	mov	r8,zero
  806434:	69e2b03a 	or	r17,r13,r7
  806438:	7224b03a 	or	r18,r14,r8
  80643c:	003f5906 	br	8061a4 <_fpadd_parts+0xe8>
  806440:	8407883a 	add	r3,r16,r16
  806444:	008007c4 	movi	r2,31
  806448:	1185c83a 	sub	r2,r2,r6
  80644c:	1886983a 	sll	r3,r3,r2
  806450:	7996d83a 	srl	r11,r15,r6
  806454:	8198d83a 	srl	r12,r16,r6
  806458:	1ad6b03a 	or	r11,r3,r11
  80645c:	003f3e06 	br	806158 <_fpadd_parts+0x9c>
  806460:	2006d07a 	srli	r3,r4,1
  806464:	008007c4 	movi	r2,31
  806468:	1185c83a 	sub	r2,r2,r6
  80646c:	1890d83a 	srl	r8,r3,r2
  806470:	218e983a 	sll	r7,r4,r6
  806474:	003f3e06 	br	806170 <_fpadd_parts+0xb4>
  806478:	113f821e 	bne	r2,r4,806284 <_fpadd_parts+0x1c8>
  80647c:	28c00117 	ldw	r3,4(r5)
  806480:	98800117 	ldw	r2,4(r19)
  806484:	10ff7f26 	beq	r2,r3,806284 <_fpadd_parts+0x1c8>
  806488:	04c020b4 	movhi	r19,130
  80648c:	9cf29604 	addi	r19,r19,-13736
  806490:	003f7c06 	br	806284 <_fpadd_parts+0x1c8>
  806494:	2006d07a 	srli	r3,r4,1
  806498:	008007c4 	movi	r2,31
  80649c:	1185c83a 	sub	r2,r2,r6
  8064a0:	1894d83a 	srl	r10,r3,r2
  8064a4:	2192983a 	sll	r9,r4,r6
  8064a8:	003fd706 	br	806408 <_fpadd_parts+0x34c>
  8064ac:	9487883a 	add	r3,r18,r18
  8064b0:	008007c4 	movi	r2,31
  8064b4:	1185c83a 	sub	r2,r2,r6
  8064b8:	1886983a 	sll	r3,r3,r2
  8064bc:	899ad83a 	srl	r13,r17,r6
  8064c0:	919cd83a 	srl	r14,r18,r6
  8064c4:	1b5ab03a 	or	r13,r3,r13
  8064c8:	003fc906 	br	8063f0 <_fpadd_parts+0x334>

008064cc <__subdf3>:
  8064cc:	deffea04 	addi	sp,sp,-88
  8064d0:	dcc01415 	stw	r19,80(sp)
  8064d4:	dcc00404 	addi	r19,sp,16
  8064d8:	2011883a 	mov	r8,r4
  8064dc:	2813883a 	mov	r9,r5
  8064e0:	dc401315 	stw	r17,76(sp)
  8064e4:	d809883a 	mov	r4,sp
  8064e8:	980b883a 	mov	r5,r19
  8064ec:	dc400904 	addi	r17,sp,36
  8064f0:	dfc01515 	stw	ra,84(sp)
  8064f4:	da400115 	stw	r9,4(sp)
  8064f8:	d9c00315 	stw	r7,12(sp)
  8064fc:	da000015 	stw	r8,0(sp)
  806500:	d9800215 	stw	r6,8(sp)
  806504:	0807b900 	call	807b90 <__unpack_d>
  806508:	d9000204 	addi	r4,sp,8
  80650c:	880b883a 	mov	r5,r17
  806510:	0807b900 	call	807b90 <__unpack_d>
  806514:	d8800a17 	ldw	r2,40(sp)
  806518:	880b883a 	mov	r5,r17
  80651c:	9809883a 	mov	r4,r19
  806520:	d9800e04 	addi	r6,sp,56
  806524:	1080005c 	xori	r2,r2,1
  806528:	d8800a15 	stw	r2,40(sp)
  80652c:	08060bc0 	call	8060bc <_fpadd_parts>
  806530:	1009883a 	mov	r4,r2
  806534:	080787c0 	call	80787c <__pack_d>
  806538:	dfc01517 	ldw	ra,84(sp)
  80653c:	dcc01417 	ldw	r19,80(sp)
  806540:	dc401317 	ldw	r17,76(sp)
  806544:	dec01604 	addi	sp,sp,88
  806548:	f800283a 	ret

0080654c <__adddf3>:
  80654c:	deffea04 	addi	sp,sp,-88
  806550:	dcc01415 	stw	r19,80(sp)
  806554:	dcc00404 	addi	r19,sp,16
  806558:	2011883a 	mov	r8,r4
  80655c:	2813883a 	mov	r9,r5
  806560:	dc401315 	stw	r17,76(sp)
  806564:	d809883a 	mov	r4,sp
  806568:	980b883a 	mov	r5,r19
  80656c:	dc400904 	addi	r17,sp,36
  806570:	dfc01515 	stw	ra,84(sp)
  806574:	da400115 	stw	r9,4(sp)
  806578:	d9c00315 	stw	r7,12(sp)
  80657c:	da000015 	stw	r8,0(sp)
  806580:	d9800215 	stw	r6,8(sp)
  806584:	0807b900 	call	807b90 <__unpack_d>
  806588:	d9000204 	addi	r4,sp,8
  80658c:	880b883a 	mov	r5,r17
  806590:	0807b900 	call	807b90 <__unpack_d>
  806594:	d9800e04 	addi	r6,sp,56
  806598:	9809883a 	mov	r4,r19
  80659c:	880b883a 	mov	r5,r17
  8065a0:	08060bc0 	call	8060bc <_fpadd_parts>
  8065a4:	1009883a 	mov	r4,r2
  8065a8:	080787c0 	call	80787c <__pack_d>
  8065ac:	dfc01517 	ldw	ra,84(sp)
  8065b0:	dcc01417 	ldw	r19,80(sp)
  8065b4:	dc401317 	ldw	r17,76(sp)
  8065b8:	dec01604 	addi	sp,sp,88
  8065bc:	f800283a 	ret

008065c0 <__muldf3>:
  8065c0:	deffe004 	addi	sp,sp,-128
  8065c4:	dc401815 	stw	r17,96(sp)
  8065c8:	dc400404 	addi	r17,sp,16
  8065cc:	2011883a 	mov	r8,r4
  8065d0:	2813883a 	mov	r9,r5
  8065d4:	dc001715 	stw	r16,92(sp)
  8065d8:	d809883a 	mov	r4,sp
  8065dc:	880b883a 	mov	r5,r17
  8065e0:	dc000904 	addi	r16,sp,36
  8065e4:	dfc01f15 	stw	ra,124(sp)
  8065e8:	da400115 	stw	r9,4(sp)
  8065ec:	d9c00315 	stw	r7,12(sp)
  8065f0:	da000015 	stw	r8,0(sp)
  8065f4:	d9800215 	stw	r6,8(sp)
  8065f8:	ddc01e15 	stw	r23,120(sp)
  8065fc:	dd801d15 	stw	r22,116(sp)
  806600:	dd401c15 	stw	r21,112(sp)
  806604:	dd001b15 	stw	r20,108(sp)
  806608:	dcc01a15 	stw	r19,104(sp)
  80660c:	dc801915 	stw	r18,100(sp)
  806610:	0807b900 	call	807b90 <__unpack_d>
  806614:	d9000204 	addi	r4,sp,8
  806618:	800b883a 	mov	r5,r16
  80661c:	0807b900 	call	807b90 <__unpack_d>
  806620:	d9000417 	ldw	r4,16(sp)
  806624:	00800044 	movi	r2,1
  806628:	1100102e 	bgeu	r2,r4,80666c <__muldf3+0xac>
  80662c:	d8c00917 	ldw	r3,36(sp)
  806630:	10c0062e 	bgeu	r2,r3,80664c <__muldf3+0x8c>
  806634:	00800104 	movi	r2,4
  806638:	20800a26 	beq	r4,r2,806664 <__muldf3+0xa4>
  80663c:	1880cc26 	beq	r3,r2,806970 <__muldf3+0x3b0>
  806640:	00800084 	movi	r2,2
  806644:	20800926 	beq	r4,r2,80666c <__muldf3+0xac>
  806648:	1880191e 	bne	r3,r2,8066b0 <__muldf3+0xf0>
  80664c:	d8c00a17 	ldw	r3,40(sp)
  806650:	d8800517 	ldw	r2,20(sp)
  806654:	8009883a 	mov	r4,r16
  806658:	10c4c03a 	cmpne	r2,r2,r3
  80665c:	d8800a15 	stw	r2,40(sp)
  806660:	00000706 	br	806680 <__muldf3+0xc0>
  806664:	00800084 	movi	r2,2
  806668:	1880c326 	beq	r3,r2,806978 <__muldf3+0x3b8>
  80666c:	d8800517 	ldw	r2,20(sp)
  806670:	d8c00a17 	ldw	r3,40(sp)
  806674:	8809883a 	mov	r4,r17
  806678:	10c4c03a 	cmpne	r2,r2,r3
  80667c:	d8800515 	stw	r2,20(sp)
  806680:	080787c0 	call	80787c <__pack_d>
  806684:	dfc01f17 	ldw	ra,124(sp)
  806688:	ddc01e17 	ldw	r23,120(sp)
  80668c:	dd801d17 	ldw	r22,116(sp)
  806690:	dd401c17 	ldw	r21,112(sp)
  806694:	dd001b17 	ldw	r20,108(sp)
  806698:	dcc01a17 	ldw	r19,104(sp)
  80669c:	dc801917 	ldw	r18,100(sp)
  8066a0:	dc401817 	ldw	r17,96(sp)
  8066a4:	dc001717 	ldw	r16,92(sp)
  8066a8:	dec02004 	addi	sp,sp,128
  8066ac:	f800283a 	ret
  8066b0:	dd800717 	ldw	r22,28(sp)
  8066b4:	dc800c17 	ldw	r18,48(sp)
  8066b8:	002b883a 	mov	r21,zero
  8066bc:	0023883a 	mov	r17,zero
  8066c0:	a80b883a 	mov	r5,r21
  8066c4:	b00d883a 	mov	r6,r22
  8066c8:	880f883a 	mov	r7,r17
  8066cc:	ddc00817 	ldw	r23,32(sp)
  8066d0:	dcc00d17 	ldw	r19,52(sp)
  8066d4:	9009883a 	mov	r4,r18
  8066d8:	08074680 	call	807468 <__muldi3>
  8066dc:	001b883a 	mov	r13,zero
  8066e0:	680f883a 	mov	r7,r13
  8066e4:	b009883a 	mov	r4,r22
  8066e8:	000b883a 	mov	r5,zero
  8066ec:	980d883a 	mov	r6,r19
  8066f0:	b82d883a 	mov	r22,r23
  8066f4:	002f883a 	mov	r23,zero
  8066f8:	db401615 	stw	r13,88(sp)
  8066fc:	d8801315 	stw	r2,76(sp)
  806700:	d8c01415 	stw	r3,80(sp)
  806704:	dcc01515 	stw	r19,84(sp)
  806708:	08074680 	call	807468 <__muldi3>
  80670c:	b00d883a 	mov	r6,r22
  806710:	000b883a 	mov	r5,zero
  806714:	9009883a 	mov	r4,r18
  806718:	b80f883a 	mov	r7,r23
  80671c:	1021883a 	mov	r16,r2
  806720:	1823883a 	mov	r17,r3
  806724:	08074680 	call	807468 <__muldi3>
  806728:	8085883a 	add	r2,r16,r2
  80672c:	140d803a 	cmpltu	r6,r2,r16
  806730:	88c7883a 	add	r3,r17,r3
  806734:	30cd883a 	add	r6,r6,r3
  806738:	1029883a 	mov	r20,r2
  80673c:	302b883a 	mov	r21,r6
  806740:	da801317 	ldw	r10,76(sp)
  806744:	dac01417 	ldw	r11,80(sp)
  806748:	db001517 	ldw	r12,84(sp)
  80674c:	db401617 	ldw	r13,88(sp)
  806750:	3440612e 	bgeu	r6,r17,8068d8 <__muldf3+0x318>
  806754:	0009883a 	mov	r4,zero
  806758:	5105883a 	add	r2,r10,r4
  80675c:	128d803a 	cmpltu	r6,r2,r10
  806760:	5d07883a 	add	r3,r11,r20
  806764:	30cd883a 	add	r6,r6,r3
  806768:	0021883a 	mov	r16,zero
  80676c:	04400044 	movi	r17,1
  806770:	1025883a 	mov	r18,r2
  806774:	3027883a 	mov	r19,r6
  806778:	32c06236 	bltu	r6,r11,806904 <__muldf3+0x344>
  80677c:	59807a26 	beq	r11,r6,806968 <__muldf3+0x3a8>
  806780:	680b883a 	mov	r5,r13
  806784:	b80f883a 	mov	r7,r23
  806788:	6009883a 	mov	r4,r12
  80678c:	b00d883a 	mov	r6,r22
  806790:	08074680 	call	807468 <__muldi3>
  806794:	1009883a 	mov	r4,r2
  806798:	000f883a 	mov	r7,zero
  80679c:	1545883a 	add	r2,r2,r21
  8067a0:	1111803a 	cmpltu	r8,r2,r4
  8067a4:	19c7883a 	add	r3,r3,r7
  8067a8:	40c7883a 	add	r3,r8,r3
  8067ac:	88cb883a 	add	r5,r17,r3
  8067b0:	d8c00617 	ldw	r3,24(sp)
  8067b4:	8089883a 	add	r4,r16,r2
  8067b8:	d8800b17 	ldw	r2,44(sp)
  8067bc:	18c00104 	addi	r3,r3,4
  8067c0:	240d803a 	cmpltu	r6,r4,r16
  8067c4:	10c7883a 	add	r3,r2,r3
  8067c8:	2013883a 	mov	r9,r4
  8067cc:	d8800a17 	ldw	r2,40(sp)
  8067d0:	d9000517 	ldw	r4,20(sp)
  8067d4:	314d883a 	add	r6,r6,r5
  8067d8:	3015883a 	mov	r10,r6
  8067dc:	2088c03a 	cmpne	r4,r4,r2
  8067e0:	00880034 	movhi	r2,8192
  8067e4:	10bfffc4 	addi	r2,r2,-1
  8067e8:	d9000f15 	stw	r4,60(sp)
  8067ec:	d8c01015 	stw	r3,64(sp)
  8067f0:	1180162e 	bgeu	r2,r6,80684c <__muldf3+0x28c>
  8067f4:	1811883a 	mov	r8,r3
  8067f8:	101f883a 	mov	r15,r2
  8067fc:	980497fa 	slli	r2,r19,31
  806800:	9016d07a 	srli	r11,r18,1
  806804:	500697fa 	slli	r3,r10,31
  806808:	480cd07a 	srli	r6,r9,1
  80680c:	500ed07a 	srli	r7,r10,1
  806810:	12d6b03a 	or	r11,r2,r11
  806814:	00800044 	movi	r2,1
  806818:	198cb03a 	or	r6,r3,r6
  80681c:	4888703a 	and	r4,r9,r2
  806820:	9818d07a 	srli	r12,r19,1
  806824:	001b883a 	mov	r13,zero
  806828:	03a00034 	movhi	r14,32768
  80682c:	3013883a 	mov	r9,r6
  806830:	3815883a 	mov	r10,r7
  806834:	4091883a 	add	r8,r8,r2
  806838:	20000226 	beq	r4,zero,806844 <__muldf3+0x284>
  80683c:	5b64b03a 	or	r18,r11,r13
  806840:	63a6b03a 	or	r19,r12,r14
  806844:	7abfed36 	bltu	r15,r10,8067fc <__muldf3+0x23c>
  806848:	da001015 	stw	r8,64(sp)
  80684c:	00840034 	movhi	r2,4096
  806850:	10bfffc4 	addi	r2,r2,-1
  806854:	12801436 	bltu	r2,r10,8068a8 <__muldf3+0x2e8>
  806858:	da001017 	ldw	r8,64(sp)
  80685c:	101f883a 	mov	r15,r2
  806860:	4a45883a 	add	r2,r9,r9
  806864:	124d803a 	cmpltu	r6,r2,r9
  806868:	5287883a 	add	r3,r10,r10
  80686c:	9497883a 	add	r11,r18,r18
  806870:	5c8f803a 	cmpltu	r7,r11,r18
  806874:	9cd9883a 	add	r12,r19,r19
  806878:	01000044 	movi	r4,1
  80687c:	30cd883a 	add	r6,r6,r3
  806880:	3b0f883a 	add	r7,r7,r12
  806884:	423fffc4 	addi	r8,r8,-1
  806888:	1013883a 	mov	r9,r2
  80688c:	3015883a 	mov	r10,r6
  806890:	111ab03a 	or	r13,r2,r4
  806894:	98003016 	blt	r19,zero,806958 <__muldf3+0x398>
  806898:	5825883a 	mov	r18,r11
  80689c:	3827883a 	mov	r19,r7
  8068a0:	7abfef2e 	bgeu	r15,r10,806860 <__muldf3+0x2a0>
  8068a4:	da001015 	stw	r8,64(sp)
  8068a8:	00803fc4 	movi	r2,255
  8068ac:	488e703a 	and	r7,r9,r2
  8068b0:	00802004 	movi	r2,128
  8068b4:	0007883a 	mov	r3,zero
  8068b8:	0011883a 	mov	r8,zero
  8068bc:	38801826 	beq	r7,r2,806920 <__muldf3+0x360>
  8068c0:	008000c4 	movi	r2,3
  8068c4:	d9000e04 	addi	r4,sp,56
  8068c8:	da801215 	stw	r10,72(sp)
  8068cc:	d8800e15 	stw	r2,56(sp)
  8068d0:	da401115 	stw	r9,68(sp)
  8068d4:	003f6a06 	br	806680 <__muldf3+0xc0>
  8068d8:	89802126 	beq	r17,r6,806960 <__muldf3+0x3a0>
  8068dc:	0009883a 	mov	r4,zero
  8068e0:	5105883a 	add	r2,r10,r4
  8068e4:	128d803a 	cmpltu	r6,r2,r10
  8068e8:	5d07883a 	add	r3,r11,r20
  8068ec:	30cd883a 	add	r6,r6,r3
  8068f0:	0021883a 	mov	r16,zero
  8068f4:	0023883a 	mov	r17,zero
  8068f8:	1025883a 	mov	r18,r2
  8068fc:	3027883a 	mov	r19,r6
  806900:	32ff9e2e 	bgeu	r6,r11,80677c <__muldf3+0x1bc>
  806904:	00800044 	movi	r2,1
  806908:	8089883a 	add	r4,r16,r2
  80690c:	240d803a 	cmpltu	r6,r4,r16
  806910:	344d883a 	add	r6,r6,r17
  806914:	2021883a 	mov	r16,r4
  806918:	3023883a 	mov	r17,r6
  80691c:	003f9806 	br	806780 <__muldf3+0x1c0>
  806920:	403fe71e 	bne	r8,zero,8068c0 <__muldf3+0x300>
  806924:	01004004 	movi	r4,256
  806928:	4904703a 	and	r2,r9,r4
  80692c:	10c4b03a 	or	r2,r2,r3
  806930:	103fe31e 	bne	r2,zero,8068c0 <__muldf3+0x300>
  806934:	94c4b03a 	or	r2,r18,r19
  806938:	103fe126 	beq	r2,zero,8068c0 <__muldf3+0x300>
  80693c:	49c5883a 	add	r2,r9,r7
  806940:	1251803a 	cmpltu	r8,r2,r9
  806944:	4291883a 	add	r8,r8,r10
  806948:	013fc004 	movi	r4,-256
  80694c:	1112703a 	and	r9,r2,r4
  806950:	4015883a 	mov	r10,r8
  806954:	003fda06 	br	8068c0 <__muldf3+0x300>
  806958:	6813883a 	mov	r9,r13
  80695c:	003fce06 	br	806898 <__muldf3+0x2d8>
  806960:	143f7c36 	bltu	r2,r16,806754 <__muldf3+0x194>
  806964:	003fdd06 	br	8068dc <__muldf3+0x31c>
  806968:	12bf852e 	bgeu	r2,r10,806780 <__muldf3+0x1c0>
  80696c:	003fe506 	br	806904 <__muldf3+0x344>
  806970:	00800084 	movi	r2,2
  806974:	20bf351e 	bne	r4,r2,80664c <__muldf3+0x8c>
  806978:	010020b4 	movhi	r4,130
  80697c:	21329604 	addi	r4,r4,-13736
  806980:	003f3f06 	br	806680 <__muldf3+0xc0>

00806984 <__divdf3>:
  806984:	deffed04 	addi	sp,sp,-76
  806988:	dcc01115 	stw	r19,68(sp)
  80698c:	dcc00404 	addi	r19,sp,16
  806990:	2011883a 	mov	r8,r4
  806994:	2813883a 	mov	r9,r5
  806998:	dc000e15 	stw	r16,56(sp)
  80699c:	d809883a 	mov	r4,sp
  8069a0:	980b883a 	mov	r5,r19
  8069a4:	dc000904 	addi	r16,sp,36
  8069a8:	dfc01215 	stw	ra,72(sp)
  8069ac:	da400115 	stw	r9,4(sp)
  8069b0:	d9c00315 	stw	r7,12(sp)
  8069b4:	da000015 	stw	r8,0(sp)
  8069b8:	d9800215 	stw	r6,8(sp)
  8069bc:	dc801015 	stw	r18,64(sp)
  8069c0:	dc400f15 	stw	r17,60(sp)
  8069c4:	0807b900 	call	807b90 <__unpack_d>
  8069c8:	d9000204 	addi	r4,sp,8
  8069cc:	800b883a 	mov	r5,r16
  8069d0:	0807b900 	call	807b90 <__unpack_d>
  8069d4:	d9000417 	ldw	r4,16(sp)
  8069d8:	00800044 	movi	r2,1
  8069dc:	11000b2e 	bgeu	r2,r4,806a0c <__divdf3+0x88>
  8069e0:	d9400917 	ldw	r5,36(sp)
  8069e4:	1140762e 	bgeu	r2,r5,806bc0 <__divdf3+0x23c>
  8069e8:	d8800517 	ldw	r2,20(sp)
  8069ec:	d8c00a17 	ldw	r3,40(sp)
  8069f0:	01800104 	movi	r6,4
  8069f4:	10c4f03a 	xor	r2,r2,r3
  8069f8:	d8800515 	stw	r2,20(sp)
  8069fc:	21800226 	beq	r4,r6,806a08 <__divdf3+0x84>
  806a00:	00800084 	movi	r2,2
  806a04:	2080141e 	bne	r4,r2,806a58 <__divdf3+0xd4>
  806a08:	29000926 	beq	r5,r4,806a30 <__divdf3+0xac>
  806a0c:	9809883a 	mov	r4,r19
  806a10:	080787c0 	call	80787c <__pack_d>
  806a14:	dfc01217 	ldw	ra,72(sp)
  806a18:	dcc01117 	ldw	r19,68(sp)
  806a1c:	dc801017 	ldw	r18,64(sp)
  806a20:	dc400f17 	ldw	r17,60(sp)
  806a24:	dc000e17 	ldw	r16,56(sp)
  806a28:	dec01304 	addi	sp,sp,76
  806a2c:	f800283a 	ret
  806a30:	010020b4 	movhi	r4,130
  806a34:	21329604 	addi	r4,r4,-13736
  806a38:	080787c0 	call	80787c <__pack_d>
  806a3c:	dfc01217 	ldw	ra,72(sp)
  806a40:	dcc01117 	ldw	r19,68(sp)
  806a44:	dc801017 	ldw	r18,64(sp)
  806a48:	dc400f17 	ldw	r17,60(sp)
  806a4c:	dc000e17 	ldw	r16,56(sp)
  806a50:	dec01304 	addi	sp,sp,76
  806a54:	f800283a 	ret
  806a58:	29805b26 	beq	r5,r6,806bc8 <__divdf3+0x244>
  806a5c:	28802d26 	beq	r5,r2,806b14 <__divdf3+0x190>
  806a60:	d8c00617 	ldw	r3,24(sp)
  806a64:	d8800b17 	ldw	r2,44(sp)
  806a68:	d9c00817 	ldw	r7,32(sp)
  806a6c:	dc400d17 	ldw	r17,52(sp)
  806a70:	188bc83a 	sub	r5,r3,r2
  806a74:	d9800717 	ldw	r6,28(sp)
  806a78:	dc000c17 	ldw	r16,48(sp)
  806a7c:	d9400615 	stw	r5,24(sp)
  806a80:	3c403836 	bltu	r7,r17,806b64 <__divdf3+0x1e0>
  806a84:	89c03626 	beq	r17,r7,806b60 <__divdf3+0x1dc>
  806a88:	0015883a 	mov	r10,zero
  806a8c:	001d883a 	mov	r14,zero
  806a90:	02c40034 	movhi	r11,4096
  806a94:	001f883a 	mov	r15,zero
  806a98:	003f883a 	mov	ra,zero
  806a9c:	04800f44 	movi	r18,61
  806aa0:	00000f06 	br	806ae0 <__divdf3+0x15c>
  806aa4:	601d883a 	mov	r14,r12
  806aa8:	681f883a 	mov	r15,r13
  806aac:	400d883a 	mov	r6,r8
  806ab0:	100f883a 	mov	r7,r2
  806ab4:	3191883a 	add	r8,r6,r6
  806ab8:	5808d07a 	srli	r4,r11,1
  806abc:	4185803a 	cmpltu	r2,r8,r6
  806ac0:	39d3883a 	add	r9,r7,r7
  806ac4:	28c6b03a 	or	r3,r5,r3
  806ac8:	1245883a 	add	r2,r2,r9
  806acc:	1815883a 	mov	r10,r3
  806ad0:	2017883a 	mov	r11,r4
  806ad4:	400d883a 	mov	r6,r8
  806ad8:	100f883a 	mov	r7,r2
  806adc:	fc801726 	beq	ra,r18,806b3c <__divdf3+0x1b8>
  806ae0:	580a97fa 	slli	r5,r11,31
  806ae4:	5006d07a 	srli	r3,r10,1
  806ae8:	ffc00044 	addi	ra,ra,1
  806aec:	3c7ff136 	bltu	r7,r17,806ab4 <__divdf3+0x130>
  806af0:	3411c83a 	sub	r8,r6,r16
  806af4:	3205803a 	cmpltu	r2,r6,r8
  806af8:	3c53c83a 	sub	r9,r7,r17
  806afc:	7298b03a 	or	r12,r14,r10
  806b00:	7adab03a 	or	r13,r15,r11
  806b04:	4885c83a 	sub	r2,r9,r2
  806b08:	89ffe61e 	bne	r17,r7,806aa4 <__divdf3+0x120>
  806b0c:	343fe936 	bltu	r6,r16,806ab4 <__divdf3+0x130>
  806b10:	003fe406 	br	806aa4 <__divdf3+0x120>
  806b14:	9809883a 	mov	r4,r19
  806b18:	d9800415 	stw	r6,16(sp)
  806b1c:	080787c0 	call	80787c <__pack_d>
  806b20:	dfc01217 	ldw	ra,72(sp)
  806b24:	dcc01117 	ldw	r19,68(sp)
  806b28:	dc801017 	ldw	r18,64(sp)
  806b2c:	dc400f17 	ldw	r17,60(sp)
  806b30:	dc000e17 	ldw	r16,56(sp)
  806b34:	dec01304 	addi	sp,sp,76
  806b38:	f800283a 	ret
  806b3c:	00803fc4 	movi	r2,255
  806b40:	7090703a 	and	r8,r14,r2
  806b44:	00802004 	movi	r2,128
  806b48:	0007883a 	mov	r3,zero
  806b4c:	0013883a 	mov	r9,zero
  806b50:	40800d26 	beq	r8,r2,806b88 <__divdf3+0x204>
  806b54:	dbc00815 	stw	r15,32(sp)
  806b58:	db800715 	stw	r14,28(sp)
  806b5c:	003fab06 	br	806a0c <__divdf3+0x88>
  806b60:	343fc92e 	bgeu	r6,r16,806a88 <__divdf3+0x104>
  806b64:	3185883a 	add	r2,r6,r6
  806b68:	1189803a 	cmpltu	r4,r2,r6
  806b6c:	39c7883a 	add	r3,r7,r7
  806b70:	20c9883a 	add	r4,r4,r3
  806b74:	297fffc4 	addi	r5,r5,-1
  806b78:	100d883a 	mov	r6,r2
  806b7c:	200f883a 	mov	r7,r4
  806b80:	d9400615 	stw	r5,24(sp)
  806b84:	003fc006 	br	806a88 <__divdf3+0x104>
  806b88:	483ff21e 	bne	r9,zero,806b54 <__divdf3+0x1d0>
  806b8c:	01004004 	movi	r4,256
  806b90:	7104703a 	and	r2,r14,r4
  806b94:	10c4b03a 	or	r2,r2,r3
  806b98:	103fee1e 	bne	r2,zero,806b54 <__divdf3+0x1d0>
  806b9c:	31c4b03a 	or	r2,r6,r7
  806ba0:	103fec26 	beq	r2,zero,806b54 <__divdf3+0x1d0>
  806ba4:	7205883a 	add	r2,r14,r8
  806ba8:	1391803a 	cmpltu	r8,r2,r14
  806bac:	43d1883a 	add	r8,r8,r15
  806bb0:	013fc004 	movi	r4,-256
  806bb4:	111c703a 	and	r14,r2,r4
  806bb8:	401f883a 	mov	r15,r8
  806bbc:	003fe506 	br	806b54 <__divdf3+0x1d0>
  806bc0:	8009883a 	mov	r4,r16
  806bc4:	003f9206 	br	806a10 <__divdf3+0x8c>
  806bc8:	9809883a 	mov	r4,r19
  806bcc:	d8000715 	stw	zero,28(sp)
  806bd0:	d8000815 	stw	zero,32(sp)
  806bd4:	d8000615 	stw	zero,24(sp)
  806bd8:	003f8d06 	br	806a10 <__divdf3+0x8c>

00806bdc <__eqdf2>:
  806bdc:	deffef04 	addi	sp,sp,-68
  806be0:	dc400f15 	stw	r17,60(sp)
  806be4:	dc400404 	addi	r17,sp,16
  806be8:	2005883a 	mov	r2,r4
  806bec:	2807883a 	mov	r3,r5
  806bf0:	dc000e15 	stw	r16,56(sp)
  806bf4:	d809883a 	mov	r4,sp
  806bf8:	880b883a 	mov	r5,r17
  806bfc:	dc000904 	addi	r16,sp,36
  806c00:	d8c00115 	stw	r3,4(sp)
  806c04:	d8800015 	stw	r2,0(sp)
  806c08:	d9800215 	stw	r6,8(sp)
  806c0c:	dfc01015 	stw	ra,64(sp)
  806c10:	d9c00315 	stw	r7,12(sp)
  806c14:	0807b900 	call	807b90 <__unpack_d>
  806c18:	d9000204 	addi	r4,sp,8
  806c1c:	800b883a 	mov	r5,r16
  806c20:	0807b900 	call	807b90 <__unpack_d>
  806c24:	d8800417 	ldw	r2,16(sp)
  806c28:	00c00044 	movi	r3,1
  806c2c:	180d883a 	mov	r6,r3
  806c30:	1880062e 	bgeu	r3,r2,806c4c <__eqdf2+0x70>
  806c34:	d8800917 	ldw	r2,36(sp)
  806c38:	8809883a 	mov	r4,r17
  806c3c:	800b883a 	mov	r5,r16
  806c40:	1880022e 	bgeu	r3,r2,806c4c <__eqdf2+0x70>
  806c44:	0807cc80 	call	807cc8 <__fpcmp_parts_d>
  806c48:	100d883a 	mov	r6,r2
  806c4c:	3005883a 	mov	r2,r6
  806c50:	dfc01017 	ldw	ra,64(sp)
  806c54:	dc400f17 	ldw	r17,60(sp)
  806c58:	dc000e17 	ldw	r16,56(sp)
  806c5c:	dec01104 	addi	sp,sp,68
  806c60:	f800283a 	ret

00806c64 <__nedf2>:
  806c64:	deffef04 	addi	sp,sp,-68
  806c68:	dc400f15 	stw	r17,60(sp)
  806c6c:	dc400404 	addi	r17,sp,16
  806c70:	2005883a 	mov	r2,r4
  806c74:	2807883a 	mov	r3,r5
  806c78:	dc000e15 	stw	r16,56(sp)
  806c7c:	d809883a 	mov	r4,sp
  806c80:	880b883a 	mov	r5,r17
  806c84:	dc000904 	addi	r16,sp,36
  806c88:	d8c00115 	stw	r3,4(sp)
  806c8c:	d8800015 	stw	r2,0(sp)
  806c90:	d9800215 	stw	r6,8(sp)
  806c94:	dfc01015 	stw	ra,64(sp)
  806c98:	d9c00315 	stw	r7,12(sp)
  806c9c:	0807b900 	call	807b90 <__unpack_d>
  806ca0:	d9000204 	addi	r4,sp,8
  806ca4:	800b883a 	mov	r5,r16
  806ca8:	0807b900 	call	807b90 <__unpack_d>
  806cac:	d8800417 	ldw	r2,16(sp)
  806cb0:	00c00044 	movi	r3,1
  806cb4:	180d883a 	mov	r6,r3
  806cb8:	1880062e 	bgeu	r3,r2,806cd4 <__nedf2+0x70>
  806cbc:	d8800917 	ldw	r2,36(sp)
  806cc0:	8809883a 	mov	r4,r17
  806cc4:	800b883a 	mov	r5,r16
  806cc8:	1880022e 	bgeu	r3,r2,806cd4 <__nedf2+0x70>
  806ccc:	0807cc80 	call	807cc8 <__fpcmp_parts_d>
  806cd0:	100d883a 	mov	r6,r2
  806cd4:	3005883a 	mov	r2,r6
  806cd8:	dfc01017 	ldw	ra,64(sp)
  806cdc:	dc400f17 	ldw	r17,60(sp)
  806ce0:	dc000e17 	ldw	r16,56(sp)
  806ce4:	dec01104 	addi	sp,sp,68
  806ce8:	f800283a 	ret

00806cec <__gtdf2>:
  806cec:	deffef04 	addi	sp,sp,-68
  806cf0:	dc400f15 	stw	r17,60(sp)
  806cf4:	dc400404 	addi	r17,sp,16
  806cf8:	2005883a 	mov	r2,r4
  806cfc:	2807883a 	mov	r3,r5
  806d00:	dc000e15 	stw	r16,56(sp)
  806d04:	d809883a 	mov	r4,sp
  806d08:	880b883a 	mov	r5,r17
  806d0c:	dc000904 	addi	r16,sp,36
  806d10:	d8c00115 	stw	r3,4(sp)
  806d14:	d8800015 	stw	r2,0(sp)
  806d18:	d9800215 	stw	r6,8(sp)
  806d1c:	dfc01015 	stw	ra,64(sp)
  806d20:	d9c00315 	stw	r7,12(sp)
  806d24:	0807b900 	call	807b90 <__unpack_d>
  806d28:	d9000204 	addi	r4,sp,8
  806d2c:	800b883a 	mov	r5,r16
  806d30:	0807b900 	call	807b90 <__unpack_d>
  806d34:	d8800417 	ldw	r2,16(sp)
  806d38:	00c00044 	movi	r3,1
  806d3c:	01bfffc4 	movi	r6,-1
  806d40:	1880062e 	bgeu	r3,r2,806d5c <__gtdf2+0x70>
  806d44:	d8800917 	ldw	r2,36(sp)
  806d48:	8809883a 	mov	r4,r17
  806d4c:	800b883a 	mov	r5,r16
  806d50:	1880022e 	bgeu	r3,r2,806d5c <__gtdf2+0x70>
  806d54:	0807cc80 	call	807cc8 <__fpcmp_parts_d>
  806d58:	100d883a 	mov	r6,r2
  806d5c:	3005883a 	mov	r2,r6
  806d60:	dfc01017 	ldw	ra,64(sp)
  806d64:	dc400f17 	ldw	r17,60(sp)
  806d68:	dc000e17 	ldw	r16,56(sp)
  806d6c:	dec01104 	addi	sp,sp,68
  806d70:	f800283a 	ret

00806d74 <__gedf2>:
  806d74:	deffef04 	addi	sp,sp,-68
  806d78:	dc400f15 	stw	r17,60(sp)
  806d7c:	dc400404 	addi	r17,sp,16
  806d80:	2005883a 	mov	r2,r4
  806d84:	2807883a 	mov	r3,r5
  806d88:	dc000e15 	stw	r16,56(sp)
  806d8c:	d809883a 	mov	r4,sp
  806d90:	880b883a 	mov	r5,r17
  806d94:	dc000904 	addi	r16,sp,36
  806d98:	d8c00115 	stw	r3,4(sp)
  806d9c:	d8800015 	stw	r2,0(sp)
  806da0:	d9800215 	stw	r6,8(sp)
  806da4:	dfc01015 	stw	ra,64(sp)
  806da8:	d9c00315 	stw	r7,12(sp)
  806dac:	0807b900 	call	807b90 <__unpack_d>
  806db0:	d9000204 	addi	r4,sp,8
  806db4:	800b883a 	mov	r5,r16
  806db8:	0807b900 	call	807b90 <__unpack_d>
  806dbc:	d8800417 	ldw	r2,16(sp)
  806dc0:	00c00044 	movi	r3,1
  806dc4:	01bfffc4 	movi	r6,-1
  806dc8:	1880062e 	bgeu	r3,r2,806de4 <__gedf2+0x70>
  806dcc:	d8800917 	ldw	r2,36(sp)
  806dd0:	8809883a 	mov	r4,r17
  806dd4:	800b883a 	mov	r5,r16
  806dd8:	1880022e 	bgeu	r3,r2,806de4 <__gedf2+0x70>
  806ddc:	0807cc80 	call	807cc8 <__fpcmp_parts_d>
  806de0:	100d883a 	mov	r6,r2
  806de4:	3005883a 	mov	r2,r6
  806de8:	dfc01017 	ldw	ra,64(sp)
  806dec:	dc400f17 	ldw	r17,60(sp)
  806df0:	dc000e17 	ldw	r16,56(sp)
  806df4:	dec01104 	addi	sp,sp,68
  806df8:	f800283a 	ret

00806dfc <__ltdf2>:
  806dfc:	deffef04 	addi	sp,sp,-68
  806e00:	dc400f15 	stw	r17,60(sp)
  806e04:	dc400404 	addi	r17,sp,16
  806e08:	2005883a 	mov	r2,r4
  806e0c:	2807883a 	mov	r3,r5
  806e10:	dc000e15 	stw	r16,56(sp)
  806e14:	d809883a 	mov	r4,sp
  806e18:	880b883a 	mov	r5,r17
  806e1c:	dc000904 	addi	r16,sp,36
  806e20:	d8c00115 	stw	r3,4(sp)
  806e24:	d8800015 	stw	r2,0(sp)
  806e28:	d9800215 	stw	r6,8(sp)
  806e2c:	dfc01015 	stw	ra,64(sp)
  806e30:	d9c00315 	stw	r7,12(sp)
  806e34:	0807b900 	call	807b90 <__unpack_d>
  806e38:	d9000204 	addi	r4,sp,8
  806e3c:	800b883a 	mov	r5,r16
  806e40:	0807b900 	call	807b90 <__unpack_d>
  806e44:	d8800417 	ldw	r2,16(sp)
  806e48:	00c00044 	movi	r3,1
  806e4c:	180d883a 	mov	r6,r3
  806e50:	1880062e 	bgeu	r3,r2,806e6c <__ltdf2+0x70>
  806e54:	d8800917 	ldw	r2,36(sp)
  806e58:	8809883a 	mov	r4,r17
  806e5c:	800b883a 	mov	r5,r16
  806e60:	1880022e 	bgeu	r3,r2,806e6c <__ltdf2+0x70>
  806e64:	0807cc80 	call	807cc8 <__fpcmp_parts_d>
  806e68:	100d883a 	mov	r6,r2
  806e6c:	3005883a 	mov	r2,r6
  806e70:	dfc01017 	ldw	ra,64(sp)
  806e74:	dc400f17 	ldw	r17,60(sp)
  806e78:	dc000e17 	ldw	r16,56(sp)
  806e7c:	dec01104 	addi	sp,sp,68
  806e80:	f800283a 	ret

00806e84 <__ledf2>:
  806e84:	deffef04 	addi	sp,sp,-68
  806e88:	dc400f15 	stw	r17,60(sp)
  806e8c:	dc400404 	addi	r17,sp,16
  806e90:	2005883a 	mov	r2,r4
  806e94:	2807883a 	mov	r3,r5
  806e98:	dc000e15 	stw	r16,56(sp)
  806e9c:	d809883a 	mov	r4,sp
  806ea0:	880b883a 	mov	r5,r17
  806ea4:	dc000904 	addi	r16,sp,36
  806ea8:	d8c00115 	stw	r3,4(sp)
  806eac:	d8800015 	stw	r2,0(sp)
  806eb0:	d9800215 	stw	r6,8(sp)
  806eb4:	dfc01015 	stw	ra,64(sp)
  806eb8:	d9c00315 	stw	r7,12(sp)
  806ebc:	0807b900 	call	807b90 <__unpack_d>
  806ec0:	d9000204 	addi	r4,sp,8
  806ec4:	800b883a 	mov	r5,r16
  806ec8:	0807b900 	call	807b90 <__unpack_d>
  806ecc:	d8800417 	ldw	r2,16(sp)
  806ed0:	00c00044 	movi	r3,1
  806ed4:	180d883a 	mov	r6,r3
  806ed8:	1880062e 	bgeu	r3,r2,806ef4 <__ledf2+0x70>
  806edc:	d8800917 	ldw	r2,36(sp)
  806ee0:	8809883a 	mov	r4,r17
  806ee4:	800b883a 	mov	r5,r16
  806ee8:	1880022e 	bgeu	r3,r2,806ef4 <__ledf2+0x70>
  806eec:	0807cc80 	call	807cc8 <__fpcmp_parts_d>
  806ef0:	100d883a 	mov	r6,r2
  806ef4:	3005883a 	mov	r2,r6
  806ef8:	dfc01017 	ldw	ra,64(sp)
  806efc:	dc400f17 	ldw	r17,60(sp)
  806f00:	dc000e17 	ldw	r16,56(sp)
  806f04:	dec01104 	addi	sp,sp,68
  806f08:	f800283a 	ret

00806f0c <__floatsidf>:
  806f0c:	2006d7fa 	srli	r3,r4,31
  806f10:	defff604 	addi	sp,sp,-40
  806f14:	008000c4 	movi	r2,3
  806f18:	dfc00915 	stw	ra,36(sp)
  806f1c:	dcc00815 	stw	r19,32(sp)
  806f20:	dc800715 	stw	r18,28(sp)
  806f24:	dc400615 	stw	r17,24(sp)
  806f28:	dc000515 	stw	r16,20(sp)
  806f2c:	d8800015 	stw	r2,0(sp)
  806f30:	d8c00115 	stw	r3,4(sp)
  806f34:	20000f1e 	bne	r4,zero,806f74 <__floatsidf+0x68>
  806f38:	00800084 	movi	r2,2
  806f3c:	d8800015 	stw	r2,0(sp)
  806f40:	d809883a 	mov	r4,sp
  806f44:	080787c0 	call	80787c <__pack_d>
  806f48:	1009883a 	mov	r4,r2
  806f4c:	180b883a 	mov	r5,r3
  806f50:	2005883a 	mov	r2,r4
  806f54:	2807883a 	mov	r3,r5
  806f58:	dfc00917 	ldw	ra,36(sp)
  806f5c:	dcc00817 	ldw	r19,32(sp)
  806f60:	dc800717 	ldw	r18,28(sp)
  806f64:	dc400617 	ldw	r17,24(sp)
  806f68:	dc000517 	ldw	r16,20(sp)
  806f6c:	dec00a04 	addi	sp,sp,40
  806f70:	f800283a 	ret
  806f74:	00800f04 	movi	r2,60
  806f78:	1807003a 	cmpeq	r3,r3,zero
  806f7c:	d8800215 	stw	r2,8(sp)
  806f80:	18001126 	beq	r3,zero,806fc8 <__floatsidf+0xbc>
  806f84:	0027883a 	mov	r19,zero
  806f88:	2025883a 	mov	r18,r4
  806f8c:	d9000315 	stw	r4,12(sp)
  806f90:	dcc00415 	stw	r19,16(sp)
  806f94:	08075000 	call	807500 <__clzsi2>
  806f98:	11000744 	addi	r4,r2,29
  806f9c:	013fe80e 	bge	zero,r4,806f40 <__floatsidf+0x34>
  806fa0:	10bfff44 	addi	r2,r2,-3
  806fa4:	10000c16 	blt	r2,zero,806fd8 <__floatsidf+0xcc>
  806fa8:	90a2983a 	sll	r17,r18,r2
  806fac:	0021883a 	mov	r16,zero
  806fb0:	d8800217 	ldw	r2,8(sp)
  806fb4:	dc400415 	stw	r17,16(sp)
  806fb8:	dc000315 	stw	r16,12(sp)
  806fbc:	1105c83a 	sub	r2,r2,r4
  806fc0:	d8800215 	stw	r2,8(sp)
  806fc4:	003fde06 	br	806f40 <__floatsidf+0x34>
  806fc8:	00a00034 	movhi	r2,32768
  806fcc:	20800a26 	beq	r4,r2,806ff8 <__floatsidf+0xec>
  806fd0:	0109c83a 	sub	r4,zero,r4
  806fd4:	003feb06 	br	806f84 <__floatsidf+0x78>
  806fd8:	9006d07a 	srli	r3,r18,1
  806fdc:	008007c4 	movi	r2,31
  806fe0:	1105c83a 	sub	r2,r2,r4
  806fe4:	1886d83a 	srl	r3,r3,r2
  806fe8:	9922983a 	sll	r17,r19,r4
  806fec:	9120983a 	sll	r16,r18,r4
  806ff0:	1c62b03a 	or	r17,r3,r17
  806ff4:	003fee06 	br	806fb0 <__floatsidf+0xa4>
  806ff8:	0009883a 	mov	r4,zero
  806ffc:	01707834 	movhi	r5,49632
  807000:	003fd306 	br	806f50 <__floatsidf+0x44>

00807004 <__fixdfsi>:
  807004:	defff804 	addi	sp,sp,-32
  807008:	2005883a 	mov	r2,r4
  80700c:	2807883a 	mov	r3,r5
  807010:	d809883a 	mov	r4,sp
  807014:	d9400204 	addi	r5,sp,8
  807018:	d8c00115 	stw	r3,4(sp)
  80701c:	d8800015 	stw	r2,0(sp)
  807020:	dfc00715 	stw	ra,28(sp)
  807024:	0807b900 	call	807b90 <__unpack_d>
  807028:	d8c00217 	ldw	r3,8(sp)
  80702c:	00800084 	movi	r2,2
  807030:	1880051e 	bne	r3,r2,807048 <__fixdfsi+0x44>
  807034:	0007883a 	mov	r3,zero
  807038:	1805883a 	mov	r2,r3
  80703c:	dfc00717 	ldw	ra,28(sp)
  807040:	dec00804 	addi	sp,sp,32
  807044:	f800283a 	ret
  807048:	00800044 	movi	r2,1
  80704c:	10fff92e 	bgeu	r2,r3,807034 <__fixdfsi+0x30>
  807050:	00800104 	movi	r2,4
  807054:	18800426 	beq	r3,r2,807068 <__fixdfsi+0x64>
  807058:	d8c00417 	ldw	r3,16(sp)
  80705c:	183ff516 	blt	r3,zero,807034 <__fixdfsi+0x30>
  807060:	00800784 	movi	r2,30
  807064:	10c0080e 	bge	r2,r3,807088 <__fixdfsi+0x84>
  807068:	d8800317 	ldw	r2,12(sp)
  80706c:	1000121e 	bne	r2,zero,8070b8 <__fixdfsi+0xb4>
  807070:	00e00034 	movhi	r3,32768
  807074:	18ffffc4 	addi	r3,r3,-1
  807078:	1805883a 	mov	r2,r3
  80707c:	dfc00717 	ldw	ra,28(sp)
  807080:	dec00804 	addi	sp,sp,32
  807084:	f800283a 	ret
  807088:	00800f04 	movi	r2,60
  80708c:	10d1c83a 	sub	r8,r2,r3
  807090:	40bff804 	addi	r2,r8,-32
  807094:	d9800517 	ldw	r6,20(sp)
  807098:	d9c00617 	ldw	r7,24(sp)
  80709c:	10000816 	blt	r2,zero,8070c0 <__fixdfsi+0xbc>
  8070a0:	3888d83a 	srl	r4,r7,r2
  8070a4:	d8800317 	ldw	r2,12(sp)
  8070a8:	2007883a 	mov	r3,r4
  8070ac:	103fe226 	beq	r2,zero,807038 <__fixdfsi+0x34>
  8070b0:	0107c83a 	sub	r3,zero,r4
  8070b4:	003fe006 	br	807038 <__fixdfsi+0x34>
  8070b8:	00e00034 	movhi	r3,32768
  8070bc:	003fde06 	br	807038 <__fixdfsi+0x34>
  8070c0:	39c7883a 	add	r3,r7,r7
  8070c4:	008007c4 	movi	r2,31
  8070c8:	1205c83a 	sub	r2,r2,r8
  8070cc:	1886983a 	sll	r3,r3,r2
  8070d0:	3208d83a 	srl	r4,r6,r8
  8070d4:	1908b03a 	or	r4,r3,r4
  8070d8:	003ff206 	br	8070a4 <__fixdfsi+0xa0>

008070dc <__make_dp>:
  8070dc:	defff904 	addi	sp,sp,-28
  8070e0:	d8c00717 	ldw	r3,28(sp)
  8070e4:	d9000015 	stw	r4,0(sp)
  8070e8:	d809883a 	mov	r4,sp
  8070ec:	dfc00515 	stw	ra,20(sp)
  8070f0:	d9c00615 	stw	r7,24(sp)
  8070f4:	d9400115 	stw	r5,4(sp)
  8070f8:	d9800215 	stw	r6,8(sp)
  8070fc:	d8c00415 	stw	r3,16(sp)
  807100:	d9c00315 	stw	r7,12(sp)
  807104:	080787c0 	call	80787c <__pack_d>
  807108:	dfc00517 	ldw	ra,20(sp)
  80710c:	dec00704 	addi	sp,sp,28
  807110:	f800283a 	ret

00807114 <__truncdfsf2>:
  807114:	defff804 	addi	sp,sp,-32
  807118:	2005883a 	mov	r2,r4
  80711c:	2807883a 	mov	r3,r5
  807120:	d809883a 	mov	r4,sp
  807124:	d9400204 	addi	r5,sp,8
  807128:	d8c00115 	stw	r3,4(sp)
  80712c:	d8800015 	stw	r2,0(sp)
  807130:	dfc00715 	stw	ra,28(sp)
  807134:	0807b900 	call	807b90 <__unpack_d>
  807138:	d9c00517 	ldw	r7,20(sp)
  80713c:	da000617 	ldw	r8,24(sp)
  807140:	02d00034 	movhi	r11,16384
  807144:	5affffc4 	addi	r11,r11,-1
  807148:	3812d7ba 	srli	r9,r7,30
  80714c:	401a90ba 	slli	r13,r8,2
  807150:	3ac4703a 	and	r2,r7,r11
  807154:	0007883a 	mov	r3,zero
  807158:	6a52b03a 	or	r9,r13,r9
  80715c:	10c4b03a 	or	r2,r2,r3
  807160:	d9000217 	ldw	r4,8(sp)
  807164:	d9400317 	ldw	r5,12(sp)
  807168:	d9800417 	ldw	r6,16(sp)
  80716c:	480f883a 	mov	r7,r9
  807170:	10000126 	beq	r2,zero,807178 <__truncdfsf2+0x64>
  807174:	49c00054 	ori	r7,r9,1
  807178:	08078500 	call	807850 <__make_fp>
  80717c:	dfc00717 	ldw	ra,28(sp)
  807180:	dec00804 	addi	sp,sp,32
  807184:	f800283a 	ret

00807188 <__floatunsidf>:
  807188:	defff204 	addi	sp,sp,-56
  80718c:	dfc00d15 	stw	ra,52(sp)
  807190:	ddc00c15 	stw	r23,48(sp)
  807194:	dd800b15 	stw	r22,44(sp)
  807198:	dd400a15 	stw	r21,40(sp)
  80719c:	dd000915 	stw	r20,36(sp)
  8071a0:	dcc00815 	stw	r19,32(sp)
  8071a4:	dc800715 	stw	r18,28(sp)
  8071a8:	dc400615 	stw	r17,24(sp)
  8071ac:	dc000515 	stw	r16,20(sp)
  8071b0:	d8000115 	stw	zero,4(sp)
  8071b4:	20000f1e 	bne	r4,zero,8071f4 <__floatunsidf+0x6c>
  8071b8:	00800084 	movi	r2,2
  8071bc:	d8800015 	stw	r2,0(sp)
  8071c0:	d809883a 	mov	r4,sp
  8071c4:	080787c0 	call	80787c <__pack_d>
  8071c8:	dfc00d17 	ldw	ra,52(sp)
  8071cc:	ddc00c17 	ldw	r23,48(sp)
  8071d0:	dd800b17 	ldw	r22,44(sp)
  8071d4:	dd400a17 	ldw	r21,40(sp)
  8071d8:	dd000917 	ldw	r20,36(sp)
  8071dc:	dcc00817 	ldw	r19,32(sp)
  8071e0:	dc800717 	ldw	r18,28(sp)
  8071e4:	dc400617 	ldw	r17,24(sp)
  8071e8:	dc000517 	ldw	r16,20(sp)
  8071ec:	dec00e04 	addi	sp,sp,56
  8071f0:	f800283a 	ret
  8071f4:	008000c4 	movi	r2,3
  8071f8:	00c00f04 	movi	r3,60
  8071fc:	002f883a 	mov	r23,zero
  807200:	202d883a 	mov	r22,r4
  807204:	d8800015 	stw	r2,0(sp)
  807208:	d8c00215 	stw	r3,8(sp)
  80720c:	d9000315 	stw	r4,12(sp)
  807210:	ddc00415 	stw	r23,16(sp)
  807214:	08075000 	call	807500 <__clzsi2>
  807218:	12400744 	addi	r9,r2,29
  80721c:	48000b16 	blt	r9,zero,80724c <__floatunsidf+0xc4>
  807220:	483fe726 	beq	r9,zero,8071c0 <__floatunsidf+0x38>
  807224:	10bfff44 	addi	r2,r2,-3
  807228:	10002e16 	blt	r2,zero,8072e4 <__floatunsidf+0x15c>
  80722c:	b0a2983a 	sll	r17,r22,r2
  807230:	0021883a 	mov	r16,zero
  807234:	d8800217 	ldw	r2,8(sp)
  807238:	dc400415 	stw	r17,16(sp)
  80723c:	dc000315 	stw	r16,12(sp)
  807240:	1245c83a 	sub	r2,r2,r9
  807244:	d8800215 	stw	r2,8(sp)
  807248:	003fdd06 	br	8071c0 <__floatunsidf+0x38>
  80724c:	0255c83a 	sub	r10,zero,r9
  807250:	51bff804 	addi	r6,r10,-32
  807254:	30001b16 	blt	r6,zero,8072c4 <__floatunsidf+0x13c>
  807258:	b9a8d83a 	srl	r20,r23,r6
  80725c:	002b883a 	mov	r21,zero
  807260:	000f883a 	mov	r7,zero
  807264:	01000044 	movi	r4,1
  807268:	0011883a 	mov	r8,zero
  80726c:	30002516 	blt	r6,zero,807304 <__floatunsidf+0x17c>
  807270:	21a6983a 	sll	r19,r4,r6
  807274:	0025883a 	mov	r18,zero
  807278:	00bfffc4 	movi	r2,-1
  80727c:	9089883a 	add	r4,r18,r2
  807280:	988b883a 	add	r5,r19,r2
  807284:	248d803a 	cmpltu	r6,r4,r18
  807288:	314b883a 	add	r5,r6,r5
  80728c:	b104703a 	and	r2,r22,r4
  807290:	b946703a 	and	r3,r23,r5
  807294:	10c4b03a 	or	r2,r2,r3
  807298:	10000226 	beq	r2,zero,8072a4 <__floatunsidf+0x11c>
  80729c:	01c00044 	movi	r7,1
  8072a0:	0011883a 	mov	r8,zero
  8072a4:	d9000217 	ldw	r4,8(sp)
  8072a8:	a1c4b03a 	or	r2,r20,r7
  8072ac:	aa06b03a 	or	r3,r21,r8
  8072b0:	2249c83a 	sub	r4,r4,r9
  8072b4:	d8c00415 	stw	r3,16(sp)
  8072b8:	d9000215 	stw	r4,8(sp)
  8072bc:	d8800315 	stw	r2,12(sp)
  8072c0:	003fbf06 	br	8071c0 <__floatunsidf+0x38>
  8072c4:	bdc7883a 	add	r3,r23,r23
  8072c8:	008007c4 	movi	r2,31
  8072cc:	1285c83a 	sub	r2,r2,r10
  8072d0:	1886983a 	sll	r3,r3,r2
  8072d4:	b2a8d83a 	srl	r20,r22,r10
  8072d8:	baaad83a 	srl	r21,r23,r10
  8072dc:	1d28b03a 	or	r20,r3,r20
  8072e0:	003fdf06 	br	807260 <__floatunsidf+0xd8>
  8072e4:	b006d07a 	srli	r3,r22,1
  8072e8:	008007c4 	movi	r2,31
  8072ec:	1245c83a 	sub	r2,r2,r9
  8072f0:	1886d83a 	srl	r3,r3,r2
  8072f4:	ba62983a 	sll	r17,r23,r9
  8072f8:	b260983a 	sll	r16,r22,r9
  8072fc:	1c62b03a 	or	r17,r3,r17
  807300:	003fcc06 	br	807234 <__floatunsidf+0xac>
  807304:	2006d07a 	srli	r3,r4,1
  807308:	008007c4 	movi	r2,31
  80730c:	1285c83a 	sub	r2,r2,r10
  807310:	18a6d83a 	srl	r19,r3,r2
  807314:	22a4983a 	sll	r18,r4,r10
  807318:	003fd706 	br	807278 <__floatunsidf+0xf0>

0080731c <udivmodsi4>:
  80731c:	29001b2e 	bgeu	r5,r4,80738c <udivmodsi4+0x70>
  807320:	28001a16 	blt	r5,zero,80738c <udivmodsi4+0x70>
  807324:	00800044 	movi	r2,1
  807328:	0007883a 	mov	r3,zero
  80732c:	01c007c4 	movi	r7,31
  807330:	00000306 	br	807340 <udivmodsi4+0x24>
  807334:	19c01326 	beq	r3,r7,807384 <udivmodsi4+0x68>
  807338:	18c00044 	addi	r3,r3,1
  80733c:	28000416 	blt	r5,zero,807350 <udivmodsi4+0x34>
  807340:	294b883a 	add	r5,r5,r5
  807344:	1085883a 	add	r2,r2,r2
  807348:	293ffa36 	bltu	r5,r4,807334 <udivmodsi4+0x18>
  80734c:	10000d26 	beq	r2,zero,807384 <udivmodsi4+0x68>
  807350:	0007883a 	mov	r3,zero
  807354:	21400236 	bltu	r4,r5,807360 <udivmodsi4+0x44>
  807358:	2149c83a 	sub	r4,r4,r5
  80735c:	1886b03a 	or	r3,r3,r2
  807360:	1004d07a 	srli	r2,r2,1
  807364:	280ad07a 	srli	r5,r5,1
  807368:	103ffa1e 	bne	r2,zero,807354 <udivmodsi4+0x38>
  80736c:	30000226 	beq	r6,zero,807378 <udivmodsi4+0x5c>
  807370:	2005883a 	mov	r2,r4
  807374:	f800283a 	ret
  807378:	1809883a 	mov	r4,r3
  80737c:	2005883a 	mov	r2,r4
  807380:	f800283a 	ret
  807384:	0007883a 	mov	r3,zero
  807388:	003ff806 	br	80736c <udivmodsi4+0x50>
  80738c:	00800044 	movi	r2,1
  807390:	0007883a 	mov	r3,zero
  807394:	003fef06 	br	807354 <udivmodsi4+0x38>

00807398 <__divsi3>:
  807398:	defffe04 	addi	sp,sp,-8
  80739c:	dc000015 	stw	r16,0(sp)
  8073a0:	dfc00115 	stw	ra,4(sp)
  8073a4:	0021883a 	mov	r16,zero
  8073a8:	20000c16 	blt	r4,zero,8073dc <__divsi3+0x44>
  8073ac:	000d883a 	mov	r6,zero
  8073b0:	28000e16 	blt	r5,zero,8073ec <__divsi3+0x54>
  8073b4:	080731c0 	call	80731c <udivmodsi4>
  8073b8:	1007883a 	mov	r3,r2
  8073bc:	8005003a 	cmpeq	r2,r16,zero
  8073c0:	1000011e 	bne	r2,zero,8073c8 <__divsi3+0x30>
  8073c4:	00c7c83a 	sub	r3,zero,r3
  8073c8:	1805883a 	mov	r2,r3
  8073cc:	dfc00117 	ldw	ra,4(sp)
  8073d0:	dc000017 	ldw	r16,0(sp)
  8073d4:	dec00204 	addi	sp,sp,8
  8073d8:	f800283a 	ret
  8073dc:	0109c83a 	sub	r4,zero,r4
  8073e0:	04000044 	movi	r16,1
  8073e4:	000d883a 	mov	r6,zero
  8073e8:	283ff20e 	bge	r5,zero,8073b4 <__divsi3+0x1c>
  8073ec:	014bc83a 	sub	r5,zero,r5
  8073f0:	8021003a 	cmpeq	r16,r16,zero
  8073f4:	003fef06 	br	8073b4 <__divsi3+0x1c>

008073f8 <__modsi3>:
  8073f8:	deffff04 	addi	sp,sp,-4
  8073fc:	dfc00015 	stw	ra,0(sp)
  807400:	01800044 	movi	r6,1
  807404:	2807883a 	mov	r3,r5
  807408:	20000416 	blt	r4,zero,80741c <__modsi3+0x24>
  80740c:	28000c16 	blt	r5,zero,807440 <__modsi3+0x48>
  807410:	dfc00017 	ldw	ra,0(sp)
  807414:	dec00104 	addi	sp,sp,4
  807418:	080731c1 	jmpi	80731c <udivmodsi4>
  80741c:	0109c83a 	sub	r4,zero,r4
  807420:	28000b16 	blt	r5,zero,807450 <__modsi3+0x58>
  807424:	180b883a 	mov	r5,r3
  807428:	01800044 	movi	r6,1
  80742c:	080731c0 	call	80731c <udivmodsi4>
  807430:	0085c83a 	sub	r2,zero,r2
  807434:	dfc00017 	ldw	ra,0(sp)
  807438:	dec00104 	addi	sp,sp,4
  80743c:	f800283a 	ret
  807440:	014bc83a 	sub	r5,zero,r5
  807444:	dfc00017 	ldw	ra,0(sp)
  807448:	dec00104 	addi	sp,sp,4
  80744c:	080731c1 	jmpi	80731c <udivmodsi4>
  807450:	0147c83a 	sub	r3,zero,r5
  807454:	003ff306 	br	807424 <__modsi3+0x2c>

00807458 <__udivsi3>:
  807458:	000d883a 	mov	r6,zero
  80745c:	080731c1 	jmpi	80731c <udivmodsi4>

00807460 <__umodsi3>:
  807460:	01800044 	movi	r6,1
  807464:	080731c1 	jmpi	80731c <udivmodsi4>

00807468 <__muldi3>:
  807468:	2011883a 	mov	r8,r4
  80746c:	427fffcc 	andi	r9,r8,65535
  807470:	4018d43a 	srli	r12,r8,16
  807474:	32bfffcc 	andi	r10,r6,65535
  807478:	3016d43a 	srli	r11,r6,16
  80747c:	4a85383a 	mul	r2,r9,r10
  807480:	6295383a 	mul	r10,r12,r10
  807484:	4ad3383a 	mul	r9,r9,r11
  807488:	113fffcc 	andi	r4,r2,65535
  80748c:	1004d43a 	srli	r2,r2,16
  807490:	4a93883a 	add	r9,r9,r10
  807494:	3807883a 	mov	r3,r7
  807498:	1245883a 	add	r2,r2,r9
  80749c:	280f883a 	mov	r7,r5
  8074a0:	180b883a 	mov	r5,r3
  8074a4:	1006943a 	slli	r3,r2,16
  8074a8:	defffd04 	addi	sp,sp,-12
  8074ac:	dc800215 	stw	r18,8(sp)
  8074b0:	1907883a 	add	r3,r3,r4
  8074b4:	dc400115 	stw	r17,4(sp)
  8074b8:	dc000015 	stw	r16,0(sp)
  8074bc:	4165383a 	mul	r18,r8,r5
  8074c0:	31e3383a 	mul	r17,r6,r7
  8074c4:	1012d43a 	srli	r9,r2,16
  8074c8:	62d9383a 	mul	r12,r12,r11
  8074cc:	181f883a 	mov	r15,r3
  8074d0:	1280022e 	bgeu	r2,r10,8074dc <__muldi3+0x74>
  8074d4:	00800074 	movhi	r2,1
  8074d8:	6099883a 	add	r12,r12,r2
  8074dc:	624d883a 	add	r6,r12,r9
  8074e0:	9187883a 	add	r3,r18,r6
  8074e4:	88c7883a 	add	r3,r17,r3
  8074e8:	7805883a 	mov	r2,r15
  8074ec:	dc800217 	ldw	r18,8(sp)
  8074f0:	dc400117 	ldw	r17,4(sp)
  8074f4:	dc000017 	ldw	r16,0(sp)
  8074f8:	dec00304 	addi	sp,sp,12
  8074fc:	f800283a 	ret

00807500 <__clzsi2>:
  807500:	00bfffd4 	movui	r2,65535
  807504:	11000e36 	bltu	r2,r4,807540 <__clzsi2+0x40>
  807508:	00803fc4 	movi	r2,255
  80750c:	01400204 	movi	r5,8
  807510:	0007883a 	mov	r3,zero
  807514:	11001036 	bltu	r2,r4,807558 <__clzsi2+0x58>
  807518:	000b883a 	mov	r5,zero
  80751c:	20c6d83a 	srl	r3,r4,r3
  807520:	008020b4 	movhi	r2,130
  807524:	10b29b04 	addi	r2,r2,-13716
  807528:	1887883a 	add	r3,r3,r2
  80752c:	18800003 	ldbu	r2,0(r3)
  807530:	00c00804 	movi	r3,32
  807534:	2885883a 	add	r2,r5,r2
  807538:	1885c83a 	sub	r2,r3,r2
  80753c:	f800283a 	ret
  807540:	01400404 	movi	r5,16
  807544:	00804034 	movhi	r2,256
  807548:	10bfffc4 	addi	r2,r2,-1
  80754c:	2807883a 	mov	r3,r5
  807550:	113ff22e 	bgeu	r2,r4,80751c <__clzsi2+0x1c>
  807554:	01400604 	movi	r5,24
  807558:	2807883a 	mov	r3,r5
  80755c:	20c6d83a 	srl	r3,r4,r3
  807560:	008020b4 	movhi	r2,130
  807564:	10b29b04 	addi	r2,r2,-13716
  807568:	1887883a 	add	r3,r3,r2
  80756c:	18800003 	ldbu	r2,0(r3)
  807570:	00c00804 	movi	r3,32
  807574:	2885883a 	add	r2,r5,r2
  807578:	1885c83a 	sub	r2,r3,r2
  80757c:	f800283a 	ret

00807580 <__pack_f>:
  807580:	20c00017 	ldw	r3,0(r4)
  807584:	01c00044 	movi	r7,1
  807588:	21800317 	ldw	r6,12(r4)
  80758c:	21400117 	ldw	r5,4(r4)
  807590:	38c02d2e 	bgeu	r7,r3,807648 <__pack_f+0xc8>
  807594:	00800104 	movi	r2,4
  807598:	18802826 	beq	r3,r2,80763c <__pack_f+0xbc>
  80759c:	00800084 	movi	r2,2
  8075a0:	18800126 	beq	r3,r2,8075a8 <__pack_f+0x28>
  8075a4:	3000101e 	bne	r6,zero,8075e8 <__pack_f+0x68>
  8075a8:	000d883a 	mov	r6,zero
  8075ac:	0007883a 	mov	r3,zero
  8075b0:	19003fcc 	andi	r4,r3,255
  8075b4:	200895fa 	slli	r4,r4,23
  8075b8:	00c02034 	movhi	r3,128
  8075bc:	18ffffc4 	addi	r3,r3,-1
  8075c0:	30c6703a 	and	r3,r6,r3
  8075c4:	10a0002c 	andhi	r2,r2,32768
  8075c8:	10c4b03a 	or	r2,r2,r3
  8075cc:	280a97fa 	slli	r5,r5,31
  8075d0:	1104b03a 	or	r2,r2,r4
  8075d4:	00e00034 	movhi	r3,32768
  8075d8:	18ffffc4 	addi	r3,r3,-1
  8075dc:	10c4703a 	and	r2,r2,r3
  8075e0:	1144b03a 	or	r2,r2,r5
  8075e4:	f800283a 	ret
  8075e8:	21000217 	ldw	r4,8(r4)
  8075ec:	00bfe084 	movi	r2,-126
  8075f0:	20801b16 	blt	r4,r2,807660 <__pack_f+0xe0>
  8075f4:	00801fc4 	movi	r2,127
  8075f8:	11001016 	blt	r2,r4,80763c <__pack_f+0xbc>
  8075fc:	308e703a 	and	r7,r6,r2
  807600:	2087883a 	add	r3,r4,r2
  807604:	00801004 	movi	r2,64
  807608:	38800526 	beq	r7,r2,807620 <__pack_f+0xa0>
  80760c:	31800fc4 	addi	r6,r6,63
  807610:	30000716 	blt	r6,zero,807630 <__pack_f+0xb0>
  807614:	300490ba 	slli	r2,r6,2
  807618:	100cd27a 	srli	r6,r2,9
  80761c:	003fe406 	br	8075b0 <__pack_f+0x30>
  807620:	3080200c 	andi	r2,r6,128
  807624:	103ffa26 	beq	r2,zero,807610 <__pack_f+0x90>
  807628:	31cd883a 	add	r6,r6,r7
  80762c:	003ff806 	br	807610 <__pack_f+0x90>
  807630:	300cd07a 	srli	r6,r6,1
  807634:	18c00044 	addi	r3,r3,1
  807638:	003ff606 	br	807614 <__pack_f+0x94>
  80763c:	000d883a 	mov	r6,zero
  807640:	00ffffc4 	movi	r3,-1
  807644:	003fda06 	br	8075b0 <__pack_f+0x30>
  807648:	31800434 	orhi	r6,r6,16
  80764c:	00802034 	movhi	r2,128
  807650:	10bfffc4 	addi	r2,r2,-1
  807654:	308c703a 	and	r6,r6,r2
  807658:	00ffffc4 	movi	r3,-1
  80765c:	003fd406 	br	8075b0 <__pack_f+0x30>
  807660:	1109c83a 	sub	r4,r2,r4
  807664:	00800644 	movi	r2,25
  807668:	11001216 	blt	r2,r4,8076b4 <__pack_f+0x134>
  80766c:	3904983a 	sll	r2,r7,r4
  807670:	3106d83a 	srl	r3,r6,r4
  807674:	10bfffc4 	addi	r2,r2,-1
  807678:	3084703a 	and	r2,r6,r2
  80767c:	1004c03a 	cmpne	r2,r2,zero
  807680:	1886b03a 	or	r3,r3,r2
  807684:	19001fcc 	andi	r4,r3,127
  807688:	00801004 	movi	r2,64
  80768c:	20800c26 	beq	r4,r2,8076c0 <__pack_f+0x140>
  807690:	18c00fc4 	addi	r3,r3,63
  807694:	00900034 	movhi	r2,16384
  807698:	10bfffc4 	addi	r2,r2,-1
  80769c:	180cd1fa 	srli	r6,r3,7
  8076a0:	10c7803a 	cmpltu	r3,r2,r3
  8076a4:	00802034 	movhi	r2,128
  8076a8:	10bfffc4 	addi	r2,r2,-1
  8076ac:	308c703a 	and	r6,r6,r2
  8076b0:	003fbf06 	br	8075b0 <__pack_f+0x30>
  8076b4:	0007883a 	mov	r3,zero
  8076b8:	000d883a 	mov	r6,zero
  8076bc:	003ff906 	br	8076a4 <__pack_f+0x124>
  8076c0:	1880200c 	andi	r2,r3,128
  8076c4:	10000126 	beq	r2,zero,8076cc <__pack_f+0x14c>
  8076c8:	1907883a 	add	r3,r3,r4
  8076cc:	180cd1fa 	srli	r6,r3,7
  8076d0:	00900034 	movhi	r2,16384
  8076d4:	10bfffc4 	addi	r2,r2,-1
  8076d8:	10c7803a 	cmpltu	r3,r2,r3
  8076dc:	003ff106 	br	8076a4 <__pack_f+0x124>

008076e0 <__unpack_f>:
  8076e0:	21800017 	ldw	r6,0(r4)
  8076e4:	00c02034 	movhi	r3,128
  8076e8:	18ffffc4 	addi	r3,r3,-1
  8076ec:	3004d5fa 	srli	r2,r6,23
  8076f0:	3008d7fa 	srli	r4,r6,31
  8076f4:	30ce703a 	and	r7,r6,r3
  8076f8:	10c03fcc 	andi	r3,r2,255
  8076fc:	29000115 	stw	r4,4(r5)
  807700:	1800131e 	bne	r3,zero,807750 <__unpack_f+0x70>
  807704:	38000f26 	beq	r7,zero,807744 <__unpack_f+0x64>
  807708:	380691fa 	slli	r3,r7,7
  80770c:	01bfe084 	movi	r6,-126
  807710:	008000c4 	movi	r2,3
  807714:	01100034 	movhi	r4,16384
  807718:	213fffc4 	addi	r4,r4,-1
  80771c:	28800015 	stw	r2,0(r5)
  807720:	29800215 	stw	r6,8(r5)
  807724:	20c00536 	bltu	r4,r3,80773c <__unpack_f+0x5c>
  807728:	3005883a 	mov	r2,r6
  80772c:	18c7883a 	add	r3,r3,r3
  807730:	10bfffc4 	addi	r2,r2,-1
  807734:	20fffd2e 	bgeu	r4,r3,80772c <__unpack_f+0x4c>
  807738:	28800215 	stw	r2,8(r5)
  80773c:	28c00315 	stw	r3,12(r5)
  807740:	f800283a 	ret
  807744:	00800084 	movi	r2,2
  807748:	28800015 	stw	r2,0(r5)
  80774c:	f800283a 	ret
  807750:	00803fc4 	movi	r2,255
  807754:	18800826 	beq	r3,r2,807778 <__unpack_f+0x98>
  807758:	380491fa 	slli	r2,r7,7
  80775c:	18ffe044 	addi	r3,r3,-127
  807760:	28c00215 	stw	r3,8(r5)
  807764:	10900034 	orhi	r2,r2,16384
  807768:	28800315 	stw	r2,12(r5)
  80776c:	008000c4 	movi	r2,3
  807770:	28800015 	stw	r2,0(r5)
  807774:	f800283a 	ret
  807778:	3800031e 	bne	r7,zero,807788 <__unpack_f+0xa8>
  80777c:	00800104 	movi	r2,4
  807780:	28800015 	stw	r2,0(r5)
  807784:	f800283a 	ret
  807788:	3080042c 	andhi	r2,r6,16
  80778c:	10000426 	beq	r2,zero,8077a0 <__unpack_f+0xc0>
  807790:	00800044 	movi	r2,1
  807794:	28800015 	stw	r2,0(r5)
  807798:	29c00315 	stw	r7,12(r5)
  80779c:	f800283a 	ret
  8077a0:	28000015 	stw	zero,0(r5)
  8077a4:	003ffc06 	br	807798 <__unpack_f+0xb8>

008077a8 <__fpcmp_parts_f>:
  8077a8:	21800017 	ldw	r6,0(r4)
  8077ac:	00c00044 	movi	r3,1
  8077b0:	19800a2e 	bgeu	r3,r6,8077dc <__fpcmp_parts_f+0x34>
  8077b4:	28800017 	ldw	r2,0(r5)
  8077b8:	1880082e 	bgeu	r3,r2,8077dc <__fpcmp_parts_f+0x34>
  8077bc:	00c00104 	movi	r3,4
  8077c0:	30c01e26 	beq	r6,r3,80783c <__fpcmp_parts_f+0x94>
  8077c4:	10c01a26 	beq	r2,r3,807830 <__fpcmp_parts_f+0x88>
  8077c8:	00c00084 	movi	r3,2
  8077cc:	30c00526 	beq	r6,r3,8077e4 <__fpcmp_parts_f+0x3c>
  8077d0:	10c0071e 	bne	r2,r3,8077f0 <__fpcmp_parts_f+0x48>
  8077d4:	20800117 	ldw	r2,4(r4)
  8077d8:	1000091e 	bne	r2,zero,807800 <__fpcmp_parts_f+0x58>
  8077dc:	00800044 	movi	r2,1
  8077e0:	f800283a 	ret
  8077e4:	10c0121e 	bne	r2,r3,807830 <__fpcmp_parts_f+0x88>
  8077e8:	0005883a 	mov	r2,zero
  8077ec:	f800283a 	ret
  8077f0:	20c00117 	ldw	r3,4(r4)
  8077f4:	28800117 	ldw	r2,4(r5)
  8077f8:	18800326 	beq	r3,r2,807808 <__fpcmp_parts_f+0x60>
  8077fc:	183ff726 	beq	r3,zero,8077dc <__fpcmp_parts_f+0x34>
  807800:	00bfffc4 	movi	r2,-1
  807804:	f800283a 	ret
  807808:	21800217 	ldw	r6,8(r4)
  80780c:	28800217 	ldw	r2,8(r5)
  807810:	11bffa16 	blt	r2,r6,8077fc <__fpcmp_parts_f+0x54>
  807814:	30800416 	blt	r6,r2,807828 <__fpcmp_parts_f+0x80>
  807818:	21000317 	ldw	r4,12(r4)
  80781c:	29400317 	ldw	r5,12(r5)
  807820:	293ff636 	bltu	r5,r4,8077fc <__fpcmp_parts_f+0x54>
  807824:	217ff02e 	bgeu	r4,r5,8077e8 <__fpcmp_parts_f+0x40>
  807828:	183fec1e 	bne	r3,zero,8077dc <__fpcmp_parts_f+0x34>
  80782c:	003ff406 	br	807800 <__fpcmp_parts_f+0x58>
  807830:	28800117 	ldw	r2,4(r5)
  807834:	103fe91e 	bne	r2,zero,8077dc <__fpcmp_parts_f+0x34>
  807838:	003ff106 	br	807800 <__fpcmp_parts_f+0x58>
  80783c:	11bfe51e 	bne	r2,r6,8077d4 <__fpcmp_parts_f+0x2c>
  807840:	28c00117 	ldw	r3,4(r5)
  807844:	20800117 	ldw	r2,4(r4)
  807848:	1885c83a 	sub	r2,r3,r2
  80784c:	f800283a 	ret

00807850 <__make_fp>:
  807850:	defffb04 	addi	sp,sp,-20
  807854:	d9000015 	stw	r4,0(sp)
  807858:	d809883a 	mov	r4,sp
  80785c:	dfc00415 	stw	ra,16(sp)
  807860:	d9400115 	stw	r5,4(sp)
  807864:	d9800215 	stw	r6,8(sp)
  807868:	d9c00315 	stw	r7,12(sp)
  80786c:	08075800 	call	807580 <__pack_f>
  807870:	dfc00417 	ldw	ra,16(sp)
  807874:	dec00504 	addi	sp,sp,20
  807878:	f800283a 	ret

0080787c <__pack_d>:
  80787c:	20c00017 	ldw	r3,0(r4)
  807880:	defffd04 	addi	sp,sp,-12
  807884:	dc000015 	stw	r16,0(sp)
  807888:	dc800215 	stw	r18,8(sp)
  80788c:	dc400115 	stw	r17,4(sp)
  807890:	00800044 	movi	r2,1
  807894:	22000317 	ldw	r8,12(r4)
  807898:	001f883a 	mov	r15,zero
  80789c:	22400417 	ldw	r9,16(r4)
  8078a0:	24000117 	ldw	r16,4(r4)
  8078a4:	10c0552e 	bgeu	r2,r3,8079fc <__pack_d+0x180>
  8078a8:	00800104 	movi	r2,4
  8078ac:	18804f26 	beq	r3,r2,8079ec <__pack_d+0x170>
  8078b0:	00800084 	movi	r2,2
  8078b4:	18800226 	beq	r3,r2,8078c0 <__pack_d+0x44>
  8078b8:	4244b03a 	or	r2,r8,r9
  8078bc:	10001a1e 	bne	r2,zero,807928 <__pack_d+0xac>
  8078c0:	000d883a 	mov	r6,zero
  8078c4:	000f883a 	mov	r7,zero
  8078c8:	0011883a 	mov	r8,zero
  8078cc:	00800434 	movhi	r2,16
  8078d0:	10bfffc4 	addi	r2,r2,-1
  8078d4:	301d883a 	mov	r14,r6
  8078d8:	3884703a 	and	r2,r7,r2
  8078dc:	400a953a 	slli	r5,r8,20
  8078e0:	79bffc2c 	andhi	r6,r15,65520
  8078e4:	308cb03a 	or	r6,r6,r2
  8078e8:	00e00434 	movhi	r3,32784
  8078ec:	18ffffc4 	addi	r3,r3,-1
  8078f0:	800497fa 	slli	r2,r16,31
  8078f4:	30c6703a 	and	r3,r6,r3
  8078f8:	1946b03a 	or	r3,r3,r5
  8078fc:	01600034 	movhi	r5,32768
  807900:	297fffc4 	addi	r5,r5,-1
  807904:	194a703a 	and	r5,r3,r5
  807908:	288ab03a 	or	r5,r5,r2
  80790c:	2807883a 	mov	r3,r5
  807910:	7005883a 	mov	r2,r14
  807914:	dc800217 	ldw	r18,8(sp)
  807918:	dc400117 	ldw	r17,4(sp)
  80791c:	dc000017 	ldw	r16,0(sp)
  807920:	dec00304 	addi	sp,sp,12
  807924:	f800283a 	ret
  807928:	21000217 	ldw	r4,8(r4)
  80792c:	00bf0084 	movi	r2,-1022
  807930:	20803f16 	blt	r4,r2,807a30 <__pack_d+0x1b4>
  807934:	0080ffc4 	movi	r2,1023
  807938:	11002c16 	blt	r2,r4,8079ec <__pack_d+0x170>
  80793c:	00803fc4 	movi	r2,255
  807940:	408c703a 	and	r6,r8,r2
  807944:	00802004 	movi	r2,128
  807948:	0007883a 	mov	r3,zero
  80794c:	000f883a 	mov	r7,zero
  807950:	2280ffc4 	addi	r10,r4,1023
  807954:	30801e26 	beq	r6,r2,8079d0 <__pack_d+0x154>
  807958:	00801fc4 	movi	r2,127
  80795c:	4089883a 	add	r4,r8,r2
  807960:	220d803a 	cmpltu	r6,r4,r8
  807964:	324d883a 	add	r6,r6,r9
  807968:	2011883a 	mov	r8,r4
  80796c:	3013883a 	mov	r9,r6
  807970:	00880034 	movhi	r2,8192
  807974:	10bfffc4 	addi	r2,r2,-1
  807978:	12400d36 	bltu	r2,r9,8079b0 <__pack_d+0x134>
  80797c:	4804963a 	slli	r2,r9,24
  807980:	400cd23a 	srli	r6,r8,8
  807984:	480ed23a 	srli	r7,r9,8
  807988:	013fffc4 	movi	r4,-1
  80798c:	118cb03a 	or	r6,r2,r6
  807990:	01400434 	movhi	r5,16
  807994:	297fffc4 	addi	r5,r5,-1
  807998:	3104703a 	and	r2,r6,r4
  80799c:	3946703a 	and	r3,r7,r5
  8079a0:	5201ffcc 	andi	r8,r10,2047
  8079a4:	100d883a 	mov	r6,r2
  8079a8:	180f883a 	mov	r7,r3
  8079ac:	003fc706 	br	8078cc <__pack_d+0x50>
  8079b0:	480897fa 	slli	r4,r9,31
  8079b4:	4004d07a 	srli	r2,r8,1
  8079b8:	4806d07a 	srli	r3,r9,1
  8079bc:	52800044 	addi	r10,r10,1
  8079c0:	2084b03a 	or	r2,r4,r2
  8079c4:	1011883a 	mov	r8,r2
  8079c8:	1813883a 	mov	r9,r3
  8079cc:	003feb06 	br	80797c <__pack_d+0x100>
  8079d0:	383fe11e 	bne	r7,zero,807958 <__pack_d+0xdc>
  8079d4:	01004004 	movi	r4,256
  8079d8:	4104703a 	and	r2,r8,r4
  8079dc:	10c4b03a 	or	r2,r2,r3
  8079e0:	103fe326 	beq	r2,zero,807970 <__pack_d+0xf4>
  8079e4:	3005883a 	mov	r2,r6
  8079e8:	003fdc06 	br	80795c <__pack_d+0xe0>
  8079ec:	000d883a 	mov	r6,zero
  8079f0:	000f883a 	mov	r7,zero
  8079f4:	0201ffc4 	movi	r8,2047
  8079f8:	003fb406 	br	8078cc <__pack_d+0x50>
  8079fc:	0005883a 	mov	r2,zero
  807a00:	00c00234 	movhi	r3,8
  807a04:	408cb03a 	or	r6,r8,r2
  807a08:	48ceb03a 	or	r7,r9,r3
  807a0c:	013fffc4 	movi	r4,-1
  807a10:	01400434 	movhi	r5,16
  807a14:	297fffc4 	addi	r5,r5,-1
  807a18:	3104703a 	and	r2,r6,r4
  807a1c:	3946703a 	and	r3,r7,r5
  807a20:	100d883a 	mov	r6,r2
  807a24:	180f883a 	mov	r7,r3
  807a28:	0201ffc4 	movi	r8,2047
  807a2c:	003fa706 	br	8078cc <__pack_d+0x50>
  807a30:	1109c83a 	sub	r4,r2,r4
  807a34:	00800e04 	movi	r2,56
  807a38:	11004316 	blt	r2,r4,807b48 <__pack_d+0x2cc>
  807a3c:	21fff804 	addi	r7,r4,-32
  807a40:	38004516 	blt	r7,zero,807b58 <__pack_d+0x2dc>
  807a44:	49d8d83a 	srl	r12,r9,r7
  807a48:	001b883a 	mov	r13,zero
  807a4c:	0023883a 	mov	r17,zero
  807a50:	01400044 	movi	r5,1
  807a54:	0025883a 	mov	r18,zero
  807a58:	38004716 	blt	r7,zero,807b78 <__pack_d+0x2fc>
  807a5c:	29d6983a 	sll	r11,r5,r7
  807a60:	0015883a 	mov	r10,zero
  807a64:	00bfffc4 	movi	r2,-1
  807a68:	5089883a 	add	r4,r10,r2
  807a6c:	588b883a 	add	r5,r11,r2
  807a70:	228d803a 	cmpltu	r6,r4,r10
  807a74:	314b883a 	add	r5,r6,r5
  807a78:	4104703a 	and	r2,r8,r4
  807a7c:	4946703a 	and	r3,r9,r5
  807a80:	10c4b03a 	or	r2,r2,r3
  807a84:	10000226 	beq	r2,zero,807a90 <__pack_d+0x214>
  807a88:	04400044 	movi	r17,1
  807a8c:	0025883a 	mov	r18,zero
  807a90:	00803fc4 	movi	r2,255
  807a94:	644eb03a 	or	r7,r12,r17
  807a98:	3892703a 	and	r9,r7,r2
  807a9c:	00802004 	movi	r2,128
  807aa0:	6c90b03a 	or	r8,r13,r18
  807aa4:	0015883a 	mov	r10,zero
  807aa8:	48801626 	beq	r9,r2,807b04 <__pack_d+0x288>
  807aac:	01001fc4 	movi	r4,127
  807ab0:	3905883a 	add	r2,r7,r4
  807ab4:	11cd803a 	cmpltu	r6,r2,r7
  807ab8:	320d883a 	add	r6,r6,r8
  807abc:	100f883a 	mov	r7,r2
  807ac0:	00840034 	movhi	r2,4096
  807ac4:	10bfffc4 	addi	r2,r2,-1
  807ac8:	3011883a 	mov	r8,r6
  807acc:	0007883a 	mov	r3,zero
  807ad0:	11801b36 	bltu	r2,r6,807b40 <__pack_d+0x2c4>
  807ad4:	4004963a 	slli	r2,r8,24
  807ad8:	3808d23a 	srli	r4,r7,8
  807adc:	400ad23a 	srli	r5,r8,8
  807ae0:	1813883a 	mov	r9,r3
  807ae4:	1108b03a 	or	r4,r2,r4
  807ae8:	00bfffc4 	movi	r2,-1
  807aec:	00c00434 	movhi	r3,16
  807af0:	18ffffc4 	addi	r3,r3,-1
  807af4:	208c703a 	and	r6,r4,r2
  807af8:	28ce703a 	and	r7,r5,r3
  807afc:	4a01ffcc 	andi	r8,r9,2047
  807b00:	003f7206 	br	8078cc <__pack_d+0x50>
  807b04:	503fe91e 	bne	r10,zero,807aac <__pack_d+0x230>
  807b08:	01004004 	movi	r4,256
  807b0c:	3904703a 	and	r2,r7,r4
  807b10:	0007883a 	mov	r3,zero
  807b14:	10c4b03a 	or	r2,r2,r3
  807b18:	10000626 	beq	r2,zero,807b34 <__pack_d+0x2b8>
  807b1c:	3a45883a 	add	r2,r7,r9
  807b20:	11cd803a 	cmpltu	r6,r2,r7
  807b24:	320d883a 	add	r6,r6,r8
  807b28:	100f883a 	mov	r7,r2
  807b2c:	3011883a 	mov	r8,r6
  807b30:	0007883a 	mov	r3,zero
  807b34:	00840034 	movhi	r2,4096
  807b38:	10bfffc4 	addi	r2,r2,-1
  807b3c:	123fe52e 	bgeu	r2,r8,807ad4 <__pack_d+0x258>
  807b40:	00c00044 	movi	r3,1
  807b44:	003fe306 	br	807ad4 <__pack_d+0x258>
  807b48:	0009883a 	mov	r4,zero
  807b4c:	0013883a 	mov	r9,zero
  807b50:	000b883a 	mov	r5,zero
  807b54:	003fe406 	br	807ae8 <__pack_d+0x26c>
  807b58:	4a47883a 	add	r3,r9,r9
  807b5c:	008007c4 	movi	r2,31
  807b60:	1105c83a 	sub	r2,r2,r4
  807b64:	1886983a 	sll	r3,r3,r2
  807b68:	4118d83a 	srl	r12,r8,r4
  807b6c:	491ad83a 	srl	r13,r9,r4
  807b70:	1b18b03a 	or	r12,r3,r12
  807b74:	003fb506 	br	807a4c <__pack_d+0x1d0>
  807b78:	2806d07a 	srli	r3,r5,1
  807b7c:	008007c4 	movi	r2,31
  807b80:	1105c83a 	sub	r2,r2,r4
  807b84:	1896d83a 	srl	r11,r3,r2
  807b88:	2914983a 	sll	r10,r5,r4
  807b8c:	003fb506 	br	807a64 <__pack_d+0x1e8>

00807b90 <__unpack_d>:
  807b90:	20c00117 	ldw	r3,4(r4)
  807b94:	22400017 	ldw	r9,0(r4)
  807b98:	00800434 	movhi	r2,16
  807b9c:	10bfffc4 	addi	r2,r2,-1
  807ba0:	1808d53a 	srli	r4,r3,20
  807ba4:	180cd7fa 	srli	r6,r3,31
  807ba8:	1894703a 	and	r10,r3,r2
  807bac:	2201ffcc 	andi	r8,r4,2047
  807bb0:	281b883a 	mov	r13,r5
  807bb4:	4817883a 	mov	r11,r9
  807bb8:	29800115 	stw	r6,4(r5)
  807bbc:	5019883a 	mov	r12,r10
  807bc0:	40001e1e 	bne	r8,zero,807c3c <__unpack_d+0xac>
  807bc4:	4a84b03a 	or	r2,r9,r10
  807bc8:	10001926 	beq	r2,zero,807c30 <__unpack_d+0xa0>
  807bcc:	4804d63a 	srli	r2,r9,24
  807bd0:	500c923a 	slli	r6,r10,8
  807bd4:	013f0084 	movi	r4,-1022
  807bd8:	00c40034 	movhi	r3,4096
  807bdc:	18ffffc4 	addi	r3,r3,-1
  807be0:	118cb03a 	or	r6,r2,r6
  807be4:	008000c4 	movi	r2,3
  807be8:	480a923a 	slli	r5,r9,8
  807bec:	68800015 	stw	r2,0(r13)
  807bf0:	69000215 	stw	r4,8(r13)
  807bf4:	19800b36 	bltu	r3,r6,807c24 <__unpack_d+0x94>
  807bf8:	200f883a 	mov	r7,r4
  807bfc:	1811883a 	mov	r8,r3
  807c00:	2945883a 	add	r2,r5,r5
  807c04:	1149803a 	cmpltu	r4,r2,r5
  807c08:	3187883a 	add	r3,r6,r6
  807c0c:	20c9883a 	add	r4,r4,r3
  807c10:	100b883a 	mov	r5,r2
  807c14:	200d883a 	mov	r6,r4
  807c18:	39ffffc4 	addi	r7,r7,-1
  807c1c:	413ff82e 	bgeu	r8,r4,807c00 <__unpack_d+0x70>
  807c20:	69c00215 	stw	r7,8(r13)
  807c24:	69800415 	stw	r6,16(r13)
  807c28:	69400315 	stw	r5,12(r13)
  807c2c:	f800283a 	ret
  807c30:	00800084 	movi	r2,2
  807c34:	28800015 	stw	r2,0(r5)
  807c38:	f800283a 	ret
  807c3c:	0081ffc4 	movi	r2,2047
  807c40:	40800f26 	beq	r8,r2,807c80 <__unpack_d+0xf0>
  807c44:	480cd63a 	srli	r6,r9,24
  807c48:	5006923a 	slli	r3,r10,8
  807c4c:	4804923a 	slli	r2,r9,8
  807c50:	0009883a 	mov	r4,zero
  807c54:	30c6b03a 	or	r3,r6,r3
  807c58:	01440034 	movhi	r5,4096
  807c5c:	110cb03a 	or	r6,r2,r4
  807c60:	423f0044 	addi	r8,r8,-1023
  807c64:	194eb03a 	or	r7,r3,r5
  807c68:	008000c4 	movi	r2,3
  807c6c:	69c00415 	stw	r7,16(r13)
  807c70:	6a000215 	stw	r8,8(r13)
  807c74:	68800015 	stw	r2,0(r13)
  807c78:	69800315 	stw	r6,12(r13)
  807c7c:	f800283a 	ret
  807c80:	4a84b03a 	or	r2,r9,r10
  807c84:	1000031e 	bne	r2,zero,807c94 <__unpack_d+0x104>
  807c88:	00800104 	movi	r2,4
  807c8c:	28800015 	stw	r2,0(r5)
  807c90:	f800283a 	ret
  807c94:	0009883a 	mov	r4,zero
  807c98:	01400234 	movhi	r5,8
  807c9c:	4904703a 	and	r2,r9,r4
  807ca0:	5146703a 	and	r3,r10,r5
  807ca4:	10c4b03a 	or	r2,r2,r3
  807ca8:	10000526 	beq	r2,zero,807cc0 <__unpack_d+0x130>
  807cac:	00800044 	movi	r2,1
  807cb0:	68800015 	stw	r2,0(r13)
  807cb4:	6b000415 	stw	r12,16(r13)
  807cb8:	6ac00315 	stw	r11,12(r13)
  807cbc:	f800283a 	ret
  807cc0:	68000015 	stw	zero,0(r13)
  807cc4:	003ffb06 	br	807cb4 <__unpack_d+0x124>

00807cc8 <__fpcmp_parts_d>:
  807cc8:	21800017 	ldw	r6,0(r4)
  807ccc:	00c00044 	movi	r3,1
  807cd0:	19800a2e 	bgeu	r3,r6,807cfc <__fpcmp_parts_d+0x34>
  807cd4:	28800017 	ldw	r2,0(r5)
  807cd8:	1880082e 	bgeu	r3,r2,807cfc <__fpcmp_parts_d+0x34>
  807cdc:	00c00104 	movi	r3,4
  807ce0:	30c02626 	beq	r6,r3,807d7c <__fpcmp_parts_d+0xb4>
  807ce4:	10c02226 	beq	r2,r3,807d70 <__fpcmp_parts_d+0xa8>
  807ce8:	00c00084 	movi	r3,2
  807cec:	30c00526 	beq	r6,r3,807d04 <__fpcmp_parts_d+0x3c>
  807cf0:	10c0071e 	bne	r2,r3,807d10 <__fpcmp_parts_d+0x48>
  807cf4:	20800117 	ldw	r2,4(r4)
  807cf8:	1000091e 	bne	r2,zero,807d20 <__fpcmp_parts_d+0x58>
  807cfc:	00800044 	movi	r2,1
  807d00:	f800283a 	ret
  807d04:	10c01a1e 	bne	r2,r3,807d70 <__fpcmp_parts_d+0xa8>
  807d08:	0005883a 	mov	r2,zero
  807d0c:	f800283a 	ret
  807d10:	22000117 	ldw	r8,4(r4)
  807d14:	28800117 	ldw	r2,4(r5)
  807d18:	40800326 	beq	r8,r2,807d28 <__fpcmp_parts_d+0x60>
  807d1c:	403ff726 	beq	r8,zero,807cfc <__fpcmp_parts_d+0x34>
  807d20:	00bfffc4 	movi	r2,-1
  807d24:	f800283a 	ret
  807d28:	20c00217 	ldw	r3,8(r4)
  807d2c:	28800217 	ldw	r2,8(r5)
  807d30:	10fffa16 	blt	r2,r3,807d1c <__fpcmp_parts_d+0x54>
  807d34:	18800916 	blt	r3,r2,807d5c <__fpcmp_parts_d+0x94>
  807d38:	21c00417 	ldw	r7,16(r4)
  807d3c:	28c00417 	ldw	r3,16(r5)
  807d40:	21800317 	ldw	r6,12(r4)
  807d44:	28800317 	ldw	r2,12(r5)
  807d48:	19fff436 	bltu	r3,r7,807d1c <__fpcmp_parts_d+0x54>
  807d4c:	38c00526 	beq	r7,r3,807d64 <__fpcmp_parts_d+0x9c>
  807d50:	38c00236 	bltu	r7,r3,807d5c <__fpcmp_parts_d+0x94>
  807d54:	19ffec1e 	bne	r3,r7,807d08 <__fpcmp_parts_d+0x40>
  807d58:	30bfeb2e 	bgeu	r6,r2,807d08 <__fpcmp_parts_d+0x40>
  807d5c:	403fe71e 	bne	r8,zero,807cfc <__fpcmp_parts_d+0x34>
  807d60:	003fef06 	br	807d20 <__fpcmp_parts_d+0x58>
  807d64:	11bffa2e 	bgeu	r2,r6,807d50 <__fpcmp_parts_d+0x88>
  807d68:	403fe426 	beq	r8,zero,807cfc <__fpcmp_parts_d+0x34>
  807d6c:	003fec06 	br	807d20 <__fpcmp_parts_d+0x58>
  807d70:	28800117 	ldw	r2,4(r5)
  807d74:	103fe11e 	bne	r2,zero,807cfc <__fpcmp_parts_d+0x34>
  807d78:	003fe906 	br	807d20 <__fpcmp_parts_d+0x58>
  807d7c:	11bfdd1e 	bne	r2,r6,807cf4 <__fpcmp_parts_d+0x2c>
  807d80:	28c00117 	ldw	r3,4(r5)
  807d84:	20800117 	ldw	r2,4(r4)
  807d88:	1885c83a 	sub	r2,r3,r2
  807d8c:	f800283a 	ret

00807d90 <__errno>:
  807d90:	00c020b4 	movhi	r3,130
  807d94:	18fb2804 	addi	r3,r3,-4960
  807d98:	18800017 	ldw	r2,0(r3)
  807d9c:	f800283a 	ret

00807da0 <free>:
  807da0:	008020b4 	movhi	r2,130
  807da4:	10bb2804 	addi	r2,r2,-4960
  807da8:	200b883a 	mov	r5,r4
  807dac:	11000017 	ldw	r4,0(r2)
  807db0:	080c6f41 	jmpi	80c6f4 <_free_r>

00807db4 <malloc>:
  807db4:	008020b4 	movhi	r2,130
  807db8:	10bb2804 	addi	r2,r2,-4960
  807dbc:	200b883a 	mov	r5,r4
  807dc0:	11000017 	ldw	r4,0(r2)
  807dc4:	0807dc81 	jmpi	807dc8 <_malloc_r>

00807dc8 <_malloc_r>:
  807dc8:	defff604 	addi	sp,sp,-40
  807dcc:	28c002c4 	addi	r3,r5,11
  807dd0:	00800584 	movi	r2,22
  807dd4:	dc800215 	stw	r18,8(sp)
  807dd8:	dfc00915 	stw	ra,36(sp)
  807ddc:	df000815 	stw	fp,32(sp)
  807de0:	ddc00715 	stw	r23,28(sp)
  807de4:	dd800615 	stw	r22,24(sp)
  807de8:	dd400515 	stw	r21,20(sp)
  807dec:	dd000415 	stw	r20,16(sp)
  807df0:	dcc00315 	stw	r19,12(sp)
  807df4:	dc400115 	stw	r17,4(sp)
  807df8:	dc000015 	stw	r16,0(sp)
  807dfc:	2025883a 	mov	r18,r4
  807e00:	10c01236 	bltu	r2,r3,807e4c <_malloc_r+0x84>
  807e04:	04400404 	movi	r17,16
  807e08:	8940142e 	bgeu	r17,r5,807e5c <_malloc_r+0x94>
  807e0c:	00800304 	movi	r2,12
  807e10:	0007883a 	mov	r3,zero
  807e14:	90800015 	stw	r2,0(r18)
  807e18:	1805883a 	mov	r2,r3
  807e1c:	dfc00917 	ldw	ra,36(sp)
  807e20:	df000817 	ldw	fp,32(sp)
  807e24:	ddc00717 	ldw	r23,28(sp)
  807e28:	dd800617 	ldw	r22,24(sp)
  807e2c:	dd400517 	ldw	r21,20(sp)
  807e30:	dd000417 	ldw	r20,16(sp)
  807e34:	dcc00317 	ldw	r19,12(sp)
  807e38:	dc800217 	ldw	r18,8(sp)
  807e3c:	dc400117 	ldw	r17,4(sp)
  807e40:	dc000017 	ldw	r16,0(sp)
  807e44:	dec00a04 	addi	sp,sp,40
  807e48:	f800283a 	ret
  807e4c:	00bffe04 	movi	r2,-8
  807e50:	18a2703a 	and	r17,r3,r2
  807e54:	883fed16 	blt	r17,zero,807e0c <_malloc_r+0x44>
  807e58:	897fec36 	bltu	r17,r5,807e0c <_malloc_r+0x44>
  807e5c:	9009883a 	mov	r4,r18
  807e60:	0810db00 	call	810db0 <__malloc_lock>
  807e64:	00807dc4 	movi	r2,503
  807e68:	14402b2e 	bgeu	r2,r17,807f18 <_malloc_r+0x150>
  807e6c:	8806d27a 	srli	r3,r17,9
  807e70:	18003f1e 	bne	r3,zero,807f70 <_malloc_r+0x1a8>
  807e74:	880cd0fa 	srli	r6,r17,3
  807e78:	300490fa 	slli	r2,r6,3
  807e7c:	02c020b4 	movhi	r11,130
  807e80:	5af55004 	addi	r11,r11,-10944
  807e84:	12cb883a 	add	r5,r2,r11
  807e88:	2c000317 	ldw	r16,12(r5)
  807e8c:	580f883a 	mov	r7,r11
  807e90:	2c00041e 	bne	r5,r16,807ea4 <_malloc_r+0xdc>
  807e94:	00000a06 	br	807ec0 <_malloc_r+0xf8>
  807e98:	1800860e 	bge	r3,zero,8080b4 <_malloc_r+0x2ec>
  807e9c:	84000317 	ldw	r16,12(r16)
  807ea0:	2c000726 	beq	r5,r16,807ec0 <_malloc_r+0xf8>
  807ea4:	80800117 	ldw	r2,4(r16)
  807ea8:	00ffff04 	movi	r3,-4
  807eac:	10c8703a 	and	r4,r2,r3
  807eb0:	2447c83a 	sub	r3,r4,r17
  807eb4:	008003c4 	movi	r2,15
  807eb8:	10fff70e 	bge	r2,r3,807e98 <_malloc_r+0xd0>
  807ebc:	31bfffc4 	addi	r6,r6,-1
  807ec0:	32400044 	addi	r9,r6,1
  807ec4:	028020b4 	movhi	r10,130
  807ec8:	52b55204 	addi	r10,r10,-10936
  807ecc:	54000217 	ldw	r16,8(r10)
  807ed0:	8280a026 	beq	r16,r10,808154 <_malloc_r+0x38c>
  807ed4:	80800117 	ldw	r2,4(r16)
  807ed8:	00ffff04 	movi	r3,-4
  807edc:	10ca703a 	and	r5,r2,r3
  807ee0:	2c4dc83a 	sub	r6,r5,r17
  807ee4:	008003c4 	movi	r2,15
  807ee8:	11808316 	blt	r2,r6,8080f8 <_malloc_r+0x330>
  807eec:	52800315 	stw	r10,12(r10)
  807ef0:	52800215 	stw	r10,8(r10)
  807ef4:	30002916 	blt	r6,zero,807f9c <_malloc_r+0x1d4>
  807ef8:	8147883a 	add	r3,r16,r5
  807efc:	18800117 	ldw	r2,4(r3)
  807f00:	9009883a 	mov	r4,r18
  807f04:	10800054 	ori	r2,r2,1
  807f08:	18800115 	stw	r2,4(r3)
  807f0c:	0810eb80 	call	810eb8 <__malloc_unlock>
  807f10:	80c00204 	addi	r3,r16,8
  807f14:	003fc006 	br	807e18 <_malloc_r+0x50>
  807f18:	02c020b4 	movhi	r11,130
  807f1c:	5af55004 	addi	r11,r11,-10944
  807f20:	8ac5883a 	add	r2,r17,r11
  807f24:	14000317 	ldw	r16,12(r2)
  807f28:	580f883a 	mov	r7,r11
  807f2c:	8806d0fa 	srli	r3,r17,3
  807f30:	14006c26 	beq	r2,r16,8080e4 <_malloc_r+0x31c>
  807f34:	80c00117 	ldw	r3,4(r16)
  807f38:	00bfff04 	movi	r2,-4
  807f3c:	81800317 	ldw	r6,12(r16)
  807f40:	1886703a 	and	r3,r3,r2
  807f44:	80c7883a 	add	r3,r16,r3
  807f48:	18800117 	ldw	r2,4(r3)
  807f4c:	81400217 	ldw	r5,8(r16)
  807f50:	9009883a 	mov	r4,r18
  807f54:	10800054 	ori	r2,r2,1
  807f58:	18800115 	stw	r2,4(r3)
  807f5c:	31400215 	stw	r5,8(r6)
  807f60:	29800315 	stw	r6,12(r5)
  807f64:	0810eb80 	call	810eb8 <__malloc_unlock>
  807f68:	80c00204 	addi	r3,r16,8
  807f6c:	003faa06 	br	807e18 <_malloc_r+0x50>
  807f70:	00800104 	movi	r2,4
  807f74:	10c0052e 	bgeu	r2,r3,807f8c <_malloc_r+0x1c4>
  807f78:	00800504 	movi	r2,20
  807f7c:	10c07836 	bltu	r2,r3,808160 <_malloc_r+0x398>
  807f80:	198016c4 	addi	r6,r3,91
  807f84:	300490fa 	slli	r2,r6,3
  807f88:	003fbc06 	br	807e7c <_malloc_r+0xb4>
  807f8c:	8804d1ba 	srli	r2,r17,6
  807f90:	11800e04 	addi	r6,r2,56
  807f94:	300490fa 	slli	r2,r6,3
  807f98:	003fb806 	br	807e7c <_malloc_r+0xb4>
  807f9c:	00807fc4 	movi	r2,511
  807fa0:	1140bb36 	bltu	r2,r5,808290 <_malloc_r+0x4c8>
  807fa4:	2806d0fa 	srli	r3,r5,3
  807fa8:	573ffe04 	addi	fp,r10,-8
  807fac:	00800044 	movi	r2,1
  807fb0:	180890fa 	slli	r4,r3,3
  807fb4:	1807d0ba 	srai	r3,r3,2
  807fb8:	e1c00117 	ldw	r7,4(fp)
  807fbc:	5909883a 	add	r4,r11,r4
  807fc0:	21400217 	ldw	r5,8(r4)
  807fc4:	10c4983a 	sll	r2,r2,r3
  807fc8:	81000315 	stw	r4,12(r16)
  807fcc:	81400215 	stw	r5,8(r16)
  807fd0:	388eb03a 	or	r7,r7,r2
  807fd4:	2c000315 	stw	r16,12(r5)
  807fd8:	24000215 	stw	r16,8(r4)
  807fdc:	e1c00115 	stw	r7,4(fp)
  807fe0:	4807883a 	mov	r3,r9
  807fe4:	4800cd16 	blt	r9,zero,80831c <_malloc_r+0x554>
  807fe8:	1807d0ba 	srai	r3,r3,2
  807fec:	00800044 	movi	r2,1
  807ff0:	10c8983a 	sll	r4,r2,r3
  807ff4:	39004436 	bltu	r7,r4,808108 <_malloc_r+0x340>
  807ff8:	21c4703a 	and	r2,r4,r7
  807ffc:	10000a1e 	bne	r2,zero,808028 <_malloc_r+0x260>
  808000:	2109883a 	add	r4,r4,r4
  808004:	00bfff04 	movi	r2,-4
  808008:	4884703a 	and	r2,r9,r2
  80800c:	3906703a 	and	r3,r7,r4
  808010:	12400104 	addi	r9,r2,4
  808014:	1800041e 	bne	r3,zero,808028 <_malloc_r+0x260>
  808018:	2109883a 	add	r4,r4,r4
  80801c:	3904703a 	and	r2,r7,r4
  808020:	4a400104 	addi	r9,r9,4
  808024:	103ffc26 	beq	r2,zero,808018 <_malloc_r+0x250>
  808028:	480490fa 	slli	r2,r9,3
  80802c:	4819883a 	mov	r12,r9
  808030:	023fff04 	movi	r8,-4
  808034:	589b883a 	add	r13,r11,r2
  808038:	6807883a 	mov	r3,r13
  80803c:	014003c4 	movi	r5,15
  808040:	1c000317 	ldw	r16,12(r3)
  808044:	1c00041e 	bne	r3,r16,808058 <_malloc_r+0x290>
  808048:	0000a706 	br	8082e8 <_malloc_r+0x520>
  80804c:	3000ab0e 	bge	r6,zero,8082fc <_malloc_r+0x534>
  808050:	84000317 	ldw	r16,12(r16)
  808054:	1c00a426 	beq	r3,r16,8082e8 <_malloc_r+0x520>
  808058:	80800117 	ldw	r2,4(r16)
  80805c:	1204703a 	and	r2,r2,r8
  808060:	144dc83a 	sub	r6,r2,r17
  808064:	29bff90e 	bge	r5,r6,80804c <_malloc_r+0x284>
  808068:	81000317 	ldw	r4,12(r16)
  80806c:	80c00217 	ldw	r3,8(r16)
  808070:	89400054 	ori	r5,r17,1
  808074:	8445883a 	add	r2,r16,r17
  808078:	20c00215 	stw	r3,8(r4)
  80807c:	19000315 	stw	r4,12(r3)
  808080:	81400115 	stw	r5,4(r16)
  808084:	1187883a 	add	r3,r2,r6
  808088:	31000054 	ori	r4,r6,1
  80808c:	50800315 	stw	r2,12(r10)
  808090:	50800215 	stw	r2,8(r10)
  808094:	19800015 	stw	r6,0(r3)
  808098:	11000115 	stw	r4,4(r2)
  80809c:	12800215 	stw	r10,8(r2)
  8080a0:	12800315 	stw	r10,12(r2)
  8080a4:	9009883a 	mov	r4,r18
  8080a8:	0810eb80 	call	810eb8 <__malloc_unlock>
  8080ac:	80c00204 	addi	r3,r16,8
  8080b0:	003f5906 	br	807e18 <_malloc_r+0x50>
  8080b4:	8109883a 	add	r4,r16,r4
  8080b8:	20800117 	ldw	r2,4(r4)
  8080bc:	80c00217 	ldw	r3,8(r16)
  8080c0:	81400317 	ldw	r5,12(r16)
  8080c4:	10800054 	ori	r2,r2,1
  8080c8:	20800115 	stw	r2,4(r4)
  8080cc:	28c00215 	stw	r3,8(r5)
  8080d0:	19400315 	stw	r5,12(r3)
  8080d4:	9009883a 	mov	r4,r18
  8080d8:	0810eb80 	call	810eb8 <__malloc_unlock>
  8080dc:	80c00204 	addi	r3,r16,8
  8080e0:	003f4d06 	br	807e18 <_malloc_r+0x50>
  8080e4:	80800204 	addi	r2,r16,8
  8080e8:	14000317 	ldw	r16,12(r2)
  8080ec:	143f911e 	bne	r2,r16,807f34 <_malloc_r+0x16c>
  8080f0:	1a400084 	addi	r9,r3,2
  8080f4:	003f7306 	br	807ec4 <_malloc_r+0xfc>
  8080f8:	88c00054 	ori	r3,r17,1
  8080fc:	8445883a 	add	r2,r16,r17
  808100:	80c00115 	stw	r3,4(r16)
  808104:	003fdf06 	br	808084 <_malloc_r+0x2bc>
  808108:	e4000217 	ldw	r16,8(fp)
  80810c:	00bfff04 	movi	r2,-4
  808110:	80c00117 	ldw	r3,4(r16)
  808114:	802d883a 	mov	r22,r16
  808118:	18aa703a 	and	r21,r3,r2
  80811c:	ac401636 	bltu	r21,r17,808178 <_malloc_r+0x3b0>
  808120:	ac49c83a 	sub	r4,r21,r17
  808124:	008003c4 	movi	r2,15
  808128:	1100130e 	bge	r2,r4,808178 <_malloc_r+0x3b0>
  80812c:	88800054 	ori	r2,r17,1
  808130:	8447883a 	add	r3,r16,r17
  808134:	80800115 	stw	r2,4(r16)
  808138:	20800054 	ori	r2,r4,1
  80813c:	18800115 	stw	r2,4(r3)
  808140:	e0c00215 	stw	r3,8(fp)
  808144:	9009883a 	mov	r4,r18
  808148:	0810eb80 	call	810eb8 <__malloc_unlock>
  80814c:	80c00204 	addi	r3,r16,8
  808150:	003f3106 	br	807e18 <_malloc_r+0x50>
  808154:	39c00117 	ldw	r7,4(r7)
  808158:	573ffe04 	addi	fp,r10,-8
  80815c:	003fa006 	br	807fe0 <_malloc_r+0x218>
  808160:	00801504 	movi	r2,84
  808164:	10c06736 	bltu	r2,r3,808304 <_malloc_r+0x53c>
  808168:	8804d33a 	srli	r2,r17,12
  80816c:	11801b84 	addi	r6,r2,110
  808170:	300490fa 	slli	r2,r6,3
  808174:	003f4106 	br	807e7c <_malloc_r+0xb4>
  808178:	d0a74917 	ldw	r2,-25308(gp)
  80817c:	d0e00817 	ldw	r3,-32736(gp)
  808180:	053fffc4 	movi	r20,-1
  808184:	10800404 	addi	r2,r2,16
  808188:	88a7883a 	add	r19,r17,r2
  80818c:	1d000326 	beq	r3,r20,80819c <_malloc_r+0x3d4>
  808190:	98c3ffc4 	addi	r3,r19,4095
  808194:	00bc0004 	movi	r2,-4096
  808198:	18a6703a 	and	r19,r3,r2
  80819c:	9009883a 	mov	r4,r18
  8081a0:	980b883a 	mov	r5,r19
  8081a4:	08086340 	call	808634 <_sbrk_r>
  8081a8:	1009883a 	mov	r4,r2
  8081ac:	15000426 	beq	r2,r20,8081c0 <_malloc_r+0x3f8>
  8081b0:	854b883a 	add	r5,r16,r21
  8081b4:	1029883a 	mov	r20,r2
  8081b8:	11405a2e 	bgeu	r2,r5,808324 <_malloc_r+0x55c>
  8081bc:	87000c26 	beq	r16,fp,8081f0 <_malloc_r+0x428>
  8081c0:	e4000217 	ldw	r16,8(fp)
  8081c4:	80c00117 	ldw	r3,4(r16)
  8081c8:	00bfff04 	movi	r2,-4
  8081cc:	1884703a 	and	r2,r3,r2
  8081d0:	14400336 	bltu	r2,r17,8081e0 <_malloc_r+0x418>
  8081d4:	1449c83a 	sub	r4,r2,r17
  8081d8:	008003c4 	movi	r2,15
  8081dc:	113fd316 	blt	r2,r4,80812c <_malloc_r+0x364>
  8081e0:	9009883a 	mov	r4,r18
  8081e4:	0810eb80 	call	810eb8 <__malloc_unlock>
  8081e8:	0007883a 	mov	r3,zero
  8081ec:	003f0a06 	br	807e18 <_malloc_r+0x50>
  8081f0:	05c020b4 	movhi	r23,130
  8081f4:	bdc29204 	addi	r23,r23,2632
  8081f8:	b8800017 	ldw	r2,0(r23)
  8081fc:	988d883a 	add	r6,r19,r2
  808200:	b9800015 	stw	r6,0(r23)
  808204:	d0e00817 	ldw	r3,-32736(gp)
  808208:	00bfffc4 	movi	r2,-1
  80820c:	18808e26 	beq	r3,r2,808448 <_malloc_r+0x680>
  808210:	2145c83a 	sub	r2,r4,r5
  808214:	3085883a 	add	r2,r6,r2
  808218:	b8800015 	stw	r2,0(r23)
  80821c:	20c001cc 	andi	r3,r4,7
  808220:	18005f1e 	bne	r3,zero,8083a0 <_malloc_r+0x5d8>
  808224:	000b883a 	mov	r5,zero
  808228:	a4c5883a 	add	r2,r20,r19
  80822c:	1083ffcc 	andi	r2,r2,4095
  808230:	00c40004 	movi	r3,4096
  808234:	1887c83a 	sub	r3,r3,r2
  808238:	28e7883a 	add	r19,r5,r3
  80823c:	9009883a 	mov	r4,r18
  808240:	980b883a 	mov	r5,r19
  808244:	08086340 	call	808634 <_sbrk_r>
  808248:	1007883a 	mov	r3,r2
  80824c:	00bfffc4 	movi	r2,-1
  808250:	18807a26 	beq	r3,r2,80843c <_malloc_r+0x674>
  808254:	1d05c83a 	sub	r2,r3,r20
  808258:	9885883a 	add	r2,r19,r2
  80825c:	10c00054 	ori	r3,r2,1
  808260:	b8800017 	ldw	r2,0(r23)
  808264:	a021883a 	mov	r16,r20
  808268:	a0c00115 	stw	r3,4(r20)
  80826c:	9885883a 	add	r2,r19,r2
  808270:	b8800015 	stw	r2,0(r23)
  808274:	e5000215 	stw	r20,8(fp)
  808278:	b7003626 	beq	r22,fp,808354 <_malloc_r+0x58c>
  80827c:	018003c4 	movi	r6,15
  808280:	35404b36 	bltu	r6,r21,8083b0 <_malloc_r+0x5e8>
  808284:	00800044 	movi	r2,1
  808288:	a0800115 	stw	r2,4(r20)
  80828c:	003fcd06 	br	8081c4 <_malloc_r+0x3fc>
  808290:	2808d27a 	srli	r4,r5,9
  808294:	2000371e 	bne	r4,zero,808374 <_malloc_r+0x5ac>
  808298:	2808d0fa 	srli	r4,r5,3
  80829c:	200690fa 	slli	r3,r4,3
  8082a0:	1ad1883a 	add	r8,r3,r11
  8082a4:	41800217 	ldw	r6,8(r8)
  8082a8:	41805b26 	beq	r8,r6,808418 <_malloc_r+0x650>
  8082ac:	30800117 	ldw	r2,4(r6)
  8082b0:	00ffff04 	movi	r3,-4
  8082b4:	10c4703a 	and	r2,r2,r3
  8082b8:	2880022e 	bgeu	r5,r2,8082c4 <_malloc_r+0x4fc>
  8082bc:	31800217 	ldw	r6,8(r6)
  8082c0:	41bffa1e 	bne	r8,r6,8082ac <_malloc_r+0x4e4>
  8082c4:	32000317 	ldw	r8,12(r6)
  8082c8:	39c00117 	ldw	r7,4(r7)
  8082cc:	82000315 	stw	r8,12(r16)
  8082d0:	81800215 	stw	r6,8(r16)
  8082d4:	070020b4 	movhi	fp,130
  8082d8:	e7355004 	addi	fp,fp,-10944
  8082dc:	34000315 	stw	r16,12(r6)
  8082e0:	44000215 	stw	r16,8(r8)
  8082e4:	003f3e06 	br	807fe0 <_malloc_r+0x218>
  8082e8:	63000044 	addi	r12,r12,1
  8082ec:	608000cc 	andi	r2,r12,3
  8082f0:	10005d26 	beq	r2,zero,808468 <_malloc_r+0x6a0>
  8082f4:	18c00204 	addi	r3,r3,8
  8082f8:	003f5106 	br	808040 <_malloc_r+0x278>
  8082fc:	8089883a 	add	r4,r16,r2
  808300:	003f6d06 	br	8080b8 <_malloc_r+0x2f0>
  808304:	00805504 	movi	r2,340
  808308:	10c02036 	bltu	r2,r3,80838c <_malloc_r+0x5c4>
  80830c:	8804d3fa 	srli	r2,r17,15
  808310:	11801dc4 	addi	r6,r2,119
  808314:	300490fa 	slli	r2,r6,3
  808318:	003ed806 	br	807e7c <_malloc_r+0xb4>
  80831c:	48c000c4 	addi	r3,r9,3
  808320:	003f3106 	br	807fe8 <_malloc_r+0x220>
  808324:	05c020b4 	movhi	r23,130
  808328:	bdc29204 	addi	r23,r23,2632
  80832c:	b8800017 	ldw	r2,0(r23)
  808330:	988d883a 	add	r6,r19,r2
  808334:	b9800015 	stw	r6,0(r23)
  808338:	293fb21e 	bne	r5,r4,808204 <_malloc_r+0x43c>
  80833c:	2083ffcc 	andi	r2,r4,4095
  808340:	103fb01e 	bne	r2,zero,808204 <_malloc_r+0x43c>
  808344:	e4000217 	ldw	r16,8(fp)
  808348:	9d45883a 	add	r2,r19,r21
  80834c:	10800054 	ori	r2,r2,1
  808350:	80800115 	stw	r2,4(r16)
  808354:	b8c00017 	ldw	r3,0(r23)
  808358:	d0a74a17 	ldw	r2,-25304(gp)
  80835c:	10c0012e 	bgeu	r2,r3,808364 <_malloc_r+0x59c>
  808360:	d0e74a15 	stw	r3,-25304(gp)
  808364:	d0a74b17 	ldw	r2,-25300(gp)
  808368:	10ff962e 	bgeu	r2,r3,8081c4 <_malloc_r+0x3fc>
  80836c:	d0e74b15 	stw	r3,-25300(gp)
  808370:	003f9406 	br	8081c4 <_malloc_r+0x3fc>
  808374:	00800104 	movi	r2,4
  808378:	11001e36 	bltu	r2,r4,8083f4 <_malloc_r+0x62c>
  80837c:	2804d1ba 	srli	r2,r5,6
  808380:	11000e04 	addi	r4,r2,56
  808384:	200690fa 	slli	r3,r4,3
  808388:	003fc506 	br	8082a0 <_malloc_r+0x4d8>
  80838c:	00815504 	movi	r2,1364
  808390:	10c01d2e 	bgeu	r2,r3,808408 <_malloc_r+0x640>
  808394:	01801f84 	movi	r6,126
  808398:	0080fc04 	movi	r2,1008
  80839c:	003eb706 	br	807e7c <_malloc_r+0xb4>
  8083a0:	00800204 	movi	r2,8
  8083a4:	10cbc83a 	sub	r5,r2,r3
  8083a8:	2169883a 	add	r20,r4,r5
  8083ac:	003f9e06 	br	808228 <_malloc_r+0x460>
  8083b0:	00bffe04 	movi	r2,-8
  8083b4:	a93ffd04 	addi	r4,r21,-12
  8083b8:	2088703a 	and	r4,r4,r2
  8083bc:	b10b883a 	add	r5,r22,r4
  8083c0:	00c00144 	movi	r3,5
  8083c4:	28c00215 	stw	r3,8(r5)
  8083c8:	28c00115 	stw	r3,4(r5)
  8083cc:	b0800117 	ldw	r2,4(r22)
  8083d0:	1080004c 	andi	r2,r2,1
  8083d4:	2084b03a 	or	r2,r4,r2
  8083d8:	b0800115 	stw	r2,4(r22)
  8083dc:	313fdd2e 	bgeu	r6,r4,808354 <_malloc_r+0x58c>
  8083e0:	b1400204 	addi	r5,r22,8
  8083e4:	9009883a 	mov	r4,r18
  8083e8:	080c6f40 	call	80c6f4 <_free_r>
  8083ec:	e4000217 	ldw	r16,8(fp)
  8083f0:	003fd806 	br	808354 <_malloc_r+0x58c>
  8083f4:	00800504 	movi	r2,20
  8083f8:	11001536 	bltu	r2,r4,808450 <_malloc_r+0x688>
  8083fc:	210016c4 	addi	r4,r4,91
  808400:	200690fa 	slli	r3,r4,3
  808404:	003fa606 	br	8082a0 <_malloc_r+0x4d8>
  808408:	8804d4ba 	srli	r2,r17,18
  80840c:	11801f04 	addi	r6,r2,124
  808410:	300490fa 	slli	r2,r6,3
  808414:	003e9906 	br	807e7c <_malloc_r+0xb4>
  808418:	2009d0ba 	srai	r4,r4,2
  80841c:	014020b4 	movhi	r5,130
  808420:	29755004 	addi	r5,r5,-10944
  808424:	00c00044 	movi	r3,1
  808428:	28800117 	ldw	r2,4(r5)
  80842c:	1906983a 	sll	r3,r3,r4
  808430:	10c4b03a 	or	r2,r2,r3
  808434:	28800115 	stw	r2,4(r5)
  808438:	003fa306 	br	8082c8 <_malloc_r+0x500>
  80843c:	0027883a 	mov	r19,zero
  808440:	00c00044 	movi	r3,1
  808444:	003f8606 	br	808260 <_malloc_r+0x498>
  808448:	d1200815 	stw	r4,-32736(gp)
  80844c:	003f7306 	br	80821c <_malloc_r+0x454>
  808450:	00801504 	movi	r2,84
  808454:	11001936 	bltu	r2,r4,8084bc <_malloc_r+0x6f4>
  808458:	2804d33a 	srli	r2,r5,12
  80845c:	11001b84 	addi	r4,r2,110
  808460:	200690fa 	slli	r3,r4,3
  808464:	003f8e06 	br	8082a0 <_malloc_r+0x4d8>
  808468:	480b883a 	mov	r5,r9
  80846c:	6807883a 	mov	r3,r13
  808470:	288000cc 	andi	r2,r5,3
  808474:	18fffe04 	addi	r3,r3,-8
  808478:	297fffc4 	addi	r5,r5,-1
  80847c:	10001526 	beq	r2,zero,8084d4 <_malloc_r+0x70c>
  808480:	18800217 	ldw	r2,8(r3)
  808484:	10fffa26 	beq	r2,r3,808470 <_malloc_r+0x6a8>
  808488:	2109883a 	add	r4,r4,r4
  80848c:	393f1e36 	bltu	r7,r4,808108 <_malloc_r+0x340>
  808490:	203f1d26 	beq	r4,zero,808108 <_malloc_r+0x340>
  808494:	21c4703a 	and	r2,r4,r7
  808498:	10000226 	beq	r2,zero,8084a4 <_malloc_r+0x6dc>
  80849c:	6013883a 	mov	r9,r12
  8084a0:	003ee106 	br	808028 <_malloc_r+0x260>
  8084a4:	2109883a 	add	r4,r4,r4
  8084a8:	3904703a 	and	r2,r7,r4
  8084ac:	63000104 	addi	r12,r12,4
  8084b0:	103ffc26 	beq	r2,zero,8084a4 <_malloc_r+0x6dc>
  8084b4:	6013883a 	mov	r9,r12
  8084b8:	003edb06 	br	808028 <_malloc_r+0x260>
  8084bc:	00805504 	movi	r2,340
  8084c0:	11000836 	bltu	r2,r4,8084e4 <_malloc_r+0x71c>
  8084c4:	2804d3fa 	srli	r2,r5,15
  8084c8:	11001dc4 	addi	r4,r2,119
  8084cc:	200690fa 	slli	r3,r4,3
  8084d0:	003f7306 	br	8082a0 <_malloc_r+0x4d8>
  8084d4:	0104303a 	nor	r2,zero,r4
  8084d8:	388e703a 	and	r7,r7,r2
  8084dc:	e1c00115 	stw	r7,4(fp)
  8084e0:	003fe906 	br	808488 <_malloc_r+0x6c0>
  8084e4:	00815504 	movi	r2,1364
  8084e8:	1100032e 	bgeu	r2,r4,8084f8 <_malloc_r+0x730>
  8084ec:	01001f84 	movi	r4,126
  8084f0:	00c0fc04 	movi	r3,1008
  8084f4:	003f6a06 	br	8082a0 <_malloc_r+0x4d8>
  8084f8:	2804d4ba 	srli	r2,r5,18
  8084fc:	11001f04 	addi	r4,r2,124
  808500:	200690fa 	slli	r3,r4,3
  808504:	003f6606 	br	8082a0 <_malloc_r+0x4d8>

00808508 <printf>:
  808508:	defffb04 	addi	sp,sp,-20
  80850c:	dfc00115 	stw	ra,4(sp)
  808510:	d9400215 	stw	r5,8(sp)
  808514:	d9800315 	stw	r6,12(sp)
  808518:	d9c00415 	stw	r7,16(sp)
  80851c:	008020b4 	movhi	r2,130
  808520:	10bb2804 	addi	r2,r2,-4960
  808524:	10c00017 	ldw	r3,0(r2)
  808528:	200b883a 	mov	r5,r4
  80852c:	d8800204 	addi	r2,sp,8
  808530:	19000217 	ldw	r4,8(r3)
  808534:	100d883a 	mov	r6,r2
  808538:	d8800015 	stw	r2,0(sp)
  80853c:	080a7ac0 	call	80a7ac <__vfprintf_internal>
  808540:	dfc00117 	ldw	ra,4(sp)
  808544:	dec00504 	addi	sp,sp,20
  808548:	f800283a 	ret

0080854c <_printf_r>:
  80854c:	defffc04 	addi	sp,sp,-16
  808550:	dfc00115 	stw	ra,4(sp)
  808554:	d9800215 	stw	r6,8(sp)
  808558:	d9c00315 	stw	r7,12(sp)
  80855c:	280d883a 	mov	r6,r5
  808560:	21400217 	ldw	r5,8(r4)
  808564:	d8c00204 	addi	r3,sp,8
  808568:	180f883a 	mov	r7,r3
  80856c:	d8c00015 	stw	r3,0(sp)
  808570:	08089000 	call	808900 <___vfprintf_internal_r>
  808574:	dfc00117 	ldw	ra,4(sp)
  808578:	dec00404 	addi	sp,sp,16
  80857c:	f800283a 	ret

00808580 <_puts_r>:
  808580:	defff604 	addi	sp,sp,-40
  808584:	dc400715 	stw	r17,28(sp)
  808588:	2023883a 	mov	r17,r4
  80858c:	2809883a 	mov	r4,r5
  808590:	dfc00915 	stw	ra,36(sp)
  808594:	dcc00815 	stw	r19,32(sp)
  808598:	2827883a 	mov	r19,r5
  80859c:	08087780 	call	808778 <strlen>
  8085a0:	89400217 	ldw	r5,8(r17)
  8085a4:	00c020b4 	movhi	r3,130
  8085a8:	18f2dc04 	addi	r3,r3,-13456
  8085ac:	01c00044 	movi	r7,1
  8085b0:	12000044 	addi	r8,r2,1
  8085b4:	d8c00515 	stw	r3,20(sp)
  8085b8:	d9c00615 	stw	r7,24(sp)
  8085bc:	d8c00304 	addi	r3,sp,12
  8085c0:	01c00084 	movi	r7,2
  8085c4:	8809883a 	mov	r4,r17
  8085c8:	d80d883a 	mov	r6,sp
  8085cc:	d8c00015 	stw	r3,0(sp)
  8085d0:	dcc00315 	stw	r19,12(sp)
  8085d4:	da000215 	stw	r8,8(sp)
  8085d8:	d9c00115 	stw	r7,4(sp)
  8085dc:	d8800415 	stw	r2,16(sp)
  8085e0:	080ca080 	call	80ca08 <__sfvwrite_r>
  8085e4:	00ffffc4 	movi	r3,-1
  8085e8:	10000626 	beq	r2,zero,808604 <_puts_r+0x84>
  8085ec:	1805883a 	mov	r2,r3
  8085f0:	dfc00917 	ldw	ra,36(sp)
  8085f4:	dcc00817 	ldw	r19,32(sp)
  8085f8:	dc400717 	ldw	r17,28(sp)
  8085fc:	dec00a04 	addi	sp,sp,40
  808600:	f800283a 	ret
  808604:	00c00284 	movi	r3,10
  808608:	1805883a 	mov	r2,r3
  80860c:	dfc00917 	ldw	ra,36(sp)
  808610:	dcc00817 	ldw	r19,32(sp)
  808614:	dc400717 	ldw	r17,28(sp)
  808618:	dec00a04 	addi	sp,sp,40
  80861c:	f800283a 	ret

00808620 <puts>:
  808620:	008020b4 	movhi	r2,130
  808624:	10bb2804 	addi	r2,r2,-4960
  808628:	200b883a 	mov	r5,r4
  80862c:	11000017 	ldw	r4,0(r2)
  808630:	08085801 	jmpi	808580 <_puts_r>

00808634 <_sbrk_r>:
  808634:	defffd04 	addi	sp,sp,-12
  808638:	dc000015 	stw	r16,0(sp)
  80863c:	040020b4 	movhi	r16,130
  808640:	84026f04 	addi	r16,r16,2492
  808644:	dc400115 	stw	r17,4(sp)
  808648:	80000015 	stw	zero,0(r16)
  80864c:	2023883a 	mov	r17,r4
  808650:	2809883a 	mov	r4,r5
  808654:	dfc00215 	stw	ra,8(sp)
  808658:	08109540 	call	810954 <sbrk>
  80865c:	1007883a 	mov	r3,r2
  808660:	00bfffc4 	movi	r2,-1
  808664:	18800626 	beq	r3,r2,808680 <_sbrk_r+0x4c>
  808668:	1805883a 	mov	r2,r3
  80866c:	dfc00217 	ldw	ra,8(sp)
  808670:	dc400117 	ldw	r17,4(sp)
  808674:	dc000017 	ldw	r16,0(sp)
  808678:	dec00304 	addi	sp,sp,12
  80867c:	f800283a 	ret
  808680:	80800017 	ldw	r2,0(r16)
  808684:	103ff826 	beq	r2,zero,808668 <_sbrk_r+0x34>
  808688:	88800015 	stw	r2,0(r17)
  80868c:	1805883a 	mov	r2,r3
  808690:	dfc00217 	ldw	ra,8(sp)
  808694:	dc400117 	ldw	r17,4(sp)
  808698:	dc000017 	ldw	r16,0(sp)
  80869c:	dec00304 	addi	sp,sp,12
  8086a0:	f800283a 	ret

008086a4 <sprintf>:
  8086a4:	deffe504 	addi	sp,sp,-108
  8086a8:	2013883a 	mov	r9,r4
  8086ac:	dfc01815 	stw	ra,96(sp)
  8086b0:	d9801915 	stw	r6,100(sp)
  8086b4:	d9c01a15 	stw	r7,104(sp)
  8086b8:	d8801904 	addi	r2,sp,100
  8086bc:	d8800015 	stw	r2,0(sp)
  8086c0:	008020b4 	movhi	r2,130
  8086c4:	10bb2804 	addi	r2,r2,-4960
  8086c8:	11000017 	ldw	r4,0(r2)
  8086cc:	d9c00017 	ldw	r7,0(sp)
  8086d0:	00808204 	movi	r2,520
  8086d4:	00e00034 	movhi	r3,32768
  8086d8:	18ffffc4 	addi	r3,r3,-1
  8086dc:	280d883a 	mov	r6,r5
  8086e0:	d880040d 	sth	r2,16(sp)
  8086e4:	d9400104 	addi	r5,sp,4
  8086e8:	00bfffc4 	movi	r2,-1
  8086ec:	d8c00615 	stw	r3,24(sp)
  8086f0:	d8c00315 	stw	r3,12(sp)
  8086f4:	da400515 	stw	r9,20(sp)
  8086f8:	d880048d 	sth	r2,18(sp)
  8086fc:	da400115 	stw	r9,4(sp)
  808700:	08089000 	call	808900 <___vfprintf_internal_r>
  808704:	d8c00117 	ldw	r3,4(sp)
  808708:	18000005 	stb	zero,0(r3)
  80870c:	dfc01817 	ldw	ra,96(sp)
  808710:	dec01b04 	addi	sp,sp,108
  808714:	f800283a 	ret

00808718 <_sprintf_r>:
  808718:	deffe604 	addi	sp,sp,-104
  80871c:	2813883a 	mov	r9,r5
  808720:	dfc01815 	stw	ra,96(sp)
  808724:	d9c01915 	stw	r7,100(sp)
  808728:	d8801904 	addi	r2,sp,100
  80872c:	d8800015 	stw	r2,0(sp)
  808730:	100f883a 	mov	r7,r2
  808734:	00808204 	movi	r2,520
  808738:	00e00034 	movhi	r3,32768
  80873c:	18ffffc4 	addi	r3,r3,-1
  808740:	d880040d 	sth	r2,16(sp)
  808744:	d9400104 	addi	r5,sp,4
  808748:	00bfffc4 	movi	r2,-1
  80874c:	d8c00615 	stw	r3,24(sp)
  808750:	d8c00315 	stw	r3,12(sp)
  808754:	da400515 	stw	r9,20(sp)
  808758:	d880048d 	sth	r2,18(sp)
  80875c:	da400115 	stw	r9,4(sp)
  808760:	08089000 	call	808900 <___vfprintf_internal_r>
  808764:	d8c00117 	ldw	r3,4(sp)
  808768:	18000005 	stb	zero,0(r3)
  80876c:	dfc01817 	ldw	ra,96(sp)
  808770:	dec01a04 	addi	sp,sp,104
  808774:	f800283a 	ret

00808778 <strlen>:
  808778:	208000cc 	andi	r2,r4,3
  80877c:	2011883a 	mov	r8,r4
  808780:	1000161e 	bne	r2,zero,8087dc <strlen+0x64>
  808784:	20c00017 	ldw	r3,0(r4)
  808788:	017fbff4 	movhi	r5,65279
  80878c:	297fbfc4 	addi	r5,r5,-257
  808790:	01e02074 	movhi	r7,32897
  808794:	39e02004 	addi	r7,r7,-32640
  808798:	1945883a 	add	r2,r3,r5
  80879c:	11c4703a 	and	r2,r2,r7
  8087a0:	00c6303a 	nor	r3,zero,r3
  8087a4:	1886703a 	and	r3,r3,r2
  8087a8:	18000c1e 	bne	r3,zero,8087dc <strlen+0x64>
  8087ac:	280d883a 	mov	r6,r5
  8087b0:	380b883a 	mov	r5,r7
  8087b4:	21000104 	addi	r4,r4,4
  8087b8:	20800017 	ldw	r2,0(r4)
  8087bc:	1187883a 	add	r3,r2,r6
  8087c0:	1946703a 	and	r3,r3,r5
  8087c4:	0084303a 	nor	r2,zero,r2
  8087c8:	10c4703a 	and	r2,r2,r3
  8087cc:	103ff926 	beq	r2,zero,8087b4 <strlen+0x3c>
  8087d0:	20800007 	ldb	r2,0(r4)
  8087d4:	10000326 	beq	r2,zero,8087e4 <strlen+0x6c>
  8087d8:	21000044 	addi	r4,r4,1
  8087dc:	20800007 	ldb	r2,0(r4)
  8087e0:	103ffd1e 	bne	r2,zero,8087d8 <strlen+0x60>
  8087e4:	2205c83a 	sub	r2,r4,r8
  8087e8:	f800283a 	ret

008087ec <strncpy>:
  8087ec:	2904b03a 	or	r2,r5,r4
  8087f0:	108000cc 	andi	r2,r2,3
  8087f4:	00c000c4 	movi	r3,3
  8087f8:	1000291e 	bne	r2,zero,8088a0 <strncpy+0xb4>
  8087fc:	1980282e 	bgeu	r3,r6,8088a0 <strncpy+0xb4>
  808800:	1817883a 	mov	r11,r3
  808804:	2011883a 	mov	r8,r4
  808808:	02bfbff4 	movhi	r10,65279
  80880c:	52bfbfc4 	addi	r10,r10,-257
  808810:	02602074 	movhi	r9,32897
  808814:	4a602004 	addi	r9,r9,-32640
  808818:	29c00017 	ldw	r7,0(r5)
  80881c:	3a85883a 	add	r2,r7,r10
  808820:	01c6303a 	nor	r3,zero,r7
  808824:	10c4703a 	and	r2,r2,r3
  808828:	1244703a 	and	r2,r2,r9
  80882c:	1000051e 	bne	r2,zero,808844 <strncpy+0x58>
  808830:	31bfff04 	addi	r6,r6,-4
  808834:	41c00015 	stw	r7,0(r8)
  808838:	29400104 	addi	r5,r5,4
  80883c:	42000104 	addi	r8,r8,4
  808840:	59bff536 	bltu	r11,r6,808818 <strncpy+0x2c>
  808844:	400f883a 	mov	r7,r8
  808848:	30001326 	beq	r6,zero,808898 <strncpy+0xac>
  80884c:	28800003 	ldbu	r2,0(r5)
  808850:	31bfffc4 	addi	r6,r6,-1
  808854:	38c00044 	addi	r3,r7,1
  808858:	38800005 	stb	r2,0(r7)
  80885c:	10000826 	beq	r2,zero,808880 <strncpy+0x94>
  808860:	29400044 	addi	r5,r5,1
  808864:	30000c26 	beq	r6,zero,808898 <strncpy+0xac>
  808868:	28800003 	ldbu	r2,0(r5)
  80886c:	31bfffc4 	addi	r6,r6,-1
  808870:	29400044 	addi	r5,r5,1
  808874:	18800005 	stb	r2,0(r3)
  808878:	18c00044 	addi	r3,r3,1
  80887c:	103ff91e 	bne	r2,zero,808864 <strncpy+0x78>
  808880:	30000526 	beq	r6,zero,808898 <strncpy+0xac>
  808884:	1805883a 	mov	r2,r3
  808888:	30cd883a 	add	r6,r6,r3
  80888c:	10000005 	stb	zero,0(r2)
  808890:	10800044 	addi	r2,r2,1
  808894:	30bffd1e 	bne	r6,r2,80888c <strncpy+0xa0>
  808898:	2005883a 	mov	r2,r4
  80889c:	f800283a 	ret
  8088a0:	200f883a 	mov	r7,r4
  8088a4:	003fe806 	br	808848 <strncpy+0x5c>

008088a8 <__sprint_r>:
  8088a8:	30800217 	ldw	r2,8(r6)
  8088ac:	defffe04 	addi	sp,sp,-8
  8088b0:	dc000015 	stw	r16,0(sp)
  8088b4:	dfc00115 	stw	ra,4(sp)
  8088b8:	3021883a 	mov	r16,r6
  8088bc:	0007883a 	mov	r3,zero
  8088c0:	1000061e 	bne	r2,zero,8088dc <__sprint_r+0x34>
  8088c4:	1805883a 	mov	r2,r3
  8088c8:	30000115 	stw	zero,4(r6)
  8088cc:	dfc00117 	ldw	ra,4(sp)
  8088d0:	dc000017 	ldw	r16,0(sp)
  8088d4:	dec00204 	addi	sp,sp,8
  8088d8:	f800283a 	ret
  8088dc:	080ca080 	call	80ca08 <__sfvwrite_r>
  8088e0:	1007883a 	mov	r3,r2
  8088e4:	1805883a 	mov	r2,r3
  8088e8:	80000115 	stw	zero,4(r16)
  8088ec:	80000215 	stw	zero,8(r16)
  8088f0:	dfc00117 	ldw	ra,4(sp)
  8088f4:	dc000017 	ldw	r16,0(sp)
  8088f8:	dec00204 	addi	sp,sp,8
  8088fc:	f800283a 	ret

00808900 <___vfprintf_internal_r>:
  808900:	defea404 	addi	sp,sp,-1392
  808904:	dd815815 	stw	r22,1376(sp)
  808908:	dc015215 	stw	r16,1352(sp)
  80890c:	d9c15115 	stw	r7,1348(sp)
  808910:	dfc15b15 	stw	ra,1388(sp)
  808914:	df015a15 	stw	fp,1384(sp)
  808918:	ddc15915 	stw	r23,1380(sp)
  80891c:	dd415715 	stw	r21,1372(sp)
  808920:	dd015615 	stw	r20,1368(sp)
  808924:	dcc15515 	stw	r19,1364(sp)
  808928:	dc815415 	stw	r18,1360(sp)
  80892c:	dc415315 	stw	r17,1356(sp)
  808930:	282d883a 	mov	r22,r5
  808934:	3021883a 	mov	r16,r6
  808938:	d9014f15 	stw	r4,1340(sp)
  80893c:	080d02c0 	call	80d02c <_localeconv_r>
  808940:	10800017 	ldw	r2,0(r2)
  808944:	d9c15117 	ldw	r7,1348(sp)
  808948:	d8814915 	stw	r2,1316(sp)
  80894c:	d8814f17 	ldw	r2,1340(sp)
  808950:	10000226 	beq	r2,zero,80895c <___vfprintf_internal_r+0x5c>
  808954:	10800e17 	ldw	r2,56(r2)
  808958:	10020d26 	beq	r2,zero,809190 <___vfprintf_internal_r+0x890>
  80895c:	b080030b 	ldhu	r2,12(r22)
  808960:	1080020c 	andi	r2,r2,8
  808964:	10020e26 	beq	r2,zero,8091a0 <___vfprintf_internal_r+0x8a0>
  808968:	b0800417 	ldw	r2,16(r22)
  80896c:	10020c26 	beq	r2,zero,8091a0 <___vfprintf_internal_r+0x8a0>
  808970:	b200030b 	ldhu	r8,12(r22)
  808974:	00800284 	movi	r2,10
  808978:	40c0068c 	andi	r3,r8,26
  80897c:	18802f1e 	bne	r3,r2,808a3c <___vfprintf_internal_r+0x13c>
  808980:	b080038f 	ldh	r2,14(r22)
  808984:	10002d16 	blt	r2,zero,808a3c <___vfprintf_internal_r+0x13c>
  808988:	b240038b 	ldhu	r9,14(r22)
  80898c:	b2800717 	ldw	r10,28(r22)
  808990:	b2c00917 	ldw	r11,36(r22)
  808994:	d9014f17 	ldw	r4,1340(sp)
  808998:	dc402904 	addi	r17,sp,164
  80899c:	d8804004 	addi	r2,sp,256
  8089a0:	00c10004 	movi	r3,1024
  8089a4:	423fff4c 	andi	r8,r8,65533
  8089a8:	800d883a 	mov	r6,r16
  8089ac:	880b883a 	mov	r5,r17
  8089b0:	da002c0d 	sth	r8,176(sp)
  8089b4:	da402c8d 	sth	r9,178(sp)
  8089b8:	da803015 	stw	r10,192(sp)
  8089bc:	dac03215 	stw	r11,200(sp)
  8089c0:	d8802d15 	stw	r2,180(sp)
  8089c4:	d8c02e15 	stw	r3,184(sp)
  8089c8:	d8802915 	stw	r2,164(sp)
  8089cc:	d8c02b15 	stw	r3,172(sp)
  8089d0:	d8002f15 	stw	zero,188(sp)
  8089d4:	08089000 	call	808900 <___vfprintf_internal_r>
  8089d8:	d8814b15 	stw	r2,1324(sp)
  8089dc:	10000416 	blt	r2,zero,8089f0 <___vfprintf_internal_r+0xf0>
  8089e0:	d9014f17 	ldw	r4,1340(sp)
  8089e4:	880b883a 	mov	r5,r17
  8089e8:	080c0d80 	call	80c0d8 <_fflush_r>
  8089ec:	1002321e 	bne	r2,zero,8092b8 <___vfprintf_internal_r+0x9b8>
  8089f0:	d8802c0b 	ldhu	r2,176(sp)
  8089f4:	1080100c 	andi	r2,r2,64
  8089f8:	10000326 	beq	r2,zero,808a08 <___vfprintf_internal_r+0x108>
  8089fc:	b080030b 	ldhu	r2,12(r22)
  808a00:	10801014 	ori	r2,r2,64
  808a04:	b080030d 	sth	r2,12(r22)
  808a08:	d8814b17 	ldw	r2,1324(sp)
  808a0c:	dfc15b17 	ldw	ra,1388(sp)
  808a10:	df015a17 	ldw	fp,1384(sp)
  808a14:	ddc15917 	ldw	r23,1380(sp)
  808a18:	dd815817 	ldw	r22,1376(sp)
  808a1c:	dd415717 	ldw	r21,1372(sp)
  808a20:	dd015617 	ldw	r20,1368(sp)
  808a24:	dcc15517 	ldw	r19,1364(sp)
  808a28:	dc815417 	ldw	r18,1360(sp)
  808a2c:	dc415317 	ldw	r17,1356(sp)
  808a30:	dc015217 	ldw	r16,1352(sp)
  808a34:	dec15c04 	addi	sp,sp,1392
  808a38:	f800283a 	ret
  808a3c:	0005883a 	mov	r2,zero
  808a40:	0007883a 	mov	r3,zero
  808a44:	dd401904 	addi	r21,sp,100
  808a48:	d8814215 	stw	r2,1288(sp)
  808a4c:	802f883a 	mov	r23,r16
  808a50:	d8c14315 	stw	r3,1292(sp)
  808a54:	d8014b15 	stw	zero,1324(sp)
  808a58:	d8014815 	stw	zero,1312(sp)
  808a5c:	d8014415 	stw	zero,1296(sp)
  808a60:	d8014715 	stw	zero,1308(sp)
  808a64:	dd400c15 	stw	r21,48(sp)
  808a68:	d8000e15 	stw	zero,56(sp)
  808a6c:	d8000d15 	stw	zero,52(sp)
  808a70:	b8800007 	ldb	r2,0(r23)
  808a74:	10001926 	beq	r2,zero,808adc <___vfprintf_internal_r+0x1dc>
  808a78:	00c00944 	movi	r3,37
  808a7c:	10c01726 	beq	r2,r3,808adc <___vfprintf_internal_r+0x1dc>
  808a80:	b821883a 	mov	r16,r23
  808a84:	00000106 	br	808a8c <___vfprintf_internal_r+0x18c>
  808a88:	10c00326 	beq	r2,r3,808a98 <___vfprintf_internal_r+0x198>
  808a8c:	84000044 	addi	r16,r16,1
  808a90:	80800007 	ldb	r2,0(r16)
  808a94:	103ffc1e 	bne	r2,zero,808a88 <___vfprintf_internal_r+0x188>
  808a98:	85e7c83a 	sub	r19,r16,r23
  808a9c:	98000e26 	beq	r19,zero,808ad8 <___vfprintf_internal_r+0x1d8>
  808aa0:	dc800e17 	ldw	r18,56(sp)
  808aa4:	dc400d17 	ldw	r17,52(sp)
  808aa8:	008001c4 	movi	r2,7
  808aac:	94e5883a 	add	r18,r18,r19
  808ab0:	8c400044 	addi	r17,r17,1
  808ab4:	adc00015 	stw	r23,0(r21)
  808ab8:	dc800e15 	stw	r18,56(sp)
  808abc:	acc00115 	stw	r19,4(r21)
  808ac0:	dc400d15 	stw	r17,52(sp)
  808ac4:	14428b16 	blt	r2,r17,8094f4 <___vfprintf_internal_r+0xbf4>
  808ac8:	ad400204 	addi	r21,r21,8
  808acc:	d9014b17 	ldw	r4,1324(sp)
  808ad0:	24c9883a 	add	r4,r4,r19
  808ad4:	d9014b15 	stw	r4,1324(sp)
  808ad8:	802f883a 	mov	r23,r16
  808adc:	b8800007 	ldb	r2,0(r23)
  808ae0:	10013c26 	beq	r2,zero,808fd4 <___vfprintf_internal_r+0x6d4>
  808ae4:	bdc00044 	addi	r23,r23,1
  808ae8:	d8000405 	stb	zero,16(sp)
  808aec:	b8c00007 	ldb	r3,0(r23)
  808af0:	04ffffc4 	movi	r19,-1
  808af4:	d8014c15 	stw	zero,1328(sp)
  808af8:	d8014a15 	stw	zero,1320(sp)
  808afc:	d8c14d15 	stw	r3,1332(sp)
  808b00:	bdc00044 	addi	r23,r23,1
  808b04:	d9414d17 	ldw	r5,1332(sp)
  808b08:	00801604 	movi	r2,88
  808b0c:	28fff804 	addi	r3,r5,-32
  808b10:	10c06036 	bltu	r2,r3,808c94 <___vfprintf_internal_r+0x394>
  808b14:	18c5883a 	add	r2,r3,r3
  808b18:	1085883a 	add	r2,r2,r2
  808b1c:	00c02074 	movhi	r3,129
  808b20:	18e2cc04 	addi	r3,r3,-29904
  808b24:	10c5883a 	add	r2,r2,r3
  808b28:	11000017 	ldw	r4,0(r2)
  808b2c:	2000683a 	jmp	r4
  808b30:	00809aa4 	muli	r2,zero,618
  808b34:	00808c94 	movui	r2,562
  808b38:	00808c94 	movui	r2,562
  808b3c:	00809a90 	cmplti	r2,zero,618
  808b40:	00808c94 	movui	r2,562
  808b44:	00808c94 	movui	r2,562
  808b48:	00808c94 	movui	r2,562
  808b4c:	00808c94 	movui	r2,562
  808b50:	00808c94 	movui	r2,562
  808b54:	00808c94 	movui	r2,562
  808b58:	00809870 	cmpltui	r2,zero,609
  808b5c:	00809a80 	call	809a8 <OSCtxSw_SWITCH_PC+0x80968>
  808b60:	00808c94 	movui	r2,562
  808b64:	00809888 	cmpgei	r2,zero,610
  808b68:	00809b1c 	xori	r2,zero,620
  808b6c:	00808c94 	movui	r2,562
  808b70:	00809b08 	cmpgei	r2,zero,620
  808b74:	00809ad0 	cmplti	r2,zero,619
  808b78:	00809ad0 	cmplti	r2,zero,619
  808b7c:	00809ad0 	cmplti	r2,zero,619
  808b80:	00809ad0 	cmplti	r2,zero,619
  808b84:	00809ad0 	cmplti	r2,zero,619
  808b88:	00809ad0 	cmplti	r2,zero,619
  808b8c:	00809ad0 	cmplti	r2,zero,619
  808b90:	00809ad0 	cmplti	r2,zero,619
  808b94:	00809ad0 	cmplti	r2,zero,619
  808b98:	00808c94 	movui	r2,562
  808b9c:	00808c94 	movui	r2,562
  808ba0:	00808c94 	movui	r2,562
  808ba4:	00808c94 	movui	r2,562
  808ba8:	00808c94 	movui	r2,562
  808bac:	00808c94 	movui	r2,562
  808bb0:	00808c94 	movui	r2,562
  808bb4:	00808c94 	movui	r2,562
  808bb8:	00808c94 	movui	r2,562
  808bbc:	00808c94 	movui	r2,562
  808bc0:	008092ec 	andhi	r2,zero,587
  808bc4:	00809958 	cmpnei	r2,zero,613
  808bc8:	00808c94 	movui	r2,562
  808bcc:	00809958 	cmpnei	r2,zero,613
  808bd0:	00808c94 	movui	r2,562
  808bd4:	00808c94 	movui	r2,562
  808bd8:	00808c94 	movui	r2,562
  808bdc:	00808c94 	movui	r2,562
  808be0:	00809abc 	xorhi	r2,zero,618
  808be4:	00808c94 	movui	r2,562
  808be8:	00808c94 	movui	r2,562
  808bec:	008093a0 	cmpeqi	r2,zero,590
  808bf0:	00808c94 	movui	r2,562
  808bf4:	00808c94 	movui	r2,562
  808bf8:	00808c94 	movui	r2,562
  808bfc:	00808c94 	movui	r2,562
  808c00:	00808c94 	movui	r2,562
  808c04:	008093ec 	andhi	r2,zero,591
  808c08:	00808c94 	movui	r2,562
  808c0c:	00808c94 	movui	r2,562
  808c10:	00809a0c 	andi	r2,zero,616
  808c14:	00808c94 	movui	r2,562
  808c18:	00808c94 	movui	r2,562
  808c1c:	00808c94 	movui	r2,562
  808c20:	00808c94 	movui	r2,562
  808c24:	00808c94 	movui	r2,562
  808c28:	00808c94 	movui	r2,562
  808c2c:	00808c94 	movui	r2,562
  808c30:	00808c94 	movui	r2,562
  808c34:	00808c94 	movui	r2,562
  808c38:	00808c94 	movui	r2,562
  808c3c:	008099e0 	cmpeqi	r2,zero,615
  808c40:	008092f8 	rdprs	r2,zero,587
  808c44:	00809958 	cmpnei	r2,zero,613
  808c48:	00809958 	cmpnei	r2,zero,613
  808c4c:	00809958 	cmpnei	r2,zero,613
  808c50:	00809944 	movi	r2,613
  808c54:	008092f8 	rdprs	r2,zero,587
  808c58:	00808c94 	movui	r2,562
  808c5c:	00808c94 	movui	r2,562
  808c60:	008098cc 	andi	r2,zero,611
  808c64:	00808c94 	movui	r2,562
  808c68:	0080989c 	xori	r2,zero,610
  808c6c:	008093ac 	andhi	r2,zero,590
  808c70:	008098fc 	xorhi	r2,zero,611
  808c74:	008098e8 	cmpgeui	r2,zero,611
  808c78:	00808c94 	movui	r2,562
  808c7c:	00809b78 	rdprs	r2,zero,621
  808c80:	00808c94 	movui	r2,562
  808c84:	008093f8 	rdprs	r2,zero,591
  808c88:	00808c94 	movui	r2,562
  808c8c:	00808c94 	movui	r2,562
  808c90:	00809a70 	cmpltui	r2,zero,617
  808c94:	d9014d17 	ldw	r4,1332(sp)
  808c98:	2000ce26 	beq	r4,zero,808fd4 <___vfprintf_internal_r+0x6d4>
  808c9c:	01400044 	movi	r5,1
  808ca0:	d9800f04 	addi	r6,sp,60
  808ca4:	d9c14015 	stw	r7,1280(sp)
  808ca8:	d9414515 	stw	r5,1300(sp)
  808cac:	d9814115 	stw	r6,1284(sp)
  808cb0:	280f883a 	mov	r7,r5
  808cb4:	d9000f05 	stb	r4,60(sp)
  808cb8:	d8000405 	stb	zero,16(sp)
  808cbc:	d8014615 	stw	zero,1304(sp)
  808cc0:	d8c14c17 	ldw	r3,1328(sp)
  808cc4:	1880008c 	andi	r2,r3,2
  808cc8:	1005003a 	cmpeq	r2,r2,zero
  808ccc:	d8815015 	stw	r2,1344(sp)
  808cd0:	1000031e 	bne	r2,zero,808ce0 <___vfprintf_internal_r+0x3e0>
  808cd4:	d9014517 	ldw	r4,1300(sp)
  808cd8:	21000084 	addi	r4,r4,2
  808cdc:	d9014515 	stw	r4,1300(sp)
  808ce0:	d9414c17 	ldw	r5,1328(sp)
  808ce4:	2940210c 	andi	r5,r5,132
  808ce8:	d9414e15 	stw	r5,1336(sp)
  808cec:	28002d1e 	bne	r5,zero,808da4 <___vfprintf_internal_r+0x4a4>
  808cf0:	d9814a17 	ldw	r6,1320(sp)
  808cf4:	d8814517 	ldw	r2,1300(sp)
  808cf8:	30a1c83a 	sub	r16,r6,r2
  808cfc:	0400290e 	bge	zero,r16,808da4 <___vfprintf_internal_r+0x4a4>
  808d00:	00800404 	movi	r2,16
  808d04:	1404580e 	bge	r2,r16,809e68 <___vfprintf_internal_r+0x1568>
  808d08:	dc800e17 	ldw	r18,56(sp)
  808d0c:	dc400d17 	ldw	r17,52(sp)
  808d10:	1027883a 	mov	r19,r2
  808d14:	070020b4 	movhi	fp,130
  808d18:	e732f884 	addi	fp,fp,-13342
  808d1c:	050001c4 	movi	r20,7
  808d20:	00000306 	br	808d30 <___vfprintf_internal_r+0x430>
  808d24:	843ffc04 	addi	r16,r16,-16
  808d28:	ad400204 	addi	r21,r21,8
  808d2c:	9c00130e 	bge	r19,r16,808d7c <___vfprintf_internal_r+0x47c>
  808d30:	94800404 	addi	r18,r18,16
  808d34:	8c400044 	addi	r17,r17,1
  808d38:	af000015 	stw	fp,0(r21)
  808d3c:	acc00115 	stw	r19,4(r21)
  808d40:	dc800e15 	stw	r18,56(sp)
  808d44:	dc400d15 	stw	r17,52(sp)
  808d48:	a47ff60e 	bge	r20,r17,808d24 <___vfprintf_internal_r+0x424>
  808d4c:	d9014f17 	ldw	r4,1340(sp)
  808d50:	b00b883a 	mov	r5,r22
  808d54:	d9800c04 	addi	r6,sp,48
  808d58:	d9c15115 	stw	r7,1348(sp)
  808d5c:	08088a80 	call	8088a8 <__sprint_r>
  808d60:	d9c15117 	ldw	r7,1348(sp)
  808d64:	10009e1e 	bne	r2,zero,808fe0 <___vfprintf_internal_r+0x6e0>
  808d68:	843ffc04 	addi	r16,r16,-16
  808d6c:	dc800e17 	ldw	r18,56(sp)
  808d70:	dc400d17 	ldw	r17,52(sp)
  808d74:	dd401904 	addi	r21,sp,100
  808d78:	9c3fed16 	blt	r19,r16,808d30 <___vfprintf_internal_r+0x430>
  808d7c:	9425883a 	add	r18,r18,r16
  808d80:	8c400044 	addi	r17,r17,1
  808d84:	008001c4 	movi	r2,7
  808d88:	af000015 	stw	fp,0(r21)
  808d8c:	ac000115 	stw	r16,4(r21)
  808d90:	dc800e15 	stw	r18,56(sp)
  808d94:	dc400d15 	stw	r17,52(sp)
  808d98:	1441f516 	blt	r2,r17,809570 <___vfprintf_internal_r+0xc70>
  808d9c:	ad400204 	addi	r21,r21,8
  808da0:	00000206 	br	808dac <___vfprintf_internal_r+0x4ac>
  808da4:	dc800e17 	ldw	r18,56(sp)
  808da8:	dc400d17 	ldw	r17,52(sp)
  808dac:	d8800407 	ldb	r2,16(sp)
  808db0:	10000b26 	beq	r2,zero,808de0 <___vfprintf_internal_r+0x4e0>
  808db4:	00800044 	movi	r2,1
  808db8:	94800044 	addi	r18,r18,1
  808dbc:	8c400044 	addi	r17,r17,1
  808dc0:	a8800115 	stw	r2,4(r21)
  808dc4:	d8c00404 	addi	r3,sp,16
  808dc8:	008001c4 	movi	r2,7
  808dcc:	a8c00015 	stw	r3,0(r21)
  808dd0:	dc800e15 	stw	r18,56(sp)
  808dd4:	dc400d15 	stw	r17,52(sp)
  808dd8:	1441da16 	blt	r2,r17,809544 <___vfprintf_internal_r+0xc44>
  808ddc:	ad400204 	addi	r21,r21,8
  808de0:	d9015017 	ldw	r4,1344(sp)
  808de4:	20000b1e 	bne	r4,zero,808e14 <___vfprintf_internal_r+0x514>
  808de8:	d8800444 	addi	r2,sp,17
  808dec:	94800084 	addi	r18,r18,2
  808df0:	8c400044 	addi	r17,r17,1
  808df4:	a8800015 	stw	r2,0(r21)
  808df8:	00c00084 	movi	r3,2
  808dfc:	008001c4 	movi	r2,7
  808e00:	a8c00115 	stw	r3,4(r21)
  808e04:	dc800e15 	stw	r18,56(sp)
  808e08:	dc400d15 	stw	r17,52(sp)
  808e0c:	1441c216 	blt	r2,r17,809518 <___vfprintf_internal_r+0xc18>
  808e10:	ad400204 	addi	r21,r21,8
  808e14:	d9414e17 	ldw	r5,1336(sp)
  808e18:	00802004 	movi	r2,128
  808e1c:	2880b126 	beq	r5,r2,8090e4 <___vfprintf_internal_r+0x7e4>
  808e20:	d8c14617 	ldw	r3,1304(sp)
  808e24:	19e1c83a 	sub	r16,r3,r7
  808e28:	0400260e 	bge	zero,r16,808ec4 <___vfprintf_internal_r+0x5c4>
  808e2c:	00800404 	movi	r2,16
  808e30:	1403c90e 	bge	r2,r16,809d58 <___vfprintf_internal_r+0x1458>
  808e34:	1027883a 	mov	r19,r2
  808e38:	070020b4 	movhi	fp,130
  808e3c:	e732f484 	addi	fp,fp,-13358
  808e40:	050001c4 	movi	r20,7
  808e44:	00000306 	br	808e54 <___vfprintf_internal_r+0x554>
  808e48:	843ffc04 	addi	r16,r16,-16
  808e4c:	ad400204 	addi	r21,r21,8
  808e50:	9c00130e 	bge	r19,r16,808ea0 <___vfprintf_internal_r+0x5a0>
  808e54:	94800404 	addi	r18,r18,16
  808e58:	8c400044 	addi	r17,r17,1
  808e5c:	af000015 	stw	fp,0(r21)
  808e60:	acc00115 	stw	r19,4(r21)
  808e64:	dc800e15 	stw	r18,56(sp)
  808e68:	dc400d15 	stw	r17,52(sp)
  808e6c:	a47ff60e 	bge	r20,r17,808e48 <___vfprintf_internal_r+0x548>
  808e70:	d9014f17 	ldw	r4,1340(sp)
  808e74:	b00b883a 	mov	r5,r22
  808e78:	d9800c04 	addi	r6,sp,48
  808e7c:	d9c15115 	stw	r7,1348(sp)
  808e80:	08088a80 	call	8088a8 <__sprint_r>
  808e84:	d9c15117 	ldw	r7,1348(sp)
  808e88:	1000551e 	bne	r2,zero,808fe0 <___vfprintf_internal_r+0x6e0>
  808e8c:	843ffc04 	addi	r16,r16,-16
  808e90:	dc800e17 	ldw	r18,56(sp)
  808e94:	dc400d17 	ldw	r17,52(sp)
  808e98:	dd401904 	addi	r21,sp,100
  808e9c:	9c3fed16 	blt	r19,r16,808e54 <___vfprintf_internal_r+0x554>
  808ea0:	9425883a 	add	r18,r18,r16
  808ea4:	8c400044 	addi	r17,r17,1
  808ea8:	008001c4 	movi	r2,7
  808eac:	af000015 	stw	fp,0(r21)
  808eb0:	ac000115 	stw	r16,4(r21)
  808eb4:	dc800e15 	stw	r18,56(sp)
  808eb8:	dc400d15 	stw	r17,52(sp)
  808ebc:	14418216 	blt	r2,r17,8094c8 <___vfprintf_internal_r+0xbc8>
  808ec0:	ad400204 	addi	r21,r21,8
  808ec4:	d9014c17 	ldw	r4,1328(sp)
  808ec8:	2080400c 	andi	r2,r4,256
  808ecc:	10004a1e 	bne	r2,zero,808ff8 <___vfprintf_internal_r+0x6f8>
  808ed0:	d9414117 	ldw	r5,1284(sp)
  808ed4:	91e5883a 	add	r18,r18,r7
  808ed8:	8c400044 	addi	r17,r17,1
  808edc:	008001c4 	movi	r2,7
  808ee0:	a9400015 	stw	r5,0(r21)
  808ee4:	a9c00115 	stw	r7,4(r21)
  808ee8:	dc800e15 	stw	r18,56(sp)
  808eec:	dc400d15 	stw	r17,52(sp)
  808ef0:	14416716 	blt	r2,r17,809490 <___vfprintf_internal_r+0xb90>
  808ef4:	a8c00204 	addi	r3,r21,8
  808ef8:	d9814c17 	ldw	r6,1328(sp)
  808efc:	3080010c 	andi	r2,r6,4
  808f00:	10002826 	beq	r2,zero,808fa4 <___vfprintf_internal_r+0x6a4>
  808f04:	d8814a17 	ldw	r2,1320(sp)
  808f08:	d9014517 	ldw	r4,1300(sp)
  808f0c:	1121c83a 	sub	r16,r2,r4
  808f10:	0400240e 	bge	zero,r16,808fa4 <___vfprintf_internal_r+0x6a4>
  808f14:	00800404 	movi	r2,16
  808f18:	14044f0e 	bge	r2,r16,80a058 <___vfprintf_internal_r+0x1758>
  808f1c:	dc400d17 	ldw	r17,52(sp)
  808f20:	1027883a 	mov	r19,r2
  808f24:	070020b4 	movhi	fp,130
  808f28:	e732f884 	addi	fp,fp,-13342
  808f2c:	050001c4 	movi	r20,7
  808f30:	00000306 	br	808f40 <___vfprintf_internal_r+0x640>
  808f34:	843ffc04 	addi	r16,r16,-16
  808f38:	18c00204 	addi	r3,r3,8
  808f3c:	9c00110e 	bge	r19,r16,808f84 <___vfprintf_internal_r+0x684>
  808f40:	94800404 	addi	r18,r18,16
  808f44:	8c400044 	addi	r17,r17,1
  808f48:	1f000015 	stw	fp,0(r3)
  808f4c:	1cc00115 	stw	r19,4(r3)
  808f50:	dc800e15 	stw	r18,56(sp)
  808f54:	dc400d15 	stw	r17,52(sp)
  808f58:	a47ff60e 	bge	r20,r17,808f34 <___vfprintf_internal_r+0x634>
  808f5c:	d9014f17 	ldw	r4,1340(sp)
  808f60:	b00b883a 	mov	r5,r22
  808f64:	d9800c04 	addi	r6,sp,48
  808f68:	08088a80 	call	8088a8 <__sprint_r>
  808f6c:	10001c1e 	bne	r2,zero,808fe0 <___vfprintf_internal_r+0x6e0>
  808f70:	843ffc04 	addi	r16,r16,-16
  808f74:	dc800e17 	ldw	r18,56(sp)
  808f78:	dc400d17 	ldw	r17,52(sp)
  808f7c:	d8c01904 	addi	r3,sp,100
  808f80:	9c3fef16 	blt	r19,r16,808f40 <___vfprintf_internal_r+0x640>
  808f84:	9425883a 	add	r18,r18,r16
  808f88:	8c400044 	addi	r17,r17,1
  808f8c:	008001c4 	movi	r2,7
  808f90:	1f000015 	stw	fp,0(r3)
  808f94:	1c000115 	stw	r16,4(r3)
  808f98:	dc800e15 	stw	r18,56(sp)
  808f9c:	dc400d15 	stw	r17,52(sp)
  808fa0:	1440cb16 	blt	r2,r17,8092d0 <___vfprintf_internal_r+0x9d0>
  808fa4:	d8814a17 	ldw	r2,1320(sp)
  808fa8:	d9414517 	ldw	r5,1300(sp)
  808fac:	1140010e 	bge	r2,r5,808fb4 <___vfprintf_internal_r+0x6b4>
  808fb0:	2805883a 	mov	r2,r5
  808fb4:	d9814b17 	ldw	r6,1324(sp)
  808fb8:	308d883a 	add	r6,r6,r2
  808fbc:	d9814b15 	stw	r6,1324(sp)
  808fc0:	90013b1e 	bne	r18,zero,8094b0 <___vfprintf_internal_r+0xbb0>
  808fc4:	d9c14017 	ldw	r7,1280(sp)
  808fc8:	dd401904 	addi	r21,sp,100
  808fcc:	d8000d15 	stw	zero,52(sp)
  808fd0:	003ea706 	br	808a70 <___vfprintf_internal_r+0x170>
  808fd4:	d8800e17 	ldw	r2,56(sp)
  808fd8:	10053f1e 	bne	r2,zero,80a4d8 <___vfprintf_internal_r+0x1bd8>
  808fdc:	d8000d15 	stw	zero,52(sp)
  808fe0:	b080030b 	ldhu	r2,12(r22)
  808fe4:	1080100c 	andi	r2,r2,64
  808fe8:	103e8726 	beq	r2,zero,808a08 <___vfprintf_internal_r+0x108>
  808fec:	00bfffc4 	movi	r2,-1
  808ff0:	d8814b15 	stw	r2,1324(sp)
  808ff4:	003e8406 	br	808a08 <___vfprintf_internal_r+0x108>
  808ff8:	d9814d17 	ldw	r6,1332(sp)
  808ffc:	00801944 	movi	r2,101
  809000:	11806e16 	blt	r2,r6,8091bc <___vfprintf_internal_r+0x8bc>
  809004:	d9414717 	ldw	r5,1308(sp)
  809008:	00c00044 	movi	r3,1
  80900c:	1943430e 	bge	r3,r5,809d1c <___vfprintf_internal_r+0x141c>
  809010:	d8814117 	ldw	r2,1284(sp)
  809014:	94800044 	addi	r18,r18,1
  809018:	8c400044 	addi	r17,r17,1
  80901c:	a8800015 	stw	r2,0(r21)
  809020:	008001c4 	movi	r2,7
  809024:	a8c00115 	stw	r3,4(r21)
  809028:	dc800e15 	stw	r18,56(sp)
  80902c:	dc400d15 	stw	r17,52(sp)
  809030:	1441ca16 	blt	r2,r17,80975c <___vfprintf_internal_r+0xe5c>
  809034:	a8c00204 	addi	r3,r21,8
  809038:	d9014917 	ldw	r4,1316(sp)
  80903c:	00800044 	movi	r2,1
  809040:	94800044 	addi	r18,r18,1
  809044:	8c400044 	addi	r17,r17,1
  809048:	18800115 	stw	r2,4(r3)
  80904c:	008001c4 	movi	r2,7
  809050:	19000015 	stw	r4,0(r3)
  809054:	dc800e15 	stw	r18,56(sp)
  809058:	dc400d15 	stw	r17,52(sp)
  80905c:	1441b616 	blt	r2,r17,809738 <___vfprintf_internal_r+0xe38>
  809060:	1cc00204 	addi	r19,r3,8
  809064:	d9014217 	ldw	r4,1288(sp)
  809068:	d9414317 	ldw	r5,1292(sp)
  80906c:	000d883a 	mov	r6,zero
  809070:	000f883a 	mov	r7,zero
  809074:	0806c640 	call	806c64 <__nedf2>
  809078:	10017426 	beq	r2,zero,80964c <___vfprintf_internal_r+0xd4c>
  80907c:	d9414717 	ldw	r5,1308(sp)
  809080:	d9814117 	ldw	r6,1284(sp)
  809084:	8c400044 	addi	r17,r17,1
  809088:	2c85883a 	add	r2,r5,r18
  80908c:	14bfffc4 	addi	r18,r2,-1
  809090:	28bfffc4 	addi	r2,r5,-1
  809094:	30c00044 	addi	r3,r6,1
  809098:	98800115 	stw	r2,4(r19)
  80909c:	008001c4 	movi	r2,7
  8090a0:	98c00015 	stw	r3,0(r19)
  8090a4:	dc800e15 	stw	r18,56(sp)
  8090a8:	dc400d15 	stw	r17,52(sp)
  8090ac:	14418e16 	blt	r2,r17,8096e8 <___vfprintf_internal_r+0xde8>
  8090b0:	9cc00204 	addi	r19,r19,8
  8090b4:	d9414817 	ldw	r5,1312(sp)
  8090b8:	d8800804 	addi	r2,sp,32
  8090bc:	8c400044 	addi	r17,r17,1
  8090c0:	9165883a 	add	r18,r18,r5
  8090c4:	98800015 	stw	r2,0(r19)
  8090c8:	008001c4 	movi	r2,7
  8090cc:	99400115 	stw	r5,4(r19)
  8090d0:	dc800e15 	stw	r18,56(sp)
  8090d4:	dc400d15 	stw	r17,52(sp)
  8090d8:	1440ed16 	blt	r2,r17,809490 <___vfprintf_internal_r+0xb90>
  8090dc:	98c00204 	addi	r3,r19,8
  8090e0:	003f8506 	br	808ef8 <___vfprintf_internal_r+0x5f8>
  8090e4:	d9814a17 	ldw	r6,1320(sp)
  8090e8:	d8814517 	ldw	r2,1300(sp)
  8090ec:	30a1c83a 	sub	r16,r6,r2
  8090f0:	043f4b0e 	bge	zero,r16,808e20 <___vfprintf_internal_r+0x520>
  8090f4:	00800404 	movi	r2,16
  8090f8:	1404340e 	bge	r2,r16,80a1cc <___vfprintf_internal_r+0x18cc>
  8090fc:	1027883a 	mov	r19,r2
  809100:	070020b4 	movhi	fp,130
  809104:	e732f484 	addi	fp,fp,-13358
  809108:	050001c4 	movi	r20,7
  80910c:	00000306 	br	80911c <___vfprintf_internal_r+0x81c>
  809110:	843ffc04 	addi	r16,r16,-16
  809114:	ad400204 	addi	r21,r21,8
  809118:	9c00130e 	bge	r19,r16,809168 <___vfprintf_internal_r+0x868>
  80911c:	94800404 	addi	r18,r18,16
  809120:	8c400044 	addi	r17,r17,1
  809124:	af000015 	stw	fp,0(r21)
  809128:	acc00115 	stw	r19,4(r21)
  80912c:	dc800e15 	stw	r18,56(sp)
  809130:	dc400d15 	stw	r17,52(sp)
  809134:	a47ff60e 	bge	r20,r17,809110 <___vfprintf_internal_r+0x810>
  809138:	d9014f17 	ldw	r4,1340(sp)
  80913c:	b00b883a 	mov	r5,r22
  809140:	d9800c04 	addi	r6,sp,48
  809144:	d9c15115 	stw	r7,1348(sp)
  809148:	08088a80 	call	8088a8 <__sprint_r>
  80914c:	d9c15117 	ldw	r7,1348(sp)
  809150:	103fa31e 	bne	r2,zero,808fe0 <___vfprintf_internal_r+0x6e0>
  809154:	843ffc04 	addi	r16,r16,-16
  809158:	dc800e17 	ldw	r18,56(sp)
  80915c:	dc400d17 	ldw	r17,52(sp)
  809160:	dd401904 	addi	r21,sp,100
  809164:	9c3fed16 	blt	r19,r16,80911c <___vfprintf_internal_r+0x81c>
  809168:	9425883a 	add	r18,r18,r16
  80916c:	8c400044 	addi	r17,r17,1
  809170:	008001c4 	movi	r2,7
  809174:	af000015 	stw	fp,0(r21)
  809178:	ac000115 	stw	r16,4(r21)
  80917c:	dc800e15 	stw	r18,56(sp)
  809180:	dc400d15 	stw	r17,52(sp)
  809184:	14416116 	blt	r2,r17,80970c <___vfprintf_internal_r+0xe0c>
  809188:	ad400204 	addi	r21,r21,8
  80918c:	003f2406 	br	808e20 <___vfprintf_internal_r+0x520>
  809190:	d9014f17 	ldw	r4,1340(sp)
  809194:	080c3700 	call	80c370 <__sinit>
  809198:	d9c15117 	ldw	r7,1348(sp)
  80919c:	003def06 	br	80895c <___vfprintf_internal_r+0x5c>
  8091a0:	d9014f17 	ldw	r4,1340(sp)
  8091a4:	b00b883a 	mov	r5,r22
  8091a8:	d9c15115 	stw	r7,1348(sp)
  8091ac:	080a7d00 	call	80a7d0 <__swsetup_r>
  8091b0:	d9c15117 	ldw	r7,1348(sp)
  8091b4:	103dee26 	beq	r2,zero,808970 <___vfprintf_internal_r+0x70>
  8091b8:	003f8c06 	br	808fec <___vfprintf_internal_r+0x6ec>
  8091bc:	d9014217 	ldw	r4,1288(sp)
  8091c0:	d9414317 	ldw	r5,1292(sp)
  8091c4:	000d883a 	mov	r6,zero
  8091c8:	000f883a 	mov	r7,zero
  8091cc:	0806bdc0 	call	806bdc <__eqdf2>
  8091d0:	1000f21e 	bne	r2,zero,80959c <___vfprintf_internal_r+0xc9c>
  8091d4:	008020b4 	movhi	r2,130
  8091d8:	10b2f404 	addi	r2,r2,-13360
  8091dc:	94800044 	addi	r18,r18,1
  8091e0:	8c400044 	addi	r17,r17,1
  8091e4:	a8800015 	stw	r2,0(r21)
  8091e8:	00c00044 	movi	r3,1
  8091ec:	008001c4 	movi	r2,7
  8091f0:	a8c00115 	stw	r3,4(r21)
  8091f4:	dc800e15 	stw	r18,56(sp)
  8091f8:	dc400d15 	stw	r17,52(sp)
  8091fc:	1442fa16 	blt	r2,r17,809de8 <___vfprintf_internal_r+0x14e8>
  809200:	a8c00204 	addi	r3,r21,8
  809204:	d8800517 	ldw	r2,20(sp)
  809208:	d9014717 	ldw	r4,1308(sp)
  80920c:	11015c0e 	bge	r2,r4,809780 <___vfprintf_internal_r+0xe80>
  809210:	dc400d17 	ldw	r17,52(sp)
  809214:	d9814917 	ldw	r6,1316(sp)
  809218:	00800044 	movi	r2,1
  80921c:	94800044 	addi	r18,r18,1
  809220:	8c400044 	addi	r17,r17,1
  809224:	18800115 	stw	r2,4(r3)
  809228:	008001c4 	movi	r2,7
  80922c:	19800015 	stw	r6,0(r3)
  809230:	dc800e15 	stw	r18,56(sp)
  809234:	dc400d15 	stw	r17,52(sp)
  809238:	14431016 	blt	r2,r17,809e7c <___vfprintf_internal_r+0x157c>
  80923c:	18c00204 	addi	r3,r3,8
  809240:	d8814717 	ldw	r2,1308(sp)
  809244:	143fffc4 	addi	r16,r2,-1
  809248:	043f2b0e 	bge	zero,r16,808ef8 <___vfprintf_internal_r+0x5f8>
  80924c:	00800404 	movi	r2,16
  809250:	1402a20e 	bge	r2,r16,809cdc <___vfprintf_internal_r+0x13dc>
  809254:	dc400d17 	ldw	r17,52(sp)
  809258:	1027883a 	mov	r19,r2
  80925c:	070020b4 	movhi	fp,130
  809260:	e732f484 	addi	fp,fp,-13358
  809264:	050001c4 	movi	r20,7
  809268:	00000306 	br	809278 <___vfprintf_internal_r+0x978>
  80926c:	18c00204 	addi	r3,r3,8
  809270:	843ffc04 	addi	r16,r16,-16
  809274:	9c029c0e 	bge	r19,r16,809ce8 <___vfprintf_internal_r+0x13e8>
  809278:	94800404 	addi	r18,r18,16
  80927c:	8c400044 	addi	r17,r17,1
  809280:	1f000015 	stw	fp,0(r3)
  809284:	1cc00115 	stw	r19,4(r3)
  809288:	dc800e15 	stw	r18,56(sp)
  80928c:	dc400d15 	stw	r17,52(sp)
  809290:	a47ff60e 	bge	r20,r17,80926c <___vfprintf_internal_r+0x96c>
  809294:	d9014f17 	ldw	r4,1340(sp)
  809298:	b00b883a 	mov	r5,r22
  80929c:	d9800c04 	addi	r6,sp,48
  8092a0:	08088a80 	call	8088a8 <__sprint_r>
  8092a4:	103f4e1e 	bne	r2,zero,808fe0 <___vfprintf_internal_r+0x6e0>
  8092a8:	dc800e17 	ldw	r18,56(sp)
  8092ac:	dc400d17 	ldw	r17,52(sp)
  8092b0:	d8c01904 	addi	r3,sp,100
  8092b4:	003fee06 	br	809270 <___vfprintf_internal_r+0x970>
  8092b8:	d8802c0b 	ldhu	r2,176(sp)
  8092bc:	00ffffc4 	movi	r3,-1
  8092c0:	d8c14b15 	stw	r3,1324(sp)
  8092c4:	1080100c 	andi	r2,r2,64
  8092c8:	103dcc1e 	bne	r2,zero,8089fc <___vfprintf_internal_r+0xfc>
  8092cc:	003dce06 	br	808a08 <___vfprintf_internal_r+0x108>
  8092d0:	d9014f17 	ldw	r4,1340(sp)
  8092d4:	b00b883a 	mov	r5,r22
  8092d8:	d9800c04 	addi	r6,sp,48
  8092dc:	08088a80 	call	8088a8 <__sprint_r>
  8092e0:	103f3f1e 	bne	r2,zero,808fe0 <___vfprintf_internal_r+0x6e0>
  8092e4:	dc800e17 	ldw	r18,56(sp)
  8092e8:	003f2e06 	br	808fa4 <___vfprintf_internal_r+0x6a4>
  8092ec:	d9414c17 	ldw	r5,1328(sp)
  8092f0:	29400414 	ori	r5,r5,16
  8092f4:	d9414c15 	stw	r5,1328(sp)
  8092f8:	d9814c17 	ldw	r6,1328(sp)
  8092fc:	3080080c 	andi	r2,r6,32
  809300:	10014f1e 	bne	r2,zero,809840 <___vfprintf_internal_r+0xf40>
  809304:	d8c14c17 	ldw	r3,1328(sp)
  809308:	1880040c 	andi	r2,r3,16
  80930c:	1002ea1e 	bne	r2,zero,809eb8 <___vfprintf_internal_r+0x15b8>
  809310:	d9014c17 	ldw	r4,1328(sp)
  809314:	2080100c 	andi	r2,r4,64
  809318:	1002e726 	beq	r2,zero,809eb8 <___vfprintf_internal_r+0x15b8>
  80931c:	3880000f 	ldh	r2,0(r7)
  809320:	39c00104 	addi	r7,r7,4
  809324:	d9c14015 	stw	r7,1280(sp)
  809328:	1023d7fa 	srai	r17,r2,31
  80932c:	1021883a 	mov	r16,r2
  809330:	88037216 	blt	r17,zero,80a0fc <___vfprintf_internal_r+0x17fc>
  809334:	01000044 	movi	r4,1
  809338:	98000416 	blt	r19,zero,80934c <___vfprintf_internal_r+0xa4c>
  80933c:	d8c14c17 	ldw	r3,1328(sp)
  809340:	00bfdfc4 	movi	r2,-129
  809344:	1886703a 	and	r3,r3,r2
  809348:	d8c14c15 	stw	r3,1328(sp)
  80934c:	8444b03a 	or	r2,r16,r17
  809350:	1002261e 	bne	r2,zero,809bec <___vfprintf_internal_r+0x12ec>
  809354:	9802251e 	bne	r19,zero,809bec <___vfprintf_internal_r+0x12ec>
  809358:	20803fcc 	andi	r2,r4,255
  80935c:	10029b26 	beq	r2,zero,809dcc <___vfprintf_internal_r+0x14cc>
  809360:	d8c01904 	addi	r3,sp,100
  809364:	dd000f04 	addi	r20,sp,60
  809368:	d8c14115 	stw	r3,1284(sp)
  80936c:	d8c14117 	ldw	r3,1284(sp)
  809370:	dcc14515 	stw	r19,1300(sp)
  809374:	a0c5c83a 	sub	r2,r20,r3
  809378:	11c00a04 	addi	r7,r2,40
  80937c:	99c0010e 	bge	r19,r7,809384 <___vfprintf_internal_r+0xa84>
  809380:	d9c14515 	stw	r7,1300(sp)
  809384:	dcc14615 	stw	r19,1304(sp)
  809388:	d8800407 	ldb	r2,16(sp)
  80938c:	103e4c26 	beq	r2,zero,808cc0 <___vfprintf_internal_r+0x3c0>
  809390:	d8814517 	ldw	r2,1300(sp)
  809394:	10800044 	addi	r2,r2,1
  809398:	d8814515 	stw	r2,1300(sp)
  80939c:	003e4806 	br	808cc0 <___vfprintf_internal_r+0x3c0>
  8093a0:	d9814c17 	ldw	r6,1328(sp)
  8093a4:	31800414 	ori	r6,r6,16
  8093a8:	d9814c15 	stw	r6,1328(sp)
  8093ac:	d8c14c17 	ldw	r3,1328(sp)
  8093b0:	1880080c 	andi	r2,r3,32
  8093b4:	1001271e 	bne	r2,zero,809854 <___vfprintf_internal_r+0xf54>
  8093b8:	d9414c17 	ldw	r5,1328(sp)
  8093bc:	2880040c 	andi	r2,r5,16
  8093c0:	1002b61e 	bne	r2,zero,809e9c <___vfprintf_internal_r+0x159c>
  8093c4:	d9814c17 	ldw	r6,1328(sp)
  8093c8:	3080100c 	andi	r2,r6,64
  8093cc:	1002b326 	beq	r2,zero,809e9c <___vfprintf_internal_r+0x159c>
  8093d0:	3c00000b 	ldhu	r16,0(r7)
  8093d4:	0009883a 	mov	r4,zero
  8093d8:	39c00104 	addi	r7,r7,4
  8093dc:	0023883a 	mov	r17,zero
  8093e0:	d9c14015 	stw	r7,1280(sp)
  8093e4:	d8000405 	stb	zero,16(sp)
  8093e8:	003fd306 	br	809338 <___vfprintf_internal_r+0xa38>
  8093ec:	d9014c17 	ldw	r4,1328(sp)
  8093f0:	21000414 	ori	r4,r4,16
  8093f4:	d9014c15 	stw	r4,1328(sp)
  8093f8:	d9414c17 	ldw	r5,1328(sp)
  8093fc:	2880080c 	andi	r2,r5,32
  809400:	1001081e 	bne	r2,zero,809824 <___vfprintf_internal_r+0xf24>
  809404:	d8c14c17 	ldw	r3,1328(sp)
  809408:	1880040c 	andi	r2,r3,16
  80940c:	1002b01e 	bne	r2,zero,809ed0 <___vfprintf_internal_r+0x15d0>
  809410:	d9014c17 	ldw	r4,1328(sp)
  809414:	2080100c 	andi	r2,r4,64
  809418:	1002ad26 	beq	r2,zero,809ed0 <___vfprintf_internal_r+0x15d0>
  80941c:	3c00000b 	ldhu	r16,0(r7)
  809420:	01000044 	movi	r4,1
  809424:	39c00104 	addi	r7,r7,4
  809428:	0023883a 	mov	r17,zero
  80942c:	d9c14015 	stw	r7,1280(sp)
  809430:	d8000405 	stb	zero,16(sp)
  809434:	003fc006 	br	809338 <___vfprintf_internal_r+0xa38>
  809438:	d9014f17 	ldw	r4,1340(sp)
  80943c:	b00b883a 	mov	r5,r22
  809440:	d9800c04 	addi	r6,sp,48
  809444:	08088a80 	call	8088a8 <__sprint_r>
  809448:	103ee51e 	bne	r2,zero,808fe0 <___vfprintf_internal_r+0x6e0>
  80944c:	dc800e17 	ldw	r18,56(sp)
  809450:	d8c01904 	addi	r3,sp,100
  809454:	d9814c17 	ldw	r6,1328(sp)
  809458:	3080004c 	andi	r2,r6,1
  80945c:	1005003a 	cmpeq	r2,r2,zero
  809460:	103ea51e 	bne	r2,zero,808ef8 <___vfprintf_internal_r+0x5f8>
  809464:	00800044 	movi	r2,1
  809468:	dc400d17 	ldw	r17,52(sp)
  80946c:	18800115 	stw	r2,4(r3)
  809470:	d8814917 	ldw	r2,1316(sp)
  809474:	94800044 	addi	r18,r18,1
  809478:	8c400044 	addi	r17,r17,1
  80947c:	18800015 	stw	r2,0(r3)
  809480:	008001c4 	movi	r2,7
  809484:	dc800e15 	stw	r18,56(sp)
  809488:	dc400d15 	stw	r17,52(sp)
  80948c:	14421e0e 	bge	r2,r17,809d08 <___vfprintf_internal_r+0x1408>
  809490:	d9014f17 	ldw	r4,1340(sp)
  809494:	b00b883a 	mov	r5,r22
  809498:	d9800c04 	addi	r6,sp,48
  80949c:	08088a80 	call	8088a8 <__sprint_r>
  8094a0:	103ecf1e 	bne	r2,zero,808fe0 <___vfprintf_internal_r+0x6e0>
  8094a4:	dc800e17 	ldw	r18,56(sp)
  8094a8:	d8c01904 	addi	r3,sp,100
  8094ac:	003e9206 	br	808ef8 <___vfprintf_internal_r+0x5f8>
  8094b0:	d9014f17 	ldw	r4,1340(sp)
  8094b4:	b00b883a 	mov	r5,r22
  8094b8:	d9800c04 	addi	r6,sp,48
  8094bc:	08088a80 	call	8088a8 <__sprint_r>
  8094c0:	103ec026 	beq	r2,zero,808fc4 <___vfprintf_internal_r+0x6c4>
  8094c4:	003ec606 	br	808fe0 <___vfprintf_internal_r+0x6e0>
  8094c8:	d9014f17 	ldw	r4,1340(sp)
  8094cc:	b00b883a 	mov	r5,r22
  8094d0:	d9800c04 	addi	r6,sp,48
  8094d4:	d9c15115 	stw	r7,1348(sp)
  8094d8:	08088a80 	call	8088a8 <__sprint_r>
  8094dc:	d9c15117 	ldw	r7,1348(sp)
  8094e0:	103ebf1e 	bne	r2,zero,808fe0 <___vfprintf_internal_r+0x6e0>
  8094e4:	dc800e17 	ldw	r18,56(sp)
  8094e8:	dc400d17 	ldw	r17,52(sp)
  8094ec:	dd401904 	addi	r21,sp,100
  8094f0:	003e7406 	br	808ec4 <___vfprintf_internal_r+0x5c4>
  8094f4:	d9014f17 	ldw	r4,1340(sp)
  8094f8:	b00b883a 	mov	r5,r22
  8094fc:	d9800c04 	addi	r6,sp,48
  809500:	d9c15115 	stw	r7,1348(sp)
  809504:	08088a80 	call	8088a8 <__sprint_r>
  809508:	d9c15117 	ldw	r7,1348(sp)
  80950c:	103eb41e 	bne	r2,zero,808fe0 <___vfprintf_internal_r+0x6e0>
  809510:	dd401904 	addi	r21,sp,100
  809514:	003d6d06 	br	808acc <___vfprintf_internal_r+0x1cc>
  809518:	d9014f17 	ldw	r4,1340(sp)
  80951c:	b00b883a 	mov	r5,r22
  809520:	d9800c04 	addi	r6,sp,48
  809524:	d9c15115 	stw	r7,1348(sp)
  809528:	08088a80 	call	8088a8 <__sprint_r>
  80952c:	d9c15117 	ldw	r7,1348(sp)
  809530:	103eab1e 	bne	r2,zero,808fe0 <___vfprintf_internal_r+0x6e0>
  809534:	dc800e17 	ldw	r18,56(sp)
  809538:	dc400d17 	ldw	r17,52(sp)
  80953c:	dd401904 	addi	r21,sp,100
  809540:	003e3406 	br	808e14 <___vfprintf_internal_r+0x514>
  809544:	d9014f17 	ldw	r4,1340(sp)
  809548:	b00b883a 	mov	r5,r22
  80954c:	d9800c04 	addi	r6,sp,48
  809550:	d9c15115 	stw	r7,1348(sp)
  809554:	08088a80 	call	8088a8 <__sprint_r>
  809558:	d9c15117 	ldw	r7,1348(sp)
  80955c:	103ea01e 	bne	r2,zero,808fe0 <___vfprintf_internal_r+0x6e0>
  809560:	dc800e17 	ldw	r18,56(sp)
  809564:	dc400d17 	ldw	r17,52(sp)
  809568:	dd401904 	addi	r21,sp,100
  80956c:	003e1c06 	br	808de0 <___vfprintf_internal_r+0x4e0>
  809570:	d9014f17 	ldw	r4,1340(sp)
  809574:	b00b883a 	mov	r5,r22
  809578:	d9800c04 	addi	r6,sp,48
  80957c:	d9c15115 	stw	r7,1348(sp)
  809580:	08088a80 	call	8088a8 <__sprint_r>
  809584:	d9c15117 	ldw	r7,1348(sp)
  809588:	103e951e 	bne	r2,zero,808fe0 <___vfprintf_internal_r+0x6e0>
  80958c:	dc800e17 	ldw	r18,56(sp)
  809590:	dc400d17 	ldw	r17,52(sp)
  809594:	dd401904 	addi	r21,sp,100
  809598:	003e0406 	br	808dac <___vfprintf_internal_r+0x4ac>
  80959c:	d9000517 	ldw	r4,20(sp)
  8095a0:	0102520e 	bge	zero,r4,809eec <___vfprintf_internal_r+0x15ec>
  8095a4:	d9814717 	ldw	r6,1308(sp)
  8095a8:	21807a16 	blt	r4,r6,809794 <___vfprintf_internal_r+0xe94>
  8095ac:	d8814117 	ldw	r2,1284(sp)
  8095b0:	91a5883a 	add	r18,r18,r6
  8095b4:	8c400044 	addi	r17,r17,1
  8095b8:	a8800015 	stw	r2,0(r21)
  8095bc:	008001c4 	movi	r2,7
  8095c0:	a9800115 	stw	r6,4(r21)
  8095c4:	dc800e15 	stw	r18,56(sp)
  8095c8:	dc400d15 	stw	r17,52(sp)
  8095cc:	1442f616 	blt	r2,r17,80a1a8 <___vfprintf_internal_r+0x18a8>
  8095d0:	a8c00204 	addi	r3,r21,8
  8095d4:	d9414717 	ldw	r5,1308(sp)
  8095d8:	2161c83a 	sub	r16,r4,r5
  8095dc:	043f9d0e 	bge	zero,r16,809454 <___vfprintf_internal_r+0xb54>
  8095e0:	00800404 	movi	r2,16
  8095e4:	1402130e 	bge	r2,r16,809e34 <___vfprintf_internal_r+0x1534>
  8095e8:	dc400d17 	ldw	r17,52(sp)
  8095ec:	1027883a 	mov	r19,r2
  8095f0:	070020b4 	movhi	fp,130
  8095f4:	e732f484 	addi	fp,fp,-13358
  8095f8:	050001c4 	movi	r20,7
  8095fc:	00000306 	br	80960c <___vfprintf_internal_r+0xd0c>
  809600:	18c00204 	addi	r3,r3,8
  809604:	843ffc04 	addi	r16,r16,-16
  809608:	9c020d0e 	bge	r19,r16,809e40 <___vfprintf_internal_r+0x1540>
  80960c:	94800404 	addi	r18,r18,16
  809610:	8c400044 	addi	r17,r17,1
  809614:	1f000015 	stw	fp,0(r3)
  809618:	1cc00115 	stw	r19,4(r3)
  80961c:	dc800e15 	stw	r18,56(sp)
  809620:	dc400d15 	stw	r17,52(sp)
  809624:	a47ff60e 	bge	r20,r17,809600 <___vfprintf_internal_r+0xd00>
  809628:	d9014f17 	ldw	r4,1340(sp)
  80962c:	b00b883a 	mov	r5,r22
  809630:	d9800c04 	addi	r6,sp,48
  809634:	08088a80 	call	8088a8 <__sprint_r>
  809638:	103e691e 	bne	r2,zero,808fe0 <___vfprintf_internal_r+0x6e0>
  80963c:	dc800e17 	ldw	r18,56(sp)
  809640:	dc400d17 	ldw	r17,52(sp)
  809644:	d8c01904 	addi	r3,sp,100
  809648:	003fee06 	br	809604 <___vfprintf_internal_r+0xd04>
  80964c:	d8814717 	ldw	r2,1308(sp)
  809650:	143fffc4 	addi	r16,r2,-1
  809654:	043e970e 	bge	zero,r16,8090b4 <___vfprintf_internal_r+0x7b4>
  809658:	00800404 	movi	r2,16
  80965c:	1400180e 	bge	r2,r16,8096c0 <___vfprintf_internal_r+0xdc0>
  809660:	1029883a 	mov	r20,r2
  809664:	070020b4 	movhi	fp,130
  809668:	e732f484 	addi	fp,fp,-13358
  80966c:	054001c4 	movi	r21,7
  809670:	00000306 	br	809680 <___vfprintf_internal_r+0xd80>
  809674:	9cc00204 	addi	r19,r19,8
  809678:	843ffc04 	addi	r16,r16,-16
  80967c:	a400120e 	bge	r20,r16,8096c8 <___vfprintf_internal_r+0xdc8>
  809680:	94800404 	addi	r18,r18,16
  809684:	8c400044 	addi	r17,r17,1
  809688:	9f000015 	stw	fp,0(r19)
  80968c:	9d000115 	stw	r20,4(r19)
  809690:	dc800e15 	stw	r18,56(sp)
  809694:	dc400d15 	stw	r17,52(sp)
  809698:	ac7ff60e 	bge	r21,r17,809674 <___vfprintf_internal_r+0xd74>
  80969c:	d9014f17 	ldw	r4,1340(sp)
  8096a0:	b00b883a 	mov	r5,r22
  8096a4:	d9800c04 	addi	r6,sp,48
  8096a8:	08088a80 	call	8088a8 <__sprint_r>
  8096ac:	103e4c1e 	bne	r2,zero,808fe0 <___vfprintf_internal_r+0x6e0>
  8096b0:	dc800e17 	ldw	r18,56(sp)
  8096b4:	dc400d17 	ldw	r17,52(sp)
  8096b8:	dcc01904 	addi	r19,sp,100
  8096bc:	003fee06 	br	809678 <___vfprintf_internal_r+0xd78>
  8096c0:	070020b4 	movhi	fp,130
  8096c4:	e732f484 	addi	fp,fp,-13358
  8096c8:	9425883a 	add	r18,r18,r16
  8096cc:	8c400044 	addi	r17,r17,1
  8096d0:	008001c4 	movi	r2,7
  8096d4:	9f000015 	stw	fp,0(r19)
  8096d8:	9c000115 	stw	r16,4(r19)
  8096dc:	dc800e15 	stw	r18,56(sp)
  8096e0:	dc400d15 	stw	r17,52(sp)
  8096e4:	147e720e 	bge	r2,r17,8090b0 <___vfprintf_internal_r+0x7b0>
  8096e8:	d9014f17 	ldw	r4,1340(sp)
  8096ec:	b00b883a 	mov	r5,r22
  8096f0:	d9800c04 	addi	r6,sp,48
  8096f4:	08088a80 	call	8088a8 <__sprint_r>
  8096f8:	103e391e 	bne	r2,zero,808fe0 <___vfprintf_internal_r+0x6e0>
  8096fc:	dc800e17 	ldw	r18,56(sp)
  809700:	dc400d17 	ldw	r17,52(sp)
  809704:	dcc01904 	addi	r19,sp,100
  809708:	003e6a06 	br	8090b4 <___vfprintf_internal_r+0x7b4>
  80970c:	d9014f17 	ldw	r4,1340(sp)
  809710:	b00b883a 	mov	r5,r22
  809714:	d9800c04 	addi	r6,sp,48
  809718:	d9c15115 	stw	r7,1348(sp)
  80971c:	08088a80 	call	8088a8 <__sprint_r>
  809720:	d9c15117 	ldw	r7,1348(sp)
  809724:	103e2e1e 	bne	r2,zero,808fe0 <___vfprintf_internal_r+0x6e0>
  809728:	dc800e17 	ldw	r18,56(sp)
  80972c:	dc400d17 	ldw	r17,52(sp)
  809730:	dd401904 	addi	r21,sp,100
  809734:	003dba06 	br	808e20 <___vfprintf_internal_r+0x520>
  809738:	d9014f17 	ldw	r4,1340(sp)
  80973c:	b00b883a 	mov	r5,r22
  809740:	d9800c04 	addi	r6,sp,48
  809744:	08088a80 	call	8088a8 <__sprint_r>
  809748:	103e251e 	bne	r2,zero,808fe0 <___vfprintf_internal_r+0x6e0>
  80974c:	dc800e17 	ldw	r18,56(sp)
  809750:	dc400d17 	ldw	r17,52(sp)
  809754:	dcc01904 	addi	r19,sp,100
  809758:	003e4206 	br	809064 <___vfprintf_internal_r+0x764>
  80975c:	d9014f17 	ldw	r4,1340(sp)
  809760:	b00b883a 	mov	r5,r22
  809764:	d9800c04 	addi	r6,sp,48
  809768:	08088a80 	call	8088a8 <__sprint_r>
  80976c:	103e1c1e 	bne	r2,zero,808fe0 <___vfprintf_internal_r+0x6e0>
  809770:	dc800e17 	ldw	r18,56(sp)
  809774:	dc400d17 	ldw	r17,52(sp)
  809778:	d8c01904 	addi	r3,sp,100
  80977c:	003e2e06 	br	809038 <___vfprintf_internal_r+0x738>
  809780:	d9414c17 	ldw	r5,1328(sp)
  809784:	2880004c 	andi	r2,r5,1
  809788:	1005003a 	cmpeq	r2,r2,zero
  80978c:	103dda1e 	bne	r2,zero,808ef8 <___vfprintf_internal_r+0x5f8>
  809790:	003e9f06 	br	809210 <___vfprintf_internal_r+0x910>
  809794:	d8c14117 	ldw	r3,1284(sp)
  809798:	9125883a 	add	r18,r18,r4
  80979c:	8c400044 	addi	r17,r17,1
  8097a0:	008001c4 	movi	r2,7
  8097a4:	a8c00015 	stw	r3,0(r21)
  8097a8:	a9000115 	stw	r4,4(r21)
  8097ac:	dc800e15 	stw	r18,56(sp)
  8097b0:	dc400d15 	stw	r17,52(sp)
  8097b4:	14426616 	blt	r2,r17,80a150 <___vfprintf_internal_r+0x1850>
  8097b8:	a8c00204 	addi	r3,r21,8
  8097bc:	d9414917 	ldw	r5,1316(sp)
  8097c0:	00800044 	movi	r2,1
  8097c4:	94800044 	addi	r18,r18,1
  8097c8:	8c400044 	addi	r17,r17,1
  8097cc:	18800115 	stw	r2,4(r3)
  8097d0:	008001c4 	movi	r2,7
  8097d4:	19400015 	stw	r5,0(r3)
  8097d8:	dc800e15 	stw	r18,56(sp)
  8097dc:	dc400d15 	stw	r17,52(sp)
  8097e0:	2021883a 	mov	r16,r4
  8097e4:	14425016 	blt	r2,r17,80a128 <___vfprintf_internal_r+0x1828>
  8097e8:	19400204 	addi	r5,r3,8
  8097ec:	d9814717 	ldw	r6,1308(sp)
  8097f0:	8c400044 	addi	r17,r17,1
  8097f4:	dc400d15 	stw	r17,52(sp)
  8097f8:	3107c83a 	sub	r3,r6,r4
  8097fc:	d9014117 	ldw	r4,1284(sp)
  809800:	90e5883a 	add	r18,r18,r3
  809804:	28c00115 	stw	r3,4(r5)
  809808:	8105883a 	add	r2,r16,r4
  80980c:	28800015 	stw	r2,0(r5)
  809810:	008001c4 	movi	r2,7
  809814:	dc800e15 	stw	r18,56(sp)
  809818:	147f1d16 	blt	r2,r17,809490 <___vfprintf_internal_r+0xb90>
  80981c:	28c00204 	addi	r3,r5,8
  809820:	003db506 	br	808ef8 <___vfprintf_internal_r+0x5f8>
  809824:	3c000017 	ldw	r16,0(r7)
  809828:	3c400117 	ldw	r17,4(r7)
  80982c:	39800204 	addi	r6,r7,8
  809830:	01000044 	movi	r4,1
  809834:	d9814015 	stw	r6,1280(sp)
  809838:	d8000405 	stb	zero,16(sp)
  80983c:	003ebe06 	br	809338 <___vfprintf_internal_r+0xa38>
  809840:	3c000017 	ldw	r16,0(r7)
  809844:	3c400117 	ldw	r17,4(r7)
  809848:	38800204 	addi	r2,r7,8
  80984c:	d8814015 	stw	r2,1280(sp)
  809850:	003eb706 	br	809330 <___vfprintf_internal_r+0xa30>
  809854:	3c000017 	ldw	r16,0(r7)
  809858:	3c400117 	ldw	r17,4(r7)
  80985c:	39000204 	addi	r4,r7,8
  809860:	d9014015 	stw	r4,1280(sp)
  809864:	0009883a 	mov	r4,zero
  809868:	d8000405 	stb	zero,16(sp)
  80986c:	003eb206 	br	809338 <___vfprintf_internal_r+0xa38>
  809870:	38c00017 	ldw	r3,0(r7)
  809874:	39c00104 	addi	r7,r7,4
  809878:	d8c14a15 	stw	r3,1320(sp)
  80987c:	1800d10e 	bge	r3,zero,809bc4 <___vfprintf_internal_r+0x12c4>
  809880:	00c7c83a 	sub	r3,zero,r3
  809884:	d8c14a15 	stw	r3,1320(sp)
  809888:	d9014c17 	ldw	r4,1328(sp)
  80988c:	b8c00007 	ldb	r3,0(r23)
  809890:	21000114 	ori	r4,r4,4
  809894:	d9014c15 	stw	r4,1328(sp)
  809898:	003c9806 	br	808afc <___vfprintf_internal_r+0x1fc>
  80989c:	d9814c17 	ldw	r6,1328(sp)
  8098a0:	3080080c 	andi	r2,r6,32
  8098a4:	1001f026 	beq	r2,zero,80a068 <___vfprintf_internal_r+0x1768>
  8098a8:	d9014b17 	ldw	r4,1324(sp)
  8098ac:	38800017 	ldw	r2,0(r7)
  8098b0:	39c00104 	addi	r7,r7,4
  8098b4:	d9c14015 	stw	r7,1280(sp)
  8098b8:	2007d7fa 	srai	r3,r4,31
  8098bc:	d9c14017 	ldw	r7,1280(sp)
  8098c0:	11000015 	stw	r4,0(r2)
  8098c4:	10c00115 	stw	r3,4(r2)
  8098c8:	003c6906 	br	808a70 <___vfprintf_internal_r+0x170>
  8098cc:	b8c00007 	ldb	r3,0(r23)
  8098d0:	00801b04 	movi	r2,108
  8098d4:	18824f26 	beq	r3,r2,80a214 <___vfprintf_internal_r+0x1914>
  8098d8:	d9414c17 	ldw	r5,1328(sp)
  8098dc:	29400414 	ori	r5,r5,16
  8098e0:	d9414c15 	stw	r5,1328(sp)
  8098e4:	003c8506 	br	808afc <___vfprintf_internal_r+0x1fc>
  8098e8:	d9814c17 	ldw	r6,1328(sp)
  8098ec:	b8c00007 	ldb	r3,0(r23)
  8098f0:	31800814 	ori	r6,r6,32
  8098f4:	d9814c15 	stw	r6,1328(sp)
  8098f8:	003c8006 	br	808afc <___vfprintf_internal_r+0x1fc>
  8098fc:	d8814c17 	ldw	r2,1328(sp)
  809900:	3c000017 	ldw	r16,0(r7)
  809904:	00c01e04 	movi	r3,120
  809908:	10800094 	ori	r2,r2,2
  80990c:	d8814c15 	stw	r2,1328(sp)
  809910:	39c00104 	addi	r7,r7,4
  809914:	014020b4 	movhi	r5,130
  809918:	2972dd04 	addi	r5,r5,-13452
  80991c:	00800c04 	movi	r2,48
  809920:	0023883a 	mov	r17,zero
  809924:	01000084 	movi	r4,2
  809928:	d9c14015 	stw	r7,1280(sp)
  80992c:	d8c14d15 	stw	r3,1332(sp)
  809930:	d9414415 	stw	r5,1296(sp)
  809934:	d8800445 	stb	r2,17(sp)
  809938:	d8c00485 	stb	r3,18(sp)
  80993c:	d8000405 	stb	zero,16(sp)
  809940:	003e7d06 	br	809338 <___vfprintf_internal_r+0xa38>
  809944:	d8814c17 	ldw	r2,1328(sp)
  809948:	b8c00007 	ldb	r3,0(r23)
  80994c:	10801014 	ori	r2,r2,64
  809950:	d8814c15 	stw	r2,1328(sp)
  809954:	003c6906 	br	808afc <___vfprintf_internal_r+0x1fc>
  809958:	d9414c17 	ldw	r5,1328(sp)
  80995c:	2880020c 	andi	r2,r5,8
  809960:	1001df26 	beq	r2,zero,80a0e0 <___vfprintf_internal_r+0x17e0>
  809964:	39800017 	ldw	r6,0(r7)
  809968:	38800204 	addi	r2,r7,8
  80996c:	d8814015 	stw	r2,1280(sp)
  809970:	d9814215 	stw	r6,1288(sp)
  809974:	39c00117 	ldw	r7,4(r7)
  809978:	d9c14315 	stw	r7,1292(sp)
  80997c:	d9014217 	ldw	r4,1288(sp)
  809980:	d9414317 	ldw	r5,1292(sp)
  809984:	080eb600 	call	80eb60 <__isinfd>
  809988:	10021726 	beq	r2,zero,80a1e8 <___vfprintf_internal_r+0x18e8>
  80998c:	d9014217 	ldw	r4,1288(sp)
  809990:	d9414317 	ldw	r5,1292(sp)
  809994:	000d883a 	mov	r6,zero
  809998:	000f883a 	mov	r7,zero
  80999c:	0806dfc0 	call	806dfc <__ltdf2>
  8099a0:	1002ca16 	blt	r2,zero,80a4cc <___vfprintf_internal_r+0x1bcc>
  8099a4:	d9414d17 	ldw	r5,1332(sp)
  8099a8:	008011c4 	movi	r2,71
  8099ac:	11420a16 	blt	r2,r5,80a1d8 <___vfprintf_internal_r+0x18d8>
  8099b0:	018020b4 	movhi	r6,130
  8099b4:	31b2e204 	addi	r6,r6,-13432
  8099b8:	d9814115 	stw	r6,1284(sp)
  8099bc:	d9014c17 	ldw	r4,1328(sp)
  8099c0:	00c000c4 	movi	r3,3
  8099c4:	00bfdfc4 	movi	r2,-129
  8099c8:	2088703a 	and	r4,r4,r2
  8099cc:	180f883a 	mov	r7,r3
  8099d0:	d8c14515 	stw	r3,1300(sp)
  8099d4:	d9014c15 	stw	r4,1328(sp)
  8099d8:	d8014615 	stw	zero,1304(sp)
  8099dc:	003e6a06 	br	809388 <___vfprintf_internal_r+0xa88>
  8099e0:	38800017 	ldw	r2,0(r7)
  8099e4:	00c00044 	movi	r3,1
  8099e8:	39c00104 	addi	r7,r7,4
  8099ec:	d9c14015 	stw	r7,1280(sp)
  8099f0:	d9000f04 	addi	r4,sp,60
  8099f4:	180f883a 	mov	r7,r3
  8099f8:	d8c14515 	stw	r3,1300(sp)
  8099fc:	d9014115 	stw	r4,1284(sp)
  809a00:	d8800f05 	stb	r2,60(sp)
  809a04:	d8000405 	stb	zero,16(sp)
  809a08:	003cac06 	br	808cbc <___vfprintf_internal_r+0x3bc>
  809a0c:	014020b4 	movhi	r5,130
  809a10:	2972e804 	addi	r5,r5,-13408
  809a14:	d9414415 	stw	r5,1296(sp)
  809a18:	d9814c17 	ldw	r6,1328(sp)
  809a1c:	3080080c 	andi	r2,r6,32
  809a20:	1000f926 	beq	r2,zero,809e08 <___vfprintf_internal_r+0x1508>
  809a24:	3c000017 	ldw	r16,0(r7)
  809a28:	3c400117 	ldw	r17,4(r7)
  809a2c:	38800204 	addi	r2,r7,8
  809a30:	d8814015 	stw	r2,1280(sp)
  809a34:	d9414c17 	ldw	r5,1328(sp)
  809a38:	2880004c 	andi	r2,r5,1
  809a3c:	1005003a 	cmpeq	r2,r2,zero
  809a40:	1000b31e 	bne	r2,zero,809d10 <___vfprintf_internal_r+0x1410>
  809a44:	8444b03a 	or	r2,r16,r17
  809a48:	1000b126 	beq	r2,zero,809d10 <___vfprintf_internal_r+0x1410>
  809a4c:	d9814d17 	ldw	r6,1332(sp)
  809a50:	29400094 	ori	r5,r5,2
  809a54:	00800c04 	movi	r2,48
  809a58:	01000084 	movi	r4,2
  809a5c:	d9414c15 	stw	r5,1328(sp)
  809a60:	d8800445 	stb	r2,17(sp)
  809a64:	d9800485 	stb	r6,18(sp)
  809a68:	d8000405 	stb	zero,16(sp)
  809a6c:	003e3206 	br	809338 <___vfprintf_internal_r+0xa38>
  809a70:	018020b4 	movhi	r6,130
  809a74:	31b2dd04 	addi	r6,r6,-13452
  809a78:	d9814415 	stw	r6,1296(sp)
  809a7c:	003fe606 	br	809a18 <___vfprintf_internal_r+0x1118>
  809a80:	00800ac4 	movi	r2,43
  809a84:	d8800405 	stb	r2,16(sp)
  809a88:	b8c00007 	ldb	r3,0(r23)
  809a8c:	003c1b06 	br	808afc <___vfprintf_internal_r+0x1fc>
  809a90:	d8814c17 	ldw	r2,1328(sp)
  809a94:	b8c00007 	ldb	r3,0(r23)
  809a98:	10800054 	ori	r2,r2,1
  809a9c:	d8814c15 	stw	r2,1328(sp)
  809aa0:	003c1606 	br	808afc <___vfprintf_internal_r+0x1fc>
  809aa4:	d8800407 	ldb	r2,16(sp)
  809aa8:	1000461e 	bne	r2,zero,809bc4 <___vfprintf_internal_r+0x12c4>
  809aac:	00800804 	movi	r2,32
  809ab0:	d8800405 	stb	r2,16(sp)
  809ab4:	b8c00007 	ldb	r3,0(r23)
  809ab8:	003c1006 	br	808afc <___vfprintf_internal_r+0x1fc>
  809abc:	d9814c17 	ldw	r6,1328(sp)
  809ac0:	b8c00007 	ldb	r3,0(r23)
  809ac4:	31800214 	ori	r6,r6,8
  809ac8:	d9814c15 	stw	r6,1328(sp)
  809acc:	003c0b06 	br	808afc <___vfprintf_internal_r+0x1fc>
  809ad0:	0007883a 	mov	r3,zero
  809ad4:	01000244 	movi	r4,9
  809ad8:	188002a4 	muli	r2,r3,10
  809adc:	b8c00007 	ldb	r3,0(r23)
  809ae0:	d9814d17 	ldw	r6,1332(sp)
  809ae4:	bdc00044 	addi	r23,r23,1
  809ae8:	d8c14d15 	stw	r3,1332(sp)
  809aec:	d9414d17 	ldw	r5,1332(sp)
  809af0:	3085883a 	add	r2,r6,r2
  809af4:	10fff404 	addi	r3,r2,-48
  809af8:	28bff404 	addi	r2,r5,-48
  809afc:	20bff62e 	bgeu	r4,r2,809ad8 <___vfprintf_internal_r+0x11d8>
  809b00:	d8c14a15 	stw	r3,1320(sp)
  809b04:	003bff06 	br	808b04 <___vfprintf_internal_r+0x204>
  809b08:	d9414c17 	ldw	r5,1328(sp)
  809b0c:	b8c00007 	ldb	r3,0(r23)
  809b10:	29402014 	ori	r5,r5,128
  809b14:	d9414c15 	stw	r5,1328(sp)
  809b18:	003bf806 	br	808afc <___vfprintf_internal_r+0x1fc>
  809b1c:	b8c00007 	ldb	r3,0(r23)
  809b20:	00800a84 	movi	r2,42
  809b24:	bdc00044 	addi	r23,r23,1
  809b28:	18831526 	beq	r3,r2,80a780 <___vfprintf_internal_r+0x1e80>
  809b2c:	d8c14d15 	stw	r3,1332(sp)
  809b30:	18bff404 	addi	r2,r3,-48
  809b34:	00c00244 	movi	r3,9
  809b38:	18827836 	bltu	r3,r2,80a51c <___vfprintf_internal_r+0x1c1c>
  809b3c:	000d883a 	mov	r6,zero
  809b40:	308002a4 	muli	r2,r6,10
  809b44:	b9800007 	ldb	r6,0(r23)
  809b48:	d9414d17 	ldw	r5,1332(sp)
  809b4c:	bdc00044 	addi	r23,r23,1
  809b50:	d9814d15 	stw	r6,1332(sp)
  809b54:	d9014d17 	ldw	r4,1332(sp)
  809b58:	1145883a 	add	r2,r2,r5
  809b5c:	11bff404 	addi	r6,r2,-48
  809b60:	20bff404 	addi	r2,r4,-48
  809b64:	18bff62e 	bgeu	r3,r2,809b40 <___vfprintf_internal_r+0x1240>
  809b68:	3027883a 	mov	r19,r6
  809b6c:	303be50e 	bge	r6,zero,808b04 <___vfprintf_internal_r+0x204>
  809b70:	04ffffc4 	movi	r19,-1
  809b74:	003be306 	br	808b04 <___vfprintf_internal_r+0x204>
  809b78:	d8000405 	stb	zero,16(sp)
  809b7c:	39800017 	ldw	r6,0(r7)
  809b80:	39c00104 	addi	r7,r7,4
  809b84:	d9c14015 	stw	r7,1280(sp)
  809b88:	d9814115 	stw	r6,1284(sp)
  809b8c:	3001c926 	beq	r6,zero,80a2b4 <___vfprintf_internal_r+0x19b4>
  809b90:	98000e16 	blt	r19,zero,809bcc <___vfprintf_internal_r+0x12cc>
  809b94:	d9014117 	ldw	r4,1284(sp)
  809b98:	000b883a 	mov	r5,zero
  809b9c:	980d883a 	mov	r6,r19
  809ba0:	080d27c0 	call	80d27c <memchr>
  809ba4:	10025926 	beq	r2,zero,80a50c <___vfprintf_internal_r+0x1c0c>
  809ba8:	d8c14117 	ldw	r3,1284(sp)
  809bac:	10cfc83a 	sub	r7,r2,r3
  809bb0:	99c19e16 	blt	r19,r7,80a22c <___vfprintf_internal_r+0x192c>
  809bb4:	d9c14515 	stw	r7,1300(sp)
  809bb8:	38000916 	blt	r7,zero,809be0 <___vfprintf_internal_r+0x12e0>
  809bbc:	d8014615 	stw	zero,1304(sp)
  809bc0:	003df106 	br	809388 <___vfprintf_internal_r+0xa88>
  809bc4:	b8c00007 	ldb	r3,0(r23)
  809bc8:	003bcc06 	br	808afc <___vfprintf_internal_r+0x1fc>
  809bcc:	d9014117 	ldw	r4,1284(sp)
  809bd0:	08087780 	call	808778 <strlen>
  809bd4:	d8814515 	stw	r2,1300(sp)
  809bd8:	100f883a 	mov	r7,r2
  809bdc:	103ff70e 	bge	r2,zero,809bbc <___vfprintf_internal_r+0x12bc>
  809be0:	d8014515 	stw	zero,1300(sp)
  809be4:	d8014615 	stw	zero,1304(sp)
  809be8:	003de706 	br	809388 <___vfprintf_internal_r+0xa88>
  809bec:	20c03fcc 	andi	r3,r4,255
  809bf0:	00800044 	movi	r2,1
  809bf4:	18802d26 	beq	r3,r2,809cac <___vfprintf_internal_r+0x13ac>
  809bf8:	18800e36 	bltu	r3,r2,809c34 <___vfprintf_internal_r+0x1334>
  809bfc:	00800084 	movi	r2,2
  809c00:	1880fa26 	beq	r3,r2,809fec <___vfprintf_internal_r+0x16ec>
  809c04:	010020b4 	movhi	r4,130
  809c08:	2132ed04 	addi	r4,r4,-13388
  809c0c:	08087780 	call	808778 <strlen>
  809c10:	100f883a 	mov	r7,r2
  809c14:	dcc14515 	stw	r19,1300(sp)
  809c18:	9880010e 	bge	r19,r2,809c20 <___vfprintf_internal_r+0x1320>
  809c1c:	d8814515 	stw	r2,1300(sp)
  809c20:	008020b4 	movhi	r2,130
  809c24:	10b2ed04 	addi	r2,r2,-13388
  809c28:	dcc14615 	stw	r19,1304(sp)
  809c2c:	d8814115 	stw	r2,1284(sp)
  809c30:	003dd506 	br	809388 <___vfprintf_internal_r+0xa88>
  809c34:	d9401904 	addi	r5,sp,100
  809c38:	dd000f04 	addi	r20,sp,60
  809c3c:	d9414115 	stw	r5,1284(sp)
  809c40:	880a977a 	slli	r5,r17,29
  809c44:	d9814117 	ldw	r6,1284(sp)
  809c48:	8004d0fa 	srli	r2,r16,3
  809c4c:	8806d0fa 	srli	r3,r17,3
  809c50:	810001cc 	andi	r4,r16,7
  809c54:	2884b03a 	or	r2,r5,r2
  809c58:	31bfffc4 	addi	r6,r6,-1
  809c5c:	21000c04 	addi	r4,r4,48
  809c60:	d9814115 	stw	r6,1284(sp)
  809c64:	10cab03a 	or	r5,r2,r3
  809c68:	31000005 	stb	r4,0(r6)
  809c6c:	1021883a 	mov	r16,r2
  809c70:	1823883a 	mov	r17,r3
  809c74:	283ff21e 	bne	r5,zero,809c40 <___vfprintf_internal_r+0x1340>
  809c78:	d8c14c17 	ldw	r3,1328(sp)
  809c7c:	1880004c 	andi	r2,r3,1
  809c80:	1005003a 	cmpeq	r2,r2,zero
  809c84:	103db91e 	bne	r2,zero,80936c <___vfprintf_internal_r+0xa6c>
  809c88:	20803fcc 	andi	r2,r4,255
  809c8c:	1080201c 	xori	r2,r2,128
  809c90:	10bfe004 	addi	r2,r2,-128
  809c94:	00c00c04 	movi	r3,48
  809c98:	10fdb426 	beq	r2,r3,80936c <___vfprintf_internal_r+0xa6c>
  809c9c:	31bfffc4 	addi	r6,r6,-1
  809ca0:	d9814115 	stw	r6,1284(sp)
  809ca4:	30c00005 	stb	r3,0(r6)
  809ca8:	003db006 	br	80936c <___vfprintf_internal_r+0xa6c>
  809cac:	88800068 	cmpgeui	r2,r17,1
  809cb0:	10002c1e 	bne	r2,zero,809d64 <___vfprintf_internal_r+0x1464>
  809cb4:	8800021e 	bne	r17,zero,809cc0 <___vfprintf_internal_r+0x13c0>
  809cb8:	00800244 	movi	r2,9
  809cbc:	14002936 	bltu	r2,r16,809d64 <___vfprintf_internal_r+0x1464>
  809cc0:	d90018c4 	addi	r4,sp,99
  809cc4:	dd000f04 	addi	r20,sp,60
  809cc8:	d9014115 	stw	r4,1284(sp)
  809ccc:	d9014117 	ldw	r4,1284(sp)
  809cd0:	80800c04 	addi	r2,r16,48
  809cd4:	20800005 	stb	r2,0(r4)
  809cd8:	003da406 	br	80936c <___vfprintf_internal_r+0xa6c>
  809cdc:	dc400d17 	ldw	r17,52(sp)
  809ce0:	070020b4 	movhi	fp,130
  809ce4:	e732f484 	addi	fp,fp,-13358
  809ce8:	9425883a 	add	r18,r18,r16
  809cec:	8c400044 	addi	r17,r17,1
  809cf0:	008001c4 	movi	r2,7
  809cf4:	1f000015 	stw	fp,0(r3)
  809cf8:	1c000115 	stw	r16,4(r3)
  809cfc:	dc800e15 	stw	r18,56(sp)
  809d00:	dc400d15 	stw	r17,52(sp)
  809d04:	147de216 	blt	r2,r17,809490 <___vfprintf_internal_r+0xb90>
  809d08:	18c00204 	addi	r3,r3,8
  809d0c:	003c7a06 	br	808ef8 <___vfprintf_internal_r+0x5f8>
  809d10:	01000084 	movi	r4,2
  809d14:	d8000405 	stb	zero,16(sp)
  809d18:	003d8706 	br	809338 <___vfprintf_internal_r+0xa38>
  809d1c:	d9814c17 	ldw	r6,1328(sp)
  809d20:	30c4703a 	and	r2,r6,r3
  809d24:	1005003a 	cmpeq	r2,r2,zero
  809d28:	103cb926 	beq	r2,zero,809010 <___vfprintf_internal_r+0x710>
  809d2c:	d9014117 	ldw	r4,1284(sp)
  809d30:	94800044 	addi	r18,r18,1
  809d34:	8c400044 	addi	r17,r17,1
  809d38:	008001c4 	movi	r2,7
  809d3c:	a9000015 	stw	r4,0(r21)
  809d40:	a8c00115 	stw	r3,4(r21)
  809d44:	dc800e15 	stw	r18,56(sp)
  809d48:	dc400d15 	stw	r17,52(sp)
  809d4c:	147e6616 	blt	r2,r17,8096e8 <___vfprintf_internal_r+0xde8>
  809d50:	acc00204 	addi	r19,r21,8
  809d54:	003cd706 	br	8090b4 <___vfprintf_internal_r+0x7b4>
  809d58:	070020b4 	movhi	fp,130
  809d5c:	e732f484 	addi	fp,fp,-13358
  809d60:	003c4f06 	br	808ea0 <___vfprintf_internal_r+0x5a0>
  809d64:	dd000f04 	addi	r20,sp,60
  809d68:	dc801904 	addi	r18,sp,100
  809d6c:	8009883a 	mov	r4,r16
  809d70:	880b883a 	mov	r5,r17
  809d74:	01800284 	movi	r6,10
  809d78:	000f883a 	mov	r7,zero
  809d7c:	080f8180 	call	80f818 <__umoddi3>
  809d80:	12000c04 	addi	r8,r2,48
  809d84:	94bfffc4 	addi	r18,r18,-1
  809d88:	8009883a 	mov	r4,r16
  809d8c:	880b883a 	mov	r5,r17
  809d90:	01800284 	movi	r6,10
  809d94:	000f883a 	mov	r7,zero
  809d98:	92000005 	stb	r8,0(r18)
  809d9c:	080f23c0 	call	80f23c <__udivdi3>
  809da0:	1009883a 	mov	r4,r2
  809da4:	1021883a 	mov	r16,r2
  809da8:	18800068 	cmpgeui	r2,r3,1
  809dac:	1823883a 	mov	r17,r3
  809db0:	103fee1e 	bne	r2,zero,809d6c <___vfprintf_internal_r+0x146c>
  809db4:	1800021e 	bne	r3,zero,809dc0 <___vfprintf_internal_r+0x14c0>
  809db8:	00800244 	movi	r2,9
  809dbc:	113feb36 	bltu	r2,r4,809d6c <___vfprintf_internal_r+0x146c>
  809dc0:	94bfffc4 	addi	r18,r18,-1
  809dc4:	dc814115 	stw	r18,1284(sp)
  809dc8:	003fc006 	br	809ccc <___vfprintf_internal_r+0x13cc>
  809dcc:	d9014c17 	ldw	r4,1328(sp)
  809dd0:	2080004c 	andi	r2,r4,1
  809dd4:	10009a1e 	bne	r2,zero,80a040 <___vfprintf_internal_r+0x1740>
  809dd8:	d9401904 	addi	r5,sp,100
  809ddc:	dd000f04 	addi	r20,sp,60
  809de0:	d9414115 	stw	r5,1284(sp)
  809de4:	003d6106 	br	80936c <___vfprintf_internal_r+0xa6c>
  809de8:	d9014f17 	ldw	r4,1340(sp)
  809dec:	b00b883a 	mov	r5,r22
  809df0:	d9800c04 	addi	r6,sp,48
  809df4:	08088a80 	call	8088a8 <__sprint_r>
  809df8:	103c791e 	bne	r2,zero,808fe0 <___vfprintf_internal_r+0x6e0>
  809dfc:	dc800e17 	ldw	r18,56(sp)
  809e00:	d8c01904 	addi	r3,sp,100
  809e04:	003cff06 	br	809204 <___vfprintf_internal_r+0x904>
  809e08:	d8c14c17 	ldw	r3,1328(sp)
  809e0c:	1880040c 	andi	r2,r3,16
  809e10:	1000711e 	bne	r2,zero,809fd8 <___vfprintf_internal_r+0x16d8>
  809e14:	d9014c17 	ldw	r4,1328(sp)
  809e18:	2080100c 	andi	r2,r4,64
  809e1c:	10006e26 	beq	r2,zero,809fd8 <___vfprintf_internal_r+0x16d8>
  809e20:	3c00000b 	ldhu	r16,0(r7)
  809e24:	0023883a 	mov	r17,zero
  809e28:	39c00104 	addi	r7,r7,4
  809e2c:	d9c14015 	stw	r7,1280(sp)
  809e30:	003f0006 	br	809a34 <___vfprintf_internal_r+0x1134>
  809e34:	dc400d17 	ldw	r17,52(sp)
  809e38:	070020b4 	movhi	fp,130
  809e3c:	e732f484 	addi	fp,fp,-13358
  809e40:	9425883a 	add	r18,r18,r16
  809e44:	8c400044 	addi	r17,r17,1
  809e48:	008001c4 	movi	r2,7
  809e4c:	1f000015 	stw	fp,0(r3)
  809e50:	1c000115 	stw	r16,4(r3)
  809e54:	dc800e15 	stw	r18,56(sp)
  809e58:	dc400d15 	stw	r17,52(sp)
  809e5c:	147d7616 	blt	r2,r17,809438 <___vfprintf_internal_r+0xb38>
  809e60:	18c00204 	addi	r3,r3,8
  809e64:	003d7b06 	br	809454 <___vfprintf_internal_r+0xb54>
  809e68:	dc800e17 	ldw	r18,56(sp)
  809e6c:	dc400d17 	ldw	r17,52(sp)
  809e70:	070020b4 	movhi	fp,130
  809e74:	e732f884 	addi	fp,fp,-13342
  809e78:	003bc006 	br	808d7c <___vfprintf_internal_r+0x47c>
  809e7c:	d9014f17 	ldw	r4,1340(sp)
  809e80:	b00b883a 	mov	r5,r22
  809e84:	d9800c04 	addi	r6,sp,48
  809e88:	08088a80 	call	8088a8 <__sprint_r>
  809e8c:	103c541e 	bne	r2,zero,808fe0 <___vfprintf_internal_r+0x6e0>
  809e90:	dc800e17 	ldw	r18,56(sp)
  809e94:	d8c01904 	addi	r3,sp,100
  809e98:	003ce906 	br	809240 <___vfprintf_internal_r+0x940>
  809e9c:	3c000017 	ldw	r16,0(r7)
  809ea0:	0009883a 	mov	r4,zero
  809ea4:	39c00104 	addi	r7,r7,4
  809ea8:	0023883a 	mov	r17,zero
  809eac:	d9c14015 	stw	r7,1280(sp)
  809eb0:	d8000405 	stb	zero,16(sp)
  809eb4:	003d2006 	br	809338 <___vfprintf_internal_r+0xa38>
  809eb8:	38800017 	ldw	r2,0(r7)
  809ebc:	39c00104 	addi	r7,r7,4
  809ec0:	d9c14015 	stw	r7,1280(sp)
  809ec4:	1023d7fa 	srai	r17,r2,31
  809ec8:	1021883a 	mov	r16,r2
  809ecc:	003d1806 	br	809330 <___vfprintf_internal_r+0xa30>
  809ed0:	3c000017 	ldw	r16,0(r7)
  809ed4:	01000044 	movi	r4,1
  809ed8:	39c00104 	addi	r7,r7,4
  809edc:	0023883a 	mov	r17,zero
  809ee0:	d9c14015 	stw	r7,1280(sp)
  809ee4:	d8000405 	stb	zero,16(sp)
  809ee8:	003d1306 	br	809338 <___vfprintf_internal_r+0xa38>
  809eec:	008020b4 	movhi	r2,130
  809ef0:	10b2f404 	addi	r2,r2,-13360
  809ef4:	94800044 	addi	r18,r18,1
  809ef8:	8c400044 	addi	r17,r17,1
  809efc:	a8800015 	stw	r2,0(r21)
  809f00:	00c00044 	movi	r3,1
  809f04:	008001c4 	movi	r2,7
  809f08:	a8c00115 	stw	r3,4(r21)
  809f0c:	dc800e15 	stw	r18,56(sp)
  809f10:	dc400d15 	stw	r17,52(sp)
  809f14:	1440ca16 	blt	r2,r17,80a240 <___vfprintf_internal_r+0x1940>
  809f18:	a8c00204 	addi	r3,r21,8
  809f1c:	2000061e 	bne	r4,zero,809f38 <___vfprintf_internal_r+0x1638>
  809f20:	d9414717 	ldw	r5,1308(sp)
  809f24:	2800041e 	bne	r5,zero,809f38 <___vfprintf_internal_r+0x1638>
  809f28:	d9814c17 	ldw	r6,1328(sp)
  809f2c:	3080004c 	andi	r2,r6,1
  809f30:	1005003a 	cmpeq	r2,r2,zero
  809f34:	103bf01e 	bne	r2,zero,808ef8 <___vfprintf_internal_r+0x5f8>
  809f38:	00800044 	movi	r2,1
  809f3c:	dc400d17 	ldw	r17,52(sp)
  809f40:	18800115 	stw	r2,4(r3)
  809f44:	d8814917 	ldw	r2,1316(sp)
  809f48:	94800044 	addi	r18,r18,1
  809f4c:	8c400044 	addi	r17,r17,1
  809f50:	18800015 	stw	r2,0(r3)
  809f54:	008001c4 	movi	r2,7
  809f58:	dc800e15 	stw	r18,56(sp)
  809f5c:	dc400d15 	stw	r17,52(sp)
  809f60:	1440ca16 	blt	r2,r17,80a28c <___vfprintf_internal_r+0x198c>
  809f64:	18c00204 	addi	r3,r3,8
  809f68:	0121c83a 	sub	r16,zero,r4
  809f6c:	0400500e 	bge	zero,r16,80a0b0 <___vfprintf_internal_r+0x17b0>
  809f70:	00800404 	movi	r2,16
  809f74:	1400800e 	bge	r2,r16,80a178 <___vfprintf_internal_r+0x1878>
  809f78:	1027883a 	mov	r19,r2
  809f7c:	070020b4 	movhi	fp,130
  809f80:	e732f484 	addi	fp,fp,-13358
  809f84:	050001c4 	movi	r20,7
  809f88:	00000306 	br	809f98 <___vfprintf_internal_r+0x1698>
  809f8c:	18c00204 	addi	r3,r3,8
  809f90:	843ffc04 	addi	r16,r16,-16
  809f94:	9c007a0e 	bge	r19,r16,80a180 <___vfprintf_internal_r+0x1880>
  809f98:	94800404 	addi	r18,r18,16
  809f9c:	8c400044 	addi	r17,r17,1
  809fa0:	1f000015 	stw	fp,0(r3)
  809fa4:	1cc00115 	stw	r19,4(r3)
  809fa8:	dc800e15 	stw	r18,56(sp)
  809fac:	dc400d15 	stw	r17,52(sp)
  809fb0:	a47ff60e 	bge	r20,r17,809f8c <___vfprintf_internal_r+0x168c>
  809fb4:	d9014f17 	ldw	r4,1340(sp)
  809fb8:	b00b883a 	mov	r5,r22
  809fbc:	d9800c04 	addi	r6,sp,48
  809fc0:	08088a80 	call	8088a8 <__sprint_r>
  809fc4:	103c061e 	bne	r2,zero,808fe0 <___vfprintf_internal_r+0x6e0>
  809fc8:	dc800e17 	ldw	r18,56(sp)
  809fcc:	dc400d17 	ldw	r17,52(sp)
  809fd0:	d8c01904 	addi	r3,sp,100
  809fd4:	003fee06 	br	809f90 <___vfprintf_internal_r+0x1690>
  809fd8:	3c000017 	ldw	r16,0(r7)
  809fdc:	0023883a 	mov	r17,zero
  809fe0:	39c00104 	addi	r7,r7,4
  809fe4:	d9c14015 	stw	r7,1280(sp)
  809fe8:	003e9206 	br	809a34 <___vfprintf_internal_r+0x1134>
  809fec:	d9401904 	addi	r5,sp,100
  809ff0:	dd000f04 	addi	r20,sp,60
  809ff4:	d9414115 	stw	r5,1284(sp)
  809ff8:	d9814417 	ldw	r6,1296(sp)
  809ffc:	880a973a 	slli	r5,r17,28
  80a000:	8004d13a 	srli	r2,r16,4
  80a004:	810003cc 	andi	r4,r16,15
  80a008:	3109883a 	add	r4,r6,r4
  80a00c:	2884b03a 	or	r2,r5,r2
  80a010:	21400003 	ldbu	r5,0(r4)
  80a014:	d9014117 	ldw	r4,1284(sp)
  80a018:	8806d13a 	srli	r3,r17,4
  80a01c:	1021883a 	mov	r16,r2
  80a020:	213fffc4 	addi	r4,r4,-1
  80a024:	d9014115 	stw	r4,1284(sp)
  80a028:	d9814117 	ldw	r6,1284(sp)
  80a02c:	10c8b03a 	or	r4,r2,r3
  80a030:	1823883a 	mov	r17,r3
  80a034:	31400005 	stb	r5,0(r6)
  80a038:	203fef1e 	bne	r4,zero,809ff8 <___vfprintf_internal_r+0x16f8>
  80a03c:	003ccb06 	br	80936c <___vfprintf_internal_r+0xa6c>
  80a040:	00800c04 	movi	r2,48
  80a044:	d98018c4 	addi	r6,sp,99
  80a048:	dd000f04 	addi	r20,sp,60
  80a04c:	d88018c5 	stb	r2,99(sp)
  80a050:	d9814115 	stw	r6,1284(sp)
  80a054:	003cc506 	br	80936c <___vfprintf_internal_r+0xa6c>
  80a058:	dc400d17 	ldw	r17,52(sp)
  80a05c:	070020b4 	movhi	fp,130
  80a060:	e732f884 	addi	fp,fp,-13342
  80a064:	003bc706 	br	808f84 <___vfprintf_internal_r+0x684>
  80a068:	d9414c17 	ldw	r5,1328(sp)
  80a06c:	2880040c 	andi	r2,r5,16
  80a070:	10007c26 	beq	r2,zero,80a264 <___vfprintf_internal_r+0x1964>
  80a074:	38800017 	ldw	r2,0(r7)
  80a078:	39c00104 	addi	r7,r7,4
  80a07c:	d9c14015 	stw	r7,1280(sp)
  80a080:	d9814b17 	ldw	r6,1324(sp)
  80a084:	d9c14017 	ldw	r7,1280(sp)
  80a088:	11800015 	stw	r6,0(r2)
  80a08c:	003a7806 	br	808a70 <___vfprintf_internal_r+0x170>
  80a090:	d9014f17 	ldw	r4,1340(sp)
  80a094:	b00b883a 	mov	r5,r22
  80a098:	d9800c04 	addi	r6,sp,48
  80a09c:	08088a80 	call	8088a8 <__sprint_r>
  80a0a0:	103bcf1e 	bne	r2,zero,808fe0 <___vfprintf_internal_r+0x6e0>
  80a0a4:	dc800e17 	ldw	r18,56(sp)
  80a0a8:	dc400d17 	ldw	r17,52(sp)
  80a0ac:	d8c01904 	addi	r3,sp,100
  80a0b0:	d9014717 	ldw	r4,1308(sp)
  80a0b4:	d9414117 	ldw	r5,1284(sp)
  80a0b8:	8c400044 	addi	r17,r17,1
  80a0bc:	9125883a 	add	r18,r18,r4
  80a0c0:	008001c4 	movi	r2,7
  80a0c4:	19400015 	stw	r5,0(r3)
  80a0c8:	19000115 	stw	r4,4(r3)
  80a0cc:	dc800e15 	stw	r18,56(sp)
  80a0d0:	dc400d15 	stw	r17,52(sp)
  80a0d4:	147cee16 	blt	r2,r17,809490 <___vfprintf_internal_r+0xb90>
  80a0d8:	18c00204 	addi	r3,r3,8
  80a0dc:	003b8606 	br	808ef8 <___vfprintf_internal_r+0x5f8>
  80a0e0:	38c00017 	ldw	r3,0(r7)
  80a0e4:	39000204 	addi	r4,r7,8
  80a0e8:	d9014015 	stw	r4,1280(sp)
  80a0ec:	d8c14215 	stw	r3,1288(sp)
  80a0f0:	39c00117 	ldw	r7,4(r7)
  80a0f4:	d9c14315 	stw	r7,1292(sp)
  80a0f8:	003e2006 	br	80997c <___vfprintf_internal_r+0x107c>
  80a0fc:	0005883a 	mov	r2,zero
  80a100:	1409c83a 	sub	r4,r2,r16
  80a104:	1105803a 	cmpltu	r2,r2,r4
  80a108:	044bc83a 	sub	r5,zero,r17
  80a10c:	2885c83a 	sub	r2,r5,r2
  80a110:	2021883a 	mov	r16,r4
  80a114:	1023883a 	mov	r17,r2
  80a118:	01000044 	movi	r4,1
  80a11c:	00800b44 	movi	r2,45
  80a120:	d8800405 	stb	r2,16(sp)
  80a124:	003c8406 	br	809338 <___vfprintf_internal_r+0xa38>
  80a128:	d9014f17 	ldw	r4,1340(sp)
  80a12c:	b00b883a 	mov	r5,r22
  80a130:	d9800c04 	addi	r6,sp,48
  80a134:	08088a80 	call	8088a8 <__sprint_r>
  80a138:	103ba91e 	bne	r2,zero,808fe0 <___vfprintf_internal_r+0x6e0>
  80a13c:	dc800e17 	ldw	r18,56(sp)
  80a140:	dc400d17 	ldw	r17,52(sp)
  80a144:	d9000517 	ldw	r4,20(sp)
  80a148:	d9401904 	addi	r5,sp,100
  80a14c:	003da706 	br	8097ec <___vfprintf_internal_r+0xeec>
  80a150:	d9014f17 	ldw	r4,1340(sp)
  80a154:	b00b883a 	mov	r5,r22
  80a158:	d9800c04 	addi	r6,sp,48
  80a15c:	08088a80 	call	8088a8 <__sprint_r>
  80a160:	103b9f1e 	bne	r2,zero,808fe0 <___vfprintf_internal_r+0x6e0>
  80a164:	dc800e17 	ldw	r18,56(sp)
  80a168:	dc400d17 	ldw	r17,52(sp)
  80a16c:	d9000517 	ldw	r4,20(sp)
  80a170:	d8c01904 	addi	r3,sp,100
  80a174:	003d9106 	br	8097bc <___vfprintf_internal_r+0xebc>
  80a178:	070020b4 	movhi	fp,130
  80a17c:	e732f484 	addi	fp,fp,-13358
  80a180:	9425883a 	add	r18,r18,r16
  80a184:	8c400044 	addi	r17,r17,1
  80a188:	008001c4 	movi	r2,7
  80a18c:	1f000015 	stw	fp,0(r3)
  80a190:	1c000115 	stw	r16,4(r3)
  80a194:	dc800e15 	stw	r18,56(sp)
  80a198:	dc400d15 	stw	r17,52(sp)
  80a19c:	147fbc16 	blt	r2,r17,80a090 <___vfprintf_internal_r+0x1790>
  80a1a0:	18c00204 	addi	r3,r3,8
  80a1a4:	003fc206 	br	80a0b0 <___vfprintf_internal_r+0x17b0>
  80a1a8:	d9014f17 	ldw	r4,1340(sp)
  80a1ac:	b00b883a 	mov	r5,r22
  80a1b0:	d9800c04 	addi	r6,sp,48
  80a1b4:	08088a80 	call	8088a8 <__sprint_r>
  80a1b8:	103b891e 	bne	r2,zero,808fe0 <___vfprintf_internal_r+0x6e0>
  80a1bc:	dc800e17 	ldw	r18,56(sp)
  80a1c0:	d9000517 	ldw	r4,20(sp)
  80a1c4:	d8c01904 	addi	r3,sp,100
  80a1c8:	003d0206 	br	8095d4 <___vfprintf_internal_r+0xcd4>
  80a1cc:	070020b4 	movhi	fp,130
  80a1d0:	e732f484 	addi	fp,fp,-13358
  80a1d4:	003be406 	br	809168 <___vfprintf_internal_r+0x868>
  80a1d8:	008020b4 	movhi	r2,130
  80a1dc:	10b2e304 	addi	r2,r2,-13428
  80a1e0:	d8814115 	stw	r2,1284(sp)
  80a1e4:	003df506 	br	8099bc <___vfprintf_internal_r+0x10bc>
  80a1e8:	d9014217 	ldw	r4,1288(sp)
  80a1ec:	d9414317 	ldw	r5,1292(sp)
  80a1f0:	08053140 	call	805314 <__isnand>
  80a1f4:	10003926 	beq	r2,zero,80a2dc <___vfprintf_internal_r+0x19dc>
  80a1f8:	d9414d17 	ldw	r5,1332(sp)
  80a1fc:	008011c4 	movi	r2,71
  80a200:	1140ce16 	blt	r2,r5,80a53c <___vfprintf_internal_r+0x1c3c>
  80a204:	018020b4 	movhi	r6,130
  80a208:	31b2e404 	addi	r6,r6,-13424
  80a20c:	d9814115 	stw	r6,1284(sp)
  80a210:	003dea06 	br	8099bc <___vfprintf_internal_r+0x10bc>
  80a214:	d9014c17 	ldw	r4,1328(sp)
  80a218:	bdc00044 	addi	r23,r23,1
  80a21c:	b8c00007 	ldb	r3,0(r23)
  80a220:	21000814 	ori	r4,r4,32
  80a224:	d9014c15 	stw	r4,1328(sp)
  80a228:	003a3406 	br	808afc <___vfprintf_internal_r+0x1fc>
  80a22c:	dcc14515 	stw	r19,1300(sp)
  80a230:	98011016 	blt	r19,zero,80a674 <___vfprintf_internal_r+0x1d74>
  80a234:	980f883a 	mov	r7,r19
  80a238:	d8014615 	stw	zero,1304(sp)
  80a23c:	003c5206 	br	809388 <___vfprintf_internal_r+0xa88>
  80a240:	d9014f17 	ldw	r4,1340(sp)
  80a244:	b00b883a 	mov	r5,r22
  80a248:	d9800c04 	addi	r6,sp,48
  80a24c:	08088a80 	call	8088a8 <__sprint_r>
  80a250:	103b631e 	bne	r2,zero,808fe0 <___vfprintf_internal_r+0x6e0>
  80a254:	dc800e17 	ldw	r18,56(sp)
  80a258:	d9000517 	ldw	r4,20(sp)
  80a25c:	d8c01904 	addi	r3,sp,100
  80a260:	003f2e06 	br	809f1c <___vfprintf_internal_r+0x161c>
  80a264:	d8c14c17 	ldw	r3,1328(sp)
  80a268:	1880100c 	andi	r2,r3,64
  80a26c:	1000a026 	beq	r2,zero,80a4f0 <___vfprintf_internal_r+0x1bf0>
  80a270:	38800017 	ldw	r2,0(r7)
  80a274:	39c00104 	addi	r7,r7,4
  80a278:	d9c14015 	stw	r7,1280(sp)
  80a27c:	d9014b17 	ldw	r4,1324(sp)
  80a280:	d9c14017 	ldw	r7,1280(sp)
  80a284:	1100000d 	sth	r4,0(r2)
  80a288:	0039f906 	br	808a70 <___vfprintf_internal_r+0x170>
  80a28c:	d9014f17 	ldw	r4,1340(sp)
  80a290:	b00b883a 	mov	r5,r22
  80a294:	d9800c04 	addi	r6,sp,48
  80a298:	08088a80 	call	8088a8 <__sprint_r>
  80a29c:	103b501e 	bne	r2,zero,808fe0 <___vfprintf_internal_r+0x6e0>
  80a2a0:	dc800e17 	ldw	r18,56(sp)
  80a2a4:	dc400d17 	ldw	r17,52(sp)
  80a2a8:	d9000517 	ldw	r4,20(sp)
  80a2ac:	d8c01904 	addi	r3,sp,100
  80a2b0:	003f2d06 	br	809f68 <___vfprintf_internal_r+0x1668>
  80a2b4:	00800184 	movi	r2,6
  80a2b8:	14c09a36 	bltu	r2,r19,80a524 <___vfprintf_internal_r+0x1c24>
  80a2bc:	dcc14515 	stw	r19,1300(sp)
  80a2c0:	9800010e 	bge	r19,zero,80a2c8 <___vfprintf_internal_r+0x19c8>
  80a2c4:	d8014515 	stw	zero,1300(sp)
  80a2c8:	008020b4 	movhi	r2,130
  80a2cc:	10b2e604 	addi	r2,r2,-13416
  80a2d0:	980f883a 	mov	r7,r19
  80a2d4:	d8814115 	stw	r2,1284(sp)
  80a2d8:	003a7806 	br	808cbc <___vfprintf_internal_r+0x3bc>
  80a2dc:	00bfffc4 	movi	r2,-1
  80a2e0:	9880e226 	beq	r19,r2,80a66c <___vfprintf_internal_r+0x1d6c>
  80a2e4:	d9414d17 	ldw	r5,1332(sp)
  80a2e8:	008019c4 	movi	r2,103
  80a2ec:	2880dc26 	beq	r5,r2,80a660 <___vfprintf_internal_r+0x1d60>
  80a2f0:	008011c4 	movi	r2,71
  80a2f4:	2880da26 	beq	r5,r2,80a660 <___vfprintf_internal_r+0x1d60>
  80a2f8:	d9414c17 	ldw	r5,1328(sp)
  80a2fc:	d9014317 	ldw	r4,1292(sp)
  80a300:	d9814217 	ldw	r6,1288(sp)
  80a304:	29404014 	ori	r5,r5,256
  80a308:	d9414c15 	stw	r5,1328(sp)
  80a30c:	2000cc16 	blt	r4,zero,80a640 <___vfprintf_internal_r+0x1d40>
  80a310:	3021883a 	mov	r16,r6
  80a314:	2023883a 	mov	r17,r4
  80a318:	0039883a 	mov	fp,zero
  80a31c:	d9414d17 	ldw	r5,1332(sp)
  80a320:	00801984 	movi	r2,102
  80a324:	2880b726 	beq	r5,r2,80a604 <___vfprintf_internal_r+0x1d04>
  80a328:	00801184 	movi	r2,70
  80a32c:	2880b526 	beq	r5,r2,80a604 <___vfprintf_internal_r+0x1d04>
  80a330:	00801944 	movi	r2,101
  80a334:	2880c826 	beq	r5,r2,80a658 <___vfprintf_internal_r+0x1d58>
  80a338:	00801144 	movi	r2,69
  80a33c:	2880c626 	beq	r5,r2,80a658 <___vfprintf_internal_r+0x1d58>
  80a340:	9829883a 	mov	r20,r19
  80a344:	d9014f17 	ldw	r4,1340(sp)
  80a348:	d8800504 	addi	r2,sp,20
  80a34c:	880d883a 	mov	r6,r17
  80a350:	d8800115 	stw	r2,4(sp)
  80a354:	d8c00604 	addi	r3,sp,24
  80a358:	d8800704 	addi	r2,sp,28
  80a35c:	800b883a 	mov	r5,r16
  80a360:	01c00084 	movi	r7,2
  80a364:	d8c00215 	stw	r3,8(sp)
  80a368:	d8800315 	stw	r2,12(sp)
  80a36c:	dd000015 	stw	r20,0(sp)
  80a370:	080ab240 	call	80ab24 <_dtoa_r>
  80a374:	d9814d17 	ldw	r6,1332(sp)
  80a378:	d8814115 	stw	r2,1284(sp)
  80a37c:	008019c4 	movi	r2,103
  80a380:	30809526 	beq	r6,r2,80a5d8 <___vfprintf_internal_r+0x1cd8>
  80a384:	d8c14d17 	ldw	r3,1332(sp)
  80a388:	008011c4 	movi	r2,71
  80a38c:	18809226 	beq	r3,r2,80a5d8 <___vfprintf_internal_r+0x1cd8>
  80a390:	d9414117 	ldw	r5,1284(sp)
  80a394:	d9814d17 	ldw	r6,1332(sp)
  80a398:	00801984 	movi	r2,102
  80a39c:	2d25883a 	add	r18,r5,r20
  80a3a0:	30808626 	beq	r6,r2,80a5bc <___vfprintf_internal_r+0x1cbc>
  80a3a4:	00801184 	movi	r2,70
  80a3a8:	30808426 	beq	r6,r2,80a5bc <___vfprintf_internal_r+0x1cbc>
  80a3ac:	000d883a 	mov	r6,zero
  80a3b0:	000f883a 	mov	r7,zero
  80a3b4:	880b883a 	mov	r5,r17
  80a3b8:	8009883a 	mov	r4,r16
  80a3bc:	0806bdc0 	call	806bdc <__eqdf2>
  80a3c0:	1000751e 	bne	r2,zero,80a598 <___vfprintf_internal_r+0x1c98>
  80a3c4:	9005883a 	mov	r2,r18
  80a3c8:	dc800715 	stw	r18,28(sp)
  80a3cc:	d9014117 	ldw	r4,1284(sp)
  80a3d0:	d9414d17 	ldw	r5,1332(sp)
  80a3d4:	00c019c4 	movi	r3,103
  80a3d8:	1125c83a 	sub	r18,r2,r4
  80a3dc:	28c06826 	beq	r5,r3,80a580 <___vfprintf_internal_r+0x1c80>
  80a3e0:	008011c4 	movi	r2,71
  80a3e4:	28806626 	beq	r5,r2,80a580 <___vfprintf_internal_r+0x1c80>
  80a3e8:	d9000517 	ldw	r4,20(sp)
  80a3ec:	d8c14d17 	ldw	r3,1332(sp)
  80a3f0:	00801944 	movi	r2,101
  80a3f4:	10c05516 	blt	r2,r3,80a54c <___vfprintf_internal_r+0x1c4c>
  80a3f8:	213fffc4 	addi	r4,r4,-1
  80a3fc:	d9000515 	stw	r4,20(sp)
  80a400:	d8c00805 	stb	r3,32(sp)
  80a404:	2021883a 	mov	r16,r4
  80a408:	2000c116 	blt	r4,zero,80a710 <___vfprintf_internal_r+0x1e10>
  80a40c:	00800ac4 	movi	r2,43
  80a410:	d8800845 	stb	r2,33(sp)
  80a414:	00800244 	movi	r2,9
  80a418:	1400af0e 	bge	r2,r16,80a6d8 <___vfprintf_internal_r+0x1dd8>
  80a41c:	1027883a 	mov	r19,r2
  80a420:	dc400b84 	addi	r17,sp,46
  80a424:	8009883a 	mov	r4,r16
  80a428:	01400284 	movi	r5,10
  80a42c:	08073f80 	call	8073f8 <__modsi3>
  80a430:	10800c04 	addi	r2,r2,48
  80a434:	8c7fffc4 	addi	r17,r17,-1
  80a438:	8009883a 	mov	r4,r16
  80a43c:	01400284 	movi	r5,10
  80a440:	88800005 	stb	r2,0(r17)
  80a444:	08073980 	call	807398 <__divsi3>
  80a448:	1021883a 	mov	r16,r2
  80a44c:	98bff516 	blt	r19,r2,80a424 <___vfprintf_internal_r+0x1b24>
  80a450:	10c00c04 	addi	r3,r2,48
  80a454:	d88009c4 	addi	r2,sp,39
  80a458:	108001c4 	addi	r2,r2,7
  80a45c:	897fffc4 	addi	r5,r17,-1
  80a460:	88ffffc5 	stb	r3,-1(r17)
  80a464:	2880a72e 	bgeu	r5,r2,80a704 <___vfprintf_internal_r+0x1e04>
  80a468:	1009883a 	mov	r4,r2
  80a46c:	d9800804 	addi	r6,sp,32
  80a470:	d8c00884 	addi	r3,sp,34
  80a474:	28800003 	ldbu	r2,0(r5)
  80a478:	29400044 	addi	r5,r5,1
  80a47c:	18800005 	stb	r2,0(r3)
  80a480:	18c00044 	addi	r3,r3,1
  80a484:	293ffb36 	bltu	r5,r4,80a474 <___vfprintf_internal_r+0x1b74>
  80a488:	1987c83a 	sub	r3,r3,r6
  80a48c:	00800044 	movi	r2,1
  80a490:	d8c14815 	stw	r3,1312(sp)
  80a494:	90cf883a 	add	r7,r18,r3
  80a498:	1480960e 	bge	r2,r18,80a6f4 <___vfprintf_internal_r+0x1df4>
  80a49c:	39c00044 	addi	r7,r7,1
  80a4a0:	d9c14515 	stw	r7,1300(sp)
  80a4a4:	38003416 	blt	r7,zero,80a578 <___vfprintf_internal_r+0x1c78>
  80a4a8:	e0803fcc 	andi	r2,fp,255
  80a4ac:	1080201c 	xori	r2,r2,128
  80a4b0:	10bfe004 	addi	r2,r2,-128
  80a4b4:	10004e26 	beq	r2,zero,80a5f0 <___vfprintf_internal_r+0x1cf0>
  80a4b8:	00800b44 	movi	r2,45
  80a4bc:	dc814715 	stw	r18,1308(sp)
  80a4c0:	d8014615 	stw	zero,1304(sp)
  80a4c4:	d8800405 	stb	r2,16(sp)
  80a4c8:	003bb106 	br	809390 <___vfprintf_internal_r+0xa90>
  80a4cc:	00800b44 	movi	r2,45
  80a4d0:	d8800405 	stb	r2,16(sp)
  80a4d4:	003d3306 	br	8099a4 <___vfprintf_internal_r+0x10a4>
  80a4d8:	d9014f17 	ldw	r4,1340(sp)
  80a4dc:	b00b883a 	mov	r5,r22
  80a4e0:	d9800c04 	addi	r6,sp,48
  80a4e4:	08088a80 	call	8088a8 <__sprint_r>
  80a4e8:	103abd1e 	bne	r2,zero,808fe0 <___vfprintf_internal_r+0x6e0>
  80a4ec:	003abb06 	br	808fdc <___vfprintf_internal_r+0x6dc>
  80a4f0:	38800017 	ldw	r2,0(r7)
  80a4f4:	39c00104 	addi	r7,r7,4
  80a4f8:	d9c14015 	stw	r7,1280(sp)
  80a4fc:	d9414b17 	ldw	r5,1324(sp)
  80a500:	d9c14017 	ldw	r7,1280(sp)
  80a504:	11400015 	stw	r5,0(r2)
  80a508:	00395906 	br	808a70 <___vfprintf_internal_r+0x170>
  80a50c:	980f883a 	mov	r7,r19
  80a510:	dcc14515 	stw	r19,1300(sp)
  80a514:	d8014615 	stw	zero,1304(sp)
  80a518:	003b9b06 	br	809388 <___vfprintf_internal_r+0xa88>
  80a51c:	0027883a 	mov	r19,zero
  80a520:	00397806 	br	808b04 <___vfprintf_internal_r+0x204>
  80a524:	00c020b4 	movhi	r3,130
  80a528:	18f2e604 	addi	r3,r3,-13416
  80a52c:	100f883a 	mov	r7,r2
  80a530:	d8814515 	stw	r2,1300(sp)
  80a534:	d8c14115 	stw	r3,1284(sp)
  80a538:	0039e006 	br	808cbc <___vfprintf_internal_r+0x3bc>
  80a53c:	008020b4 	movhi	r2,130
  80a540:	10b2e504 	addi	r2,r2,-13420
  80a544:	d8814115 	stw	r2,1284(sp)
  80a548:	003d1c06 	br	8099bc <___vfprintf_internal_r+0x10bc>
  80a54c:	d9414d17 	ldw	r5,1332(sp)
  80a550:	00801984 	movi	r2,102
  80a554:	28804926 	beq	r5,r2,80a67c <___vfprintf_internal_r+0x1d7c>
  80a558:	200f883a 	mov	r7,r4
  80a55c:	24805716 	blt	r4,r18,80a6bc <___vfprintf_internal_r+0x1dbc>
  80a560:	d9414c17 	ldw	r5,1328(sp)
  80a564:	2880004c 	andi	r2,r5,1
  80a568:	10000126 	beq	r2,zero,80a570 <___vfprintf_internal_r+0x1c70>
  80a56c:	21c00044 	addi	r7,r4,1
  80a570:	d9c14515 	stw	r7,1300(sp)
  80a574:	383fcc0e 	bge	r7,zero,80a4a8 <___vfprintf_internal_r+0x1ba8>
  80a578:	d8014515 	stw	zero,1300(sp)
  80a57c:	003fca06 	br	80a4a8 <___vfprintf_internal_r+0x1ba8>
  80a580:	d9000517 	ldw	r4,20(sp)
  80a584:	00bfff04 	movi	r2,-4
  80a588:	1100480e 	bge	r2,r4,80a6ac <___vfprintf_internal_r+0x1dac>
  80a58c:	99004716 	blt	r19,r4,80a6ac <___vfprintf_internal_r+0x1dac>
  80a590:	d8c14d15 	stw	r3,1332(sp)
  80a594:	003ff006 	br	80a558 <___vfprintf_internal_r+0x1c58>
  80a598:	d8800717 	ldw	r2,28(sp)
  80a59c:	14bf8b2e 	bgeu	r2,r18,80a3cc <___vfprintf_internal_r+0x1acc>
  80a5a0:	9007883a 	mov	r3,r18
  80a5a4:	01000c04 	movi	r4,48
  80a5a8:	11000005 	stb	r4,0(r2)
  80a5ac:	10800044 	addi	r2,r2,1
  80a5b0:	d8800715 	stw	r2,28(sp)
  80a5b4:	18bffc1e 	bne	r3,r2,80a5a8 <___vfprintf_internal_r+0x1ca8>
  80a5b8:	003f8406 	br	80a3cc <___vfprintf_internal_r+0x1acc>
  80a5bc:	d8814117 	ldw	r2,1284(sp)
  80a5c0:	10c00007 	ldb	r3,0(r2)
  80a5c4:	00800c04 	movi	r2,48
  80a5c8:	18805b26 	beq	r3,r2,80a738 <___vfprintf_internal_r+0x1e38>
  80a5cc:	d9000517 	ldw	r4,20(sp)
  80a5d0:	9125883a 	add	r18,r18,r4
  80a5d4:	003f7506 	br	80a3ac <___vfprintf_internal_r+0x1aac>
  80a5d8:	d9014c17 	ldw	r4,1328(sp)
  80a5dc:	2080004c 	andi	r2,r4,1
  80a5e0:	1005003a 	cmpeq	r2,r2,zero
  80a5e4:	103f6a26 	beq	r2,zero,80a390 <___vfprintf_internal_r+0x1a90>
  80a5e8:	d8800717 	ldw	r2,28(sp)
  80a5ec:	003f7706 	br	80a3cc <___vfprintf_internal_r+0x1acc>
  80a5f0:	d9c14515 	stw	r7,1300(sp)
  80a5f4:	38004d16 	blt	r7,zero,80a72c <___vfprintf_internal_r+0x1e2c>
  80a5f8:	dc814715 	stw	r18,1308(sp)
  80a5fc:	d8014615 	stw	zero,1304(sp)
  80a600:	003b6106 	br	809388 <___vfprintf_internal_r+0xa88>
  80a604:	d9014f17 	ldw	r4,1340(sp)
  80a608:	d8800504 	addi	r2,sp,20
  80a60c:	d8800115 	stw	r2,4(sp)
  80a610:	d8c00604 	addi	r3,sp,24
  80a614:	d8800704 	addi	r2,sp,28
  80a618:	800b883a 	mov	r5,r16
  80a61c:	880d883a 	mov	r6,r17
  80a620:	01c000c4 	movi	r7,3
  80a624:	d8c00215 	stw	r3,8(sp)
  80a628:	d8800315 	stw	r2,12(sp)
  80a62c:	dcc00015 	stw	r19,0(sp)
  80a630:	9829883a 	mov	r20,r19
  80a634:	080ab240 	call	80ab24 <_dtoa_r>
  80a638:	d8814115 	stw	r2,1284(sp)
  80a63c:	003f5106 	br	80a384 <___vfprintf_internal_r+0x1a84>
  80a640:	d8c14217 	ldw	r3,1288(sp)
  80a644:	d9014317 	ldw	r4,1292(sp)
  80a648:	07000b44 	movi	fp,45
  80a64c:	1821883a 	mov	r16,r3
  80a650:	2460003c 	xorhi	r17,r4,32768
  80a654:	003f3106 	br	80a31c <___vfprintf_internal_r+0x1a1c>
  80a658:	9d000044 	addi	r20,r19,1
  80a65c:	003f3906 	br	80a344 <___vfprintf_internal_r+0x1a44>
  80a660:	983f251e 	bne	r19,zero,80a2f8 <___vfprintf_internal_r+0x19f8>
  80a664:	04c00044 	movi	r19,1
  80a668:	003f2306 	br	80a2f8 <___vfprintf_internal_r+0x19f8>
  80a66c:	04c00184 	movi	r19,6
  80a670:	003f2106 	br	80a2f8 <___vfprintf_internal_r+0x19f8>
  80a674:	d8014515 	stw	zero,1300(sp)
  80a678:	003eee06 	br	80a234 <___vfprintf_internal_r+0x1934>
  80a67c:	200f883a 	mov	r7,r4
  80a680:	0100370e 	bge	zero,r4,80a760 <___vfprintf_internal_r+0x1e60>
  80a684:	9800031e 	bne	r19,zero,80a694 <___vfprintf_internal_r+0x1d94>
  80a688:	d9814c17 	ldw	r6,1328(sp)
  80a68c:	3080004c 	andi	r2,r6,1
  80a690:	103fb726 	beq	r2,zero,80a570 <___vfprintf_internal_r+0x1c70>
  80a694:	20800044 	addi	r2,r4,1
  80a698:	98a7883a 	add	r19,r19,r2
  80a69c:	dcc14515 	stw	r19,1300(sp)
  80a6a0:	980f883a 	mov	r7,r19
  80a6a4:	983f800e 	bge	r19,zero,80a4a8 <___vfprintf_internal_r+0x1ba8>
  80a6a8:	003fb306 	br	80a578 <___vfprintf_internal_r+0x1c78>
  80a6ac:	d9814d17 	ldw	r6,1332(sp)
  80a6b0:	31bfff84 	addi	r6,r6,-2
  80a6b4:	d9814d15 	stw	r6,1332(sp)
  80a6b8:	003f4c06 	br	80a3ec <___vfprintf_internal_r+0x1aec>
  80a6bc:	0100180e 	bge	zero,r4,80a720 <___vfprintf_internal_r+0x1e20>
  80a6c0:	00800044 	movi	r2,1
  80a6c4:	1485883a 	add	r2,r2,r18
  80a6c8:	d8814515 	stw	r2,1300(sp)
  80a6cc:	100f883a 	mov	r7,r2
  80a6d0:	103f750e 	bge	r2,zero,80a4a8 <___vfprintf_internal_r+0x1ba8>
  80a6d4:	003fa806 	br	80a578 <___vfprintf_internal_r+0x1c78>
  80a6d8:	80c00c04 	addi	r3,r16,48
  80a6dc:	00800c04 	movi	r2,48
  80a6e0:	d8c008c5 	stb	r3,35(sp)
  80a6e4:	d9800804 	addi	r6,sp,32
  80a6e8:	d8c00904 	addi	r3,sp,36
  80a6ec:	d8800885 	stb	r2,34(sp)
  80a6f0:	003f6506 	br	80a488 <___vfprintf_internal_r+0x1b88>
  80a6f4:	d9014c17 	ldw	r4,1328(sp)
  80a6f8:	2084703a 	and	r2,r4,r2
  80a6fc:	103f9c26 	beq	r2,zero,80a570 <___vfprintf_internal_r+0x1c70>
  80a700:	003f6606 	br	80a49c <___vfprintf_internal_r+0x1b9c>
  80a704:	d9800804 	addi	r6,sp,32
  80a708:	d8c00884 	addi	r3,sp,34
  80a70c:	003f5e06 	br	80a488 <___vfprintf_internal_r+0x1b88>
  80a710:	00800b44 	movi	r2,45
  80a714:	0121c83a 	sub	r16,zero,r4
  80a718:	d8800845 	stb	r2,33(sp)
  80a71c:	003f3d06 	br	80a414 <___vfprintf_internal_r+0x1b14>
  80a720:	00800084 	movi	r2,2
  80a724:	1105c83a 	sub	r2,r2,r4
  80a728:	003fe606 	br	80a6c4 <___vfprintf_internal_r+0x1dc4>
  80a72c:	d8014515 	stw	zero,1300(sp)
  80a730:	dc814715 	stw	r18,1308(sp)
  80a734:	003fb106 	br	80a5fc <___vfprintf_internal_r+0x1cfc>
  80a738:	000d883a 	mov	r6,zero
  80a73c:	000f883a 	mov	r7,zero
  80a740:	8009883a 	mov	r4,r16
  80a744:	880b883a 	mov	r5,r17
  80a748:	0806c640 	call	806c64 <__nedf2>
  80a74c:	103f9f26 	beq	r2,zero,80a5cc <___vfprintf_internal_r+0x1ccc>
  80a750:	00800044 	movi	r2,1
  80a754:	1509c83a 	sub	r4,r2,r20
  80a758:	d9000515 	stw	r4,20(sp)
  80a75c:	003f9b06 	br	80a5cc <___vfprintf_internal_r+0x1ccc>
  80a760:	98000d1e 	bne	r19,zero,80a798 <___vfprintf_internal_r+0x1e98>
  80a764:	d8c14c17 	ldw	r3,1328(sp)
  80a768:	1880004c 	andi	r2,r3,1
  80a76c:	10000a1e 	bne	r2,zero,80a798 <___vfprintf_internal_r+0x1e98>
  80a770:	01000044 	movi	r4,1
  80a774:	200f883a 	mov	r7,r4
  80a778:	d9014515 	stw	r4,1300(sp)
  80a77c:	003f4a06 	br	80a4a8 <___vfprintf_internal_r+0x1ba8>
  80a780:	3cc00017 	ldw	r19,0(r7)
  80a784:	39c00104 	addi	r7,r7,4
  80a788:	983d0e0e 	bge	r19,zero,809bc4 <___vfprintf_internal_r+0x12c4>
  80a78c:	b8c00007 	ldb	r3,0(r23)
  80a790:	04ffffc4 	movi	r19,-1
  80a794:	0038d906 	br	808afc <___vfprintf_internal_r+0x1fc>
  80a798:	9cc00084 	addi	r19,r19,2
  80a79c:	dcc14515 	stw	r19,1300(sp)
  80a7a0:	980f883a 	mov	r7,r19
  80a7a4:	983f400e 	bge	r19,zero,80a4a8 <___vfprintf_internal_r+0x1ba8>
  80a7a8:	003f7306 	br	80a578 <___vfprintf_internal_r+0x1c78>

0080a7ac <__vfprintf_internal>:
  80a7ac:	008020b4 	movhi	r2,130
  80a7b0:	10bb2804 	addi	r2,r2,-4960
  80a7b4:	2013883a 	mov	r9,r4
  80a7b8:	11000017 	ldw	r4,0(r2)
  80a7bc:	2805883a 	mov	r2,r5
  80a7c0:	300f883a 	mov	r7,r6
  80a7c4:	480b883a 	mov	r5,r9
  80a7c8:	100d883a 	mov	r6,r2
  80a7cc:	08089001 	jmpi	808900 <___vfprintf_internal_r>

0080a7d0 <__swsetup_r>:
  80a7d0:	008020b4 	movhi	r2,130
  80a7d4:	10bb2804 	addi	r2,r2,-4960
  80a7d8:	10c00017 	ldw	r3,0(r2)
  80a7dc:	defffd04 	addi	sp,sp,-12
  80a7e0:	dc400115 	stw	r17,4(sp)
  80a7e4:	dc000015 	stw	r16,0(sp)
  80a7e8:	dfc00215 	stw	ra,8(sp)
  80a7ec:	2023883a 	mov	r17,r4
  80a7f0:	2821883a 	mov	r16,r5
  80a7f4:	18000226 	beq	r3,zero,80a800 <__swsetup_r+0x30>
  80a7f8:	18800e17 	ldw	r2,56(r3)
  80a7fc:	10001f26 	beq	r2,zero,80a87c <__swsetup_r+0xac>
  80a800:	8100030b 	ldhu	r4,12(r16)
  80a804:	2080020c 	andi	r2,r4,8
  80a808:	10002826 	beq	r2,zero,80a8ac <__swsetup_r+0xdc>
  80a80c:	81400417 	ldw	r5,16(r16)
  80a810:	28001d26 	beq	r5,zero,80a888 <__swsetup_r+0xb8>
  80a814:	2080004c 	andi	r2,r4,1
  80a818:	1005003a 	cmpeq	r2,r2,zero
  80a81c:	10000b26 	beq	r2,zero,80a84c <__swsetup_r+0x7c>
  80a820:	2080008c 	andi	r2,r4,2
  80a824:	10001226 	beq	r2,zero,80a870 <__swsetup_r+0xa0>
  80a828:	0005883a 	mov	r2,zero
  80a82c:	80800215 	stw	r2,8(r16)
  80a830:	28000b26 	beq	r5,zero,80a860 <__swsetup_r+0x90>
  80a834:	0005883a 	mov	r2,zero
  80a838:	dfc00217 	ldw	ra,8(sp)
  80a83c:	dc400117 	ldw	r17,4(sp)
  80a840:	dc000017 	ldw	r16,0(sp)
  80a844:	dec00304 	addi	sp,sp,12
  80a848:	f800283a 	ret
  80a84c:	80800517 	ldw	r2,20(r16)
  80a850:	80000215 	stw	zero,8(r16)
  80a854:	0085c83a 	sub	r2,zero,r2
  80a858:	80800615 	stw	r2,24(r16)
  80a85c:	283ff51e 	bne	r5,zero,80a834 <__swsetup_r+0x64>
  80a860:	2080200c 	andi	r2,r4,128
  80a864:	103ff326 	beq	r2,zero,80a834 <__swsetup_r+0x64>
  80a868:	00bfffc4 	movi	r2,-1
  80a86c:	003ff206 	br	80a838 <__swsetup_r+0x68>
  80a870:	80800517 	ldw	r2,20(r16)
  80a874:	80800215 	stw	r2,8(r16)
  80a878:	003fed06 	br	80a830 <__swsetup_r+0x60>
  80a87c:	1809883a 	mov	r4,r3
  80a880:	080c3700 	call	80c370 <__sinit>
  80a884:	003fde06 	br	80a800 <__swsetup_r+0x30>
  80a888:	20c0a00c 	andi	r3,r4,640
  80a88c:	00808004 	movi	r2,512
  80a890:	18bfe026 	beq	r3,r2,80a814 <__swsetup_r+0x44>
  80a894:	8809883a 	mov	r4,r17
  80a898:	800b883a 	mov	r5,r16
  80a89c:	080d0e80 	call	80d0e8 <__smakebuf_r>
  80a8a0:	8100030b 	ldhu	r4,12(r16)
  80a8a4:	81400417 	ldw	r5,16(r16)
  80a8a8:	003fda06 	br	80a814 <__swsetup_r+0x44>
  80a8ac:	2080040c 	andi	r2,r4,16
  80a8b0:	103fed26 	beq	r2,zero,80a868 <__swsetup_r+0x98>
  80a8b4:	2080010c 	andi	r2,r4,4
  80a8b8:	10001226 	beq	r2,zero,80a904 <__swsetup_r+0x134>
  80a8bc:	81400c17 	ldw	r5,48(r16)
  80a8c0:	28000526 	beq	r5,zero,80a8d8 <__swsetup_r+0x108>
  80a8c4:	80801004 	addi	r2,r16,64
  80a8c8:	28800226 	beq	r5,r2,80a8d4 <__swsetup_r+0x104>
  80a8cc:	8809883a 	mov	r4,r17
  80a8d0:	080c6f40 	call	80c6f4 <_free_r>
  80a8d4:	80000c15 	stw	zero,48(r16)
  80a8d8:	8080030b 	ldhu	r2,12(r16)
  80a8dc:	81400417 	ldw	r5,16(r16)
  80a8e0:	80000115 	stw	zero,4(r16)
  80a8e4:	10bff6cc 	andi	r2,r2,65499
  80a8e8:	8080030d 	sth	r2,12(r16)
  80a8ec:	81400015 	stw	r5,0(r16)
  80a8f0:	8080030b 	ldhu	r2,12(r16)
  80a8f4:	10800214 	ori	r2,r2,8
  80a8f8:	113fffcc 	andi	r4,r2,65535
  80a8fc:	8080030d 	sth	r2,12(r16)
  80a900:	003fc306 	br	80a810 <__swsetup_r+0x40>
  80a904:	81400417 	ldw	r5,16(r16)
  80a908:	003ff906 	br	80a8f0 <__swsetup_r+0x120>

0080a90c <quorem>:
  80a90c:	28c00417 	ldw	r3,16(r5)
  80a910:	20800417 	ldw	r2,16(r4)
  80a914:	defff604 	addi	sp,sp,-40
  80a918:	ddc00715 	stw	r23,28(sp)
  80a91c:	dd400515 	stw	r21,20(sp)
  80a920:	dfc00915 	stw	ra,36(sp)
  80a924:	df000815 	stw	fp,32(sp)
  80a928:	dd800615 	stw	r22,24(sp)
  80a92c:	dd000415 	stw	r20,16(sp)
  80a930:	dcc00315 	stw	r19,12(sp)
  80a934:	dc800215 	stw	r18,8(sp)
  80a938:	dc400115 	stw	r17,4(sp)
  80a93c:	dc000015 	stw	r16,0(sp)
  80a940:	202f883a 	mov	r23,r4
  80a944:	282b883a 	mov	r21,r5
  80a948:	10c07416 	blt	r2,r3,80ab1c <quorem+0x210>
  80a94c:	1c7fffc4 	addi	r17,r3,-1
  80a950:	8c45883a 	add	r2,r17,r17
  80a954:	1085883a 	add	r2,r2,r2
  80a958:	2c000504 	addi	r16,r5,20
  80a95c:	24c00504 	addi	r19,r4,20
  80a960:	14ed883a 	add	r22,r2,r19
  80a964:	80a5883a 	add	r18,r16,r2
  80a968:	b7000017 	ldw	fp,0(r22)
  80a96c:	91400017 	ldw	r5,0(r18)
  80a970:	e009883a 	mov	r4,fp
  80a974:	29400044 	addi	r5,r5,1
  80a978:	08074580 	call	807458 <__udivsi3>
  80a97c:	1029883a 	mov	r20,r2
  80a980:	10003c1e 	bne	r2,zero,80aa74 <quorem+0x168>
  80a984:	a80b883a 	mov	r5,r21
  80a988:	b809883a 	mov	r4,r23
  80a98c:	080d6d40 	call	80d6d4 <__mcmp>
  80a990:	10002b16 	blt	r2,zero,80aa40 <quorem+0x134>
  80a994:	a5000044 	addi	r20,r20,1
  80a998:	980f883a 	mov	r7,r19
  80a99c:	0011883a 	mov	r8,zero
  80a9a0:	0009883a 	mov	r4,zero
  80a9a4:	81400017 	ldw	r5,0(r16)
  80a9a8:	38c00017 	ldw	r3,0(r7)
  80a9ac:	84000104 	addi	r16,r16,4
  80a9b0:	28bfffcc 	andi	r2,r5,65535
  80a9b4:	2085883a 	add	r2,r4,r2
  80a9b8:	11bfffcc 	andi	r6,r2,65535
  80a9bc:	193fffcc 	andi	r4,r3,65535
  80a9c0:	1004d43a 	srli	r2,r2,16
  80a9c4:	280ad43a 	srli	r5,r5,16
  80a9c8:	2189c83a 	sub	r4,r4,r6
  80a9cc:	2209883a 	add	r4,r4,r8
  80a9d0:	1806d43a 	srli	r3,r3,16
  80a9d4:	288b883a 	add	r5,r5,r2
  80a9d8:	200dd43a 	srai	r6,r4,16
  80a9dc:	28bfffcc 	andi	r2,r5,65535
  80a9e0:	1887c83a 	sub	r3,r3,r2
  80a9e4:	1987883a 	add	r3,r3,r6
  80a9e8:	3900000d 	sth	r4,0(r7)
  80a9ec:	38c0008d 	sth	r3,2(r7)
  80a9f0:	2808d43a 	srli	r4,r5,16
  80a9f4:	39c00104 	addi	r7,r7,4
  80a9f8:	1811d43a 	srai	r8,r3,16
  80a9fc:	943fe92e 	bgeu	r18,r16,80a9a4 <quorem+0x98>
  80aa00:	8c45883a 	add	r2,r17,r17
  80aa04:	1085883a 	add	r2,r2,r2
  80aa08:	9885883a 	add	r2,r19,r2
  80aa0c:	10c00017 	ldw	r3,0(r2)
  80aa10:	18000b1e 	bne	r3,zero,80aa40 <quorem+0x134>
  80aa14:	113fff04 	addi	r4,r2,-4
  80aa18:	9900082e 	bgeu	r19,r4,80aa3c <quorem+0x130>
  80aa1c:	10bfff17 	ldw	r2,-4(r2)
  80aa20:	10000326 	beq	r2,zero,80aa30 <quorem+0x124>
  80aa24:	00000506 	br	80aa3c <quorem+0x130>
  80aa28:	20800017 	ldw	r2,0(r4)
  80aa2c:	1000031e 	bne	r2,zero,80aa3c <quorem+0x130>
  80aa30:	213fff04 	addi	r4,r4,-4
  80aa34:	8c7fffc4 	addi	r17,r17,-1
  80aa38:	993ffb36 	bltu	r19,r4,80aa28 <quorem+0x11c>
  80aa3c:	bc400415 	stw	r17,16(r23)
  80aa40:	a005883a 	mov	r2,r20
  80aa44:	dfc00917 	ldw	ra,36(sp)
  80aa48:	df000817 	ldw	fp,32(sp)
  80aa4c:	ddc00717 	ldw	r23,28(sp)
  80aa50:	dd800617 	ldw	r22,24(sp)
  80aa54:	dd400517 	ldw	r21,20(sp)
  80aa58:	dd000417 	ldw	r20,16(sp)
  80aa5c:	dcc00317 	ldw	r19,12(sp)
  80aa60:	dc800217 	ldw	r18,8(sp)
  80aa64:	dc400117 	ldw	r17,4(sp)
  80aa68:	dc000017 	ldw	r16,0(sp)
  80aa6c:	dec00a04 	addi	sp,sp,40
  80aa70:	f800283a 	ret
  80aa74:	980f883a 	mov	r7,r19
  80aa78:	8011883a 	mov	r8,r16
  80aa7c:	0013883a 	mov	r9,zero
  80aa80:	000d883a 	mov	r6,zero
  80aa84:	40c00017 	ldw	r3,0(r8)
  80aa88:	39000017 	ldw	r4,0(r7)
  80aa8c:	42000104 	addi	r8,r8,4
  80aa90:	18bfffcc 	andi	r2,r3,65535
  80aa94:	a085383a 	mul	r2,r20,r2
  80aa98:	1806d43a 	srli	r3,r3,16
  80aa9c:	217fffcc 	andi	r5,r4,65535
  80aaa0:	3085883a 	add	r2,r6,r2
  80aaa4:	11bfffcc 	andi	r6,r2,65535
  80aaa8:	a0c7383a 	mul	r3,r20,r3
  80aaac:	1004d43a 	srli	r2,r2,16
  80aab0:	298bc83a 	sub	r5,r5,r6
  80aab4:	2a4b883a 	add	r5,r5,r9
  80aab8:	2008d43a 	srli	r4,r4,16
  80aabc:	1887883a 	add	r3,r3,r2
  80aac0:	280dd43a 	srai	r6,r5,16
  80aac4:	18bfffcc 	andi	r2,r3,65535
  80aac8:	2089c83a 	sub	r4,r4,r2
  80aacc:	2189883a 	add	r4,r4,r6
  80aad0:	3900008d 	sth	r4,2(r7)
  80aad4:	3940000d 	sth	r5,0(r7)
  80aad8:	180cd43a 	srli	r6,r3,16
  80aadc:	39c00104 	addi	r7,r7,4
  80aae0:	2013d43a 	srai	r9,r4,16
  80aae4:	923fe72e 	bgeu	r18,r8,80aa84 <quorem+0x178>
  80aae8:	e03fa61e 	bne	fp,zero,80a984 <quorem+0x78>
  80aaec:	b0ffff04 	addi	r3,r22,-4
  80aaf0:	98c0082e 	bgeu	r19,r3,80ab14 <quorem+0x208>
  80aaf4:	b0bfff17 	ldw	r2,-4(r22)
  80aaf8:	10000326 	beq	r2,zero,80ab08 <quorem+0x1fc>
  80aafc:	00000506 	br	80ab14 <quorem+0x208>
  80ab00:	18800017 	ldw	r2,0(r3)
  80ab04:	1000031e 	bne	r2,zero,80ab14 <quorem+0x208>
  80ab08:	18ffff04 	addi	r3,r3,-4
  80ab0c:	8c7fffc4 	addi	r17,r17,-1
  80ab10:	98fffb36 	bltu	r19,r3,80ab00 <quorem+0x1f4>
  80ab14:	bc400415 	stw	r17,16(r23)
  80ab18:	003f9a06 	br	80a984 <quorem+0x78>
  80ab1c:	0005883a 	mov	r2,zero
  80ab20:	003fc806 	br	80aa44 <quorem+0x138>

0080ab24 <_dtoa_r>:
  80ab24:	22001017 	ldw	r8,64(r4)
  80ab28:	deffda04 	addi	sp,sp,-152
  80ab2c:	dd402115 	stw	r21,132(sp)
  80ab30:	dd002015 	stw	r20,128(sp)
  80ab34:	dc801e15 	stw	r18,120(sp)
  80ab38:	dc401d15 	stw	r17,116(sp)
  80ab3c:	dfc02515 	stw	ra,148(sp)
  80ab40:	df002415 	stw	fp,144(sp)
  80ab44:	ddc02315 	stw	r23,140(sp)
  80ab48:	dd802215 	stw	r22,136(sp)
  80ab4c:	dcc01f15 	stw	r19,124(sp)
  80ab50:	dc001c15 	stw	r16,112(sp)
  80ab54:	d9001615 	stw	r4,88(sp)
  80ab58:	3023883a 	mov	r17,r6
  80ab5c:	2829883a 	mov	r20,r5
  80ab60:	d9c01715 	stw	r7,92(sp)
  80ab64:	dc802817 	ldw	r18,160(sp)
  80ab68:	302b883a 	mov	r21,r6
  80ab6c:	40000a26 	beq	r8,zero,80ab98 <_dtoa_r+0x74>
  80ab70:	20801117 	ldw	r2,68(r4)
  80ab74:	400b883a 	mov	r5,r8
  80ab78:	40800115 	stw	r2,4(r8)
  80ab7c:	20c01117 	ldw	r3,68(r4)
  80ab80:	00800044 	movi	r2,1
  80ab84:	10c4983a 	sll	r2,r2,r3
  80ab88:	40800215 	stw	r2,8(r8)
  80ab8c:	080d5780 	call	80d578 <_Bfree>
  80ab90:	d8c01617 	ldw	r3,88(sp)
  80ab94:	18001015 	stw	zero,64(r3)
  80ab98:	8800a316 	blt	r17,zero,80ae28 <_dtoa_r+0x304>
  80ab9c:	90000015 	stw	zero,0(r18)
  80aba0:	a8dffc2c 	andhi	r3,r21,32752
  80aba4:	009ffc34 	movhi	r2,32752
  80aba8:	18809126 	beq	r3,r2,80adf0 <_dtoa_r+0x2cc>
  80abac:	000d883a 	mov	r6,zero
  80abb0:	000f883a 	mov	r7,zero
  80abb4:	a009883a 	mov	r4,r20
  80abb8:	a80b883a 	mov	r5,r21
  80abbc:	dd001215 	stw	r20,72(sp)
  80abc0:	dd401315 	stw	r21,76(sp)
  80abc4:	0806c640 	call	806c64 <__nedf2>
  80abc8:	1000171e 	bne	r2,zero,80ac28 <_dtoa_r+0x104>
  80abcc:	d9802717 	ldw	r6,156(sp)
  80abd0:	00800044 	movi	r2,1
  80abd4:	30800015 	stw	r2,0(r6)
  80abd8:	d8802917 	ldw	r2,164(sp)
  80abdc:	10029b26 	beq	r2,zero,80b64c <_dtoa_r+0xb28>
  80abe0:	d9002917 	ldw	r4,164(sp)
  80abe4:	008020b4 	movhi	r2,130
  80abe8:	10b2f444 	addi	r2,r2,-13359
  80abec:	10ffffc4 	addi	r3,r2,-1
  80abf0:	20800015 	stw	r2,0(r4)
  80abf4:	1805883a 	mov	r2,r3
  80abf8:	dfc02517 	ldw	ra,148(sp)
  80abfc:	df002417 	ldw	fp,144(sp)
  80ac00:	ddc02317 	ldw	r23,140(sp)
  80ac04:	dd802217 	ldw	r22,136(sp)
  80ac08:	dd402117 	ldw	r21,132(sp)
  80ac0c:	dd002017 	ldw	r20,128(sp)
  80ac10:	dcc01f17 	ldw	r19,124(sp)
  80ac14:	dc801e17 	ldw	r18,120(sp)
  80ac18:	dc401d17 	ldw	r17,116(sp)
  80ac1c:	dc001c17 	ldw	r16,112(sp)
  80ac20:	dec02604 	addi	sp,sp,152
  80ac24:	f800283a 	ret
  80ac28:	d9001617 	ldw	r4,88(sp)
  80ac2c:	d9401217 	ldw	r5,72(sp)
  80ac30:	d8800104 	addi	r2,sp,4
  80ac34:	a80d883a 	mov	r6,r21
  80ac38:	d9c00204 	addi	r7,sp,8
  80ac3c:	d8800015 	stw	r2,0(sp)
  80ac40:	080dbb40 	call	80dbb4 <__d2b>
  80ac44:	d8800715 	stw	r2,28(sp)
  80ac48:	a804d53a 	srli	r2,r21,20
  80ac4c:	1101ffcc 	andi	r4,r2,2047
  80ac50:	20008626 	beq	r4,zero,80ae6c <_dtoa_r+0x348>
  80ac54:	d8c01217 	ldw	r3,72(sp)
  80ac58:	00800434 	movhi	r2,16
  80ac5c:	10bfffc4 	addi	r2,r2,-1
  80ac60:	ddc00117 	ldw	r23,4(sp)
  80ac64:	a884703a 	and	r2,r21,r2
  80ac68:	1811883a 	mov	r8,r3
  80ac6c:	124ffc34 	orhi	r9,r2,16368
  80ac70:	25bf0044 	addi	r22,r4,-1023
  80ac74:	d8000815 	stw	zero,32(sp)
  80ac78:	0005883a 	mov	r2,zero
  80ac7c:	00cffe34 	movhi	r3,16376
  80ac80:	480b883a 	mov	r5,r9
  80ac84:	4009883a 	mov	r4,r8
  80ac88:	180f883a 	mov	r7,r3
  80ac8c:	100d883a 	mov	r6,r2
  80ac90:	08064cc0 	call	8064cc <__subdf3>
  80ac94:	0218dbf4 	movhi	r8,25455
  80ac98:	4210d844 	addi	r8,r8,17249
  80ac9c:	024ff4f4 	movhi	r9,16339
  80aca0:	4a61e9c4 	addi	r9,r9,-30809
  80aca4:	480f883a 	mov	r7,r9
  80aca8:	400d883a 	mov	r6,r8
  80acac:	180b883a 	mov	r5,r3
  80acb0:	1009883a 	mov	r4,r2
  80acb4:	08065c00 	call	8065c0 <__muldf3>
  80acb8:	0222d874 	movhi	r8,35681
  80acbc:	42322cc4 	addi	r8,r8,-14157
  80acc0:	024ff1f4 	movhi	r9,16327
  80acc4:	4a628a04 	addi	r9,r9,-30168
  80acc8:	480f883a 	mov	r7,r9
  80accc:	400d883a 	mov	r6,r8
  80acd0:	180b883a 	mov	r5,r3
  80acd4:	1009883a 	mov	r4,r2
  80acd8:	080654c0 	call	80654c <__adddf3>
  80acdc:	b009883a 	mov	r4,r22
  80ace0:	1021883a 	mov	r16,r2
  80ace4:	1823883a 	mov	r17,r3
  80ace8:	0806f0c0 	call	806f0c <__floatsidf>
  80acec:	021427f4 	movhi	r8,20639
  80acf0:	421e7ec4 	addi	r8,r8,31227
  80acf4:	024ff4f4 	movhi	r9,16339
  80acf8:	4a5104c4 	addi	r9,r9,17427
  80acfc:	480f883a 	mov	r7,r9
  80ad00:	400d883a 	mov	r6,r8
  80ad04:	180b883a 	mov	r5,r3
  80ad08:	1009883a 	mov	r4,r2
  80ad0c:	08065c00 	call	8065c0 <__muldf3>
  80ad10:	180f883a 	mov	r7,r3
  80ad14:	880b883a 	mov	r5,r17
  80ad18:	100d883a 	mov	r6,r2
  80ad1c:	8009883a 	mov	r4,r16
  80ad20:	080654c0 	call	80654c <__adddf3>
  80ad24:	1009883a 	mov	r4,r2
  80ad28:	180b883a 	mov	r5,r3
  80ad2c:	1021883a 	mov	r16,r2
  80ad30:	1823883a 	mov	r17,r3
  80ad34:	08070040 	call	807004 <__fixdfsi>
  80ad38:	000d883a 	mov	r6,zero
  80ad3c:	000f883a 	mov	r7,zero
  80ad40:	8009883a 	mov	r4,r16
  80ad44:	880b883a 	mov	r5,r17
  80ad48:	d8800d15 	stw	r2,52(sp)
  80ad4c:	0806dfc0 	call	806dfc <__ltdf2>
  80ad50:	10031716 	blt	r2,zero,80b9b0 <_dtoa_r+0xe8c>
  80ad54:	d8c00d17 	ldw	r3,52(sp)
  80ad58:	00800584 	movi	r2,22
  80ad5c:	10c1482e 	bgeu	r2,r3,80b280 <_dtoa_r+0x75c>
  80ad60:	01000044 	movi	r4,1
  80ad64:	d9000c15 	stw	r4,48(sp)
  80ad68:	bd85c83a 	sub	r2,r23,r22
  80ad6c:	11bfffc4 	addi	r6,r2,-1
  80ad70:	30030b16 	blt	r6,zero,80b9a0 <_dtoa_r+0xe7c>
  80ad74:	d9800a15 	stw	r6,40(sp)
  80ad78:	d8001115 	stw	zero,68(sp)
  80ad7c:	d8c00d17 	ldw	r3,52(sp)
  80ad80:	1802ff16 	blt	r3,zero,80b980 <_dtoa_r+0xe5c>
  80ad84:	d9000a17 	ldw	r4,40(sp)
  80ad88:	d8c00915 	stw	r3,36(sp)
  80ad8c:	d8001015 	stw	zero,64(sp)
  80ad90:	20c9883a 	add	r4,r4,r3
  80ad94:	d9000a15 	stw	r4,40(sp)
  80ad98:	d9001717 	ldw	r4,92(sp)
  80ad9c:	00800244 	movi	r2,9
  80ada0:	11004636 	bltu	r2,r4,80aebc <_dtoa_r+0x398>
  80ada4:	00800144 	movi	r2,5
  80ada8:	11020416 	blt	r2,r4,80b5bc <_dtoa_r+0xa98>
  80adac:	04400044 	movi	r17,1
  80adb0:	d8c01717 	ldw	r3,92(sp)
  80adb4:	00800144 	movi	r2,5
  80adb8:	10c1ed36 	bltu	r2,r3,80b570 <_dtoa_r+0xa4c>
  80adbc:	18c5883a 	add	r2,r3,r3
  80adc0:	1085883a 	add	r2,r2,r2
  80adc4:	00c02074 	movhi	r3,129
  80adc8:	18eb7604 	addi	r3,r3,-21032
  80adcc:	10c5883a 	add	r2,r2,r3
  80add0:	11000017 	ldw	r4,0(r2)
  80add4:	2000683a 	jmp	r4
  80add8:	0080aec4 	movi	r2,699
  80addc:	0080aec4 	movi	r2,699
  80ade0:	0080b8c4 	movi	r2,739
  80ade4:	0080b89c 	xori	r2,zero,738
  80ade8:	0080b8e0 	cmpeqi	r2,zero,739
  80adec:	0080b8ec 	andhi	r2,zero,739
  80adf0:	d9002717 	ldw	r4,156(sp)
  80adf4:	0089c3c4 	movi	r2,9999
  80adf8:	20800015 	stw	r2,0(r4)
  80adfc:	a0001026 	beq	r20,zero,80ae40 <_dtoa_r+0x31c>
  80ae00:	00c020b4 	movhi	r3,130
  80ae04:	18f30004 	addi	r3,r3,-13312
  80ae08:	d9802917 	ldw	r6,164(sp)
  80ae0c:	303f7926 	beq	r6,zero,80abf4 <_dtoa_r+0xd0>
  80ae10:	188000c7 	ldb	r2,3(r3)
  80ae14:	190000c4 	addi	r4,r3,3
  80ae18:	1000101e 	bne	r2,zero,80ae5c <_dtoa_r+0x338>
  80ae1c:	d8802917 	ldw	r2,164(sp)
  80ae20:	11000015 	stw	r4,0(r2)
  80ae24:	003f7306 	br	80abf4 <_dtoa_r+0xd0>
  80ae28:	00a00034 	movhi	r2,32768
  80ae2c:	10bfffc4 	addi	r2,r2,-1
  80ae30:	00c00044 	movi	r3,1
  80ae34:	88aa703a 	and	r21,r17,r2
  80ae38:	90c00015 	stw	r3,0(r18)
  80ae3c:	003f5806 	br	80aba0 <_dtoa_r+0x7c>
  80ae40:	00800434 	movhi	r2,16
  80ae44:	10bfffc4 	addi	r2,r2,-1
  80ae48:	a884703a 	and	r2,r21,r2
  80ae4c:	103fec1e 	bne	r2,zero,80ae00 <_dtoa_r+0x2dc>
  80ae50:	00c020b4 	movhi	r3,130
  80ae54:	18f2fd04 	addi	r3,r3,-13324
  80ae58:	003feb06 	br	80ae08 <_dtoa_r+0x2e4>
  80ae5c:	d8802917 	ldw	r2,164(sp)
  80ae60:	19000204 	addi	r4,r3,8
  80ae64:	11000015 	stw	r4,0(r2)
  80ae68:	003f6206 	br	80abf4 <_dtoa_r+0xd0>
  80ae6c:	ddc00117 	ldw	r23,4(sp)
  80ae70:	d8800217 	ldw	r2,8(sp)
  80ae74:	01000804 	movi	r4,32
  80ae78:	b8c10c84 	addi	r3,r23,1074
  80ae7c:	18a3883a 	add	r17,r3,r2
  80ae80:	2441b80e 	bge	r4,r17,80b564 <_dtoa_r+0xa40>
  80ae84:	00c01004 	movi	r3,64
  80ae88:	1c47c83a 	sub	r3,r3,r17
  80ae8c:	88bff804 	addi	r2,r17,-32
  80ae90:	a8c6983a 	sll	r3,r21,r3
  80ae94:	a084d83a 	srl	r2,r20,r2
  80ae98:	1888b03a 	or	r4,r3,r2
  80ae9c:	08071880 	call	807188 <__floatunsidf>
  80aea0:	1011883a 	mov	r8,r2
  80aea4:	00bf8434 	movhi	r2,65040
  80aea8:	01000044 	movi	r4,1
  80aeac:	10d3883a 	add	r9,r2,r3
  80aeb0:	8dbef344 	addi	r22,r17,-1075
  80aeb4:	d9000815 	stw	r4,32(sp)
  80aeb8:	003f6f06 	br	80ac78 <_dtoa_r+0x154>
  80aebc:	d8001715 	stw	zero,92(sp)
  80aec0:	04400044 	movi	r17,1
  80aec4:	00bfffc4 	movi	r2,-1
  80aec8:	00c00044 	movi	r3,1
  80aecc:	d8800e15 	stw	r2,56(sp)
  80aed0:	d8002615 	stw	zero,152(sp)
  80aed4:	d8800f15 	stw	r2,60(sp)
  80aed8:	d8c00b15 	stw	r3,44(sp)
  80aedc:	1021883a 	mov	r16,r2
  80aee0:	d8801617 	ldw	r2,88(sp)
  80aee4:	10001115 	stw	zero,68(r2)
  80aee8:	d8801617 	ldw	r2,88(sp)
  80aeec:	11401117 	ldw	r5,68(r2)
  80aef0:	1009883a 	mov	r4,r2
  80aef4:	080daf80 	call	80daf8 <_Balloc>
  80aef8:	d8c01617 	ldw	r3,88(sp)
  80aefc:	d8800515 	stw	r2,20(sp)
  80af00:	18801015 	stw	r2,64(r3)
  80af04:	00800384 	movi	r2,14
  80af08:	14006836 	bltu	r2,r16,80b0ac <_dtoa_r+0x588>
  80af0c:	8805003a 	cmpeq	r2,r17,zero
  80af10:	1000661e 	bne	r2,zero,80b0ac <_dtoa_r+0x588>
  80af14:	d9000d17 	ldw	r4,52(sp)
  80af18:	0102300e 	bge	zero,r4,80b7dc <_dtoa_r+0xcb8>
  80af1c:	208003cc 	andi	r2,r4,15
  80af20:	100490fa 	slli	r2,r2,3
  80af24:	2025d13a 	srai	r18,r4,4
  80af28:	00c020b4 	movhi	r3,130
  80af2c:	18f31104 	addi	r3,r3,-13244
  80af30:	10c5883a 	add	r2,r2,r3
  80af34:	90c0040c 	andi	r3,r18,16
  80af38:	14000017 	ldw	r16,0(r2)
  80af3c:	14400117 	ldw	r17,4(r2)
  80af40:	18036a1e 	bne	r3,zero,80bcec <_dtoa_r+0x11c8>
  80af44:	05800084 	movi	r22,2
  80af48:	90001026 	beq	r18,zero,80af8c <_dtoa_r+0x468>
  80af4c:	04c020b4 	movhi	r19,130
  80af50:	9cf34304 	addi	r19,r19,-13044
  80af54:	9080004c 	andi	r2,r18,1
  80af58:	1005003a 	cmpeq	r2,r2,zero
  80af5c:	1000081e 	bne	r2,zero,80af80 <_dtoa_r+0x45c>
  80af60:	99800017 	ldw	r6,0(r19)
  80af64:	99c00117 	ldw	r7,4(r19)
  80af68:	880b883a 	mov	r5,r17
  80af6c:	8009883a 	mov	r4,r16
  80af70:	08065c00 	call	8065c0 <__muldf3>
  80af74:	1021883a 	mov	r16,r2
  80af78:	b5800044 	addi	r22,r22,1
  80af7c:	1823883a 	mov	r17,r3
  80af80:	9025d07a 	srai	r18,r18,1
  80af84:	9cc00204 	addi	r19,r19,8
  80af88:	903ff21e 	bne	r18,zero,80af54 <_dtoa_r+0x430>
  80af8c:	a80b883a 	mov	r5,r21
  80af90:	a009883a 	mov	r4,r20
  80af94:	880f883a 	mov	r7,r17
  80af98:	800d883a 	mov	r6,r16
  80af9c:	08069840 	call	806984 <__divdf3>
  80afa0:	1029883a 	mov	r20,r2
  80afa4:	182b883a 	mov	r21,r3
  80afa8:	d8c00c17 	ldw	r3,48(sp)
  80afac:	1805003a 	cmpeq	r2,r3,zero
  80afb0:	1000081e 	bne	r2,zero,80afd4 <_dtoa_r+0x4b0>
  80afb4:	0005883a 	mov	r2,zero
  80afb8:	00cffc34 	movhi	r3,16368
  80afbc:	180f883a 	mov	r7,r3
  80afc0:	a009883a 	mov	r4,r20
  80afc4:	a80b883a 	mov	r5,r21
  80afc8:	100d883a 	mov	r6,r2
  80afcc:	0806dfc0 	call	806dfc <__ltdf2>
  80afd0:	1003fe16 	blt	r2,zero,80bfcc <_dtoa_r+0x14a8>
  80afd4:	b009883a 	mov	r4,r22
  80afd8:	0806f0c0 	call	806f0c <__floatsidf>
  80afdc:	180b883a 	mov	r5,r3
  80afe0:	1009883a 	mov	r4,r2
  80afe4:	a00d883a 	mov	r6,r20
  80afe8:	a80f883a 	mov	r7,r21
  80afec:	08065c00 	call	8065c0 <__muldf3>
  80aff0:	0011883a 	mov	r8,zero
  80aff4:	02500734 	movhi	r9,16412
  80aff8:	1009883a 	mov	r4,r2
  80affc:	180b883a 	mov	r5,r3
  80b000:	480f883a 	mov	r7,r9
  80b004:	400d883a 	mov	r6,r8
  80b008:	080654c0 	call	80654c <__adddf3>
  80b00c:	d9000f17 	ldw	r4,60(sp)
  80b010:	102d883a 	mov	r22,r2
  80b014:	00bf3034 	movhi	r2,64704
  80b018:	18b9883a 	add	fp,r3,r2
  80b01c:	e02f883a 	mov	r23,fp
  80b020:	20028f1e 	bne	r4,zero,80ba60 <_dtoa_r+0xf3c>
  80b024:	0005883a 	mov	r2,zero
  80b028:	00d00534 	movhi	r3,16404
  80b02c:	a009883a 	mov	r4,r20
  80b030:	a80b883a 	mov	r5,r21
  80b034:	180f883a 	mov	r7,r3
  80b038:	100d883a 	mov	r6,r2
  80b03c:	08064cc0 	call	8064cc <__subdf3>
  80b040:	1009883a 	mov	r4,r2
  80b044:	e00f883a 	mov	r7,fp
  80b048:	180b883a 	mov	r5,r3
  80b04c:	b00d883a 	mov	r6,r22
  80b050:	1025883a 	mov	r18,r2
  80b054:	1827883a 	mov	r19,r3
  80b058:	0806cec0 	call	806cec <__gtdf2>
  80b05c:	00834f16 	blt	zero,r2,80bd9c <_dtoa_r+0x1278>
  80b060:	e0e0003c 	xorhi	r3,fp,32768
  80b064:	9009883a 	mov	r4,r18
  80b068:	980b883a 	mov	r5,r19
  80b06c:	180f883a 	mov	r7,r3
  80b070:	b00d883a 	mov	r6,r22
  80b074:	0806dfc0 	call	806dfc <__ltdf2>
  80b078:	1000080e 	bge	r2,zero,80b09c <_dtoa_r+0x578>
  80b07c:	0027883a 	mov	r19,zero
  80b080:	0025883a 	mov	r18,zero
  80b084:	d8802617 	ldw	r2,152(sp)
  80b088:	df000517 	ldw	fp,20(sp)
  80b08c:	d8000615 	stw	zero,24(sp)
  80b090:	0084303a 	nor	r2,zero,r2
  80b094:	d8800d15 	stw	r2,52(sp)
  80b098:	00019b06 	br	80b708 <_dtoa_r+0xbe4>
  80b09c:	d9801217 	ldw	r6,72(sp)
  80b0a0:	d8801317 	ldw	r2,76(sp)
  80b0a4:	3029883a 	mov	r20,r6
  80b0a8:	102b883a 	mov	r21,r2
  80b0ac:	d8c00217 	ldw	r3,8(sp)
  80b0b0:	18008516 	blt	r3,zero,80b2c8 <_dtoa_r+0x7a4>
  80b0b4:	d9000d17 	ldw	r4,52(sp)
  80b0b8:	00800384 	movi	r2,14
  80b0bc:	11008216 	blt	r2,r4,80b2c8 <_dtoa_r+0x7a4>
  80b0c0:	200490fa 	slli	r2,r4,3
  80b0c4:	d9802617 	ldw	r6,152(sp)
  80b0c8:	00c020b4 	movhi	r3,130
  80b0cc:	18f31104 	addi	r3,r3,-13244
  80b0d0:	10c5883a 	add	r2,r2,r3
  80b0d4:	14800017 	ldw	r18,0(r2)
  80b0d8:	14c00117 	ldw	r19,4(r2)
  80b0dc:	30031e16 	blt	r6,zero,80bd58 <_dtoa_r+0x1234>
  80b0e0:	d9000517 	ldw	r4,20(sp)
  80b0e4:	d8c00f17 	ldw	r3,60(sp)
  80b0e8:	a823883a 	mov	r17,r21
  80b0ec:	a021883a 	mov	r16,r20
  80b0f0:	192b883a 	add	r21,r3,r4
  80b0f4:	2039883a 	mov	fp,r4
  80b0f8:	00000f06 	br	80b138 <_dtoa_r+0x614>
  80b0fc:	0005883a 	mov	r2,zero
  80b100:	00d00934 	movhi	r3,16420
  80b104:	5009883a 	mov	r4,r10
  80b108:	580b883a 	mov	r5,r11
  80b10c:	180f883a 	mov	r7,r3
  80b110:	100d883a 	mov	r6,r2
  80b114:	08065c00 	call	8065c0 <__muldf3>
  80b118:	180b883a 	mov	r5,r3
  80b11c:	000d883a 	mov	r6,zero
  80b120:	000f883a 	mov	r7,zero
  80b124:	1009883a 	mov	r4,r2
  80b128:	1021883a 	mov	r16,r2
  80b12c:	1823883a 	mov	r17,r3
  80b130:	0806c640 	call	806c64 <__nedf2>
  80b134:	10004526 	beq	r2,zero,80b24c <_dtoa_r+0x728>
  80b138:	900d883a 	mov	r6,r18
  80b13c:	980f883a 	mov	r7,r19
  80b140:	8009883a 	mov	r4,r16
  80b144:	880b883a 	mov	r5,r17
  80b148:	08069840 	call	806984 <__divdf3>
  80b14c:	180b883a 	mov	r5,r3
  80b150:	1009883a 	mov	r4,r2
  80b154:	08070040 	call	807004 <__fixdfsi>
  80b158:	1009883a 	mov	r4,r2
  80b15c:	1029883a 	mov	r20,r2
  80b160:	0806f0c0 	call	806f0c <__floatsidf>
  80b164:	180f883a 	mov	r7,r3
  80b168:	9009883a 	mov	r4,r18
  80b16c:	980b883a 	mov	r5,r19
  80b170:	100d883a 	mov	r6,r2
  80b174:	08065c00 	call	8065c0 <__muldf3>
  80b178:	180f883a 	mov	r7,r3
  80b17c:	880b883a 	mov	r5,r17
  80b180:	8009883a 	mov	r4,r16
  80b184:	100d883a 	mov	r6,r2
  80b188:	08064cc0 	call	8064cc <__subdf3>
  80b18c:	1015883a 	mov	r10,r2
  80b190:	a0800c04 	addi	r2,r20,48
  80b194:	e0800005 	stb	r2,0(fp)
  80b198:	e7000044 	addi	fp,fp,1
  80b19c:	1817883a 	mov	r11,r3
  80b1a0:	e57fd61e 	bne	fp,r21,80b0fc <_dtoa_r+0x5d8>
  80b1a4:	500d883a 	mov	r6,r10
  80b1a8:	180f883a 	mov	r7,r3
  80b1ac:	5009883a 	mov	r4,r10
  80b1b0:	180b883a 	mov	r5,r3
  80b1b4:	080654c0 	call	80654c <__adddf3>
  80b1b8:	100d883a 	mov	r6,r2
  80b1bc:	9009883a 	mov	r4,r18
  80b1c0:	980b883a 	mov	r5,r19
  80b1c4:	180f883a 	mov	r7,r3
  80b1c8:	1021883a 	mov	r16,r2
  80b1cc:	1823883a 	mov	r17,r3
  80b1d0:	0806dfc0 	call	806dfc <__ltdf2>
  80b1d4:	10000816 	blt	r2,zero,80b1f8 <_dtoa_r+0x6d4>
  80b1d8:	980b883a 	mov	r5,r19
  80b1dc:	800d883a 	mov	r6,r16
  80b1e0:	880f883a 	mov	r7,r17
  80b1e4:	9009883a 	mov	r4,r18
  80b1e8:	0806bdc0 	call	806bdc <__eqdf2>
  80b1ec:	1000171e 	bne	r2,zero,80b24c <_dtoa_r+0x728>
  80b1f0:	a080004c 	andi	r2,r20,1
  80b1f4:	10001526 	beq	r2,zero,80b24c <_dtoa_r+0x728>
  80b1f8:	d8800d17 	ldw	r2,52(sp)
  80b1fc:	d8800415 	stw	r2,16(sp)
  80b200:	e009883a 	mov	r4,fp
  80b204:	213fffc4 	addi	r4,r4,-1
  80b208:	20c00007 	ldb	r3,0(r4)
  80b20c:	00800e44 	movi	r2,57
  80b210:	1880081e 	bne	r3,r2,80b234 <_dtoa_r+0x710>
  80b214:	d8800517 	ldw	r2,20(sp)
  80b218:	113ffa1e 	bne	r2,r4,80b204 <_dtoa_r+0x6e0>
  80b21c:	d8c00417 	ldw	r3,16(sp)
  80b220:	d9800517 	ldw	r6,20(sp)
  80b224:	00800c04 	movi	r2,48
  80b228:	18c00044 	addi	r3,r3,1
  80b22c:	d8c00415 	stw	r3,16(sp)
  80b230:	30800005 	stb	r2,0(r6)
  80b234:	20800003 	ldbu	r2,0(r4)
  80b238:	d8c00417 	ldw	r3,16(sp)
  80b23c:	27000044 	addi	fp,r4,1
  80b240:	10800044 	addi	r2,r2,1
  80b244:	d8c00d15 	stw	r3,52(sp)
  80b248:	20800005 	stb	r2,0(r4)
  80b24c:	d9001617 	ldw	r4,88(sp)
  80b250:	d9400717 	ldw	r5,28(sp)
  80b254:	080d5780 	call	80d578 <_Bfree>
  80b258:	e0000005 	stb	zero,0(fp)
  80b25c:	d9800d17 	ldw	r6,52(sp)
  80b260:	d8c02717 	ldw	r3,156(sp)
  80b264:	d9002917 	ldw	r4,164(sp)
  80b268:	30800044 	addi	r2,r6,1
  80b26c:	18800015 	stw	r2,0(r3)
  80b270:	20029c26 	beq	r4,zero,80bce4 <_dtoa_r+0x11c0>
  80b274:	d8c00517 	ldw	r3,20(sp)
  80b278:	27000015 	stw	fp,0(r4)
  80b27c:	003e5d06 	br	80abf4 <_dtoa_r+0xd0>
  80b280:	d9800d17 	ldw	r6,52(sp)
  80b284:	00c020b4 	movhi	r3,130
  80b288:	18f31104 	addi	r3,r3,-13244
  80b28c:	d9001217 	ldw	r4,72(sp)
  80b290:	300490fa 	slli	r2,r6,3
  80b294:	d9401317 	ldw	r5,76(sp)
  80b298:	10c5883a 	add	r2,r2,r3
  80b29c:	12000017 	ldw	r8,0(r2)
  80b2a0:	12400117 	ldw	r9,4(r2)
  80b2a4:	400d883a 	mov	r6,r8
  80b2a8:	480f883a 	mov	r7,r9
  80b2ac:	0806dfc0 	call	806dfc <__ltdf2>
  80b2b0:	1000030e 	bge	r2,zero,80b2c0 <_dtoa_r+0x79c>
  80b2b4:	d8800d17 	ldw	r2,52(sp)
  80b2b8:	10bfffc4 	addi	r2,r2,-1
  80b2bc:	d8800d15 	stw	r2,52(sp)
  80b2c0:	d8000c15 	stw	zero,48(sp)
  80b2c4:	003ea806 	br	80ad68 <_dtoa_r+0x244>
  80b2c8:	d9000b17 	ldw	r4,44(sp)
  80b2cc:	202cc03a 	cmpne	r22,r4,zero
  80b2d0:	b000c71e 	bne	r22,zero,80b5f0 <_dtoa_r+0xacc>
  80b2d4:	dc001117 	ldw	r16,68(sp)
  80b2d8:	dc801017 	ldw	r18,64(sp)
  80b2dc:	0027883a 	mov	r19,zero
  80b2e0:	04000b0e 	bge	zero,r16,80b310 <_dtoa_r+0x7ec>
  80b2e4:	d8c00a17 	ldw	r3,40(sp)
  80b2e8:	00c0090e 	bge	zero,r3,80b310 <_dtoa_r+0x7ec>
  80b2ec:	8005883a 	mov	r2,r16
  80b2f0:	1c011316 	blt	r3,r16,80b740 <_dtoa_r+0xc1c>
  80b2f4:	d9000a17 	ldw	r4,40(sp)
  80b2f8:	d9801117 	ldw	r6,68(sp)
  80b2fc:	80a1c83a 	sub	r16,r16,r2
  80b300:	2089c83a 	sub	r4,r4,r2
  80b304:	308dc83a 	sub	r6,r6,r2
  80b308:	d9000a15 	stw	r4,40(sp)
  80b30c:	d9801115 	stw	r6,68(sp)
  80b310:	d8801017 	ldw	r2,64(sp)
  80b314:	0080150e 	bge	zero,r2,80b36c <_dtoa_r+0x848>
  80b318:	d8c00b17 	ldw	r3,44(sp)
  80b31c:	1805003a 	cmpeq	r2,r3,zero
  80b320:	1001c91e 	bne	r2,zero,80ba48 <_dtoa_r+0xf24>
  80b324:	04800e0e 	bge	zero,r18,80b360 <_dtoa_r+0x83c>
  80b328:	d9001617 	ldw	r4,88(sp)
  80b32c:	980b883a 	mov	r5,r19
  80b330:	900d883a 	mov	r6,r18
  80b334:	080e32c0 	call	80e32c <__pow5mult>
  80b338:	d9001617 	ldw	r4,88(sp)
  80b33c:	d9800717 	ldw	r6,28(sp)
  80b340:	100b883a 	mov	r5,r2
  80b344:	1027883a 	mov	r19,r2
  80b348:	080e0080 	call	80e008 <__multiply>
  80b34c:	d9001617 	ldw	r4,88(sp)
  80b350:	d9400717 	ldw	r5,28(sp)
  80b354:	1023883a 	mov	r17,r2
  80b358:	080d5780 	call	80d578 <_Bfree>
  80b35c:	dc400715 	stw	r17,28(sp)
  80b360:	d9001017 	ldw	r4,64(sp)
  80b364:	248dc83a 	sub	r6,r4,r18
  80b368:	30010e1e 	bne	r6,zero,80b7a4 <_dtoa_r+0xc80>
  80b36c:	d9001617 	ldw	r4,88(sp)
  80b370:	04400044 	movi	r17,1
  80b374:	880b883a 	mov	r5,r17
  80b378:	080e1f00 	call	80e1f0 <__i2b>
  80b37c:	d9800917 	ldw	r6,36(sp)
  80b380:	1025883a 	mov	r18,r2
  80b384:	0180040e 	bge	zero,r6,80b398 <_dtoa_r+0x874>
  80b388:	d9001617 	ldw	r4,88(sp)
  80b38c:	100b883a 	mov	r5,r2
  80b390:	080e32c0 	call	80e32c <__pow5mult>
  80b394:	1025883a 	mov	r18,r2
  80b398:	d8801717 	ldw	r2,92(sp)
  80b39c:	8880f30e 	bge	r17,r2,80b76c <_dtoa_r+0xc48>
  80b3a0:	0023883a 	mov	r17,zero
  80b3a4:	d9800917 	ldw	r6,36(sp)
  80b3a8:	30019e1e 	bne	r6,zero,80ba24 <_dtoa_r+0xf00>
  80b3ac:	00c00044 	movi	r3,1
  80b3b0:	d9000a17 	ldw	r4,40(sp)
  80b3b4:	20c5883a 	add	r2,r4,r3
  80b3b8:	10c007cc 	andi	r3,r2,31
  80b3bc:	1800841e 	bne	r3,zero,80b5d0 <_dtoa_r+0xaac>
  80b3c0:	00800704 	movi	r2,28
  80b3c4:	d9000a17 	ldw	r4,40(sp)
  80b3c8:	d9801117 	ldw	r6,68(sp)
  80b3cc:	80a1883a 	add	r16,r16,r2
  80b3d0:	2089883a 	add	r4,r4,r2
  80b3d4:	308d883a 	add	r6,r6,r2
  80b3d8:	d9000a15 	stw	r4,40(sp)
  80b3dc:	d9801115 	stw	r6,68(sp)
  80b3e0:	d8801117 	ldw	r2,68(sp)
  80b3e4:	0080050e 	bge	zero,r2,80b3fc <_dtoa_r+0x8d8>
  80b3e8:	d9400717 	ldw	r5,28(sp)
  80b3ec:	d9001617 	ldw	r4,88(sp)
  80b3f0:	100d883a 	mov	r6,r2
  80b3f4:	080debc0 	call	80debc <__lshift>
  80b3f8:	d8800715 	stw	r2,28(sp)
  80b3fc:	d8c00a17 	ldw	r3,40(sp)
  80b400:	00c0050e 	bge	zero,r3,80b418 <_dtoa_r+0x8f4>
  80b404:	d9001617 	ldw	r4,88(sp)
  80b408:	900b883a 	mov	r5,r18
  80b40c:	180d883a 	mov	r6,r3
  80b410:	080debc0 	call	80debc <__lshift>
  80b414:	1025883a 	mov	r18,r2
  80b418:	d9000c17 	ldw	r4,48(sp)
  80b41c:	2005003a 	cmpeq	r2,r4,zero
  80b420:	10016f26 	beq	r2,zero,80b9e0 <_dtoa_r+0xebc>
  80b424:	d9000f17 	ldw	r4,60(sp)
  80b428:	0102170e 	bge	zero,r4,80bc88 <_dtoa_r+0x1164>
  80b42c:	d9800b17 	ldw	r6,44(sp)
  80b430:	3005003a 	cmpeq	r2,r6,zero
  80b434:	1000881e 	bne	r2,zero,80b658 <_dtoa_r+0xb34>
  80b438:	0400050e 	bge	zero,r16,80b450 <_dtoa_r+0x92c>
  80b43c:	d9001617 	ldw	r4,88(sp)
  80b440:	980b883a 	mov	r5,r19
  80b444:	800d883a 	mov	r6,r16
  80b448:	080debc0 	call	80debc <__lshift>
  80b44c:	1027883a 	mov	r19,r2
  80b450:	8804c03a 	cmpne	r2,r17,zero
  80b454:	1002541e 	bne	r2,zero,80bda8 <_dtoa_r+0x1284>
  80b458:	980b883a 	mov	r5,r19
  80b45c:	dd800517 	ldw	r22,20(sp)
  80b460:	dcc00615 	stw	r19,24(sp)
  80b464:	a700004c 	andi	fp,r20,1
  80b468:	2827883a 	mov	r19,r5
  80b46c:	d9000717 	ldw	r4,28(sp)
  80b470:	900b883a 	mov	r5,r18
  80b474:	080a90c0 	call	80a90c <quorem>
  80b478:	d9000717 	ldw	r4,28(sp)
  80b47c:	d9400617 	ldw	r5,24(sp)
  80b480:	1023883a 	mov	r17,r2
  80b484:	8dc00c04 	addi	r23,r17,48
  80b488:	080d6d40 	call	80d6d4 <__mcmp>
  80b48c:	d9001617 	ldw	r4,88(sp)
  80b490:	900b883a 	mov	r5,r18
  80b494:	980d883a 	mov	r6,r19
  80b498:	1029883a 	mov	r20,r2
  80b49c:	080dd300 	call	80dd30 <__mdiff>
  80b4a0:	102b883a 	mov	r21,r2
  80b4a4:	10800317 	ldw	r2,12(r2)
  80b4a8:	1001281e 	bne	r2,zero,80b94c <_dtoa_r+0xe28>
  80b4ac:	d9000717 	ldw	r4,28(sp)
  80b4b0:	a80b883a 	mov	r5,r21
  80b4b4:	080d6d40 	call	80d6d4 <__mcmp>
  80b4b8:	d9001617 	ldw	r4,88(sp)
  80b4bc:	1021883a 	mov	r16,r2
  80b4c0:	a80b883a 	mov	r5,r21
  80b4c4:	080d5780 	call	80d578 <_Bfree>
  80b4c8:	8000041e 	bne	r16,zero,80b4dc <_dtoa_r+0x9b8>
  80b4cc:	d8801717 	ldw	r2,92(sp)
  80b4d0:	1000021e 	bne	r2,zero,80b4dc <_dtoa_r+0x9b8>
  80b4d4:	e004c03a 	cmpne	r2,fp,zero
  80b4d8:	10011726 	beq	r2,zero,80b938 <_dtoa_r+0xe14>
  80b4dc:	a0010616 	blt	r20,zero,80b8f8 <_dtoa_r+0xdd4>
  80b4e0:	a000041e 	bne	r20,zero,80b4f4 <_dtoa_r+0x9d0>
  80b4e4:	d8c01717 	ldw	r3,92(sp)
  80b4e8:	1800021e 	bne	r3,zero,80b4f4 <_dtoa_r+0x9d0>
  80b4ec:	e004c03a 	cmpne	r2,fp,zero
  80b4f0:	10010126 	beq	r2,zero,80b8f8 <_dtoa_r+0xdd4>
  80b4f4:	04023d16 	blt	zero,r16,80bdec <_dtoa_r+0x12c8>
  80b4f8:	b5c00005 	stb	r23,0(r22)
  80b4fc:	d9800517 	ldw	r6,20(sp)
  80b500:	d9000f17 	ldw	r4,60(sp)
  80b504:	b5800044 	addi	r22,r22,1
  80b508:	3105883a 	add	r2,r6,r4
  80b50c:	b0806526 	beq	r22,r2,80b6a4 <_dtoa_r+0xb80>
  80b510:	d9400717 	ldw	r5,28(sp)
  80b514:	d9001617 	ldw	r4,88(sp)
  80b518:	01800284 	movi	r6,10
  80b51c:	000f883a 	mov	r7,zero
  80b520:	080e22c0 	call	80e22c <__multadd>
  80b524:	d8800715 	stw	r2,28(sp)
  80b528:	d8800617 	ldw	r2,24(sp)
  80b52c:	14c10c26 	beq	r2,r19,80b960 <_dtoa_r+0xe3c>
  80b530:	d9400617 	ldw	r5,24(sp)
  80b534:	d9001617 	ldw	r4,88(sp)
  80b538:	01800284 	movi	r6,10
  80b53c:	000f883a 	mov	r7,zero
  80b540:	080e22c0 	call	80e22c <__multadd>
  80b544:	d9001617 	ldw	r4,88(sp)
  80b548:	980b883a 	mov	r5,r19
  80b54c:	01800284 	movi	r6,10
  80b550:	000f883a 	mov	r7,zero
  80b554:	d8800615 	stw	r2,24(sp)
  80b558:	080e22c0 	call	80e22c <__multadd>
  80b55c:	1027883a 	mov	r19,r2
  80b560:	003fc206 	br	80b46c <_dtoa_r+0x948>
  80b564:	2445c83a 	sub	r2,r4,r17
  80b568:	a088983a 	sll	r4,r20,r2
  80b56c:	003e4b06 	br	80ae9c <_dtoa_r+0x378>
  80b570:	01bfffc4 	movi	r6,-1
  80b574:	00800044 	movi	r2,1
  80b578:	d9800e15 	stw	r6,56(sp)
  80b57c:	d9800f15 	stw	r6,60(sp)
  80b580:	d8800b15 	stw	r2,44(sp)
  80b584:	d8c01617 	ldw	r3,88(sp)
  80b588:	008005c4 	movi	r2,23
  80b58c:	18001115 	stw	zero,68(r3)
  80b590:	1580082e 	bgeu	r2,r22,80b5b4 <_dtoa_r+0xa90>
  80b594:	00c00104 	movi	r3,4
  80b598:	0009883a 	mov	r4,zero
  80b59c:	18c7883a 	add	r3,r3,r3
  80b5a0:	18800504 	addi	r2,r3,20
  80b5a4:	21000044 	addi	r4,r4,1
  80b5a8:	b0bffc2e 	bgeu	r22,r2,80b59c <_dtoa_r+0xa78>
  80b5ac:	d9801617 	ldw	r6,88(sp)
  80b5b0:	31001115 	stw	r4,68(r6)
  80b5b4:	dc000f17 	ldw	r16,60(sp)
  80b5b8:	003e4b06 	br	80aee8 <_dtoa_r+0x3c4>
  80b5bc:	d9801717 	ldw	r6,92(sp)
  80b5c0:	0023883a 	mov	r17,zero
  80b5c4:	31bfff04 	addi	r6,r6,-4
  80b5c8:	d9801715 	stw	r6,92(sp)
  80b5cc:	003df806 	br	80adb0 <_dtoa_r+0x28c>
  80b5d0:	00800804 	movi	r2,32
  80b5d4:	10c9c83a 	sub	r4,r2,r3
  80b5d8:	00c00104 	movi	r3,4
  80b5dc:	19005a16 	blt	r3,r4,80b748 <_dtoa_r+0xc24>
  80b5e0:	008000c4 	movi	r2,3
  80b5e4:	113f7e16 	blt	r2,r4,80b3e0 <_dtoa_r+0x8bc>
  80b5e8:	20800704 	addi	r2,r4,28
  80b5ec:	003f7506 	br	80b3c4 <_dtoa_r+0x8a0>
  80b5f0:	d9801717 	ldw	r6,92(sp)
  80b5f4:	00800044 	movi	r2,1
  80b5f8:	1180a10e 	bge	r2,r6,80b880 <_dtoa_r+0xd5c>
  80b5fc:	d9800f17 	ldw	r6,60(sp)
  80b600:	d8c01017 	ldw	r3,64(sp)
  80b604:	30bfffc4 	addi	r2,r6,-1
  80b608:	1881c616 	blt	r3,r2,80bd24 <_dtoa_r+0x1200>
  80b60c:	18a5c83a 	sub	r18,r3,r2
  80b610:	d8800f17 	ldw	r2,60(sp)
  80b614:	10026216 	blt	r2,zero,80bfa0 <_dtoa_r+0x147c>
  80b618:	dc001117 	ldw	r16,68(sp)
  80b61c:	1007883a 	mov	r3,r2
  80b620:	d9800a17 	ldw	r6,40(sp)
  80b624:	d8801117 	ldw	r2,68(sp)
  80b628:	d9001617 	ldw	r4,88(sp)
  80b62c:	30cd883a 	add	r6,r6,r3
  80b630:	10c5883a 	add	r2,r2,r3
  80b634:	01400044 	movi	r5,1
  80b638:	d9800a15 	stw	r6,40(sp)
  80b63c:	d8801115 	stw	r2,68(sp)
  80b640:	080e1f00 	call	80e1f0 <__i2b>
  80b644:	1027883a 	mov	r19,r2
  80b648:	003f2506 	br	80b2e0 <_dtoa_r+0x7bc>
  80b64c:	00c020b4 	movhi	r3,130
  80b650:	18f2f404 	addi	r3,r3,-13360
  80b654:	003d6706 	br	80abf4 <_dtoa_r+0xd0>
  80b658:	dd800517 	ldw	r22,20(sp)
  80b65c:	04000044 	movi	r16,1
  80b660:	00000706 	br	80b680 <_dtoa_r+0xb5c>
  80b664:	d9400717 	ldw	r5,28(sp)
  80b668:	d9001617 	ldw	r4,88(sp)
  80b66c:	01800284 	movi	r6,10
  80b670:	000f883a 	mov	r7,zero
  80b674:	080e22c0 	call	80e22c <__multadd>
  80b678:	d8800715 	stw	r2,28(sp)
  80b67c:	84000044 	addi	r16,r16,1
  80b680:	d9000717 	ldw	r4,28(sp)
  80b684:	900b883a 	mov	r5,r18
  80b688:	080a90c0 	call	80a90c <quorem>
  80b68c:	15c00c04 	addi	r23,r2,48
  80b690:	b5c00005 	stb	r23,0(r22)
  80b694:	d8c00f17 	ldw	r3,60(sp)
  80b698:	b5800044 	addi	r22,r22,1
  80b69c:	80fff116 	blt	r16,r3,80b664 <_dtoa_r+0xb40>
  80b6a0:	d8000615 	stw	zero,24(sp)
  80b6a4:	d9400717 	ldw	r5,28(sp)
  80b6a8:	d9001617 	ldw	r4,88(sp)
  80b6ac:	01800044 	movi	r6,1
  80b6b0:	080debc0 	call	80debc <__lshift>
  80b6b4:	1009883a 	mov	r4,r2
  80b6b8:	900b883a 	mov	r5,r18
  80b6bc:	d8800715 	stw	r2,28(sp)
  80b6c0:	080d6d40 	call	80d6d4 <__mcmp>
  80b6c4:	00803c0e 	bge	zero,r2,80b7b8 <_dtoa_r+0xc94>
  80b6c8:	b009883a 	mov	r4,r22
  80b6cc:	213fffc4 	addi	r4,r4,-1
  80b6d0:	21400003 	ldbu	r5,0(r4)
  80b6d4:	00800e44 	movi	r2,57
  80b6d8:	28c03fcc 	andi	r3,r5,255
  80b6dc:	18c0201c 	xori	r3,r3,128
  80b6e0:	18ffe004 	addi	r3,r3,-128
  80b6e4:	1881981e 	bne	r3,r2,80bd48 <_dtoa_r+0x1224>
  80b6e8:	d9800517 	ldw	r6,20(sp)
  80b6ec:	21bff71e 	bne	r4,r6,80b6cc <_dtoa_r+0xba8>
  80b6f0:	d8800d17 	ldw	r2,52(sp)
  80b6f4:	37000044 	addi	fp,r6,1
  80b6f8:	10800044 	addi	r2,r2,1
  80b6fc:	d8800d15 	stw	r2,52(sp)
  80b700:	00800c44 	movi	r2,49
  80b704:	30800005 	stb	r2,0(r6)
  80b708:	d9001617 	ldw	r4,88(sp)
  80b70c:	900b883a 	mov	r5,r18
  80b710:	080d5780 	call	80d578 <_Bfree>
  80b714:	983ecd26 	beq	r19,zero,80b24c <_dtoa_r+0x728>
  80b718:	d8c00617 	ldw	r3,24(sp)
  80b71c:	18000426 	beq	r3,zero,80b730 <_dtoa_r+0xc0c>
  80b720:	1cc00326 	beq	r3,r19,80b730 <_dtoa_r+0xc0c>
  80b724:	d9001617 	ldw	r4,88(sp)
  80b728:	180b883a 	mov	r5,r3
  80b72c:	080d5780 	call	80d578 <_Bfree>
  80b730:	d9001617 	ldw	r4,88(sp)
  80b734:	980b883a 	mov	r5,r19
  80b738:	080d5780 	call	80d578 <_Bfree>
  80b73c:	003ec306 	br	80b24c <_dtoa_r+0x728>
  80b740:	1805883a 	mov	r2,r3
  80b744:	003eeb06 	br	80b2f4 <_dtoa_r+0x7d0>
  80b748:	d9800a17 	ldw	r6,40(sp)
  80b74c:	d8c01117 	ldw	r3,68(sp)
  80b750:	20bfff04 	addi	r2,r4,-4
  80b754:	308d883a 	add	r6,r6,r2
  80b758:	1887883a 	add	r3,r3,r2
  80b75c:	80a1883a 	add	r16,r16,r2
  80b760:	d9800a15 	stw	r6,40(sp)
  80b764:	d8c01115 	stw	r3,68(sp)
  80b768:	003f1d06 	br	80b3e0 <_dtoa_r+0x8bc>
  80b76c:	a03f0c1e 	bne	r20,zero,80b3a0 <_dtoa_r+0x87c>
  80b770:	00800434 	movhi	r2,16
  80b774:	10bfffc4 	addi	r2,r2,-1
  80b778:	a884703a 	and	r2,r21,r2
  80b77c:	103f081e 	bne	r2,zero,80b3a0 <_dtoa_r+0x87c>
  80b780:	a89ffc2c 	andhi	r2,r21,32752
  80b784:	103f0626 	beq	r2,zero,80b3a0 <_dtoa_r+0x87c>
  80b788:	d8c01117 	ldw	r3,68(sp)
  80b78c:	d9000a17 	ldw	r4,40(sp)
  80b790:	18c00044 	addi	r3,r3,1
  80b794:	21000044 	addi	r4,r4,1
  80b798:	d8c01115 	stw	r3,68(sp)
  80b79c:	d9000a15 	stw	r4,40(sp)
  80b7a0:	003f0006 	br	80b3a4 <_dtoa_r+0x880>
  80b7a4:	d9400717 	ldw	r5,28(sp)
  80b7a8:	d9001617 	ldw	r4,88(sp)
  80b7ac:	080e32c0 	call	80e32c <__pow5mult>
  80b7b0:	d8800715 	stw	r2,28(sp)
  80b7b4:	003eed06 	br	80b36c <_dtoa_r+0x848>
  80b7b8:	1000021e 	bne	r2,zero,80b7c4 <_dtoa_r+0xca0>
  80b7bc:	b880004c 	andi	r2,r23,1
  80b7c0:	103fc11e 	bne	r2,zero,80b6c8 <_dtoa_r+0xba4>
  80b7c4:	b5bfffc4 	addi	r22,r22,-1
  80b7c8:	b0c00007 	ldb	r3,0(r22)
  80b7cc:	00800c04 	movi	r2,48
  80b7d0:	18bffc26 	beq	r3,r2,80b7c4 <_dtoa_r+0xca0>
  80b7d4:	b7000044 	addi	fp,r22,1
  80b7d8:	003fcb06 	br	80b708 <_dtoa_r+0xbe4>
  80b7dc:	d9800d17 	ldw	r6,52(sp)
  80b7e0:	018fc83a 	sub	r7,zero,r6
  80b7e4:	3801f726 	beq	r7,zero,80bfc4 <_dtoa_r+0x14a0>
  80b7e8:	398003cc 	andi	r6,r7,15
  80b7ec:	300c90fa 	slli	r6,r6,3
  80b7f0:	014020b4 	movhi	r5,130
  80b7f4:	29731104 	addi	r5,r5,-13244
  80b7f8:	d9001217 	ldw	r4,72(sp)
  80b7fc:	314d883a 	add	r6,r6,r5
  80b800:	30c00117 	ldw	r3,4(r6)
  80b804:	30800017 	ldw	r2,0(r6)
  80b808:	d9401317 	ldw	r5,76(sp)
  80b80c:	3821d13a 	srai	r16,r7,4
  80b810:	100d883a 	mov	r6,r2
  80b814:	180f883a 	mov	r7,r3
  80b818:	08065c00 	call	8065c0 <__muldf3>
  80b81c:	1011883a 	mov	r8,r2
  80b820:	1813883a 	mov	r9,r3
  80b824:	1029883a 	mov	r20,r2
  80b828:	182b883a 	mov	r21,r3
  80b82c:	8001e526 	beq	r16,zero,80bfc4 <_dtoa_r+0x14a0>
  80b830:	05800084 	movi	r22,2
  80b834:	044020b4 	movhi	r17,130
  80b838:	8c734304 	addi	r17,r17,-13044
  80b83c:	8080004c 	andi	r2,r16,1
  80b840:	1005003a 	cmpeq	r2,r2,zero
  80b844:	1000081e 	bne	r2,zero,80b868 <_dtoa_r+0xd44>
  80b848:	89800017 	ldw	r6,0(r17)
  80b84c:	89c00117 	ldw	r7,4(r17)
  80b850:	480b883a 	mov	r5,r9
  80b854:	4009883a 	mov	r4,r8
  80b858:	08065c00 	call	8065c0 <__muldf3>
  80b85c:	1011883a 	mov	r8,r2
  80b860:	b5800044 	addi	r22,r22,1
  80b864:	1813883a 	mov	r9,r3
  80b868:	8021d07a 	srai	r16,r16,1
  80b86c:	8c400204 	addi	r17,r17,8
  80b870:	803ff21e 	bne	r16,zero,80b83c <_dtoa_r+0xd18>
  80b874:	4029883a 	mov	r20,r8
  80b878:	482b883a 	mov	r21,r9
  80b87c:	003dca06 	br	80afa8 <_dtoa_r+0x484>
  80b880:	d9000817 	ldw	r4,32(sp)
  80b884:	2005003a 	cmpeq	r2,r4,zero
  80b888:	1001f61e 	bne	r2,zero,80c064 <_dtoa_r+0x1540>
  80b88c:	dc001117 	ldw	r16,68(sp)
  80b890:	dc801017 	ldw	r18,64(sp)
  80b894:	18c10cc4 	addi	r3,r3,1075
  80b898:	003f6106 	br	80b620 <_dtoa_r+0xafc>
  80b89c:	d8000b15 	stw	zero,44(sp)
  80b8a0:	d9802617 	ldw	r6,152(sp)
  80b8a4:	d8c00d17 	ldw	r3,52(sp)
  80b8a8:	30800044 	addi	r2,r6,1
  80b8ac:	18ad883a 	add	r22,r3,r2
  80b8b0:	b13fffc4 	addi	r4,r22,-1
  80b8b4:	d9000e15 	stw	r4,56(sp)
  80b8b8:	0581f60e 	bge	zero,r22,80c094 <_dtoa_r+0x1570>
  80b8bc:	dd800f15 	stw	r22,60(sp)
  80b8c0:	003f3006 	br	80b584 <_dtoa_r+0xa60>
  80b8c4:	d8000b15 	stw	zero,44(sp)
  80b8c8:	d9002617 	ldw	r4,152(sp)
  80b8cc:	0101eb0e 	bge	zero,r4,80c07c <_dtoa_r+0x1558>
  80b8d0:	202d883a 	mov	r22,r4
  80b8d4:	d9000e15 	stw	r4,56(sp)
  80b8d8:	d9000f15 	stw	r4,60(sp)
  80b8dc:	003f2906 	br	80b584 <_dtoa_r+0xa60>
  80b8e0:	01800044 	movi	r6,1
  80b8e4:	d9800b15 	stw	r6,44(sp)
  80b8e8:	003ff706 	br	80b8c8 <_dtoa_r+0xda4>
  80b8ec:	01000044 	movi	r4,1
  80b8f0:	d9000b15 	stw	r4,44(sp)
  80b8f4:	003fea06 	br	80b8a0 <_dtoa_r+0xd7c>
  80b8f8:	04000c0e 	bge	zero,r16,80b92c <_dtoa_r+0xe08>
  80b8fc:	d9400717 	ldw	r5,28(sp)
  80b900:	d9001617 	ldw	r4,88(sp)
  80b904:	01800044 	movi	r6,1
  80b908:	080debc0 	call	80debc <__lshift>
  80b90c:	1009883a 	mov	r4,r2
  80b910:	900b883a 	mov	r5,r18
  80b914:	d8800715 	stw	r2,28(sp)
  80b918:	080d6d40 	call	80d6d4 <__mcmp>
  80b91c:	0081e00e 	bge	zero,r2,80c0a0 <_dtoa_r+0x157c>
  80b920:	bdc00044 	addi	r23,r23,1
  80b924:	00800e84 	movi	r2,58
  80b928:	b881a226 	beq	r23,r2,80bfb4 <_dtoa_r+0x1490>
  80b92c:	b7000044 	addi	fp,r22,1
  80b930:	b5c00005 	stb	r23,0(r22)
  80b934:	003f7406 	br	80b708 <_dtoa_r+0xbe4>
  80b938:	00800e44 	movi	r2,57
  80b93c:	b8819d26 	beq	r23,r2,80bfb4 <_dtoa_r+0x1490>
  80b940:	053ffa0e 	bge	zero,r20,80b92c <_dtoa_r+0xe08>
  80b944:	8dc00c44 	addi	r23,r17,49
  80b948:	003ff806 	br	80b92c <_dtoa_r+0xe08>
  80b94c:	d9001617 	ldw	r4,88(sp)
  80b950:	a80b883a 	mov	r5,r21
  80b954:	04000044 	movi	r16,1
  80b958:	080d5780 	call	80d578 <_Bfree>
  80b95c:	003edf06 	br	80b4dc <_dtoa_r+0x9b8>
  80b960:	d9001617 	ldw	r4,88(sp)
  80b964:	980b883a 	mov	r5,r19
  80b968:	01800284 	movi	r6,10
  80b96c:	000f883a 	mov	r7,zero
  80b970:	080e22c0 	call	80e22c <__multadd>
  80b974:	1027883a 	mov	r19,r2
  80b978:	d8800615 	stw	r2,24(sp)
  80b97c:	003ebb06 	br	80b46c <_dtoa_r+0x948>
  80b980:	d9801117 	ldw	r6,68(sp)
  80b984:	d8800d17 	ldw	r2,52(sp)
  80b988:	d8000915 	stw	zero,36(sp)
  80b98c:	308dc83a 	sub	r6,r6,r2
  80b990:	0087c83a 	sub	r3,zero,r2
  80b994:	d9801115 	stw	r6,68(sp)
  80b998:	d8c01015 	stw	r3,64(sp)
  80b99c:	003cfe06 	br	80ad98 <_dtoa_r+0x274>
  80b9a0:	018dc83a 	sub	r6,zero,r6
  80b9a4:	d9801115 	stw	r6,68(sp)
  80b9a8:	d8000a15 	stw	zero,40(sp)
  80b9ac:	003cf306 	br	80ad7c <_dtoa_r+0x258>
  80b9b0:	d9000d17 	ldw	r4,52(sp)
  80b9b4:	0806f0c0 	call	806f0c <__floatsidf>
  80b9b8:	880b883a 	mov	r5,r17
  80b9bc:	8009883a 	mov	r4,r16
  80b9c0:	180f883a 	mov	r7,r3
  80b9c4:	100d883a 	mov	r6,r2
  80b9c8:	0806c640 	call	806c64 <__nedf2>
  80b9cc:	103ce126 	beq	r2,zero,80ad54 <_dtoa_r+0x230>
  80b9d0:	d9800d17 	ldw	r6,52(sp)
  80b9d4:	31bfffc4 	addi	r6,r6,-1
  80b9d8:	d9800d15 	stw	r6,52(sp)
  80b9dc:	003cdd06 	br	80ad54 <_dtoa_r+0x230>
  80b9e0:	d9000717 	ldw	r4,28(sp)
  80b9e4:	900b883a 	mov	r5,r18
  80b9e8:	080d6d40 	call	80d6d4 <__mcmp>
  80b9ec:	103e8d0e 	bge	r2,zero,80b424 <_dtoa_r+0x900>
  80b9f0:	d9400717 	ldw	r5,28(sp)
  80b9f4:	d9001617 	ldw	r4,88(sp)
  80b9f8:	01800284 	movi	r6,10
  80b9fc:	000f883a 	mov	r7,zero
  80ba00:	080e22c0 	call	80e22c <__multadd>
  80ba04:	d9800d17 	ldw	r6,52(sp)
  80ba08:	d8800715 	stw	r2,28(sp)
  80ba0c:	31bfffc4 	addi	r6,r6,-1
  80ba10:	d9800d15 	stw	r6,52(sp)
  80ba14:	b001a71e 	bne	r22,zero,80c0b4 <_dtoa_r+0x1590>
  80ba18:	d8800e17 	ldw	r2,56(sp)
  80ba1c:	d8800f15 	stw	r2,60(sp)
  80ba20:	003e8006 	br	80b424 <_dtoa_r+0x900>
  80ba24:	90800417 	ldw	r2,16(r18)
  80ba28:	1085883a 	add	r2,r2,r2
  80ba2c:	1085883a 	add	r2,r2,r2
  80ba30:	1485883a 	add	r2,r2,r18
  80ba34:	11000417 	ldw	r4,16(r2)
  80ba38:	080d5a00 	call	80d5a0 <__hi0bits>
  80ba3c:	00c00804 	movi	r3,32
  80ba40:	1887c83a 	sub	r3,r3,r2
  80ba44:	003e5a06 	br	80b3b0 <_dtoa_r+0x88c>
  80ba48:	d9400717 	ldw	r5,28(sp)
  80ba4c:	d9801017 	ldw	r6,64(sp)
  80ba50:	d9001617 	ldw	r4,88(sp)
  80ba54:	080e32c0 	call	80e32c <__pow5mult>
  80ba58:	d8800715 	stw	r2,28(sp)
  80ba5c:	003e4306 	br	80b36c <_dtoa_r+0x848>
  80ba60:	d9800f17 	ldw	r6,60(sp)
  80ba64:	d8800d17 	ldw	r2,52(sp)
  80ba68:	d9800315 	stw	r6,12(sp)
  80ba6c:	d8800415 	stw	r2,16(sp)
  80ba70:	d8c00b17 	ldw	r3,44(sp)
  80ba74:	1805003a 	cmpeq	r2,r3,zero
  80ba78:	1000e21e 	bne	r2,zero,80be04 <_dtoa_r+0x12e0>
  80ba7c:	d9000317 	ldw	r4,12(sp)
  80ba80:	0005883a 	mov	r2,zero
  80ba84:	00cff834 	movhi	r3,16352
  80ba88:	200c90fa 	slli	r6,r4,3
  80ba8c:	010020b4 	movhi	r4,130
  80ba90:	21331104 	addi	r4,r4,-13244
  80ba94:	180b883a 	mov	r5,r3
  80ba98:	310d883a 	add	r6,r6,r4
  80ba9c:	327fff17 	ldw	r9,-4(r6)
  80baa0:	323ffe17 	ldw	r8,-8(r6)
  80baa4:	1009883a 	mov	r4,r2
  80baa8:	480f883a 	mov	r7,r9
  80baac:	400d883a 	mov	r6,r8
  80bab0:	08069840 	call	806984 <__divdf3>
  80bab4:	180b883a 	mov	r5,r3
  80bab8:	b00d883a 	mov	r6,r22
  80babc:	b80f883a 	mov	r7,r23
  80bac0:	1009883a 	mov	r4,r2
  80bac4:	08064cc0 	call	8064cc <__subdf3>
  80bac8:	a80b883a 	mov	r5,r21
  80bacc:	a009883a 	mov	r4,r20
  80bad0:	d8c01915 	stw	r3,100(sp)
  80bad4:	d8801815 	stw	r2,96(sp)
  80bad8:	08070040 	call	807004 <__fixdfsi>
  80badc:	1009883a 	mov	r4,r2
  80bae0:	1027883a 	mov	r19,r2
  80bae4:	0806f0c0 	call	806f0c <__floatsidf>
  80bae8:	a80b883a 	mov	r5,r21
  80baec:	a009883a 	mov	r4,r20
  80baf0:	180f883a 	mov	r7,r3
  80baf4:	100d883a 	mov	r6,r2
  80baf8:	08064cc0 	call	8064cc <__subdf3>
  80bafc:	d9801817 	ldw	r6,96(sp)
  80bb00:	1823883a 	mov	r17,r3
  80bb04:	d8801415 	stw	r2,80(sp)
  80bb08:	302d883a 	mov	r22,r6
  80bb0c:	d9800517 	ldw	r6,20(sp)
  80bb10:	9cc00c04 	addi	r19,r19,48
  80bb14:	dc401515 	stw	r17,84(sp)
  80bb18:	d8c01917 	ldw	r3,100(sp)
  80bb1c:	34c00005 	stb	r19,0(r6)
  80bb20:	d8800517 	ldw	r2,20(sp)
  80bb24:	d9401917 	ldw	r5,100(sp)
  80bb28:	d9801417 	ldw	r6,80(sp)
  80bb2c:	b009883a 	mov	r4,r22
  80bb30:	880f883a 	mov	r7,r17
  80bb34:	182f883a 	mov	r23,r3
  80bb38:	17000044 	addi	fp,r2,1
  80bb3c:	0806cec0 	call	806cec <__gtdf2>
  80bb40:	00804e16 	blt	zero,r2,80bc7c <_dtoa_r+0x1158>
  80bb44:	d9801417 	ldw	r6,80(sp)
  80bb48:	0005883a 	mov	r2,zero
  80bb4c:	00cffc34 	movhi	r3,16368
  80bb50:	180b883a 	mov	r5,r3
  80bb54:	880f883a 	mov	r7,r17
  80bb58:	1009883a 	mov	r4,r2
  80bb5c:	08064cc0 	call	8064cc <__subdf3>
  80bb60:	d9401917 	ldw	r5,100(sp)
  80bb64:	180f883a 	mov	r7,r3
  80bb68:	b009883a 	mov	r4,r22
  80bb6c:	100d883a 	mov	r6,r2
  80bb70:	0806cec0 	call	806cec <__gtdf2>
  80bb74:	00bda216 	blt	zero,r2,80b200 <_dtoa_r+0x6dc>
  80bb78:	d8c00317 	ldw	r3,12(sp)
  80bb7c:	00800044 	movi	r2,1
  80bb80:	10c01216 	blt	r2,r3,80bbcc <_dtoa_r+0x10a8>
  80bb84:	003d4506 	br	80b09c <_dtoa_r+0x578>
  80bb88:	d9801417 	ldw	r6,80(sp)
  80bb8c:	0005883a 	mov	r2,zero
  80bb90:	00cffc34 	movhi	r3,16368
  80bb94:	180b883a 	mov	r5,r3
  80bb98:	880f883a 	mov	r7,r17
  80bb9c:	1009883a 	mov	r4,r2
  80bba0:	08064cc0 	call	8064cc <__subdf3>
  80bba4:	d9c01b17 	ldw	r7,108(sp)
  80bba8:	180b883a 	mov	r5,r3
  80bbac:	1009883a 	mov	r4,r2
  80bbb0:	b00d883a 	mov	r6,r22
  80bbb4:	0806dfc0 	call	806dfc <__ltdf2>
  80bbb8:	103d9116 	blt	r2,zero,80b200 <_dtoa_r+0x6dc>
  80bbbc:	d9800517 	ldw	r6,20(sp)
  80bbc0:	d9000317 	ldw	r4,12(sp)
  80bbc4:	3105883a 	add	r2,r6,r4
  80bbc8:	e0bd3426 	beq	fp,r2,80b09c <_dtoa_r+0x578>
  80bbcc:	04500934 	movhi	r17,16420
  80bbd0:	0021883a 	mov	r16,zero
  80bbd4:	b80b883a 	mov	r5,r23
  80bbd8:	b009883a 	mov	r4,r22
  80bbdc:	800d883a 	mov	r6,r16
  80bbe0:	880f883a 	mov	r7,r17
  80bbe4:	08065c00 	call	8065c0 <__muldf3>
  80bbe8:	d9401517 	ldw	r5,84(sp)
  80bbec:	d9001417 	ldw	r4,80(sp)
  80bbf0:	880f883a 	mov	r7,r17
  80bbf4:	000d883a 	mov	r6,zero
  80bbf8:	d8801a15 	stw	r2,104(sp)
  80bbfc:	d8c01b15 	stw	r3,108(sp)
  80bc00:	08065c00 	call	8065c0 <__muldf3>
  80bc04:	180b883a 	mov	r5,r3
  80bc08:	1009883a 	mov	r4,r2
  80bc0c:	1823883a 	mov	r17,r3
  80bc10:	1021883a 	mov	r16,r2
  80bc14:	08070040 	call	807004 <__fixdfsi>
  80bc18:	1009883a 	mov	r4,r2
  80bc1c:	102b883a 	mov	r21,r2
  80bc20:	0806f0c0 	call	806f0c <__floatsidf>
  80bc24:	880b883a 	mov	r5,r17
  80bc28:	8009883a 	mov	r4,r16
  80bc2c:	180f883a 	mov	r7,r3
  80bc30:	100d883a 	mov	r6,r2
  80bc34:	08064cc0 	call	8064cc <__subdf3>
  80bc38:	1021883a 	mov	r16,r2
  80bc3c:	d9001b17 	ldw	r4,108(sp)
  80bc40:	1823883a 	mov	r17,r3
  80bc44:	dc001415 	stw	r16,80(sp)
  80bc48:	ad400c04 	addi	r21,r21,48
  80bc4c:	dc401515 	stw	r17,84(sp)
  80bc50:	d8801a17 	ldw	r2,104(sp)
  80bc54:	e5400005 	stb	r21,0(fp)
  80bc58:	202f883a 	mov	r23,r4
  80bc5c:	d9c01b17 	ldw	r7,108(sp)
  80bc60:	d9001417 	ldw	r4,80(sp)
  80bc64:	880b883a 	mov	r5,r17
  80bc68:	100d883a 	mov	r6,r2
  80bc6c:	102d883a 	mov	r22,r2
  80bc70:	e7000044 	addi	fp,fp,1
  80bc74:	0806dfc0 	call	806dfc <__ltdf2>
  80bc78:	103fc30e 	bge	r2,zero,80bb88 <_dtoa_r+0x1064>
  80bc7c:	d9000417 	ldw	r4,16(sp)
  80bc80:	d9000d15 	stw	r4,52(sp)
  80bc84:	003d7106 	br	80b24c <_dtoa_r+0x728>
  80bc88:	d9801717 	ldw	r6,92(sp)
  80bc8c:	00800084 	movi	r2,2
  80bc90:	11bde60e 	bge	r2,r6,80b42c <_dtoa_r+0x908>
  80bc94:	203cfb1e 	bne	r4,zero,80b084 <_dtoa_r+0x560>
  80bc98:	d9001617 	ldw	r4,88(sp)
  80bc9c:	900b883a 	mov	r5,r18
  80bca0:	01800144 	movi	r6,5
  80bca4:	000f883a 	mov	r7,zero
  80bca8:	080e22c0 	call	80e22c <__multadd>
  80bcac:	d9000717 	ldw	r4,28(sp)
  80bcb0:	100b883a 	mov	r5,r2
  80bcb4:	1025883a 	mov	r18,r2
  80bcb8:	080d6d40 	call	80d6d4 <__mcmp>
  80bcbc:	00bcf10e 	bge	zero,r2,80b084 <_dtoa_r+0x560>
  80bcc0:	d8c00d17 	ldw	r3,52(sp)
  80bcc4:	d9000517 	ldw	r4,20(sp)
  80bcc8:	d8000615 	stw	zero,24(sp)
  80bccc:	18c00044 	addi	r3,r3,1
  80bcd0:	d8c00d15 	stw	r3,52(sp)
  80bcd4:	00800c44 	movi	r2,49
  80bcd8:	27000044 	addi	fp,r4,1
  80bcdc:	20800005 	stb	r2,0(r4)
  80bce0:	003e8906 	br	80b708 <_dtoa_r+0xbe4>
  80bce4:	d8c00517 	ldw	r3,20(sp)
  80bce8:	003bc206 	br	80abf4 <_dtoa_r+0xd0>
  80bcec:	018020b4 	movhi	r6,130
  80bcf0:	31b34304 	addi	r6,r6,-13044
  80bcf4:	30c00917 	ldw	r3,36(r6)
  80bcf8:	30800817 	ldw	r2,32(r6)
  80bcfc:	d9001217 	ldw	r4,72(sp)
  80bd00:	d9401317 	ldw	r5,76(sp)
  80bd04:	180f883a 	mov	r7,r3
  80bd08:	100d883a 	mov	r6,r2
  80bd0c:	08069840 	call	806984 <__divdf3>
  80bd10:	948003cc 	andi	r18,r18,15
  80bd14:	058000c4 	movi	r22,3
  80bd18:	1029883a 	mov	r20,r2
  80bd1c:	182b883a 	mov	r21,r3
  80bd20:	003c8906 	br	80af48 <_dtoa_r+0x424>
  80bd24:	d9001017 	ldw	r4,64(sp)
  80bd28:	d9800917 	ldw	r6,36(sp)
  80bd2c:	0025883a 	mov	r18,zero
  80bd30:	1105c83a 	sub	r2,r2,r4
  80bd34:	2089883a 	add	r4,r4,r2
  80bd38:	308d883a 	add	r6,r6,r2
  80bd3c:	d9001015 	stw	r4,64(sp)
  80bd40:	d9800915 	stw	r6,36(sp)
  80bd44:	003e3206 	br	80b610 <_dtoa_r+0xaec>
  80bd48:	28800044 	addi	r2,r5,1
  80bd4c:	27000044 	addi	fp,r4,1
  80bd50:	20800005 	stb	r2,0(r4)
  80bd54:	003e6c06 	br	80b708 <_dtoa_r+0xbe4>
  80bd58:	d8800f17 	ldw	r2,60(sp)
  80bd5c:	00bce016 	blt	zero,r2,80b0e0 <_dtoa_r+0x5bc>
  80bd60:	d9800f17 	ldw	r6,60(sp)
  80bd64:	303cc51e 	bne	r6,zero,80b07c <_dtoa_r+0x558>
  80bd68:	0005883a 	mov	r2,zero
  80bd6c:	00d00534 	movhi	r3,16404
  80bd70:	980b883a 	mov	r5,r19
  80bd74:	180f883a 	mov	r7,r3
  80bd78:	9009883a 	mov	r4,r18
  80bd7c:	100d883a 	mov	r6,r2
  80bd80:	08065c00 	call	8065c0 <__muldf3>
  80bd84:	180b883a 	mov	r5,r3
  80bd88:	a80f883a 	mov	r7,r21
  80bd8c:	1009883a 	mov	r4,r2
  80bd90:	a00d883a 	mov	r6,r20
  80bd94:	0806d740 	call	806d74 <__gedf2>
  80bd98:	103cb80e 	bge	r2,zero,80b07c <_dtoa_r+0x558>
  80bd9c:	0027883a 	mov	r19,zero
  80bda0:	0025883a 	mov	r18,zero
  80bda4:	003fc606 	br	80bcc0 <_dtoa_r+0x119c>
  80bda8:	99400117 	ldw	r5,4(r19)
  80bdac:	d9001617 	ldw	r4,88(sp)
  80bdb0:	080daf80 	call	80daf8 <_Balloc>
  80bdb4:	99800417 	ldw	r6,16(r19)
  80bdb8:	11000304 	addi	r4,r2,12
  80bdbc:	99400304 	addi	r5,r19,12
  80bdc0:	318d883a 	add	r6,r6,r6
  80bdc4:	318d883a 	add	r6,r6,r6
  80bdc8:	31800204 	addi	r6,r6,8
  80bdcc:	1023883a 	mov	r17,r2
  80bdd0:	080d3600 	call	80d360 <memcpy>
  80bdd4:	d9001617 	ldw	r4,88(sp)
  80bdd8:	880b883a 	mov	r5,r17
  80bddc:	01800044 	movi	r6,1
  80bde0:	080debc0 	call	80debc <__lshift>
  80bde4:	100b883a 	mov	r5,r2
  80bde8:	003d9c06 	br	80b45c <_dtoa_r+0x938>
  80bdec:	00800e44 	movi	r2,57
  80bdf0:	b8807026 	beq	r23,r2,80bfb4 <_dtoa_r+0x1490>
  80bdf4:	b8800044 	addi	r2,r23,1
  80bdf8:	b7000044 	addi	fp,r22,1
  80bdfc:	b0800005 	stb	r2,0(r22)
  80be00:	003e4106 	br	80b708 <_dtoa_r+0xbe4>
  80be04:	d8800317 	ldw	r2,12(sp)
  80be08:	018020b4 	movhi	r6,130
  80be0c:	31b31104 	addi	r6,r6,-13244
  80be10:	b009883a 	mov	r4,r22
  80be14:	100e90fa 	slli	r7,r2,3
  80be18:	b80b883a 	mov	r5,r23
  80be1c:	398f883a 	add	r7,r7,r6
  80be20:	38bffe17 	ldw	r2,-8(r7)
  80be24:	d9800517 	ldw	r6,20(sp)
  80be28:	38ffff17 	ldw	r3,-4(r7)
  80be2c:	37000044 	addi	fp,r6,1
  80be30:	180f883a 	mov	r7,r3
  80be34:	100d883a 	mov	r6,r2
  80be38:	08065c00 	call	8065c0 <__muldf3>
  80be3c:	a80b883a 	mov	r5,r21
  80be40:	a009883a 	mov	r4,r20
  80be44:	182f883a 	mov	r23,r3
  80be48:	102d883a 	mov	r22,r2
  80be4c:	08070040 	call	807004 <__fixdfsi>
  80be50:	1009883a 	mov	r4,r2
  80be54:	1027883a 	mov	r19,r2
  80be58:	0806f0c0 	call	806f0c <__floatsidf>
  80be5c:	a80b883a 	mov	r5,r21
  80be60:	a009883a 	mov	r4,r20
  80be64:	180f883a 	mov	r7,r3
  80be68:	100d883a 	mov	r6,r2
  80be6c:	08064cc0 	call	8064cc <__subdf3>
  80be70:	180b883a 	mov	r5,r3
  80be74:	d8c00517 	ldw	r3,20(sp)
  80be78:	9cc00c04 	addi	r19,r19,48
  80be7c:	1009883a 	mov	r4,r2
  80be80:	1cc00005 	stb	r19,0(r3)
  80be84:	2021883a 	mov	r16,r4
  80be88:	d9000317 	ldw	r4,12(sp)
  80be8c:	00800044 	movi	r2,1
  80be90:	2823883a 	mov	r17,r5
  80be94:	20802226 	beq	r4,r2,80bf20 <_dtoa_r+0x13fc>
  80be98:	1029883a 	mov	r20,r2
  80be9c:	0005883a 	mov	r2,zero
  80bea0:	00d00934 	movhi	r3,16420
  80bea4:	180f883a 	mov	r7,r3
  80bea8:	100d883a 	mov	r6,r2
  80beac:	880b883a 	mov	r5,r17
  80beb0:	8009883a 	mov	r4,r16
  80beb4:	08065c00 	call	8065c0 <__muldf3>
  80beb8:	180b883a 	mov	r5,r3
  80bebc:	1009883a 	mov	r4,r2
  80bec0:	1823883a 	mov	r17,r3
  80bec4:	1021883a 	mov	r16,r2
  80bec8:	08070040 	call	807004 <__fixdfsi>
  80becc:	1009883a 	mov	r4,r2
  80bed0:	102b883a 	mov	r21,r2
  80bed4:	0806f0c0 	call	806f0c <__floatsidf>
  80bed8:	880b883a 	mov	r5,r17
  80bedc:	8009883a 	mov	r4,r16
  80bee0:	180f883a 	mov	r7,r3
  80bee4:	100d883a 	mov	r6,r2
  80bee8:	08064cc0 	call	8064cc <__subdf3>
  80beec:	180b883a 	mov	r5,r3
  80bef0:	d8c00517 	ldw	r3,20(sp)
  80bef4:	1009883a 	mov	r4,r2
  80bef8:	ad400c04 	addi	r21,r21,48
  80befc:	1d05883a 	add	r2,r3,r20
  80bf00:	15400005 	stb	r21,0(r2)
  80bf04:	2021883a 	mov	r16,r4
  80bf08:	d9000317 	ldw	r4,12(sp)
  80bf0c:	a5000044 	addi	r20,r20,1
  80bf10:	2823883a 	mov	r17,r5
  80bf14:	a13fe11e 	bne	r20,r4,80be9c <_dtoa_r+0x1378>
  80bf18:	e505883a 	add	r2,fp,r20
  80bf1c:	173fffc4 	addi	fp,r2,-1
  80bf20:	0025883a 	mov	r18,zero
  80bf24:	04cff834 	movhi	r19,16352
  80bf28:	b009883a 	mov	r4,r22
  80bf2c:	b80b883a 	mov	r5,r23
  80bf30:	900d883a 	mov	r6,r18
  80bf34:	980f883a 	mov	r7,r19
  80bf38:	080654c0 	call	80654c <__adddf3>
  80bf3c:	180b883a 	mov	r5,r3
  80bf40:	1009883a 	mov	r4,r2
  80bf44:	800d883a 	mov	r6,r16
  80bf48:	880f883a 	mov	r7,r17
  80bf4c:	0806dfc0 	call	806dfc <__ltdf2>
  80bf50:	103cab16 	blt	r2,zero,80b200 <_dtoa_r+0x6dc>
  80bf54:	0009883a 	mov	r4,zero
  80bf58:	980b883a 	mov	r5,r19
  80bf5c:	b80f883a 	mov	r7,r23
  80bf60:	b00d883a 	mov	r6,r22
  80bf64:	08064cc0 	call	8064cc <__subdf3>
  80bf68:	180b883a 	mov	r5,r3
  80bf6c:	880f883a 	mov	r7,r17
  80bf70:	1009883a 	mov	r4,r2
  80bf74:	800d883a 	mov	r6,r16
  80bf78:	0806cec0 	call	806cec <__gtdf2>
  80bf7c:	00bc470e 	bge	zero,r2,80b09c <_dtoa_r+0x578>
  80bf80:	00c00c04 	movi	r3,48
  80bf84:	e73fffc4 	addi	fp,fp,-1
  80bf88:	e0800007 	ldb	r2,0(fp)
  80bf8c:	10fffd26 	beq	r2,r3,80bf84 <_dtoa_r+0x1460>
  80bf90:	d9800417 	ldw	r6,16(sp)
  80bf94:	e7000044 	addi	fp,fp,1
  80bf98:	d9800d15 	stw	r6,52(sp)
  80bf9c:	003cab06 	br	80b24c <_dtoa_r+0x728>
  80bfa0:	d8c00f17 	ldw	r3,60(sp)
  80bfa4:	d9001117 	ldw	r4,68(sp)
  80bfa8:	20e1c83a 	sub	r16,r4,r3
  80bfac:	0007883a 	mov	r3,zero
  80bfb0:	003d9b06 	br	80b620 <_dtoa_r+0xafc>
  80bfb4:	00800e44 	movi	r2,57
  80bfb8:	b0800005 	stb	r2,0(r22)
  80bfbc:	b5800044 	addi	r22,r22,1
  80bfc0:	003dc106 	br	80b6c8 <_dtoa_r+0xba4>
  80bfc4:	05800084 	movi	r22,2
  80bfc8:	003bf706 	br	80afa8 <_dtoa_r+0x484>
  80bfcc:	d9000f17 	ldw	r4,60(sp)
  80bfd0:	013c000e 	bge	zero,r4,80afd4 <_dtoa_r+0x4b0>
  80bfd4:	d9800e17 	ldw	r6,56(sp)
  80bfd8:	01bc300e 	bge	zero,r6,80b09c <_dtoa_r+0x578>
  80bfdc:	0005883a 	mov	r2,zero
  80bfe0:	00d00934 	movhi	r3,16420
  80bfe4:	a80b883a 	mov	r5,r21
  80bfe8:	180f883a 	mov	r7,r3
  80bfec:	a009883a 	mov	r4,r20
  80bff0:	100d883a 	mov	r6,r2
  80bff4:	08065c00 	call	8065c0 <__muldf3>
  80bff8:	b1000044 	addi	r4,r22,1
  80bffc:	1021883a 	mov	r16,r2
  80c000:	1823883a 	mov	r17,r3
  80c004:	0806f0c0 	call	806f0c <__floatsidf>
  80c008:	880b883a 	mov	r5,r17
  80c00c:	8009883a 	mov	r4,r16
  80c010:	180f883a 	mov	r7,r3
  80c014:	100d883a 	mov	r6,r2
  80c018:	08065c00 	call	8065c0 <__muldf3>
  80c01c:	0011883a 	mov	r8,zero
  80c020:	02500734 	movhi	r9,16412
  80c024:	180b883a 	mov	r5,r3
  80c028:	480f883a 	mov	r7,r9
  80c02c:	1009883a 	mov	r4,r2
  80c030:	400d883a 	mov	r6,r8
  80c034:	080654c0 	call	80654c <__adddf3>
  80c038:	102d883a 	mov	r22,r2
  80c03c:	00bf3034 	movhi	r2,64704
  80c040:	10ef883a 	add	r23,r2,r3
  80c044:	d8800d17 	ldw	r2,52(sp)
  80c048:	d8c00e17 	ldw	r3,56(sp)
  80c04c:	8029883a 	mov	r20,r16
  80c050:	10bfffc4 	addi	r2,r2,-1
  80c054:	882b883a 	mov	r21,r17
  80c058:	d8800415 	stw	r2,16(sp)
  80c05c:	d8c00315 	stw	r3,12(sp)
  80c060:	003e8306 	br	80ba70 <_dtoa_r+0xf4c>
  80c064:	d8800117 	ldw	r2,4(sp)
  80c068:	dc001117 	ldw	r16,68(sp)
  80c06c:	dc801017 	ldw	r18,64(sp)
  80c070:	00c00d84 	movi	r3,54
  80c074:	1887c83a 	sub	r3,r3,r2
  80c078:	003d6906 	br	80b620 <_dtoa_r+0xafc>
  80c07c:	01800044 	movi	r6,1
  80c080:	3021883a 	mov	r16,r6
  80c084:	d9800f15 	stw	r6,60(sp)
  80c088:	d9802615 	stw	r6,152(sp)
  80c08c:	d9800e15 	stw	r6,56(sp)
  80c090:	003b9306 	br	80aee0 <_dtoa_r+0x3bc>
  80c094:	b021883a 	mov	r16,r22
  80c098:	dd800f15 	stw	r22,60(sp)
  80c09c:	003b9006 	br	80aee0 <_dtoa_r+0x3bc>
  80c0a0:	103e221e 	bne	r2,zero,80b92c <_dtoa_r+0xe08>
  80c0a4:	b880004c 	andi	r2,r23,1
  80c0a8:	1005003a 	cmpeq	r2,r2,zero
  80c0ac:	103e1f1e 	bne	r2,zero,80b92c <_dtoa_r+0xe08>
  80c0b0:	003e1b06 	br	80b920 <_dtoa_r+0xdfc>
  80c0b4:	d9001617 	ldw	r4,88(sp)
  80c0b8:	980b883a 	mov	r5,r19
  80c0bc:	01800284 	movi	r6,10
  80c0c0:	000f883a 	mov	r7,zero
  80c0c4:	080e22c0 	call	80e22c <__multadd>
  80c0c8:	d8c00e17 	ldw	r3,56(sp)
  80c0cc:	1027883a 	mov	r19,r2
  80c0d0:	d8c00f15 	stw	r3,60(sp)
  80c0d4:	003cd306 	br	80b424 <_dtoa_r+0x900>

0080c0d8 <_fflush_r>:
  80c0d8:	defffb04 	addi	sp,sp,-20
  80c0dc:	dcc00315 	stw	r19,12(sp)
  80c0e0:	dc800215 	stw	r18,8(sp)
  80c0e4:	dfc00415 	stw	ra,16(sp)
  80c0e8:	dc400115 	stw	r17,4(sp)
  80c0ec:	dc000015 	stw	r16,0(sp)
  80c0f0:	2027883a 	mov	r19,r4
  80c0f4:	2825883a 	mov	r18,r5
  80c0f8:	20000226 	beq	r4,zero,80c104 <_fflush_r+0x2c>
  80c0fc:	20800e17 	ldw	r2,56(r4)
  80c100:	10005626 	beq	r2,zero,80c25c <_fflush_r+0x184>
  80c104:	9100030b 	ldhu	r4,12(r18)
  80c108:	20ffffcc 	andi	r3,r4,65535
  80c10c:	18e0001c 	xori	r3,r3,32768
  80c110:	18e00004 	addi	r3,r3,-32768
  80c114:	1880020c 	andi	r2,r3,8
  80c118:	1000261e 	bne	r2,zero,80c1b4 <_fflush_r+0xdc>
  80c11c:	90c00117 	ldw	r3,4(r18)
  80c120:	20820014 	ori	r2,r4,2048
  80c124:	9080030d 	sth	r2,12(r18)
  80c128:	1009883a 	mov	r4,r2
  80c12c:	00c0400e 	bge	zero,r3,80c230 <_fflush_r+0x158>
  80c130:	92000a17 	ldw	r8,40(r18)
  80c134:	40004026 	beq	r8,zero,80c238 <_fflush_r+0x160>
  80c138:	2084000c 	andi	r2,r4,4096
  80c13c:	10005326 	beq	r2,zero,80c28c <_fflush_r+0x1b4>
  80c140:	94001417 	ldw	r16,80(r18)
  80c144:	9080030b 	ldhu	r2,12(r18)
  80c148:	1080010c 	andi	r2,r2,4
  80c14c:	1000481e 	bne	r2,zero,80c270 <_fflush_r+0x198>
  80c150:	91400717 	ldw	r5,28(r18)
  80c154:	9809883a 	mov	r4,r19
  80c158:	800d883a 	mov	r6,r16
  80c15c:	000f883a 	mov	r7,zero
  80c160:	403ee83a 	callr	r8
  80c164:	8080261e 	bne	r16,r2,80c200 <_fflush_r+0x128>
  80c168:	9080030b 	ldhu	r2,12(r18)
  80c16c:	91000417 	ldw	r4,16(r18)
  80c170:	90000115 	stw	zero,4(r18)
  80c174:	10bdffcc 	andi	r2,r2,63487
  80c178:	10ffffcc 	andi	r3,r2,65535
  80c17c:	18c4000c 	andi	r3,r3,4096
  80c180:	9080030d 	sth	r2,12(r18)
  80c184:	91000015 	stw	r4,0(r18)
  80c188:	18002b26 	beq	r3,zero,80c238 <_fflush_r+0x160>
  80c18c:	0007883a 	mov	r3,zero
  80c190:	1805883a 	mov	r2,r3
  80c194:	94001415 	stw	r16,80(r18)
  80c198:	dfc00417 	ldw	ra,16(sp)
  80c19c:	dcc00317 	ldw	r19,12(sp)
  80c1a0:	dc800217 	ldw	r18,8(sp)
  80c1a4:	dc400117 	ldw	r17,4(sp)
  80c1a8:	dc000017 	ldw	r16,0(sp)
  80c1ac:	dec00504 	addi	sp,sp,20
  80c1b0:	f800283a 	ret
  80c1b4:	94400417 	ldw	r17,16(r18)
  80c1b8:	88001f26 	beq	r17,zero,80c238 <_fflush_r+0x160>
  80c1bc:	90800017 	ldw	r2,0(r18)
  80c1c0:	18c000cc 	andi	r3,r3,3
  80c1c4:	94400015 	stw	r17,0(r18)
  80c1c8:	1461c83a 	sub	r16,r2,r17
  80c1cc:	18002526 	beq	r3,zero,80c264 <_fflush_r+0x18c>
  80c1d0:	0005883a 	mov	r2,zero
  80c1d4:	90800215 	stw	r2,8(r18)
  80c1d8:	0400170e 	bge	zero,r16,80c238 <_fflush_r+0x160>
  80c1dc:	90c00917 	ldw	r3,36(r18)
  80c1e0:	91400717 	ldw	r5,28(r18)
  80c1e4:	880d883a 	mov	r6,r17
  80c1e8:	800f883a 	mov	r7,r16
  80c1ec:	9809883a 	mov	r4,r19
  80c1f0:	183ee83a 	callr	r3
  80c1f4:	88a3883a 	add	r17,r17,r2
  80c1f8:	80a1c83a 	sub	r16,r16,r2
  80c1fc:	00bff616 	blt	zero,r2,80c1d8 <_fflush_r+0x100>
  80c200:	9080030b 	ldhu	r2,12(r18)
  80c204:	00ffffc4 	movi	r3,-1
  80c208:	10801014 	ori	r2,r2,64
  80c20c:	9080030d 	sth	r2,12(r18)
  80c210:	1805883a 	mov	r2,r3
  80c214:	dfc00417 	ldw	ra,16(sp)
  80c218:	dcc00317 	ldw	r19,12(sp)
  80c21c:	dc800217 	ldw	r18,8(sp)
  80c220:	dc400117 	ldw	r17,4(sp)
  80c224:	dc000017 	ldw	r16,0(sp)
  80c228:	dec00504 	addi	sp,sp,20
  80c22c:	f800283a 	ret
  80c230:	90800f17 	ldw	r2,60(r18)
  80c234:	00bfbe16 	blt	zero,r2,80c130 <_fflush_r+0x58>
  80c238:	0007883a 	mov	r3,zero
  80c23c:	1805883a 	mov	r2,r3
  80c240:	dfc00417 	ldw	ra,16(sp)
  80c244:	dcc00317 	ldw	r19,12(sp)
  80c248:	dc800217 	ldw	r18,8(sp)
  80c24c:	dc400117 	ldw	r17,4(sp)
  80c250:	dc000017 	ldw	r16,0(sp)
  80c254:	dec00504 	addi	sp,sp,20
  80c258:	f800283a 	ret
  80c25c:	080c3700 	call	80c370 <__sinit>
  80c260:	003fa806 	br	80c104 <_fflush_r+0x2c>
  80c264:	90800517 	ldw	r2,20(r18)
  80c268:	90800215 	stw	r2,8(r18)
  80c26c:	003fda06 	br	80c1d8 <_fflush_r+0x100>
  80c270:	90800117 	ldw	r2,4(r18)
  80c274:	90c00c17 	ldw	r3,48(r18)
  80c278:	80a1c83a 	sub	r16,r16,r2
  80c27c:	183fb426 	beq	r3,zero,80c150 <_fflush_r+0x78>
  80c280:	90800f17 	ldw	r2,60(r18)
  80c284:	80a1c83a 	sub	r16,r16,r2
  80c288:	003fb106 	br	80c150 <_fflush_r+0x78>
  80c28c:	91400717 	ldw	r5,28(r18)
  80c290:	9809883a 	mov	r4,r19
  80c294:	000d883a 	mov	r6,zero
  80c298:	01c00044 	movi	r7,1
  80c29c:	403ee83a 	callr	r8
  80c2a0:	1021883a 	mov	r16,r2
  80c2a4:	00bfffc4 	movi	r2,-1
  80c2a8:	80800226 	beq	r16,r2,80c2b4 <_fflush_r+0x1dc>
  80c2ac:	92000a17 	ldw	r8,40(r18)
  80c2b0:	003fa406 	br	80c144 <_fflush_r+0x6c>
  80c2b4:	98c00017 	ldw	r3,0(r19)
  80c2b8:	00800744 	movi	r2,29
  80c2bc:	18bfde26 	beq	r3,r2,80c238 <_fflush_r+0x160>
  80c2c0:	9080030b 	ldhu	r2,12(r18)
  80c2c4:	8007883a 	mov	r3,r16
  80c2c8:	10801014 	ori	r2,r2,64
  80c2cc:	9080030d 	sth	r2,12(r18)
  80c2d0:	003fcf06 	br	80c210 <_fflush_r+0x138>

0080c2d4 <fflush>:
  80c2d4:	01402074 	movhi	r5,129
  80c2d8:	29703604 	addi	r5,r5,-16168
  80c2dc:	2007883a 	mov	r3,r4
  80c2e0:	20000526 	beq	r4,zero,80c2f8 <fflush+0x24>
  80c2e4:	008020b4 	movhi	r2,130
  80c2e8:	10bb2804 	addi	r2,r2,-4960
  80c2ec:	11000017 	ldw	r4,0(r2)
  80c2f0:	180b883a 	mov	r5,r3
  80c2f4:	080c0d81 	jmpi	80c0d8 <_fflush_r>
  80c2f8:	008020b4 	movhi	r2,130
  80c2fc:	10bb2904 	addi	r2,r2,-4956
  80c300:	11000017 	ldw	r4,0(r2)
  80c304:	080cea41 	jmpi	80cea4 <_fwalk_reent>

0080c308 <std>:
  80c308:	00802074 	movhi	r2,129
  80c30c:	10bae804 	addi	r2,r2,-5216
  80c310:	20800b15 	stw	r2,44(r4)
  80c314:	00802074 	movhi	r2,129
  80c318:	10bb2304 	addi	r2,r2,-4980
  80c31c:	20800815 	stw	r2,32(r4)
  80c320:	00c02074 	movhi	r3,129
  80c324:	18fb0404 	addi	r3,r3,-5104
  80c328:	00802074 	movhi	r2,129
  80c32c:	10baea04 	addi	r2,r2,-5208
  80c330:	2140030d 	sth	r5,12(r4)
  80c334:	2180038d 	sth	r6,14(r4)
  80c338:	20c00915 	stw	r3,36(r4)
  80c33c:	20800a15 	stw	r2,40(r4)
  80c340:	20000015 	stw	zero,0(r4)
  80c344:	20000115 	stw	zero,4(r4)
  80c348:	20000215 	stw	zero,8(r4)
  80c34c:	20000415 	stw	zero,16(r4)
  80c350:	20000515 	stw	zero,20(r4)
  80c354:	20000615 	stw	zero,24(r4)
  80c358:	21000715 	stw	r4,28(r4)
  80c35c:	f800283a 	ret

0080c360 <__sfp_lock_acquire>:
  80c360:	f800283a 	ret

0080c364 <__sfp_lock_release>:
  80c364:	f800283a 	ret

0080c368 <__sinit_lock_acquire>:
  80c368:	f800283a 	ret

0080c36c <__sinit_lock_release>:
  80c36c:	f800283a 	ret

0080c370 <__sinit>:
  80c370:	20800e17 	ldw	r2,56(r4)
  80c374:	defffd04 	addi	sp,sp,-12
  80c378:	dc400115 	stw	r17,4(sp)
  80c37c:	dc000015 	stw	r16,0(sp)
  80c380:	dfc00215 	stw	ra,8(sp)
  80c384:	04400044 	movi	r17,1
  80c388:	01400104 	movi	r5,4
  80c38c:	000d883a 	mov	r6,zero
  80c390:	2021883a 	mov	r16,r4
  80c394:	2200bb04 	addi	r8,r4,748
  80c398:	200f883a 	mov	r7,r4
  80c39c:	10000526 	beq	r2,zero,80c3b4 <__sinit+0x44>
  80c3a0:	dfc00217 	ldw	ra,8(sp)
  80c3a4:	dc400117 	ldw	r17,4(sp)
  80c3a8:	dc000017 	ldw	r16,0(sp)
  80c3ac:	dec00304 	addi	sp,sp,12
  80c3b0:	f800283a 	ret
  80c3b4:	21000117 	ldw	r4,4(r4)
  80c3b8:	00802074 	movhi	r2,129
  80c3bc:	10b11504 	addi	r2,r2,-15276
  80c3c0:	00c000c4 	movi	r3,3
  80c3c4:	80800f15 	stw	r2,60(r16)
  80c3c8:	80c0b915 	stw	r3,740(r16)
  80c3cc:	8200ba15 	stw	r8,744(r16)
  80c3d0:	84400e15 	stw	r17,56(r16)
  80c3d4:	8000b815 	stw	zero,736(r16)
  80c3d8:	080c3080 	call	80c308 <std>
  80c3dc:	81000217 	ldw	r4,8(r16)
  80c3e0:	880d883a 	mov	r6,r17
  80c3e4:	800f883a 	mov	r7,r16
  80c3e8:	01400284 	movi	r5,10
  80c3ec:	080c3080 	call	80c308 <std>
  80c3f0:	81000317 	ldw	r4,12(r16)
  80c3f4:	800f883a 	mov	r7,r16
  80c3f8:	01400484 	movi	r5,18
  80c3fc:	01800084 	movi	r6,2
  80c400:	dfc00217 	ldw	ra,8(sp)
  80c404:	dc400117 	ldw	r17,4(sp)
  80c408:	dc000017 	ldw	r16,0(sp)
  80c40c:	dec00304 	addi	sp,sp,12
  80c410:	080c3081 	jmpi	80c308 <std>

0080c414 <__fp_lock>:
  80c414:	0005883a 	mov	r2,zero
  80c418:	f800283a 	ret

0080c41c <__fp_unlock>:
  80c41c:	0005883a 	mov	r2,zero
  80c420:	f800283a 	ret

0080c424 <__fp_unlock_all>:
  80c424:	008020b4 	movhi	r2,130
  80c428:	10bb2804 	addi	r2,r2,-4960
  80c42c:	11000017 	ldw	r4,0(r2)
  80c430:	01402074 	movhi	r5,129
  80c434:	29710704 	addi	r5,r5,-15332
  80c438:	080cf6c1 	jmpi	80cf6c <_fwalk>

0080c43c <__fp_lock_all>:
  80c43c:	008020b4 	movhi	r2,130
  80c440:	10bb2804 	addi	r2,r2,-4960
  80c444:	11000017 	ldw	r4,0(r2)
  80c448:	01402074 	movhi	r5,129
  80c44c:	29710504 	addi	r5,r5,-15340
  80c450:	080cf6c1 	jmpi	80cf6c <_fwalk>

0080c454 <_cleanup_r>:
  80c454:	01402074 	movhi	r5,129
  80c458:	297c1504 	addi	r5,r5,-4012
  80c45c:	080cf6c1 	jmpi	80cf6c <_fwalk>

0080c460 <_cleanup>:
  80c460:	008020b4 	movhi	r2,130
  80c464:	10bb2904 	addi	r2,r2,-4956
  80c468:	11000017 	ldw	r4,0(r2)
  80c46c:	080c4541 	jmpi	80c454 <_cleanup_r>

0080c470 <__sfmoreglue>:
  80c470:	defffc04 	addi	sp,sp,-16
  80c474:	dc400115 	stw	r17,4(sp)
  80c478:	2c401724 	muli	r17,r5,92
  80c47c:	dc800215 	stw	r18,8(sp)
  80c480:	2825883a 	mov	r18,r5
  80c484:	89400304 	addi	r5,r17,12
  80c488:	dc000015 	stw	r16,0(sp)
  80c48c:	dfc00315 	stw	ra,12(sp)
  80c490:	0807dc80 	call	807dc8 <_malloc_r>
  80c494:	0021883a 	mov	r16,zero
  80c498:	880d883a 	mov	r6,r17
  80c49c:	000b883a 	mov	r5,zero
  80c4a0:	10000626 	beq	r2,zero,80c4bc <__sfmoreglue+0x4c>
  80c4a4:	11000304 	addi	r4,r2,12
  80c4a8:	14800115 	stw	r18,4(r2)
  80c4ac:	10000015 	stw	zero,0(r2)
  80c4b0:	11000215 	stw	r4,8(r2)
  80c4b4:	1021883a 	mov	r16,r2
  80c4b8:	080d4e00 	call	80d4e0 <memset>
  80c4bc:	8005883a 	mov	r2,r16
  80c4c0:	dfc00317 	ldw	ra,12(sp)
  80c4c4:	dc800217 	ldw	r18,8(sp)
  80c4c8:	dc400117 	ldw	r17,4(sp)
  80c4cc:	dc000017 	ldw	r16,0(sp)
  80c4d0:	dec00404 	addi	sp,sp,16
  80c4d4:	f800283a 	ret

0080c4d8 <__sfp>:
  80c4d8:	defffd04 	addi	sp,sp,-12
  80c4dc:	008020b4 	movhi	r2,130
  80c4e0:	10bb2904 	addi	r2,r2,-4956
  80c4e4:	dc000015 	stw	r16,0(sp)
  80c4e8:	14000017 	ldw	r16,0(r2)
  80c4ec:	dc400115 	stw	r17,4(sp)
  80c4f0:	dfc00215 	stw	ra,8(sp)
  80c4f4:	80800e17 	ldw	r2,56(r16)
  80c4f8:	2023883a 	mov	r17,r4
  80c4fc:	10002626 	beq	r2,zero,80c598 <__sfp+0xc0>
  80c500:	8400b804 	addi	r16,r16,736
  80c504:	80800117 	ldw	r2,4(r16)
  80c508:	81000217 	ldw	r4,8(r16)
  80c50c:	10ffffc4 	addi	r3,r2,-1
  80c510:	18000916 	blt	r3,zero,80c538 <__sfp+0x60>
  80c514:	2080030f 	ldh	r2,12(r4)
  80c518:	10000b26 	beq	r2,zero,80c548 <__sfp+0x70>
  80c51c:	017fffc4 	movi	r5,-1
  80c520:	00000206 	br	80c52c <__sfp+0x54>
  80c524:	2080030f 	ldh	r2,12(r4)
  80c528:	10000726 	beq	r2,zero,80c548 <__sfp+0x70>
  80c52c:	18ffffc4 	addi	r3,r3,-1
  80c530:	21001704 	addi	r4,r4,92
  80c534:	197ffb1e 	bne	r3,r5,80c524 <__sfp+0x4c>
  80c538:	80800017 	ldw	r2,0(r16)
  80c53c:	10001926 	beq	r2,zero,80c5a4 <__sfp+0xcc>
  80c540:	1021883a 	mov	r16,r2
  80c544:	003fef06 	br	80c504 <__sfp+0x2c>
  80c548:	00bfffc4 	movi	r2,-1
  80c54c:	00c00044 	movi	r3,1
  80c550:	2080038d 	sth	r2,14(r4)
  80c554:	20c0030d 	sth	r3,12(r4)
  80c558:	20000015 	stw	zero,0(r4)
  80c55c:	20000215 	stw	zero,8(r4)
  80c560:	20000115 	stw	zero,4(r4)
  80c564:	20000415 	stw	zero,16(r4)
  80c568:	20000515 	stw	zero,20(r4)
  80c56c:	20000615 	stw	zero,24(r4)
  80c570:	20000c15 	stw	zero,48(r4)
  80c574:	20000d15 	stw	zero,52(r4)
  80c578:	20001115 	stw	zero,68(r4)
  80c57c:	20001215 	stw	zero,72(r4)
  80c580:	2005883a 	mov	r2,r4
  80c584:	dfc00217 	ldw	ra,8(sp)
  80c588:	dc400117 	ldw	r17,4(sp)
  80c58c:	dc000017 	ldw	r16,0(sp)
  80c590:	dec00304 	addi	sp,sp,12
  80c594:	f800283a 	ret
  80c598:	8009883a 	mov	r4,r16
  80c59c:	080c3700 	call	80c370 <__sinit>
  80c5a0:	003fd706 	br	80c500 <__sfp+0x28>
  80c5a4:	8809883a 	mov	r4,r17
  80c5a8:	01400104 	movi	r5,4
  80c5ac:	080c4700 	call	80c470 <__sfmoreglue>
  80c5b0:	80800015 	stw	r2,0(r16)
  80c5b4:	103fe21e 	bne	r2,zero,80c540 <__sfp+0x68>
  80c5b8:	00800304 	movi	r2,12
  80c5bc:	0009883a 	mov	r4,zero
  80c5c0:	88800015 	stw	r2,0(r17)
  80c5c4:	003fee06 	br	80c580 <__sfp+0xa8>

0080c5c8 <_malloc_trim_r>:
  80c5c8:	defffb04 	addi	sp,sp,-20
  80c5cc:	dcc00315 	stw	r19,12(sp)
  80c5d0:	04c020b4 	movhi	r19,130
  80c5d4:	9cf55004 	addi	r19,r19,-10944
  80c5d8:	dc800215 	stw	r18,8(sp)
  80c5dc:	dc400115 	stw	r17,4(sp)
  80c5e0:	dc000015 	stw	r16,0(sp)
  80c5e4:	2823883a 	mov	r17,r5
  80c5e8:	2025883a 	mov	r18,r4
  80c5ec:	dfc00415 	stw	ra,16(sp)
  80c5f0:	0810db00 	call	810db0 <__malloc_lock>
  80c5f4:	98800217 	ldw	r2,8(r19)
  80c5f8:	9009883a 	mov	r4,r18
  80c5fc:	000b883a 	mov	r5,zero
  80c600:	10c00117 	ldw	r3,4(r2)
  80c604:	00bfff04 	movi	r2,-4
  80c608:	18a0703a 	and	r16,r3,r2
  80c60c:	8463c83a 	sub	r17,r16,r17
  80c610:	8c43fbc4 	addi	r17,r17,4079
  80c614:	8822d33a 	srli	r17,r17,12
  80c618:	0083ffc4 	movi	r2,4095
  80c61c:	8c7fffc4 	addi	r17,r17,-1
  80c620:	8822933a 	slli	r17,r17,12
  80c624:	1440060e 	bge	r2,r17,80c640 <_malloc_trim_r+0x78>
  80c628:	08086340 	call	808634 <_sbrk_r>
  80c62c:	98c00217 	ldw	r3,8(r19)
  80c630:	9009883a 	mov	r4,r18
  80c634:	044bc83a 	sub	r5,zero,r17
  80c638:	80c7883a 	add	r3,r16,r3
  80c63c:	10c00926 	beq	r2,r3,80c664 <_malloc_trim_r+0x9c>
  80c640:	0810eb80 	call	810eb8 <__malloc_unlock>
  80c644:	0005883a 	mov	r2,zero
  80c648:	dfc00417 	ldw	ra,16(sp)
  80c64c:	dcc00317 	ldw	r19,12(sp)
  80c650:	dc800217 	ldw	r18,8(sp)
  80c654:	dc400117 	ldw	r17,4(sp)
  80c658:	dc000017 	ldw	r16,0(sp)
  80c65c:	dec00504 	addi	sp,sp,20
  80c660:	f800283a 	ret
  80c664:	9009883a 	mov	r4,r18
  80c668:	08086340 	call	808634 <_sbrk_r>
  80c66c:	844dc83a 	sub	r6,r16,r17
  80c670:	00ffffc4 	movi	r3,-1
  80c674:	9009883a 	mov	r4,r18
  80c678:	000b883a 	mov	r5,zero
  80c67c:	01c020b4 	movhi	r7,130
  80c680:	39c29204 	addi	r7,r7,2632
  80c684:	31800054 	ori	r6,r6,1
  80c688:	10c00926 	beq	r2,r3,80c6b0 <_malloc_trim_r+0xe8>
  80c68c:	38800017 	ldw	r2,0(r7)
  80c690:	98c00217 	ldw	r3,8(r19)
  80c694:	9009883a 	mov	r4,r18
  80c698:	1445c83a 	sub	r2,r2,r17
  80c69c:	38800015 	stw	r2,0(r7)
  80c6a0:	19800115 	stw	r6,4(r3)
  80c6a4:	0810eb80 	call	810eb8 <__malloc_unlock>
  80c6a8:	00800044 	movi	r2,1
  80c6ac:	003fe606 	br	80c648 <_malloc_trim_r+0x80>
  80c6b0:	08086340 	call	808634 <_sbrk_r>
  80c6b4:	99800217 	ldw	r6,8(r19)
  80c6b8:	100f883a 	mov	r7,r2
  80c6bc:	9009883a 	mov	r4,r18
  80c6c0:	1187c83a 	sub	r3,r2,r6
  80c6c4:	008003c4 	movi	r2,15
  80c6c8:	19400054 	ori	r5,r3,1
  80c6cc:	10ffdc0e 	bge	r2,r3,80c640 <_malloc_trim_r+0x78>
  80c6d0:	008020b4 	movhi	r2,130
  80c6d4:	10bb2b04 	addi	r2,r2,-4948
  80c6d8:	10c00017 	ldw	r3,0(r2)
  80c6dc:	008020b4 	movhi	r2,130
  80c6e0:	10829204 	addi	r2,r2,2632
  80c6e4:	31400115 	stw	r5,4(r6)
  80c6e8:	38c7c83a 	sub	r3,r7,r3
  80c6ec:	10c00015 	stw	r3,0(r2)
  80c6f0:	003fd306 	br	80c640 <_malloc_trim_r+0x78>

0080c6f4 <_free_r>:
  80c6f4:	defffd04 	addi	sp,sp,-12
  80c6f8:	dc400115 	stw	r17,4(sp)
  80c6fc:	dc000015 	stw	r16,0(sp)
  80c700:	dfc00215 	stw	ra,8(sp)
  80c704:	2821883a 	mov	r16,r5
  80c708:	2023883a 	mov	r17,r4
  80c70c:	28005a26 	beq	r5,zero,80c878 <_free_r+0x184>
  80c710:	0810db00 	call	810db0 <__malloc_lock>
  80c714:	823ffe04 	addi	r8,r16,-8
  80c718:	41400117 	ldw	r5,4(r8)
  80c71c:	00bfff84 	movi	r2,-2
  80c720:	028020b4 	movhi	r10,130
  80c724:	52b55004 	addi	r10,r10,-10944
  80c728:	288e703a 	and	r7,r5,r2
  80c72c:	41cd883a 	add	r6,r8,r7
  80c730:	30c00117 	ldw	r3,4(r6)
  80c734:	51000217 	ldw	r4,8(r10)
  80c738:	00bfff04 	movi	r2,-4
  80c73c:	1892703a 	and	r9,r3,r2
  80c740:	5017883a 	mov	r11,r10
  80c744:	31006726 	beq	r6,r4,80c8e4 <_free_r+0x1f0>
  80c748:	2880004c 	andi	r2,r5,1
  80c74c:	1005003a 	cmpeq	r2,r2,zero
  80c750:	32400115 	stw	r9,4(r6)
  80c754:	10001a1e 	bne	r2,zero,80c7c0 <_free_r+0xcc>
  80c758:	000b883a 	mov	r5,zero
  80c75c:	3247883a 	add	r3,r6,r9
  80c760:	18800117 	ldw	r2,4(r3)
  80c764:	1080004c 	andi	r2,r2,1
  80c768:	1000231e 	bne	r2,zero,80c7f8 <_free_r+0x104>
  80c76c:	280ac03a 	cmpne	r5,r5,zero
  80c770:	3a4f883a 	add	r7,r7,r9
  80c774:	2800451e 	bne	r5,zero,80c88c <_free_r+0x198>
  80c778:	31000217 	ldw	r4,8(r6)
  80c77c:	008020b4 	movhi	r2,130
  80c780:	10b55204 	addi	r2,r2,-10936
  80c784:	20807b26 	beq	r4,r2,80c974 <_free_r+0x280>
  80c788:	30800317 	ldw	r2,12(r6)
  80c78c:	3a07883a 	add	r3,r7,r8
  80c790:	19c00015 	stw	r7,0(r3)
  80c794:	11000215 	stw	r4,8(r2)
  80c798:	20800315 	stw	r2,12(r4)
  80c79c:	38800054 	ori	r2,r7,1
  80c7a0:	40800115 	stw	r2,4(r8)
  80c7a4:	28001a26 	beq	r5,zero,80c810 <_free_r+0x11c>
  80c7a8:	8809883a 	mov	r4,r17
  80c7ac:	dfc00217 	ldw	ra,8(sp)
  80c7b0:	dc400117 	ldw	r17,4(sp)
  80c7b4:	dc000017 	ldw	r16,0(sp)
  80c7b8:	dec00304 	addi	sp,sp,12
  80c7bc:	0810eb81 	jmpi	810eb8 <__malloc_unlock>
  80c7c0:	80bffe17 	ldw	r2,-8(r16)
  80c7c4:	50c00204 	addi	r3,r10,8
  80c7c8:	4091c83a 	sub	r8,r8,r2
  80c7cc:	41000217 	ldw	r4,8(r8)
  80c7d0:	388f883a 	add	r7,r7,r2
  80c7d4:	20c06126 	beq	r4,r3,80c95c <_free_r+0x268>
  80c7d8:	40800317 	ldw	r2,12(r8)
  80c7dc:	3247883a 	add	r3,r6,r9
  80c7e0:	000b883a 	mov	r5,zero
  80c7e4:	11000215 	stw	r4,8(r2)
  80c7e8:	20800315 	stw	r2,12(r4)
  80c7ec:	18800117 	ldw	r2,4(r3)
  80c7f0:	1080004c 	andi	r2,r2,1
  80c7f4:	103fdd26 	beq	r2,zero,80c76c <_free_r+0x78>
  80c7f8:	38800054 	ori	r2,r7,1
  80c7fc:	3a07883a 	add	r3,r7,r8
  80c800:	280ac03a 	cmpne	r5,r5,zero
  80c804:	40800115 	stw	r2,4(r8)
  80c808:	19c00015 	stw	r7,0(r3)
  80c80c:	283fe61e 	bne	r5,zero,80c7a8 <_free_r+0xb4>
  80c810:	00807fc4 	movi	r2,511
  80c814:	11c01f2e 	bgeu	r2,r7,80c894 <_free_r+0x1a0>
  80c818:	3806d27a 	srli	r3,r7,9
  80c81c:	1800481e 	bne	r3,zero,80c940 <_free_r+0x24c>
  80c820:	3804d0fa 	srli	r2,r7,3
  80c824:	100690fa 	slli	r3,r2,3
  80c828:	1acd883a 	add	r6,r3,r11
  80c82c:	31400217 	ldw	r5,8(r6)
  80c830:	31405926 	beq	r6,r5,80c998 <_free_r+0x2a4>
  80c834:	28800117 	ldw	r2,4(r5)
  80c838:	00ffff04 	movi	r3,-4
  80c83c:	10c4703a 	and	r2,r2,r3
  80c840:	3880022e 	bgeu	r7,r2,80c84c <_free_r+0x158>
  80c844:	29400217 	ldw	r5,8(r5)
  80c848:	317ffa1e 	bne	r6,r5,80c834 <_free_r+0x140>
  80c84c:	29800317 	ldw	r6,12(r5)
  80c850:	41800315 	stw	r6,12(r8)
  80c854:	41400215 	stw	r5,8(r8)
  80c858:	8809883a 	mov	r4,r17
  80c85c:	2a000315 	stw	r8,12(r5)
  80c860:	32000215 	stw	r8,8(r6)
  80c864:	dfc00217 	ldw	ra,8(sp)
  80c868:	dc400117 	ldw	r17,4(sp)
  80c86c:	dc000017 	ldw	r16,0(sp)
  80c870:	dec00304 	addi	sp,sp,12
  80c874:	0810eb81 	jmpi	810eb8 <__malloc_unlock>
  80c878:	dfc00217 	ldw	ra,8(sp)
  80c87c:	dc400117 	ldw	r17,4(sp)
  80c880:	dc000017 	ldw	r16,0(sp)
  80c884:	dec00304 	addi	sp,sp,12
  80c888:	f800283a 	ret
  80c88c:	31000217 	ldw	r4,8(r6)
  80c890:	003fbd06 	br	80c788 <_free_r+0x94>
  80c894:	3806d0fa 	srli	r3,r7,3
  80c898:	00800044 	movi	r2,1
  80c89c:	51400117 	ldw	r5,4(r10)
  80c8a0:	180890fa 	slli	r4,r3,3
  80c8a4:	1807d0ba 	srai	r3,r3,2
  80c8a8:	22c9883a 	add	r4,r4,r11
  80c8ac:	21800217 	ldw	r6,8(r4)
  80c8b0:	10c4983a 	sll	r2,r2,r3
  80c8b4:	41000315 	stw	r4,12(r8)
  80c8b8:	41800215 	stw	r6,8(r8)
  80c8bc:	288ab03a 	or	r5,r5,r2
  80c8c0:	22000215 	stw	r8,8(r4)
  80c8c4:	8809883a 	mov	r4,r17
  80c8c8:	51400115 	stw	r5,4(r10)
  80c8cc:	32000315 	stw	r8,12(r6)
  80c8d0:	dfc00217 	ldw	ra,8(sp)
  80c8d4:	dc400117 	ldw	r17,4(sp)
  80c8d8:	dc000017 	ldw	r16,0(sp)
  80c8dc:	dec00304 	addi	sp,sp,12
  80c8e0:	0810eb81 	jmpi	810eb8 <__malloc_unlock>
  80c8e4:	2880004c 	andi	r2,r5,1
  80c8e8:	3a4d883a 	add	r6,r7,r9
  80c8ec:	1000071e 	bne	r2,zero,80c90c <_free_r+0x218>
  80c8f0:	80bffe17 	ldw	r2,-8(r16)
  80c8f4:	4091c83a 	sub	r8,r8,r2
  80c8f8:	41000317 	ldw	r4,12(r8)
  80c8fc:	40c00217 	ldw	r3,8(r8)
  80c900:	308d883a 	add	r6,r6,r2
  80c904:	20c00215 	stw	r3,8(r4)
  80c908:	19000315 	stw	r4,12(r3)
  80c90c:	008020b4 	movhi	r2,130
  80c910:	10bb2a04 	addi	r2,r2,-4952
  80c914:	11000017 	ldw	r4,0(r2)
  80c918:	30c00054 	ori	r3,r6,1
  80c91c:	52000215 	stw	r8,8(r10)
  80c920:	40c00115 	stw	r3,4(r8)
  80c924:	313fa036 	bltu	r6,r4,80c7a8 <_free_r+0xb4>
  80c928:	008020b4 	movhi	r2,130
  80c92c:	10826c04 	addi	r2,r2,2480
  80c930:	11400017 	ldw	r5,0(r2)
  80c934:	8809883a 	mov	r4,r17
  80c938:	080c5c80 	call	80c5c8 <_malloc_trim_r>
  80c93c:	003f9a06 	br	80c7a8 <_free_r+0xb4>
  80c940:	00800104 	movi	r2,4
  80c944:	10c0072e 	bgeu	r2,r3,80c964 <_free_r+0x270>
  80c948:	00800504 	movi	r2,20
  80c94c:	10c01936 	bltu	r2,r3,80c9b4 <_free_r+0x2c0>
  80c950:	188016c4 	addi	r2,r3,91
  80c954:	100690fa 	slli	r3,r2,3
  80c958:	003fb306 	br	80c828 <_free_r+0x134>
  80c95c:	01400044 	movi	r5,1
  80c960:	003f7e06 	br	80c75c <_free_r+0x68>
  80c964:	3804d1ba 	srli	r2,r7,6
  80c968:	10800e04 	addi	r2,r2,56
  80c96c:	100690fa 	slli	r3,r2,3
  80c970:	003fad06 	br	80c828 <_free_r+0x134>
  80c974:	22000315 	stw	r8,12(r4)
  80c978:	22000215 	stw	r8,8(r4)
  80c97c:	3a05883a 	add	r2,r7,r8
  80c980:	38c00054 	ori	r3,r7,1
  80c984:	11c00015 	stw	r7,0(r2)
  80c988:	41000215 	stw	r4,8(r8)
  80c98c:	40c00115 	stw	r3,4(r8)
  80c990:	41000315 	stw	r4,12(r8)
  80c994:	003f8406 	br	80c7a8 <_free_r+0xb4>
  80c998:	1005d0ba 	srai	r2,r2,2
  80c99c:	00c00044 	movi	r3,1
  80c9a0:	51000117 	ldw	r4,4(r10)
  80c9a4:	1886983a 	sll	r3,r3,r2
  80c9a8:	20c8b03a 	or	r4,r4,r3
  80c9ac:	51000115 	stw	r4,4(r10)
  80c9b0:	003fa706 	br	80c850 <_free_r+0x15c>
  80c9b4:	00801504 	movi	r2,84
  80c9b8:	10c00436 	bltu	r2,r3,80c9cc <_free_r+0x2d8>
  80c9bc:	3804d33a 	srli	r2,r7,12
  80c9c0:	10801b84 	addi	r2,r2,110
  80c9c4:	100690fa 	slli	r3,r2,3
  80c9c8:	003f9706 	br	80c828 <_free_r+0x134>
  80c9cc:	00805504 	movi	r2,340
  80c9d0:	10c00436 	bltu	r2,r3,80c9e4 <_free_r+0x2f0>
  80c9d4:	3804d3fa 	srli	r2,r7,15
  80c9d8:	10801dc4 	addi	r2,r2,119
  80c9dc:	100690fa 	slli	r3,r2,3
  80c9e0:	003f9106 	br	80c828 <_free_r+0x134>
  80c9e4:	00815504 	movi	r2,1364
  80c9e8:	10c0032e 	bgeu	r2,r3,80c9f8 <_free_r+0x304>
  80c9ec:	00801f84 	movi	r2,126
  80c9f0:	00c0fc04 	movi	r3,1008
  80c9f4:	003f8c06 	br	80c828 <_free_r+0x134>
  80c9f8:	3804d4ba 	srli	r2,r7,18
  80c9fc:	10801f04 	addi	r2,r2,124
  80ca00:	100690fa 	slli	r3,r2,3
  80ca04:	003f8806 	br	80c828 <_free_r+0x134>

0080ca08 <__sfvwrite_r>:
  80ca08:	30800217 	ldw	r2,8(r6)
  80ca0c:	defff504 	addi	sp,sp,-44
  80ca10:	df000915 	stw	fp,36(sp)
  80ca14:	dd800715 	stw	r22,28(sp)
  80ca18:	dc800315 	stw	r18,12(sp)
  80ca1c:	dfc00a15 	stw	ra,40(sp)
  80ca20:	ddc00815 	stw	r23,32(sp)
  80ca24:	dd400615 	stw	r21,24(sp)
  80ca28:	dd000515 	stw	r20,20(sp)
  80ca2c:	dcc00415 	stw	r19,16(sp)
  80ca30:	dc400215 	stw	r17,8(sp)
  80ca34:	dc000115 	stw	r16,4(sp)
  80ca38:	302d883a 	mov	r22,r6
  80ca3c:	2039883a 	mov	fp,r4
  80ca40:	2825883a 	mov	r18,r5
  80ca44:	10001c26 	beq	r2,zero,80cab8 <__sfvwrite_r+0xb0>
  80ca48:	29c0030b 	ldhu	r7,12(r5)
  80ca4c:	3880020c 	andi	r2,r7,8
  80ca50:	10002726 	beq	r2,zero,80caf0 <__sfvwrite_r+0xe8>
  80ca54:	28800417 	ldw	r2,16(r5)
  80ca58:	10002526 	beq	r2,zero,80caf0 <__sfvwrite_r+0xe8>
  80ca5c:	3880008c 	andi	r2,r7,2
  80ca60:	b5400017 	ldw	r21,0(r22)
  80ca64:	10002826 	beq	r2,zero,80cb08 <__sfvwrite_r+0x100>
  80ca68:	0021883a 	mov	r16,zero
  80ca6c:	0023883a 	mov	r17,zero
  80ca70:	880d883a 	mov	r6,r17
  80ca74:	e009883a 	mov	r4,fp
  80ca78:	00810004 	movi	r2,1024
  80ca7c:	80006e26 	beq	r16,zero,80cc38 <__sfvwrite_r+0x230>
  80ca80:	800f883a 	mov	r7,r16
  80ca84:	91400717 	ldw	r5,28(r18)
  80ca88:	1400012e 	bgeu	r2,r16,80ca90 <__sfvwrite_r+0x88>
  80ca8c:	100f883a 	mov	r7,r2
  80ca90:	90c00917 	ldw	r3,36(r18)
  80ca94:	183ee83a 	callr	r3
  80ca98:	1007883a 	mov	r3,r2
  80ca9c:	80a1c83a 	sub	r16,r16,r2
  80caa0:	88a3883a 	add	r17,r17,r2
  80caa4:	00806d0e 	bge	zero,r2,80cc5c <__sfvwrite_r+0x254>
  80caa8:	b0800217 	ldw	r2,8(r22)
  80caac:	10c5c83a 	sub	r2,r2,r3
  80cab0:	b0800215 	stw	r2,8(r22)
  80cab4:	103fee1e 	bne	r2,zero,80ca70 <__sfvwrite_r+0x68>
  80cab8:	0009883a 	mov	r4,zero
  80cabc:	2005883a 	mov	r2,r4
  80cac0:	dfc00a17 	ldw	ra,40(sp)
  80cac4:	df000917 	ldw	fp,36(sp)
  80cac8:	ddc00817 	ldw	r23,32(sp)
  80cacc:	dd800717 	ldw	r22,28(sp)
  80cad0:	dd400617 	ldw	r21,24(sp)
  80cad4:	dd000517 	ldw	r20,20(sp)
  80cad8:	dcc00417 	ldw	r19,16(sp)
  80cadc:	dc800317 	ldw	r18,12(sp)
  80cae0:	dc400217 	ldw	r17,8(sp)
  80cae4:	dc000117 	ldw	r16,4(sp)
  80cae8:	dec00b04 	addi	sp,sp,44
  80caec:	f800283a 	ret
  80caf0:	080a7d00 	call	80a7d0 <__swsetup_r>
  80caf4:	1000e41e 	bne	r2,zero,80ce88 <__sfvwrite_r+0x480>
  80caf8:	91c0030b 	ldhu	r7,12(r18)
  80cafc:	b5400017 	ldw	r21,0(r22)
  80cb00:	3880008c 	andi	r2,r7,2
  80cb04:	103fd81e 	bne	r2,zero,80ca68 <__sfvwrite_r+0x60>
  80cb08:	3880004c 	andi	r2,r7,1
  80cb0c:	1005003a 	cmpeq	r2,r2,zero
  80cb10:	10005726 	beq	r2,zero,80cc70 <__sfvwrite_r+0x268>
  80cb14:	0029883a 	mov	r20,zero
  80cb18:	002f883a 	mov	r23,zero
  80cb1c:	a0004226 	beq	r20,zero,80cc28 <__sfvwrite_r+0x220>
  80cb20:	3880800c 	andi	r2,r7,512
  80cb24:	94000217 	ldw	r16,8(r18)
  80cb28:	10008b26 	beq	r2,zero,80cd58 <__sfvwrite_r+0x350>
  80cb2c:	800d883a 	mov	r6,r16
  80cb30:	a400a536 	bltu	r20,r16,80cdc8 <__sfvwrite_r+0x3c0>
  80cb34:	3881200c 	andi	r2,r7,1152
  80cb38:	10002726 	beq	r2,zero,80cbd8 <__sfvwrite_r+0x1d0>
  80cb3c:	90800517 	ldw	r2,20(r18)
  80cb40:	92000417 	ldw	r8,16(r18)
  80cb44:	91400017 	ldw	r5,0(r18)
  80cb48:	1087883a 	add	r3,r2,r2
  80cb4c:	1887883a 	add	r3,r3,r2
  80cb50:	1808d7fa 	srli	r4,r3,31
  80cb54:	2a21c83a 	sub	r16,r5,r8
  80cb58:	80800044 	addi	r2,r16,1
  80cb5c:	20c9883a 	add	r4,r4,r3
  80cb60:	2027d07a 	srai	r19,r4,1
  80cb64:	a085883a 	add	r2,r20,r2
  80cb68:	980d883a 	mov	r6,r19
  80cb6c:	9880022e 	bgeu	r19,r2,80cb78 <__sfvwrite_r+0x170>
  80cb70:	1027883a 	mov	r19,r2
  80cb74:	100d883a 	mov	r6,r2
  80cb78:	3881000c 	andi	r2,r7,1024
  80cb7c:	1000b826 	beq	r2,zero,80ce60 <__sfvwrite_r+0x458>
  80cb80:	300b883a 	mov	r5,r6
  80cb84:	e009883a 	mov	r4,fp
  80cb88:	0807dc80 	call	807dc8 <_malloc_r>
  80cb8c:	10003126 	beq	r2,zero,80cc54 <__sfvwrite_r+0x24c>
  80cb90:	91400417 	ldw	r5,16(r18)
  80cb94:	1009883a 	mov	r4,r2
  80cb98:	800d883a 	mov	r6,r16
  80cb9c:	1023883a 	mov	r17,r2
  80cba0:	080d3600 	call	80d360 <memcpy>
  80cba4:	90c0030b 	ldhu	r3,12(r18)
  80cba8:	00beffc4 	movi	r2,-1025
  80cbac:	1886703a 	and	r3,r3,r2
  80cbb0:	18c02014 	ori	r3,r3,128
  80cbb4:	90c0030d 	sth	r3,12(r18)
  80cbb8:	9c07c83a 	sub	r3,r19,r16
  80cbbc:	8c05883a 	add	r2,r17,r16
  80cbc0:	a00d883a 	mov	r6,r20
  80cbc4:	a021883a 	mov	r16,r20
  80cbc8:	90800015 	stw	r2,0(r18)
  80cbcc:	90c00215 	stw	r3,8(r18)
  80cbd0:	94400415 	stw	r17,16(r18)
  80cbd4:	94c00515 	stw	r19,20(r18)
  80cbd8:	91000017 	ldw	r4,0(r18)
  80cbdc:	b80b883a 	mov	r5,r23
  80cbe0:	a023883a 	mov	r17,r20
  80cbe4:	080d4000 	call	80d400 <memmove>
  80cbe8:	90c00217 	ldw	r3,8(r18)
  80cbec:	90800017 	ldw	r2,0(r18)
  80cbf0:	a027883a 	mov	r19,r20
  80cbf4:	1c07c83a 	sub	r3,r3,r16
  80cbf8:	1405883a 	add	r2,r2,r16
  80cbfc:	90c00215 	stw	r3,8(r18)
  80cc00:	a021883a 	mov	r16,r20
  80cc04:	90800015 	stw	r2,0(r18)
  80cc08:	b0800217 	ldw	r2,8(r22)
  80cc0c:	1405c83a 	sub	r2,r2,r16
  80cc10:	b0800215 	stw	r2,8(r22)
  80cc14:	103fa826 	beq	r2,zero,80cab8 <__sfvwrite_r+0xb0>
  80cc18:	a469c83a 	sub	r20,r20,r17
  80cc1c:	91c0030b 	ldhu	r7,12(r18)
  80cc20:	bcef883a 	add	r23,r23,r19
  80cc24:	a03fbe1e 	bne	r20,zero,80cb20 <__sfvwrite_r+0x118>
  80cc28:	adc00017 	ldw	r23,0(r21)
  80cc2c:	ad000117 	ldw	r20,4(r21)
  80cc30:	ad400204 	addi	r21,r21,8
  80cc34:	003fb906 	br	80cb1c <__sfvwrite_r+0x114>
  80cc38:	ac400017 	ldw	r17,0(r21)
  80cc3c:	ac000117 	ldw	r16,4(r21)
  80cc40:	ad400204 	addi	r21,r21,8
  80cc44:	003f8a06 	br	80ca70 <__sfvwrite_r+0x68>
  80cc48:	91400417 	ldw	r5,16(r18)
  80cc4c:	e009883a 	mov	r4,fp
  80cc50:	080c6f40 	call	80c6f4 <_free_r>
  80cc54:	00800304 	movi	r2,12
  80cc58:	e0800015 	stw	r2,0(fp)
  80cc5c:	9080030b 	ldhu	r2,12(r18)
  80cc60:	013fffc4 	movi	r4,-1
  80cc64:	10801014 	ori	r2,r2,64
  80cc68:	9080030d 	sth	r2,12(r18)
  80cc6c:	003f9306 	br	80cabc <__sfvwrite_r+0xb4>
  80cc70:	0027883a 	mov	r19,zero
  80cc74:	002f883a 	mov	r23,zero
  80cc78:	d8000015 	stw	zero,0(sp)
  80cc7c:	0029883a 	mov	r20,zero
  80cc80:	98001e26 	beq	r19,zero,80ccfc <__sfvwrite_r+0x2f4>
  80cc84:	d8c00017 	ldw	r3,0(sp)
  80cc88:	1804c03a 	cmpne	r2,r3,zero
  80cc8c:	10005e26 	beq	r2,zero,80ce08 <__sfvwrite_r+0x400>
  80cc90:	9821883a 	mov	r16,r19
  80cc94:	a4c0012e 	bgeu	r20,r19,80cc9c <__sfvwrite_r+0x294>
  80cc98:	a021883a 	mov	r16,r20
  80cc9c:	91000017 	ldw	r4,0(r18)
  80cca0:	90800417 	ldw	r2,16(r18)
  80cca4:	91800217 	ldw	r6,8(r18)
  80cca8:	91c00517 	ldw	r7,20(r18)
  80ccac:	1100022e 	bgeu	r2,r4,80ccb8 <__sfvwrite_r+0x2b0>
  80ccb0:	31e3883a 	add	r17,r6,r7
  80ccb4:	8c001616 	blt	r17,r16,80cd10 <__sfvwrite_r+0x308>
  80ccb8:	81c03816 	blt	r16,r7,80cd9c <__sfvwrite_r+0x394>
  80ccbc:	90c00917 	ldw	r3,36(r18)
  80ccc0:	91400717 	ldw	r5,28(r18)
  80ccc4:	e009883a 	mov	r4,fp
  80ccc8:	b80d883a 	mov	r6,r23
  80cccc:	183ee83a 	callr	r3
  80ccd0:	1023883a 	mov	r17,r2
  80ccd4:	00bfe10e 	bge	zero,r2,80cc5c <__sfvwrite_r+0x254>
  80ccd8:	a469c83a 	sub	r20,r20,r17
  80ccdc:	a0001826 	beq	r20,zero,80cd40 <__sfvwrite_r+0x338>
  80cce0:	b0800217 	ldw	r2,8(r22)
  80cce4:	1445c83a 	sub	r2,r2,r17
  80cce8:	b0800215 	stw	r2,8(r22)
  80ccec:	103f7226 	beq	r2,zero,80cab8 <__sfvwrite_r+0xb0>
  80ccf0:	9c67c83a 	sub	r19,r19,r17
  80ccf4:	bc6f883a 	add	r23,r23,r17
  80ccf8:	983fe21e 	bne	r19,zero,80cc84 <__sfvwrite_r+0x27c>
  80ccfc:	adc00017 	ldw	r23,0(r21)
  80cd00:	acc00117 	ldw	r19,4(r21)
  80cd04:	ad400204 	addi	r21,r21,8
  80cd08:	d8000015 	stw	zero,0(sp)
  80cd0c:	003fdc06 	br	80cc80 <__sfvwrite_r+0x278>
  80cd10:	b80b883a 	mov	r5,r23
  80cd14:	880d883a 	mov	r6,r17
  80cd18:	080d4000 	call	80d400 <memmove>
  80cd1c:	90c00017 	ldw	r3,0(r18)
  80cd20:	e009883a 	mov	r4,fp
  80cd24:	900b883a 	mov	r5,r18
  80cd28:	1c47883a 	add	r3,r3,r17
  80cd2c:	90c00015 	stw	r3,0(r18)
  80cd30:	080c0d80 	call	80c0d8 <_fflush_r>
  80cd34:	103fc91e 	bne	r2,zero,80cc5c <__sfvwrite_r+0x254>
  80cd38:	a469c83a 	sub	r20,r20,r17
  80cd3c:	a03fe81e 	bne	r20,zero,80cce0 <__sfvwrite_r+0x2d8>
  80cd40:	e009883a 	mov	r4,fp
  80cd44:	900b883a 	mov	r5,r18
  80cd48:	080c0d80 	call	80c0d8 <_fflush_r>
  80cd4c:	103fc31e 	bne	r2,zero,80cc5c <__sfvwrite_r+0x254>
  80cd50:	d8000015 	stw	zero,0(sp)
  80cd54:	003fe206 	br	80cce0 <__sfvwrite_r+0x2d8>
  80cd58:	91000017 	ldw	r4,0(r18)
  80cd5c:	90800417 	ldw	r2,16(r18)
  80cd60:	1100022e 	bgeu	r2,r4,80cd6c <__sfvwrite_r+0x364>
  80cd64:	8023883a 	mov	r17,r16
  80cd68:	85003136 	bltu	r16,r20,80ce30 <__sfvwrite_r+0x428>
  80cd6c:	91c00517 	ldw	r7,20(r18)
  80cd70:	a1c01836 	bltu	r20,r7,80cdd4 <__sfvwrite_r+0x3cc>
  80cd74:	90c00917 	ldw	r3,36(r18)
  80cd78:	91400717 	ldw	r5,28(r18)
  80cd7c:	e009883a 	mov	r4,fp
  80cd80:	b80d883a 	mov	r6,r23
  80cd84:	183ee83a 	callr	r3
  80cd88:	1021883a 	mov	r16,r2
  80cd8c:	00bfb30e 	bge	zero,r2,80cc5c <__sfvwrite_r+0x254>
  80cd90:	1023883a 	mov	r17,r2
  80cd94:	1027883a 	mov	r19,r2
  80cd98:	003f9b06 	br	80cc08 <__sfvwrite_r+0x200>
  80cd9c:	b80b883a 	mov	r5,r23
  80cda0:	800d883a 	mov	r6,r16
  80cda4:	080d4000 	call	80d400 <memmove>
  80cda8:	90c00217 	ldw	r3,8(r18)
  80cdac:	90800017 	ldw	r2,0(r18)
  80cdb0:	8023883a 	mov	r17,r16
  80cdb4:	1c07c83a 	sub	r3,r3,r16
  80cdb8:	1405883a 	add	r2,r2,r16
  80cdbc:	90c00215 	stw	r3,8(r18)
  80cdc0:	90800015 	stw	r2,0(r18)
  80cdc4:	003fc406 	br	80ccd8 <__sfvwrite_r+0x2d0>
  80cdc8:	a00d883a 	mov	r6,r20
  80cdcc:	a021883a 	mov	r16,r20
  80cdd0:	003f8106 	br	80cbd8 <__sfvwrite_r+0x1d0>
  80cdd4:	b80b883a 	mov	r5,r23
  80cdd8:	a00d883a 	mov	r6,r20
  80cddc:	080d4000 	call	80d400 <memmove>
  80cde0:	90c00217 	ldw	r3,8(r18)
  80cde4:	90800017 	ldw	r2,0(r18)
  80cde8:	a021883a 	mov	r16,r20
  80cdec:	1d07c83a 	sub	r3,r3,r20
  80cdf0:	1505883a 	add	r2,r2,r20
  80cdf4:	a023883a 	mov	r17,r20
  80cdf8:	a027883a 	mov	r19,r20
  80cdfc:	90c00215 	stw	r3,8(r18)
  80ce00:	90800015 	stw	r2,0(r18)
  80ce04:	003f8006 	br	80cc08 <__sfvwrite_r+0x200>
  80ce08:	b809883a 	mov	r4,r23
  80ce0c:	01400284 	movi	r5,10
  80ce10:	980d883a 	mov	r6,r19
  80ce14:	080d27c0 	call	80d27c <memchr>
  80ce18:	10001726 	beq	r2,zero,80ce78 <__sfvwrite_r+0x470>
  80ce1c:	15c5c83a 	sub	r2,r2,r23
  80ce20:	15000044 	addi	r20,r2,1
  80ce24:	00800044 	movi	r2,1
  80ce28:	d8800015 	stw	r2,0(sp)
  80ce2c:	003f9806 	br	80cc90 <__sfvwrite_r+0x288>
  80ce30:	b80b883a 	mov	r5,r23
  80ce34:	800d883a 	mov	r6,r16
  80ce38:	080d4000 	call	80d400 <memmove>
  80ce3c:	90c00017 	ldw	r3,0(r18)
  80ce40:	e009883a 	mov	r4,fp
  80ce44:	900b883a 	mov	r5,r18
  80ce48:	1c07883a 	add	r3,r3,r16
  80ce4c:	90c00015 	stw	r3,0(r18)
  80ce50:	8027883a 	mov	r19,r16
  80ce54:	080c0d80 	call	80c0d8 <_fflush_r>
  80ce58:	103f6b26 	beq	r2,zero,80cc08 <__sfvwrite_r+0x200>
  80ce5c:	003f7f06 	br	80cc5c <__sfvwrite_r+0x254>
  80ce60:	400b883a 	mov	r5,r8
  80ce64:	e009883a 	mov	r4,fp
  80ce68:	080e56c0 	call	80e56c <_realloc_r>
  80ce6c:	103f7626 	beq	r2,zero,80cc48 <__sfvwrite_r+0x240>
  80ce70:	1023883a 	mov	r17,r2
  80ce74:	003f5006 	br	80cbb8 <__sfvwrite_r+0x1b0>
  80ce78:	00c00044 	movi	r3,1
  80ce7c:	9d000044 	addi	r20,r19,1
  80ce80:	d8c00015 	stw	r3,0(sp)
  80ce84:	003f8206 	br	80cc90 <__sfvwrite_r+0x288>
  80ce88:	9080030b 	ldhu	r2,12(r18)
  80ce8c:	00c00244 	movi	r3,9
  80ce90:	013fffc4 	movi	r4,-1
  80ce94:	10801014 	ori	r2,r2,64
  80ce98:	9080030d 	sth	r2,12(r18)
  80ce9c:	e0c00015 	stw	r3,0(fp)
  80cea0:	003f0606 	br	80cabc <__sfvwrite_r+0xb4>

0080cea4 <_fwalk_reent>:
  80cea4:	defff704 	addi	sp,sp,-36
  80cea8:	dcc00315 	stw	r19,12(sp)
  80ceac:	24c0b804 	addi	r19,r4,736
  80ceb0:	dd800615 	stw	r22,24(sp)
  80ceb4:	dd400515 	stw	r21,20(sp)
  80ceb8:	dfc00815 	stw	ra,32(sp)
  80cebc:	ddc00715 	stw	r23,28(sp)
  80cec0:	dd000415 	stw	r20,16(sp)
  80cec4:	dc800215 	stw	r18,8(sp)
  80cec8:	dc400115 	stw	r17,4(sp)
  80cecc:	dc000015 	stw	r16,0(sp)
  80ced0:	202b883a 	mov	r21,r4
  80ced4:	282d883a 	mov	r22,r5
  80ced8:	080c3600 	call	80c360 <__sfp_lock_acquire>
  80cedc:	98002126 	beq	r19,zero,80cf64 <_fwalk_reent+0xc0>
  80cee0:	002f883a 	mov	r23,zero
  80cee4:	9c800117 	ldw	r18,4(r19)
  80cee8:	9c000217 	ldw	r16,8(r19)
  80ceec:	90bfffc4 	addi	r2,r18,-1
  80cef0:	10000d16 	blt	r2,zero,80cf28 <_fwalk_reent+0x84>
  80cef4:	0023883a 	mov	r17,zero
  80cef8:	053fffc4 	movi	r20,-1
  80cefc:	8080030f 	ldh	r2,12(r16)
  80cf00:	8c400044 	addi	r17,r17,1
  80cf04:	10000626 	beq	r2,zero,80cf20 <_fwalk_reent+0x7c>
  80cf08:	8080038f 	ldh	r2,14(r16)
  80cf0c:	800b883a 	mov	r5,r16
  80cf10:	a809883a 	mov	r4,r21
  80cf14:	15000226 	beq	r2,r20,80cf20 <_fwalk_reent+0x7c>
  80cf18:	b03ee83a 	callr	r22
  80cf1c:	b8aeb03a 	or	r23,r23,r2
  80cf20:	84001704 	addi	r16,r16,92
  80cf24:	947ff51e 	bne	r18,r17,80cefc <_fwalk_reent+0x58>
  80cf28:	9cc00017 	ldw	r19,0(r19)
  80cf2c:	983fed1e 	bne	r19,zero,80cee4 <_fwalk_reent+0x40>
  80cf30:	080c3640 	call	80c364 <__sfp_lock_release>
  80cf34:	b805883a 	mov	r2,r23
  80cf38:	dfc00817 	ldw	ra,32(sp)
  80cf3c:	ddc00717 	ldw	r23,28(sp)
  80cf40:	dd800617 	ldw	r22,24(sp)
  80cf44:	dd400517 	ldw	r21,20(sp)
  80cf48:	dd000417 	ldw	r20,16(sp)
  80cf4c:	dcc00317 	ldw	r19,12(sp)
  80cf50:	dc800217 	ldw	r18,8(sp)
  80cf54:	dc400117 	ldw	r17,4(sp)
  80cf58:	dc000017 	ldw	r16,0(sp)
  80cf5c:	dec00904 	addi	sp,sp,36
  80cf60:	f800283a 	ret
  80cf64:	002f883a 	mov	r23,zero
  80cf68:	003ff106 	br	80cf30 <_fwalk_reent+0x8c>

0080cf6c <_fwalk>:
  80cf6c:	defff804 	addi	sp,sp,-32
  80cf70:	dcc00315 	stw	r19,12(sp)
  80cf74:	24c0b804 	addi	r19,r4,736
  80cf78:	dd400515 	stw	r21,20(sp)
  80cf7c:	dfc00715 	stw	ra,28(sp)
  80cf80:	dd800615 	stw	r22,24(sp)
  80cf84:	dd000415 	stw	r20,16(sp)
  80cf88:	dc800215 	stw	r18,8(sp)
  80cf8c:	dc400115 	stw	r17,4(sp)
  80cf90:	dc000015 	stw	r16,0(sp)
  80cf94:	282b883a 	mov	r21,r5
  80cf98:	080c3600 	call	80c360 <__sfp_lock_acquire>
  80cf9c:	98001f26 	beq	r19,zero,80d01c <_fwalk+0xb0>
  80cfa0:	002d883a 	mov	r22,zero
  80cfa4:	9c800117 	ldw	r18,4(r19)
  80cfa8:	9c000217 	ldw	r16,8(r19)
  80cfac:	90bfffc4 	addi	r2,r18,-1
  80cfb0:	10000c16 	blt	r2,zero,80cfe4 <_fwalk+0x78>
  80cfb4:	0023883a 	mov	r17,zero
  80cfb8:	053fffc4 	movi	r20,-1
  80cfbc:	8080030f 	ldh	r2,12(r16)
  80cfc0:	8c400044 	addi	r17,r17,1
  80cfc4:	10000526 	beq	r2,zero,80cfdc <_fwalk+0x70>
  80cfc8:	8080038f 	ldh	r2,14(r16)
  80cfcc:	8009883a 	mov	r4,r16
  80cfd0:	15000226 	beq	r2,r20,80cfdc <_fwalk+0x70>
  80cfd4:	a83ee83a 	callr	r21
  80cfd8:	b0acb03a 	or	r22,r22,r2
  80cfdc:	84001704 	addi	r16,r16,92
  80cfe0:	947ff61e 	bne	r18,r17,80cfbc <_fwalk+0x50>
  80cfe4:	9cc00017 	ldw	r19,0(r19)
  80cfe8:	983fee1e 	bne	r19,zero,80cfa4 <_fwalk+0x38>
  80cfec:	080c3640 	call	80c364 <__sfp_lock_release>
  80cff0:	b005883a 	mov	r2,r22
  80cff4:	dfc00717 	ldw	ra,28(sp)
  80cff8:	dd800617 	ldw	r22,24(sp)
  80cffc:	dd400517 	ldw	r21,20(sp)
  80d000:	dd000417 	ldw	r20,16(sp)
  80d004:	dcc00317 	ldw	r19,12(sp)
  80d008:	dc800217 	ldw	r18,8(sp)
  80d00c:	dc400117 	ldw	r17,4(sp)
  80d010:	dc000017 	ldw	r16,0(sp)
  80d014:	dec00804 	addi	sp,sp,32
  80d018:	f800283a 	ret
  80d01c:	002d883a 	mov	r22,zero
  80d020:	003ff206 	br	80cfec <_fwalk+0x80>

0080d024 <__locale_charset>:
  80d024:	d0a00a17 	ldw	r2,-32728(gp)
  80d028:	f800283a 	ret

0080d02c <_localeconv_r>:
  80d02c:	008020b4 	movhi	r2,130
  80d030:	10b30504 	addi	r2,r2,-13292
  80d034:	f800283a 	ret

0080d038 <localeconv>:
  80d038:	008020b4 	movhi	r2,130
  80d03c:	10bb2804 	addi	r2,r2,-4960
  80d040:	11000017 	ldw	r4,0(r2)
  80d044:	080d02c1 	jmpi	80d02c <_localeconv_r>

0080d048 <_setlocale_r>:
  80d048:	defffc04 	addi	sp,sp,-16
  80d04c:	00c020b4 	movhi	r3,130
  80d050:	18f2db04 	addi	r3,r3,-13460
  80d054:	dc800215 	stw	r18,8(sp)
  80d058:	dc400115 	stw	r17,4(sp)
  80d05c:	dc000015 	stw	r16,0(sp)
  80d060:	2023883a 	mov	r17,r4
  80d064:	2825883a 	mov	r18,r5
  80d068:	dfc00315 	stw	ra,12(sp)
  80d06c:	3021883a 	mov	r16,r6
  80d070:	3009883a 	mov	r4,r6
  80d074:	180b883a 	mov	r5,r3
  80d078:	30000926 	beq	r6,zero,80d0a0 <_setlocale_r+0x58>
  80d07c:	080ecec0 	call	80ecec <strcmp>
  80d080:	8009883a 	mov	r4,r16
  80d084:	014020b4 	movhi	r5,130
  80d088:	2972ec04 	addi	r5,r5,-13392
  80d08c:	10000b1e 	bne	r2,zero,80d0bc <_setlocale_r+0x74>
  80d090:	8c000d15 	stw	r16,52(r17)
  80d094:	8c800c15 	stw	r18,48(r17)
  80d098:	00c020b4 	movhi	r3,130
  80d09c:	18f2db04 	addi	r3,r3,-13460
  80d0a0:	1805883a 	mov	r2,r3
  80d0a4:	dfc00317 	ldw	ra,12(sp)
  80d0a8:	dc800217 	ldw	r18,8(sp)
  80d0ac:	dc400117 	ldw	r17,4(sp)
  80d0b0:	dc000017 	ldw	r16,0(sp)
  80d0b4:	dec00404 	addi	sp,sp,16
  80d0b8:	f800283a 	ret
  80d0bc:	080ecec0 	call	80ecec <strcmp>
  80d0c0:	0007883a 	mov	r3,zero
  80d0c4:	103ff226 	beq	r2,zero,80d090 <_setlocale_r+0x48>
  80d0c8:	003ff506 	br	80d0a0 <_setlocale_r+0x58>

0080d0cc <setlocale>:
  80d0cc:	018020b4 	movhi	r6,130
  80d0d0:	31bb2804 	addi	r6,r6,-4960
  80d0d4:	2007883a 	mov	r3,r4
  80d0d8:	31000017 	ldw	r4,0(r6)
  80d0dc:	280d883a 	mov	r6,r5
  80d0e0:	180b883a 	mov	r5,r3
  80d0e4:	080d0481 	jmpi	80d048 <_setlocale_r>

0080d0e8 <__smakebuf_r>:
  80d0e8:	2880030b 	ldhu	r2,12(r5)
  80d0ec:	deffed04 	addi	sp,sp,-76
  80d0f0:	dc401015 	stw	r17,64(sp)
  80d0f4:	1080008c 	andi	r2,r2,2
  80d0f8:	dc000f15 	stw	r16,60(sp)
  80d0fc:	dfc01215 	stw	ra,72(sp)
  80d100:	dc801115 	stw	r18,68(sp)
  80d104:	2821883a 	mov	r16,r5
  80d108:	2023883a 	mov	r17,r4
  80d10c:	10000b26 	beq	r2,zero,80d13c <__smakebuf_r+0x54>
  80d110:	28c010c4 	addi	r3,r5,67
  80d114:	00800044 	movi	r2,1
  80d118:	28800515 	stw	r2,20(r5)
  80d11c:	28c00415 	stw	r3,16(r5)
  80d120:	28c00015 	stw	r3,0(r5)
  80d124:	dfc01217 	ldw	ra,72(sp)
  80d128:	dc801117 	ldw	r18,68(sp)
  80d12c:	dc401017 	ldw	r17,64(sp)
  80d130:	dc000f17 	ldw	r16,60(sp)
  80d134:	dec01304 	addi	sp,sp,76
  80d138:	f800283a 	ret
  80d13c:	2940038f 	ldh	r5,14(r5)
  80d140:	28002116 	blt	r5,zero,80d1c8 <__smakebuf_r+0xe0>
  80d144:	d80d883a 	mov	r6,sp
  80d148:	080f0680 	call	80f068 <_fstat_r>
  80d14c:	10001e16 	blt	r2,zero,80d1c8 <__smakebuf_r+0xe0>
  80d150:	d8800117 	ldw	r2,4(sp)
  80d154:	00e00014 	movui	r3,32768
  80d158:	113c000c 	andi	r4,r2,61440
  80d15c:	20c03126 	beq	r4,r3,80d224 <__smakebuf_r+0x13c>
  80d160:	8080030b 	ldhu	r2,12(r16)
  80d164:	00c80004 	movi	r3,8192
  80d168:	10820014 	ori	r2,r2,2048
  80d16c:	8080030d 	sth	r2,12(r16)
  80d170:	20c01e26 	beq	r4,r3,80d1ec <__smakebuf_r+0x104>
  80d174:	04810004 	movi	r18,1024
  80d178:	8809883a 	mov	r4,r17
  80d17c:	900b883a 	mov	r5,r18
  80d180:	0807dc80 	call	807dc8 <_malloc_r>
  80d184:	1009883a 	mov	r4,r2
  80d188:	10003126 	beq	r2,zero,80d250 <__smakebuf_r+0x168>
  80d18c:	80c0030b 	ldhu	r3,12(r16)
  80d190:	00802074 	movhi	r2,129
  80d194:	10b11504 	addi	r2,r2,-15276
  80d198:	88800f15 	stw	r2,60(r17)
  80d19c:	18c02014 	ori	r3,r3,128
  80d1a0:	84800515 	stw	r18,20(r16)
  80d1a4:	80c0030d 	sth	r3,12(r16)
  80d1a8:	81000415 	stw	r4,16(r16)
  80d1ac:	81000015 	stw	r4,0(r16)
  80d1b0:	dfc01217 	ldw	ra,72(sp)
  80d1b4:	dc801117 	ldw	r18,68(sp)
  80d1b8:	dc401017 	ldw	r17,64(sp)
  80d1bc:	dc000f17 	ldw	r16,60(sp)
  80d1c0:	dec01304 	addi	sp,sp,76
  80d1c4:	f800283a 	ret
  80d1c8:	80c0030b 	ldhu	r3,12(r16)
  80d1cc:	1880200c 	andi	r2,r3,128
  80d1d0:	10000426 	beq	r2,zero,80d1e4 <__smakebuf_r+0xfc>
  80d1d4:	04801004 	movi	r18,64
  80d1d8:	18820014 	ori	r2,r3,2048
  80d1dc:	8080030d 	sth	r2,12(r16)
  80d1e0:	003fe506 	br	80d178 <__smakebuf_r+0x90>
  80d1e4:	04810004 	movi	r18,1024
  80d1e8:	003ffb06 	br	80d1d8 <__smakebuf_r+0xf0>
  80d1ec:	8140038f 	ldh	r5,14(r16)
  80d1f0:	8809883a 	mov	r4,r17
  80d1f4:	080f0dc0 	call	80f0dc <_isatty_r>
  80d1f8:	103fde26 	beq	r2,zero,80d174 <__smakebuf_r+0x8c>
  80d1fc:	8080030b 	ldhu	r2,12(r16)
  80d200:	80c010c4 	addi	r3,r16,67
  80d204:	04810004 	movi	r18,1024
  80d208:	10800054 	ori	r2,r2,1
  80d20c:	8080030d 	sth	r2,12(r16)
  80d210:	00800044 	movi	r2,1
  80d214:	80c00415 	stw	r3,16(r16)
  80d218:	80800515 	stw	r2,20(r16)
  80d21c:	80c00015 	stw	r3,0(r16)
  80d220:	003fd506 	br	80d178 <__smakebuf_r+0x90>
  80d224:	80c00a17 	ldw	r3,40(r16)
  80d228:	00802074 	movhi	r2,129
  80d22c:	10baea04 	addi	r2,r2,-5208
  80d230:	18bfcb1e 	bne	r3,r2,80d160 <__smakebuf_r+0x78>
  80d234:	8080030b 	ldhu	r2,12(r16)
  80d238:	00c10004 	movi	r3,1024
  80d23c:	1825883a 	mov	r18,r3
  80d240:	10c4b03a 	or	r2,r2,r3
  80d244:	8080030d 	sth	r2,12(r16)
  80d248:	80c01315 	stw	r3,76(r16)
  80d24c:	003fca06 	br	80d178 <__smakebuf_r+0x90>
  80d250:	8100030b 	ldhu	r4,12(r16)
  80d254:	2080800c 	andi	r2,r4,512
  80d258:	103fb21e 	bne	r2,zero,80d124 <__smakebuf_r+0x3c>
  80d25c:	80c010c4 	addi	r3,r16,67
  80d260:	21000094 	ori	r4,r4,2
  80d264:	00800044 	movi	r2,1
  80d268:	80800515 	stw	r2,20(r16)
  80d26c:	8100030d 	sth	r4,12(r16)
  80d270:	80c00415 	stw	r3,16(r16)
  80d274:	80c00015 	stw	r3,0(r16)
  80d278:	003faa06 	br	80d124 <__smakebuf_r+0x3c>

0080d27c <memchr>:
  80d27c:	008000c4 	movi	r2,3
  80d280:	29403fcc 	andi	r5,r5,255
  80d284:	2007883a 	mov	r3,r4
  80d288:	1180022e 	bgeu	r2,r6,80d294 <memchr+0x18>
  80d28c:	2084703a 	and	r2,r4,r2
  80d290:	10000b26 	beq	r2,zero,80d2c0 <memchr+0x44>
  80d294:	313fffc4 	addi	r4,r6,-1
  80d298:	3000051e 	bne	r6,zero,80d2b0 <memchr+0x34>
  80d29c:	00002c06 	br	80d350 <memchr+0xd4>
  80d2a0:	213fffc4 	addi	r4,r4,-1
  80d2a4:	00bfffc4 	movi	r2,-1
  80d2a8:	18c00044 	addi	r3,r3,1
  80d2ac:	20802826 	beq	r4,r2,80d350 <memchr+0xd4>
  80d2b0:	18800003 	ldbu	r2,0(r3)
  80d2b4:	28bffa1e 	bne	r5,r2,80d2a0 <memchr+0x24>
  80d2b8:	1805883a 	mov	r2,r3
  80d2bc:	f800283a 	ret
  80d2c0:	0011883a 	mov	r8,zero
  80d2c4:	0007883a 	mov	r3,zero
  80d2c8:	01c00104 	movi	r7,4
  80d2cc:	4004923a 	slli	r2,r8,8
  80d2d0:	18c00044 	addi	r3,r3,1
  80d2d4:	1151883a 	add	r8,r2,r5
  80d2d8:	19fffc1e 	bne	r3,r7,80d2cc <memchr+0x50>
  80d2dc:	02bfbff4 	movhi	r10,65279
  80d2e0:	52bfbfc4 	addi	r10,r10,-257
  80d2e4:	02602074 	movhi	r9,32897
  80d2e8:	4a602004 	addi	r9,r9,-32640
  80d2ec:	02c000c4 	movi	r11,3
  80d2f0:	20800017 	ldw	r2,0(r4)
  80d2f4:	31bfff04 	addi	r6,r6,-4
  80d2f8:	200f883a 	mov	r7,r4
  80d2fc:	1204f03a 	xor	r2,r2,r8
  80d300:	1287883a 	add	r3,r2,r10
  80d304:	1a46703a 	and	r3,r3,r9
  80d308:	0084303a 	nor	r2,zero,r2
  80d30c:	10c4703a 	and	r2,r2,r3
  80d310:	10000b26 	beq	r2,zero,80d340 <memchr+0xc4>
  80d314:	20800003 	ldbu	r2,0(r4)
  80d318:	28800f26 	beq	r5,r2,80d358 <memchr+0xdc>
  80d31c:	20800043 	ldbu	r2,1(r4)
  80d320:	21c00044 	addi	r7,r4,1
  80d324:	28800c26 	beq	r5,r2,80d358 <memchr+0xdc>
  80d328:	20800083 	ldbu	r2,2(r4)
  80d32c:	21c00084 	addi	r7,r4,2
  80d330:	28800926 	beq	r5,r2,80d358 <memchr+0xdc>
  80d334:	208000c3 	ldbu	r2,3(r4)
  80d338:	21c000c4 	addi	r7,r4,3
  80d33c:	28800626 	beq	r5,r2,80d358 <memchr+0xdc>
  80d340:	21000104 	addi	r4,r4,4
  80d344:	59bfea36 	bltu	r11,r6,80d2f0 <memchr+0x74>
  80d348:	2007883a 	mov	r3,r4
  80d34c:	003fd106 	br	80d294 <memchr+0x18>
  80d350:	0005883a 	mov	r2,zero
  80d354:	f800283a 	ret
  80d358:	3805883a 	mov	r2,r7
  80d35c:	f800283a 	ret

0080d360 <memcpy>:
  80d360:	01c003c4 	movi	r7,15
  80d364:	2007883a 	mov	r3,r4
  80d368:	3980032e 	bgeu	r7,r6,80d378 <memcpy+0x18>
  80d36c:	2904b03a 	or	r2,r5,r4
  80d370:	108000cc 	andi	r2,r2,3
  80d374:	10000926 	beq	r2,zero,80d39c <memcpy+0x3c>
  80d378:	30000626 	beq	r6,zero,80d394 <memcpy+0x34>
  80d37c:	30cd883a 	add	r6,r6,r3
  80d380:	28800003 	ldbu	r2,0(r5)
  80d384:	29400044 	addi	r5,r5,1
  80d388:	18800005 	stb	r2,0(r3)
  80d38c:	18c00044 	addi	r3,r3,1
  80d390:	30fffb1e 	bne	r6,r3,80d380 <memcpy+0x20>
  80d394:	2005883a 	mov	r2,r4
  80d398:	f800283a 	ret
  80d39c:	3811883a 	mov	r8,r7
  80d3a0:	200f883a 	mov	r7,r4
  80d3a4:	28c00017 	ldw	r3,0(r5)
  80d3a8:	31bffc04 	addi	r6,r6,-16
  80d3ac:	38c00015 	stw	r3,0(r7)
  80d3b0:	28800117 	ldw	r2,4(r5)
  80d3b4:	38800115 	stw	r2,4(r7)
  80d3b8:	28c00217 	ldw	r3,8(r5)
  80d3bc:	38c00215 	stw	r3,8(r7)
  80d3c0:	28800317 	ldw	r2,12(r5)
  80d3c4:	29400404 	addi	r5,r5,16
  80d3c8:	38800315 	stw	r2,12(r7)
  80d3cc:	39c00404 	addi	r7,r7,16
  80d3d0:	41bff436 	bltu	r8,r6,80d3a4 <memcpy+0x44>
  80d3d4:	008000c4 	movi	r2,3
  80d3d8:	1180072e 	bgeu	r2,r6,80d3f8 <memcpy+0x98>
  80d3dc:	1007883a 	mov	r3,r2
  80d3e0:	28800017 	ldw	r2,0(r5)
  80d3e4:	31bfff04 	addi	r6,r6,-4
  80d3e8:	29400104 	addi	r5,r5,4
  80d3ec:	38800015 	stw	r2,0(r7)
  80d3f0:	39c00104 	addi	r7,r7,4
  80d3f4:	19bffa36 	bltu	r3,r6,80d3e0 <memcpy+0x80>
  80d3f8:	3807883a 	mov	r3,r7
  80d3fc:	003fde06 	br	80d378 <memcpy+0x18>

0080d400 <memmove>:
  80d400:	2807883a 	mov	r3,r5
  80d404:	2011883a 	mov	r8,r4
  80d408:	29000c2e 	bgeu	r5,r4,80d43c <memmove+0x3c>
  80d40c:	298f883a 	add	r7,r5,r6
  80d410:	21c00a2e 	bgeu	r4,r7,80d43c <memmove+0x3c>
  80d414:	30000726 	beq	r6,zero,80d434 <memmove+0x34>
  80d418:	2187883a 	add	r3,r4,r6
  80d41c:	198dc83a 	sub	r6,r3,r6
  80d420:	39ffffc4 	addi	r7,r7,-1
  80d424:	38800003 	ldbu	r2,0(r7)
  80d428:	18ffffc4 	addi	r3,r3,-1
  80d42c:	18800005 	stb	r2,0(r3)
  80d430:	19bffb1e 	bne	r3,r6,80d420 <memmove+0x20>
  80d434:	2005883a 	mov	r2,r4
  80d438:	f800283a 	ret
  80d43c:	01c003c4 	movi	r7,15
  80d440:	39800a36 	bltu	r7,r6,80d46c <memmove+0x6c>
  80d444:	303ffb26 	beq	r6,zero,80d434 <memmove+0x34>
  80d448:	400f883a 	mov	r7,r8
  80d44c:	320d883a 	add	r6,r6,r8
  80d450:	28800003 	ldbu	r2,0(r5)
  80d454:	29400044 	addi	r5,r5,1
  80d458:	38800005 	stb	r2,0(r7)
  80d45c:	39c00044 	addi	r7,r7,1
  80d460:	39bffb1e 	bne	r7,r6,80d450 <memmove+0x50>
  80d464:	2005883a 	mov	r2,r4
  80d468:	f800283a 	ret
  80d46c:	1904b03a 	or	r2,r3,r4
  80d470:	108000cc 	andi	r2,r2,3
  80d474:	103ff31e 	bne	r2,zero,80d444 <memmove+0x44>
  80d478:	3811883a 	mov	r8,r7
  80d47c:	180b883a 	mov	r5,r3
  80d480:	200f883a 	mov	r7,r4
  80d484:	28c00017 	ldw	r3,0(r5)
  80d488:	31bffc04 	addi	r6,r6,-16
  80d48c:	38c00015 	stw	r3,0(r7)
  80d490:	28800117 	ldw	r2,4(r5)
  80d494:	38800115 	stw	r2,4(r7)
  80d498:	28c00217 	ldw	r3,8(r5)
  80d49c:	38c00215 	stw	r3,8(r7)
  80d4a0:	28800317 	ldw	r2,12(r5)
  80d4a4:	29400404 	addi	r5,r5,16
  80d4a8:	38800315 	stw	r2,12(r7)
  80d4ac:	39c00404 	addi	r7,r7,16
  80d4b0:	41bff436 	bltu	r8,r6,80d484 <memmove+0x84>
  80d4b4:	008000c4 	movi	r2,3
  80d4b8:	1180072e 	bgeu	r2,r6,80d4d8 <memmove+0xd8>
  80d4bc:	1007883a 	mov	r3,r2
  80d4c0:	28800017 	ldw	r2,0(r5)
  80d4c4:	31bfff04 	addi	r6,r6,-4
  80d4c8:	29400104 	addi	r5,r5,4
  80d4cc:	38800015 	stw	r2,0(r7)
  80d4d0:	39c00104 	addi	r7,r7,4
  80d4d4:	19bffa36 	bltu	r3,r6,80d4c0 <memmove+0xc0>
  80d4d8:	3811883a 	mov	r8,r7
  80d4dc:	003fd906 	br	80d444 <memmove+0x44>

0080d4e0 <memset>:
  80d4e0:	008000c4 	movi	r2,3
  80d4e4:	29403fcc 	andi	r5,r5,255
  80d4e8:	2007883a 	mov	r3,r4
  80d4ec:	1180022e 	bgeu	r2,r6,80d4f8 <memset+0x18>
  80d4f0:	2084703a 	and	r2,r4,r2
  80d4f4:	10000826 	beq	r2,zero,80d518 <memset+0x38>
  80d4f8:	30000526 	beq	r6,zero,80d510 <memset+0x30>
  80d4fc:	2805883a 	mov	r2,r5
  80d500:	30cd883a 	add	r6,r6,r3
  80d504:	18800005 	stb	r2,0(r3)
  80d508:	18c00044 	addi	r3,r3,1
  80d50c:	19bffd1e 	bne	r3,r6,80d504 <memset+0x24>
  80d510:	2005883a 	mov	r2,r4
  80d514:	f800283a 	ret
  80d518:	2804923a 	slli	r2,r5,8
  80d51c:	020003c4 	movi	r8,15
  80d520:	200f883a 	mov	r7,r4
  80d524:	2884b03a 	or	r2,r5,r2
  80d528:	1006943a 	slli	r3,r2,16
  80d52c:	10c6b03a 	or	r3,r2,r3
  80d530:	41800a2e 	bgeu	r8,r6,80d55c <memset+0x7c>
  80d534:	4005883a 	mov	r2,r8
  80d538:	31bffc04 	addi	r6,r6,-16
  80d53c:	38c00015 	stw	r3,0(r7)
  80d540:	38c00115 	stw	r3,4(r7)
  80d544:	38c00215 	stw	r3,8(r7)
  80d548:	38c00315 	stw	r3,12(r7)
  80d54c:	39c00404 	addi	r7,r7,16
  80d550:	11bff936 	bltu	r2,r6,80d538 <memset+0x58>
  80d554:	008000c4 	movi	r2,3
  80d558:	1180052e 	bgeu	r2,r6,80d570 <memset+0x90>
  80d55c:	31bfff04 	addi	r6,r6,-4
  80d560:	008000c4 	movi	r2,3
  80d564:	38c00015 	stw	r3,0(r7)
  80d568:	39c00104 	addi	r7,r7,4
  80d56c:	11bffb36 	bltu	r2,r6,80d55c <memset+0x7c>
  80d570:	3807883a 	mov	r3,r7
  80d574:	003fe006 	br	80d4f8 <memset+0x18>

0080d578 <_Bfree>:
  80d578:	28000826 	beq	r5,zero,80d59c <_Bfree+0x24>
  80d57c:	28800117 	ldw	r2,4(r5)
  80d580:	21001317 	ldw	r4,76(r4)
  80d584:	1085883a 	add	r2,r2,r2
  80d588:	1085883a 	add	r2,r2,r2
  80d58c:	1105883a 	add	r2,r2,r4
  80d590:	10c00017 	ldw	r3,0(r2)
  80d594:	28c00015 	stw	r3,0(r5)
  80d598:	11400015 	stw	r5,0(r2)
  80d59c:	f800283a 	ret

0080d5a0 <__hi0bits>:
  80d5a0:	20bfffec 	andhi	r2,r4,65535
  80d5a4:	10001426 	beq	r2,zero,80d5f8 <__hi0bits+0x58>
  80d5a8:	0007883a 	mov	r3,zero
  80d5ac:	20bfc02c 	andhi	r2,r4,65280
  80d5b0:	1000021e 	bne	r2,zero,80d5bc <__hi0bits+0x1c>
  80d5b4:	2008923a 	slli	r4,r4,8
  80d5b8:	18c00204 	addi	r3,r3,8
  80d5bc:	20bc002c 	andhi	r2,r4,61440
  80d5c0:	1000021e 	bne	r2,zero,80d5cc <__hi0bits+0x2c>
  80d5c4:	2008913a 	slli	r4,r4,4
  80d5c8:	18c00104 	addi	r3,r3,4
  80d5cc:	20b0002c 	andhi	r2,r4,49152
  80d5d0:	1000031e 	bne	r2,zero,80d5e0 <__hi0bits+0x40>
  80d5d4:	2105883a 	add	r2,r4,r4
  80d5d8:	18c00084 	addi	r3,r3,2
  80d5dc:	1089883a 	add	r4,r2,r2
  80d5e0:	20000316 	blt	r4,zero,80d5f0 <__hi0bits+0x50>
  80d5e4:	2090002c 	andhi	r2,r4,16384
  80d5e8:	10000626 	beq	r2,zero,80d604 <__hi0bits+0x64>
  80d5ec:	18c00044 	addi	r3,r3,1
  80d5f0:	1805883a 	mov	r2,r3
  80d5f4:	f800283a 	ret
  80d5f8:	2008943a 	slli	r4,r4,16
  80d5fc:	00c00404 	movi	r3,16
  80d600:	003fea06 	br	80d5ac <__hi0bits+0xc>
  80d604:	00c00804 	movi	r3,32
  80d608:	1805883a 	mov	r2,r3
  80d60c:	f800283a 	ret

0080d610 <__lo0bits>:
  80d610:	20c00017 	ldw	r3,0(r4)
  80d614:	188001cc 	andi	r2,r3,7
  80d618:	10000a26 	beq	r2,zero,80d644 <__lo0bits+0x34>
  80d61c:	1880004c 	andi	r2,r3,1
  80d620:	1005003a 	cmpeq	r2,r2,zero
  80d624:	10002126 	beq	r2,zero,80d6ac <__lo0bits+0x9c>
  80d628:	1880008c 	andi	r2,r3,2
  80d62c:	1000251e 	bne	r2,zero,80d6c4 <__lo0bits+0xb4>
  80d630:	1804d0ba 	srli	r2,r3,2
  80d634:	01400084 	movi	r5,2
  80d638:	20800015 	stw	r2,0(r4)
  80d63c:	2805883a 	mov	r2,r5
  80d640:	f800283a 	ret
  80d644:	18bfffcc 	andi	r2,r3,65535
  80d648:	10001526 	beq	r2,zero,80d6a0 <__lo0bits+0x90>
  80d64c:	000b883a 	mov	r5,zero
  80d650:	18803fcc 	andi	r2,r3,255
  80d654:	1000021e 	bne	r2,zero,80d660 <__lo0bits+0x50>
  80d658:	1806d23a 	srli	r3,r3,8
  80d65c:	29400204 	addi	r5,r5,8
  80d660:	188003cc 	andi	r2,r3,15
  80d664:	1000021e 	bne	r2,zero,80d670 <__lo0bits+0x60>
  80d668:	1806d13a 	srli	r3,r3,4
  80d66c:	29400104 	addi	r5,r5,4
  80d670:	188000cc 	andi	r2,r3,3
  80d674:	1000021e 	bne	r2,zero,80d680 <__lo0bits+0x70>
  80d678:	1806d0ba 	srli	r3,r3,2
  80d67c:	29400084 	addi	r5,r5,2
  80d680:	1880004c 	andi	r2,r3,1
  80d684:	1000031e 	bne	r2,zero,80d694 <__lo0bits+0x84>
  80d688:	1806d07a 	srli	r3,r3,1
  80d68c:	18000a26 	beq	r3,zero,80d6b8 <__lo0bits+0xa8>
  80d690:	29400044 	addi	r5,r5,1
  80d694:	2805883a 	mov	r2,r5
  80d698:	20c00015 	stw	r3,0(r4)
  80d69c:	f800283a 	ret
  80d6a0:	1806d43a 	srli	r3,r3,16
  80d6a4:	01400404 	movi	r5,16
  80d6a8:	003fe906 	br	80d650 <__lo0bits+0x40>
  80d6ac:	000b883a 	mov	r5,zero
  80d6b0:	2805883a 	mov	r2,r5
  80d6b4:	f800283a 	ret
  80d6b8:	01400804 	movi	r5,32
  80d6bc:	2805883a 	mov	r2,r5
  80d6c0:	f800283a 	ret
  80d6c4:	1804d07a 	srli	r2,r3,1
  80d6c8:	01400044 	movi	r5,1
  80d6cc:	20800015 	stw	r2,0(r4)
  80d6d0:	003fda06 	br	80d63c <__lo0bits+0x2c>

0080d6d4 <__mcmp>:
  80d6d4:	20800417 	ldw	r2,16(r4)
  80d6d8:	28c00417 	ldw	r3,16(r5)
  80d6dc:	10cfc83a 	sub	r7,r2,r3
  80d6e0:	38000c1e 	bne	r7,zero,80d714 <__mcmp+0x40>
  80d6e4:	18c5883a 	add	r2,r3,r3
  80d6e8:	1085883a 	add	r2,r2,r2
  80d6ec:	10c00504 	addi	r3,r2,20
  80d6f0:	21000504 	addi	r4,r4,20
  80d6f4:	28cb883a 	add	r5,r5,r3
  80d6f8:	2085883a 	add	r2,r4,r2
  80d6fc:	10bfff04 	addi	r2,r2,-4
  80d700:	297fff04 	addi	r5,r5,-4
  80d704:	11800017 	ldw	r6,0(r2)
  80d708:	28c00017 	ldw	r3,0(r5)
  80d70c:	30c0031e 	bne	r6,r3,80d71c <__mcmp+0x48>
  80d710:	20bffa36 	bltu	r4,r2,80d6fc <__mcmp+0x28>
  80d714:	3805883a 	mov	r2,r7
  80d718:	f800283a 	ret
  80d71c:	30c00336 	bltu	r6,r3,80d72c <__mcmp+0x58>
  80d720:	01c00044 	movi	r7,1
  80d724:	3805883a 	mov	r2,r7
  80d728:	f800283a 	ret
  80d72c:	01ffffc4 	movi	r7,-1
  80d730:	003ff806 	br	80d714 <__mcmp+0x40>

0080d734 <__ulp>:
  80d734:	295ffc2c 	andhi	r5,r5,32752
  80d738:	013f3034 	movhi	r4,64704
  80d73c:	290b883a 	add	r5,r5,r4
  80d740:	0145c83a 	sub	r2,zero,r5
  80d744:	1007d53a 	srai	r3,r2,20
  80d748:	000d883a 	mov	r6,zero
  80d74c:	0140040e 	bge	zero,r5,80d760 <__ulp+0x2c>
  80d750:	280f883a 	mov	r7,r5
  80d754:	3807883a 	mov	r3,r7
  80d758:	3005883a 	mov	r2,r6
  80d75c:	f800283a 	ret
  80d760:	008004c4 	movi	r2,19
  80d764:	193ffb04 	addi	r4,r3,-20
  80d768:	10c00c0e 	bge	r2,r3,80d79c <__ulp+0x68>
  80d76c:	008007c4 	movi	r2,31
  80d770:	1107c83a 	sub	r3,r2,r4
  80d774:	00800784 	movi	r2,30
  80d778:	01400044 	movi	r5,1
  80d77c:	11000216 	blt	r2,r4,80d788 <__ulp+0x54>
  80d780:	00800044 	movi	r2,1
  80d784:	10ca983a 	sll	r5,r2,r3
  80d788:	000f883a 	mov	r7,zero
  80d78c:	280d883a 	mov	r6,r5
  80d790:	3807883a 	mov	r3,r7
  80d794:	3005883a 	mov	r2,r6
  80d798:	f800283a 	ret
  80d79c:	00800234 	movhi	r2,8
  80d7a0:	10cfd83a 	sra	r7,r2,r3
  80d7a4:	000d883a 	mov	r6,zero
  80d7a8:	3005883a 	mov	r2,r6
  80d7ac:	3807883a 	mov	r3,r7
  80d7b0:	f800283a 	ret

0080d7b4 <__b2d>:
  80d7b4:	20800417 	ldw	r2,16(r4)
  80d7b8:	defff904 	addi	sp,sp,-28
  80d7bc:	dd000415 	stw	r20,16(sp)
  80d7c0:	1085883a 	add	r2,r2,r2
  80d7c4:	25000504 	addi	r20,r4,20
  80d7c8:	1085883a 	add	r2,r2,r2
  80d7cc:	dc000015 	stw	r16,0(sp)
  80d7d0:	a0a1883a 	add	r16,r20,r2
  80d7d4:	dd400515 	stw	r21,20(sp)
  80d7d8:	857fff17 	ldw	r21,-4(r16)
  80d7dc:	dc400115 	stw	r17,4(sp)
  80d7e0:	dfc00615 	stw	ra,24(sp)
  80d7e4:	a809883a 	mov	r4,r21
  80d7e8:	2823883a 	mov	r17,r5
  80d7ec:	dcc00315 	stw	r19,12(sp)
  80d7f0:	dc800215 	stw	r18,8(sp)
  80d7f4:	080d5a00 	call	80d5a0 <__hi0bits>
  80d7f8:	100b883a 	mov	r5,r2
  80d7fc:	00800804 	movi	r2,32
  80d800:	1145c83a 	sub	r2,r2,r5
  80d804:	88800015 	stw	r2,0(r17)
  80d808:	00800284 	movi	r2,10
  80d80c:	80ffff04 	addi	r3,r16,-4
  80d810:	11401416 	blt	r2,r5,80d864 <__b2d+0xb0>
  80d814:	008002c4 	movi	r2,11
  80d818:	1149c83a 	sub	r4,r2,r5
  80d81c:	a0c02736 	bltu	r20,r3,80d8bc <__b2d+0x108>
  80d820:	000d883a 	mov	r6,zero
  80d824:	28800544 	addi	r2,r5,21
  80d828:	a906d83a 	srl	r3,r21,r4
  80d82c:	a884983a 	sll	r2,r21,r2
  80d830:	1ccffc34 	orhi	r19,r3,16368
  80d834:	11a4b03a 	or	r18,r2,r6
  80d838:	9005883a 	mov	r2,r18
  80d83c:	9807883a 	mov	r3,r19
  80d840:	dfc00617 	ldw	ra,24(sp)
  80d844:	dd400517 	ldw	r21,20(sp)
  80d848:	dd000417 	ldw	r20,16(sp)
  80d84c:	dcc00317 	ldw	r19,12(sp)
  80d850:	dc800217 	ldw	r18,8(sp)
  80d854:	dc400117 	ldw	r17,4(sp)
  80d858:	dc000017 	ldw	r16,0(sp)
  80d85c:	dec00704 	addi	sp,sp,28
  80d860:	f800283a 	ret
  80d864:	a0c00e36 	bltu	r20,r3,80d8a0 <__b2d+0xec>
  80d868:	293ffd44 	addi	r4,r5,-11
  80d86c:	000d883a 	mov	r6,zero
  80d870:	20000f26 	beq	r4,zero,80d8b0 <__b2d+0xfc>
  80d874:	00800804 	movi	r2,32
  80d878:	110bc83a 	sub	r5,r2,r4
  80d87c:	a0c01236 	bltu	r20,r3,80d8c8 <__b2d+0x114>
  80d880:	000f883a 	mov	r7,zero
  80d884:	a904983a 	sll	r2,r21,r4
  80d888:	3146d83a 	srl	r3,r6,r5
  80d88c:	3108983a 	sll	r4,r6,r4
  80d890:	108ffc34 	orhi	r2,r2,16368
  80d894:	18a6b03a 	or	r19,r3,r2
  80d898:	3924b03a 	or	r18,r7,r4
  80d89c:	003fe606 	br	80d838 <__b2d+0x84>
  80d8a0:	293ffd44 	addi	r4,r5,-11
  80d8a4:	81bffe17 	ldw	r6,-8(r16)
  80d8a8:	80fffe04 	addi	r3,r16,-8
  80d8ac:	203ff11e 	bne	r4,zero,80d874 <__b2d+0xc0>
  80d8b0:	accffc34 	orhi	r19,r21,16368
  80d8b4:	3025883a 	mov	r18,r6
  80d8b8:	003fdf06 	br	80d838 <__b2d+0x84>
  80d8bc:	18bfff17 	ldw	r2,-4(r3)
  80d8c0:	110cd83a 	srl	r6,r2,r4
  80d8c4:	003fd706 	br	80d824 <__b2d+0x70>
  80d8c8:	18bfff17 	ldw	r2,-4(r3)
  80d8cc:	114ed83a 	srl	r7,r2,r5
  80d8d0:	003fec06 	br	80d884 <__b2d+0xd0>

0080d8d4 <__ratio>:
  80d8d4:	defff904 	addi	sp,sp,-28
  80d8d8:	dc400215 	stw	r17,8(sp)
  80d8dc:	2823883a 	mov	r17,r5
  80d8e0:	d80b883a 	mov	r5,sp
  80d8e4:	dfc00615 	stw	ra,24(sp)
  80d8e8:	dd000515 	stw	r20,20(sp)
  80d8ec:	dcc00415 	stw	r19,16(sp)
  80d8f0:	dc800315 	stw	r18,12(sp)
  80d8f4:	2025883a 	mov	r18,r4
  80d8f8:	080d7b40 	call	80d7b4 <__b2d>
  80d8fc:	8809883a 	mov	r4,r17
  80d900:	d9400104 	addi	r5,sp,4
  80d904:	1027883a 	mov	r19,r2
  80d908:	1829883a 	mov	r20,r3
  80d90c:	080d7b40 	call	80d7b4 <__b2d>
  80d910:	89000417 	ldw	r4,16(r17)
  80d914:	91c00417 	ldw	r7,16(r18)
  80d918:	d9800117 	ldw	r6,4(sp)
  80d91c:	180b883a 	mov	r5,r3
  80d920:	390fc83a 	sub	r7,r7,r4
  80d924:	1009883a 	mov	r4,r2
  80d928:	d8800017 	ldw	r2,0(sp)
  80d92c:	380e917a 	slli	r7,r7,5
  80d930:	2011883a 	mov	r8,r4
  80d934:	1185c83a 	sub	r2,r2,r6
  80d938:	11c5883a 	add	r2,r2,r7
  80d93c:	1006953a 	slli	r3,r2,20
  80d940:	2813883a 	mov	r9,r5
  80d944:	00800d0e 	bge	zero,r2,80d97c <__ratio+0xa8>
  80d948:	1d29883a 	add	r20,r3,r20
  80d94c:	a00b883a 	mov	r5,r20
  80d950:	480f883a 	mov	r7,r9
  80d954:	9809883a 	mov	r4,r19
  80d958:	400d883a 	mov	r6,r8
  80d95c:	08069840 	call	806984 <__divdf3>
  80d960:	dfc00617 	ldw	ra,24(sp)
  80d964:	dd000517 	ldw	r20,20(sp)
  80d968:	dcc00417 	ldw	r19,16(sp)
  80d96c:	dc800317 	ldw	r18,12(sp)
  80d970:	dc400217 	ldw	r17,8(sp)
  80d974:	dec00704 	addi	sp,sp,28
  80d978:	f800283a 	ret
  80d97c:	28d3c83a 	sub	r9,r5,r3
  80d980:	003ff206 	br	80d94c <__ratio+0x78>

0080d984 <_mprec_log10>:
  80d984:	defffe04 	addi	sp,sp,-8
  80d988:	008005c4 	movi	r2,23
  80d98c:	dc000015 	stw	r16,0(sp)
  80d990:	dfc00115 	stw	ra,4(sp)
  80d994:	2021883a 	mov	r16,r4
  80d998:	11000c16 	blt	r2,r4,80d9cc <_mprec_log10+0x48>
  80d99c:	200490fa 	slli	r2,r4,3
  80d9a0:	00c020b4 	movhi	r3,130
  80d9a4:	18f31104 	addi	r3,r3,-13244
  80d9a8:	10c5883a 	add	r2,r2,r3
  80d9ac:	12400117 	ldw	r9,4(r2)
  80d9b0:	12000017 	ldw	r8,0(r2)
  80d9b4:	4807883a 	mov	r3,r9
  80d9b8:	4005883a 	mov	r2,r8
  80d9bc:	dfc00117 	ldw	ra,4(sp)
  80d9c0:	dc000017 	ldw	r16,0(sp)
  80d9c4:	dec00204 	addi	sp,sp,8
  80d9c8:	f800283a 	ret
  80d9cc:	0011883a 	mov	r8,zero
  80d9d0:	024ffc34 	movhi	r9,16368
  80d9d4:	0005883a 	mov	r2,zero
  80d9d8:	00d00934 	movhi	r3,16420
  80d9dc:	480b883a 	mov	r5,r9
  80d9e0:	4009883a 	mov	r4,r8
  80d9e4:	180f883a 	mov	r7,r3
  80d9e8:	100d883a 	mov	r6,r2
  80d9ec:	08065c00 	call	8065c0 <__muldf3>
  80d9f0:	843fffc4 	addi	r16,r16,-1
  80d9f4:	1011883a 	mov	r8,r2
  80d9f8:	1813883a 	mov	r9,r3
  80d9fc:	803ff51e 	bne	r16,zero,80d9d4 <_mprec_log10+0x50>
  80da00:	4005883a 	mov	r2,r8
  80da04:	4807883a 	mov	r3,r9
  80da08:	dfc00117 	ldw	ra,4(sp)
  80da0c:	dc000017 	ldw	r16,0(sp)
  80da10:	dec00204 	addi	sp,sp,8
  80da14:	f800283a 	ret

0080da18 <__copybits>:
  80da18:	297fffc4 	addi	r5,r5,-1
  80da1c:	30800417 	ldw	r2,16(r6)
  80da20:	280bd17a 	srai	r5,r5,5
  80da24:	31800504 	addi	r6,r6,20
  80da28:	1085883a 	add	r2,r2,r2
  80da2c:	294b883a 	add	r5,r5,r5
  80da30:	294b883a 	add	r5,r5,r5
  80da34:	1085883a 	add	r2,r2,r2
  80da38:	290b883a 	add	r5,r5,r4
  80da3c:	3087883a 	add	r3,r6,r2
  80da40:	29400104 	addi	r5,r5,4
  80da44:	30c0052e 	bgeu	r6,r3,80da5c <__copybits+0x44>
  80da48:	30800017 	ldw	r2,0(r6)
  80da4c:	31800104 	addi	r6,r6,4
  80da50:	20800015 	stw	r2,0(r4)
  80da54:	21000104 	addi	r4,r4,4
  80da58:	30fffb36 	bltu	r6,r3,80da48 <__copybits+0x30>
  80da5c:	2140032e 	bgeu	r4,r5,80da6c <__copybits+0x54>
  80da60:	20000015 	stw	zero,0(r4)
  80da64:	21000104 	addi	r4,r4,4
  80da68:	217ffd36 	bltu	r4,r5,80da60 <__copybits+0x48>
  80da6c:	f800283a 	ret

0080da70 <__any_on>:
  80da70:	20800417 	ldw	r2,16(r4)
  80da74:	2807d17a 	srai	r3,r5,5
  80da78:	21000504 	addi	r4,r4,20
  80da7c:	10c00d0e 	bge	r2,r3,80dab4 <__any_on+0x44>
  80da80:	1085883a 	add	r2,r2,r2
  80da84:	1085883a 	add	r2,r2,r2
  80da88:	208d883a 	add	r6,r4,r2
  80da8c:	2180182e 	bgeu	r4,r6,80daf0 <__any_on+0x80>
  80da90:	30bfff17 	ldw	r2,-4(r6)
  80da94:	30ffff04 	addi	r3,r6,-4
  80da98:	1000041e 	bne	r2,zero,80daac <__any_on+0x3c>
  80da9c:	20c0142e 	bgeu	r4,r3,80daf0 <__any_on+0x80>
  80daa0:	18ffff04 	addi	r3,r3,-4
  80daa4:	18800017 	ldw	r2,0(r3)
  80daa8:	103ffc26 	beq	r2,zero,80da9c <__any_on+0x2c>
  80daac:	00800044 	movi	r2,1
  80dab0:	f800283a 	ret
  80dab4:	18800a0e 	bge	r3,r2,80dae0 <__any_on+0x70>
  80dab8:	294007cc 	andi	r5,r5,31
  80dabc:	28000826 	beq	r5,zero,80dae0 <__any_on+0x70>
  80dac0:	18c5883a 	add	r2,r3,r3
  80dac4:	1085883a 	add	r2,r2,r2
  80dac8:	208d883a 	add	r6,r4,r2
  80dacc:	30c00017 	ldw	r3,0(r6)
  80dad0:	1944d83a 	srl	r2,r3,r5
  80dad4:	1144983a 	sll	r2,r2,r5
  80dad8:	18bff41e 	bne	r3,r2,80daac <__any_on+0x3c>
  80dadc:	003feb06 	br	80da8c <__any_on+0x1c>
  80dae0:	18c5883a 	add	r2,r3,r3
  80dae4:	1085883a 	add	r2,r2,r2
  80dae8:	208d883a 	add	r6,r4,r2
  80daec:	003fe706 	br	80da8c <__any_on+0x1c>
  80daf0:	0005883a 	mov	r2,zero
  80daf4:	f800283a 	ret

0080daf8 <_Balloc>:
  80daf8:	20c01317 	ldw	r3,76(r4)
  80dafc:	defffb04 	addi	sp,sp,-20
  80db00:	dcc00315 	stw	r19,12(sp)
  80db04:	dc800215 	stw	r18,8(sp)
  80db08:	dfc00415 	stw	ra,16(sp)
  80db0c:	2825883a 	mov	r18,r5
  80db10:	dc400115 	stw	r17,4(sp)
  80db14:	dc000015 	stw	r16,0(sp)
  80db18:	2027883a 	mov	r19,r4
  80db1c:	01800404 	movi	r6,16
  80db20:	01400104 	movi	r5,4
  80db24:	18001726 	beq	r3,zero,80db84 <_Balloc+0x8c>
  80db28:	01400044 	movi	r5,1
  80db2c:	9485883a 	add	r2,r18,r18
  80db30:	2ca2983a 	sll	r17,r5,r18
  80db34:	1085883a 	add	r2,r2,r2
  80db38:	10c7883a 	add	r3,r2,r3
  80db3c:	1c000017 	ldw	r16,0(r3)
  80db40:	8c4d883a 	add	r6,r17,r17
  80db44:	318d883a 	add	r6,r6,r6
  80db48:	9809883a 	mov	r4,r19
  80db4c:	31800504 	addi	r6,r6,20
  80db50:	80001226 	beq	r16,zero,80db9c <_Balloc+0xa4>
  80db54:	80800017 	ldw	r2,0(r16)
  80db58:	18800015 	stw	r2,0(r3)
  80db5c:	80000415 	stw	zero,16(r16)
  80db60:	80000315 	stw	zero,12(r16)
  80db64:	8005883a 	mov	r2,r16
  80db68:	dfc00417 	ldw	ra,16(sp)
  80db6c:	dcc00317 	ldw	r19,12(sp)
  80db70:	dc800217 	ldw	r18,8(sp)
  80db74:	dc400117 	ldw	r17,4(sp)
  80db78:	dc000017 	ldw	r16,0(sp)
  80db7c:	dec00504 	addi	sp,sp,20
  80db80:	f800283a 	ret
  80db84:	080ee200 	call	80ee20 <_calloc_r>
  80db88:	1007883a 	mov	r3,r2
  80db8c:	0021883a 	mov	r16,zero
  80db90:	98801315 	stw	r2,76(r19)
  80db94:	103fe41e 	bne	r2,zero,80db28 <_Balloc+0x30>
  80db98:	003ff206 	br	80db64 <_Balloc+0x6c>
  80db9c:	080ee200 	call	80ee20 <_calloc_r>
  80dba0:	103ff026 	beq	r2,zero,80db64 <_Balloc+0x6c>
  80dba4:	1021883a 	mov	r16,r2
  80dba8:	14800115 	stw	r18,4(r2)
  80dbac:	14400215 	stw	r17,8(r2)
  80dbb0:	003fea06 	br	80db5c <_Balloc+0x64>

0080dbb4 <__d2b>:
  80dbb4:	defff504 	addi	sp,sp,-44
  80dbb8:	dcc00515 	stw	r19,20(sp)
  80dbbc:	04c00044 	movi	r19,1
  80dbc0:	dc000215 	stw	r16,8(sp)
  80dbc4:	2821883a 	mov	r16,r5
  80dbc8:	980b883a 	mov	r5,r19
  80dbcc:	ddc00915 	stw	r23,36(sp)
  80dbd0:	dd800815 	stw	r22,32(sp)
  80dbd4:	dd400715 	stw	r21,28(sp)
  80dbd8:	dd000615 	stw	r20,24(sp)
  80dbdc:	dc800415 	stw	r18,16(sp)
  80dbe0:	dc400315 	stw	r17,12(sp)
  80dbe4:	dfc00a15 	stw	ra,40(sp)
  80dbe8:	3023883a 	mov	r17,r6
  80dbec:	382d883a 	mov	r22,r7
  80dbf0:	ddc00b17 	ldw	r23,44(sp)
  80dbf4:	080daf80 	call	80daf8 <_Balloc>
  80dbf8:	1025883a 	mov	r18,r2
  80dbfc:	00a00034 	movhi	r2,32768
  80dc00:	10bfffc4 	addi	r2,r2,-1
  80dc04:	8888703a 	and	r4,r17,r2
  80dc08:	202ad53a 	srli	r21,r4,20
  80dc0c:	00800434 	movhi	r2,16
  80dc10:	10bfffc4 	addi	r2,r2,-1
  80dc14:	8886703a 	and	r3,r17,r2
  80dc18:	a829003a 	cmpeq	r20,r21,zero
  80dc1c:	800b883a 	mov	r5,r16
  80dc20:	d8c00115 	stw	r3,4(sp)
  80dc24:	94000504 	addi	r16,r18,20
  80dc28:	a000021e 	bne	r20,zero,80dc34 <__d2b+0x80>
  80dc2c:	18c00434 	orhi	r3,r3,16
  80dc30:	d8c00115 	stw	r3,4(sp)
  80dc34:	28002726 	beq	r5,zero,80dcd4 <__d2b+0x120>
  80dc38:	d809883a 	mov	r4,sp
  80dc3c:	d9400015 	stw	r5,0(sp)
  80dc40:	080d6100 	call	80d610 <__lo0bits>
  80dc44:	100d883a 	mov	r6,r2
  80dc48:	10003526 	beq	r2,zero,80dd20 <__d2b+0x16c>
  80dc4c:	d8c00117 	ldw	r3,4(sp)
  80dc50:	00800804 	movi	r2,32
  80dc54:	1185c83a 	sub	r2,r2,r6
  80dc58:	d9000017 	ldw	r4,0(sp)
  80dc5c:	1886983a 	sll	r3,r3,r2
  80dc60:	1906b03a 	or	r3,r3,r4
  80dc64:	90c00515 	stw	r3,20(r18)
  80dc68:	d8c00117 	ldw	r3,4(sp)
  80dc6c:	1986d83a 	srl	r3,r3,r6
  80dc70:	d8c00115 	stw	r3,4(sp)
  80dc74:	180b003a 	cmpeq	r5,r3,zero
  80dc78:	00800084 	movi	r2,2
  80dc7c:	114bc83a 	sub	r5,r2,r5
  80dc80:	80c00115 	stw	r3,4(r16)
  80dc84:	91400415 	stw	r5,16(r18)
  80dc88:	a0001a1e 	bne	r20,zero,80dcf4 <__d2b+0x140>
  80dc8c:	3545883a 	add	r2,r6,r21
  80dc90:	10bef344 	addi	r2,r2,-1075
  80dc94:	00c00d44 	movi	r3,53
  80dc98:	b0800015 	stw	r2,0(r22)
  80dc9c:	1987c83a 	sub	r3,r3,r6
  80dca0:	b8c00015 	stw	r3,0(r23)
  80dca4:	9005883a 	mov	r2,r18
  80dca8:	dfc00a17 	ldw	ra,40(sp)
  80dcac:	ddc00917 	ldw	r23,36(sp)
  80dcb0:	dd800817 	ldw	r22,32(sp)
  80dcb4:	dd400717 	ldw	r21,28(sp)
  80dcb8:	dd000617 	ldw	r20,24(sp)
  80dcbc:	dcc00517 	ldw	r19,20(sp)
  80dcc0:	dc800417 	ldw	r18,16(sp)
  80dcc4:	dc400317 	ldw	r17,12(sp)
  80dcc8:	dc000217 	ldw	r16,8(sp)
  80dccc:	dec00b04 	addi	sp,sp,44
  80dcd0:	f800283a 	ret
  80dcd4:	d9000104 	addi	r4,sp,4
  80dcd8:	080d6100 	call	80d610 <__lo0bits>
  80dcdc:	11800804 	addi	r6,r2,32
  80dce0:	d8800117 	ldw	r2,4(sp)
  80dce4:	94c00415 	stw	r19,16(r18)
  80dce8:	980b883a 	mov	r5,r19
  80dcec:	90800515 	stw	r2,20(r18)
  80dcf0:	a03fe626 	beq	r20,zero,80dc8c <__d2b+0xd8>
  80dcf4:	2945883a 	add	r2,r5,r5
  80dcf8:	1085883a 	add	r2,r2,r2
  80dcfc:	1405883a 	add	r2,r2,r16
  80dd00:	113fff17 	ldw	r4,-4(r2)
  80dd04:	30fef384 	addi	r3,r6,-1074
  80dd08:	2820917a 	slli	r16,r5,5
  80dd0c:	b0c00015 	stw	r3,0(r22)
  80dd10:	080d5a00 	call	80d5a0 <__hi0bits>
  80dd14:	80a1c83a 	sub	r16,r16,r2
  80dd18:	bc000015 	stw	r16,0(r23)
  80dd1c:	003fe106 	br	80dca4 <__d2b+0xf0>
  80dd20:	d8800017 	ldw	r2,0(sp)
  80dd24:	90800515 	stw	r2,20(r18)
  80dd28:	d8c00117 	ldw	r3,4(sp)
  80dd2c:	003fd106 	br	80dc74 <__d2b+0xc0>

0080dd30 <__mdiff>:
  80dd30:	defffb04 	addi	sp,sp,-20
  80dd34:	dc000015 	stw	r16,0(sp)
  80dd38:	2821883a 	mov	r16,r5
  80dd3c:	dc800215 	stw	r18,8(sp)
  80dd40:	300b883a 	mov	r5,r6
  80dd44:	2025883a 	mov	r18,r4
  80dd48:	8009883a 	mov	r4,r16
  80dd4c:	dc400115 	stw	r17,4(sp)
  80dd50:	dfc00415 	stw	ra,16(sp)
  80dd54:	dcc00315 	stw	r19,12(sp)
  80dd58:	3023883a 	mov	r17,r6
  80dd5c:	080d6d40 	call	80d6d4 <__mcmp>
  80dd60:	10004226 	beq	r2,zero,80de6c <__mdiff+0x13c>
  80dd64:	10005016 	blt	r2,zero,80dea8 <__mdiff+0x178>
  80dd68:	0027883a 	mov	r19,zero
  80dd6c:	81400117 	ldw	r5,4(r16)
  80dd70:	9009883a 	mov	r4,r18
  80dd74:	080daf80 	call	80daf8 <_Balloc>
  80dd78:	1019883a 	mov	r12,r2
  80dd7c:	82800417 	ldw	r10,16(r16)
  80dd80:	88800417 	ldw	r2,16(r17)
  80dd84:	81800504 	addi	r6,r16,20
  80dd88:	5287883a 	add	r3,r10,r10
  80dd8c:	1085883a 	add	r2,r2,r2
  80dd90:	18c7883a 	add	r3,r3,r3
  80dd94:	1085883a 	add	r2,r2,r2
  80dd98:	8a000504 	addi	r8,r17,20
  80dd9c:	64c00315 	stw	r19,12(r12)
  80dda0:	30db883a 	add	r13,r6,r3
  80dda4:	4097883a 	add	r11,r8,r2
  80dda8:	61c00504 	addi	r7,r12,20
  80ddac:	0013883a 	mov	r9,zero
  80ddb0:	31000017 	ldw	r4,0(r6)
  80ddb4:	41400017 	ldw	r5,0(r8)
  80ddb8:	42000104 	addi	r8,r8,4
  80ddbc:	20bfffcc 	andi	r2,r4,65535
  80ddc0:	28ffffcc 	andi	r3,r5,65535
  80ddc4:	10c5c83a 	sub	r2,r2,r3
  80ddc8:	1245883a 	add	r2,r2,r9
  80ddcc:	2008d43a 	srli	r4,r4,16
  80ddd0:	280ad43a 	srli	r5,r5,16
  80ddd4:	1007d43a 	srai	r3,r2,16
  80ddd8:	3880000d 	sth	r2,0(r7)
  80dddc:	2149c83a 	sub	r4,r4,r5
  80dde0:	20c9883a 	add	r4,r4,r3
  80dde4:	3900008d 	sth	r4,2(r7)
  80dde8:	31800104 	addi	r6,r6,4
  80ddec:	39c00104 	addi	r7,r7,4
  80ddf0:	2013d43a 	srai	r9,r4,16
  80ddf4:	42ffee36 	bltu	r8,r11,80ddb0 <__mdiff+0x80>
  80ddf8:	33400c2e 	bgeu	r6,r13,80de2c <__mdiff+0xfc>
  80ddfc:	30800017 	ldw	r2,0(r6)
  80de00:	31800104 	addi	r6,r6,4
  80de04:	10ffffcc 	andi	r3,r2,65535
  80de08:	1a47883a 	add	r3,r3,r9
  80de0c:	1004d43a 	srli	r2,r2,16
  80de10:	1809d43a 	srai	r4,r3,16
  80de14:	38c0000d 	sth	r3,0(r7)
  80de18:	1105883a 	add	r2,r2,r4
  80de1c:	3880008d 	sth	r2,2(r7)
  80de20:	1013d43a 	srai	r9,r2,16
  80de24:	39c00104 	addi	r7,r7,4
  80de28:	337ff436 	bltu	r6,r13,80ddfc <__mdiff+0xcc>
  80de2c:	38bfff17 	ldw	r2,-4(r7)
  80de30:	38ffff04 	addi	r3,r7,-4
  80de34:	1000041e 	bne	r2,zero,80de48 <__mdiff+0x118>
  80de38:	18ffff04 	addi	r3,r3,-4
  80de3c:	18800017 	ldw	r2,0(r3)
  80de40:	52bfffc4 	addi	r10,r10,-1
  80de44:	103ffc26 	beq	r2,zero,80de38 <__mdiff+0x108>
  80de48:	6005883a 	mov	r2,r12
  80de4c:	62800415 	stw	r10,16(r12)
  80de50:	dfc00417 	ldw	ra,16(sp)
  80de54:	dcc00317 	ldw	r19,12(sp)
  80de58:	dc800217 	ldw	r18,8(sp)
  80de5c:	dc400117 	ldw	r17,4(sp)
  80de60:	dc000017 	ldw	r16,0(sp)
  80de64:	dec00504 	addi	sp,sp,20
  80de68:	f800283a 	ret
  80de6c:	9009883a 	mov	r4,r18
  80de70:	000b883a 	mov	r5,zero
  80de74:	080daf80 	call	80daf8 <_Balloc>
  80de78:	1019883a 	mov	r12,r2
  80de7c:	00800044 	movi	r2,1
  80de80:	60800415 	stw	r2,16(r12)
  80de84:	6005883a 	mov	r2,r12
  80de88:	60000515 	stw	zero,20(r12)
  80de8c:	dfc00417 	ldw	ra,16(sp)
  80de90:	dcc00317 	ldw	r19,12(sp)
  80de94:	dc800217 	ldw	r18,8(sp)
  80de98:	dc400117 	ldw	r17,4(sp)
  80de9c:	dc000017 	ldw	r16,0(sp)
  80dea0:	dec00504 	addi	sp,sp,20
  80dea4:	f800283a 	ret
  80dea8:	880d883a 	mov	r6,r17
  80deac:	04c00044 	movi	r19,1
  80deb0:	8023883a 	mov	r17,r16
  80deb4:	3021883a 	mov	r16,r6
  80deb8:	003fac06 	br	80dd6c <__mdiff+0x3c>

0080debc <__lshift>:
  80debc:	defff904 	addi	sp,sp,-28
  80dec0:	28800417 	ldw	r2,16(r5)
  80dec4:	dc000015 	stw	r16,0(sp)
  80dec8:	3021d17a 	srai	r16,r6,5
  80decc:	28c00217 	ldw	r3,8(r5)
  80ded0:	10800044 	addi	r2,r2,1
  80ded4:	dc400115 	stw	r17,4(sp)
  80ded8:	80a3883a 	add	r17,r16,r2
  80dedc:	dd400515 	stw	r21,20(sp)
  80dee0:	dd000415 	stw	r20,16(sp)
  80dee4:	dc800215 	stw	r18,8(sp)
  80dee8:	dfc00615 	stw	ra,24(sp)
  80deec:	2825883a 	mov	r18,r5
  80def0:	dcc00315 	stw	r19,12(sp)
  80def4:	3029883a 	mov	r20,r6
  80def8:	202b883a 	mov	r21,r4
  80defc:	29400117 	ldw	r5,4(r5)
  80df00:	1c40030e 	bge	r3,r17,80df10 <__lshift+0x54>
  80df04:	18c7883a 	add	r3,r3,r3
  80df08:	29400044 	addi	r5,r5,1
  80df0c:	1c7ffd16 	blt	r3,r17,80df04 <__lshift+0x48>
  80df10:	a809883a 	mov	r4,r21
  80df14:	080daf80 	call	80daf8 <_Balloc>
  80df18:	1027883a 	mov	r19,r2
  80df1c:	11400504 	addi	r5,r2,20
  80df20:	0400090e 	bge	zero,r16,80df48 <__lshift+0x8c>
  80df24:	2805883a 	mov	r2,r5
  80df28:	0007883a 	mov	r3,zero
  80df2c:	18c00044 	addi	r3,r3,1
  80df30:	10000015 	stw	zero,0(r2)
  80df34:	10800104 	addi	r2,r2,4
  80df38:	80fffc1e 	bne	r16,r3,80df2c <__lshift+0x70>
  80df3c:	8405883a 	add	r2,r16,r16
  80df40:	1085883a 	add	r2,r2,r2
  80df44:	288b883a 	add	r5,r5,r2
  80df48:	90800417 	ldw	r2,16(r18)
  80df4c:	91000504 	addi	r4,r18,20
  80df50:	a18007cc 	andi	r6,r20,31
  80df54:	1085883a 	add	r2,r2,r2
  80df58:	1085883a 	add	r2,r2,r2
  80df5c:	208f883a 	add	r7,r4,r2
  80df60:	30001e26 	beq	r6,zero,80dfdc <__lshift+0x120>
  80df64:	00800804 	movi	r2,32
  80df68:	1191c83a 	sub	r8,r2,r6
  80df6c:	0007883a 	mov	r3,zero
  80df70:	20800017 	ldw	r2,0(r4)
  80df74:	1184983a 	sll	r2,r2,r6
  80df78:	1884b03a 	or	r2,r3,r2
  80df7c:	28800015 	stw	r2,0(r5)
  80df80:	20c00017 	ldw	r3,0(r4)
  80df84:	21000104 	addi	r4,r4,4
  80df88:	29400104 	addi	r5,r5,4
  80df8c:	1a06d83a 	srl	r3,r3,r8
  80df90:	21fff736 	bltu	r4,r7,80df70 <__lshift+0xb4>
  80df94:	28c00015 	stw	r3,0(r5)
  80df98:	18000126 	beq	r3,zero,80dfa0 <__lshift+0xe4>
  80df9c:	8c400044 	addi	r17,r17,1
  80dfa0:	88bfffc4 	addi	r2,r17,-1
  80dfa4:	98800415 	stw	r2,16(r19)
  80dfa8:	a809883a 	mov	r4,r21
  80dfac:	900b883a 	mov	r5,r18
  80dfb0:	080d5780 	call	80d578 <_Bfree>
  80dfb4:	9805883a 	mov	r2,r19
  80dfb8:	dfc00617 	ldw	ra,24(sp)
  80dfbc:	dd400517 	ldw	r21,20(sp)
  80dfc0:	dd000417 	ldw	r20,16(sp)
  80dfc4:	dcc00317 	ldw	r19,12(sp)
  80dfc8:	dc800217 	ldw	r18,8(sp)
  80dfcc:	dc400117 	ldw	r17,4(sp)
  80dfd0:	dc000017 	ldw	r16,0(sp)
  80dfd4:	dec00704 	addi	sp,sp,28
  80dfd8:	f800283a 	ret
  80dfdc:	20800017 	ldw	r2,0(r4)
  80dfe0:	21000104 	addi	r4,r4,4
  80dfe4:	28800015 	stw	r2,0(r5)
  80dfe8:	29400104 	addi	r5,r5,4
  80dfec:	21ffec2e 	bgeu	r4,r7,80dfa0 <__lshift+0xe4>
  80dff0:	20800017 	ldw	r2,0(r4)
  80dff4:	21000104 	addi	r4,r4,4
  80dff8:	28800015 	stw	r2,0(r5)
  80dffc:	29400104 	addi	r5,r5,4
  80e000:	21fff636 	bltu	r4,r7,80dfdc <__lshift+0x120>
  80e004:	003fe606 	br	80dfa0 <__lshift+0xe4>

0080e008 <__multiply>:
  80e008:	defff904 	addi	sp,sp,-28
  80e00c:	dcc00315 	stw	r19,12(sp)
  80e010:	dc800215 	stw	r18,8(sp)
  80e014:	2cc00417 	ldw	r19,16(r5)
  80e018:	34800417 	ldw	r18,16(r6)
  80e01c:	dd000415 	stw	r20,16(sp)
  80e020:	dc400115 	stw	r17,4(sp)
  80e024:	dfc00615 	stw	ra,24(sp)
  80e028:	dd400515 	stw	r21,20(sp)
  80e02c:	dc000015 	stw	r16,0(sp)
  80e030:	2823883a 	mov	r17,r5
  80e034:	3029883a 	mov	r20,r6
  80e038:	9c80040e 	bge	r19,r18,80e04c <__multiply+0x44>
  80e03c:	9027883a 	mov	r19,r18
  80e040:	2c800417 	ldw	r18,16(r5)
  80e044:	2829883a 	mov	r20,r5
  80e048:	3023883a 	mov	r17,r6
  80e04c:	88800217 	ldw	r2,8(r17)
  80e050:	9ca1883a 	add	r16,r19,r18
  80e054:	89400117 	ldw	r5,4(r17)
  80e058:	1400010e 	bge	r2,r16,80e060 <__multiply+0x58>
  80e05c:	29400044 	addi	r5,r5,1
  80e060:	080daf80 	call	80daf8 <_Balloc>
  80e064:	102b883a 	mov	r21,r2
  80e068:	8405883a 	add	r2,r16,r16
  80e06c:	1085883a 	add	r2,r2,r2
  80e070:	a9000504 	addi	r4,r21,20
  80e074:	209d883a 	add	r14,r4,r2
  80e078:	2380042e 	bgeu	r4,r14,80e08c <__multiply+0x84>
  80e07c:	2005883a 	mov	r2,r4
  80e080:	10000015 	stw	zero,0(r2)
  80e084:	10800104 	addi	r2,r2,4
  80e088:	13bffd36 	bltu	r2,r14,80e080 <__multiply+0x78>
  80e08c:	9485883a 	add	r2,r18,r18
  80e090:	9cc7883a 	add	r3,r19,r19
  80e094:	a1800504 	addi	r6,r20,20
  80e098:	1085883a 	add	r2,r2,r2
  80e09c:	8b400504 	addi	r13,r17,20
  80e0a0:	18c7883a 	add	r3,r3,r3
  80e0a4:	309f883a 	add	r15,r6,r2
  80e0a8:	68d7883a 	add	r11,r13,r3
  80e0ac:	33c03b2e 	bgeu	r6,r15,80e19c <__multiply+0x194>
  80e0b0:	2019883a 	mov	r12,r4
  80e0b4:	30800017 	ldw	r2,0(r6)
  80e0b8:	127fffcc 	andi	r9,r2,65535
  80e0bc:	48001826 	beq	r9,zero,80e120 <__multiply+0x118>
  80e0c0:	6811883a 	mov	r8,r13
  80e0c4:	600f883a 	mov	r7,r12
  80e0c8:	0015883a 	mov	r10,zero
  80e0cc:	40c00017 	ldw	r3,0(r8)
  80e0d0:	39400017 	ldw	r5,0(r7)
  80e0d4:	42000104 	addi	r8,r8,4
  80e0d8:	193fffcc 	andi	r4,r3,65535
  80e0dc:	4909383a 	mul	r4,r9,r4
  80e0e0:	1806d43a 	srli	r3,r3,16
  80e0e4:	28bfffcc 	andi	r2,r5,65535
  80e0e8:	5085883a 	add	r2,r10,r2
  80e0ec:	2089883a 	add	r4,r4,r2
  80e0f0:	48c7383a 	mul	r3,r9,r3
  80e0f4:	280ad43a 	srli	r5,r5,16
  80e0f8:	2004d43a 	srli	r2,r4,16
  80e0fc:	3900000d 	sth	r4,0(r7)
  80e100:	1947883a 	add	r3,r3,r5
  80e104:	10c5883a 	add	r2,r2,r3
  80e108:	3880008d 	sth	r2,2(r7)
  80e10c:	1014d43a 	srli	r10,r2,16
  80e110:	39c00104 	addi	r7,r7,4
  80e114:	42ffed36 	bltu	r8,r11,80e0cc <__multiply+0xc4>
  80e118:	3a800015 	stw	r10,0(r7)
  80e11c:	30800017 	ldw	r2,0(r6)
  80e120:	1012d43a 	srli	r9,r2,16
  80e124:	48001926 	beq	r9,zero,80e18c <__multiply+0x184>
  80e128:	60800017 	ldw	r2,0(r12)
  80e12c:	6811883a 	mov	r8,r13
  80e130:	600f883a 	mov	r7,r12
  80e134:	0015883a 	mov	r10,zero
  80e138:	100b883a 	mov	r5,r2
  80e13c:	41000017 	ldw	r4,0(r8)
  80e140:	2806d43a 	srli	r3,r5,16
  80e144:	3880000d 	sth	r2,0(r7)
  80e148:	20bfffcc 	andi	r2,r4,65535
  80e14c:	4885383a 	mul	r2,r9,r2
  80e150:	50c7883a 	add	r3,r10,r3
  80e154:	2008d43a 	srli	r4,r4,16
  80e158:	10c5883a 	add	r2,r2,r3
  80e15c:	3880008d 	sth	r2,2(r7)
  80e160:	39c00104 	addi	r7,r7,4
  80e164:	39400017 	ldw	r5,0(r7)
  80e168:	4909383a 	mul	r4,r9,r4
  80e16c:	1004d43a 	srli	r2,r2,16
  80e170:	28ffffcc 	andi	r3,r5,65535
  80e174:	20c9883a 	add	r4,r4,r3
  80e178:	1105883a 	add	r2,r2,r4
  80e17c:	42000104 	addi	r8,r8,4
  80e180:	1014d43a 	srli	r10,r2,16
  80e184:	42ffed36 	bltu	r8,r11,80e13c <__multiply+0x134>
  80e188:	38800015 	stw	r2,0(r7)
  80e18c:	31800104 	addi	r6,r6,4
  80e190:	33c0022e 	bgeu	r6,r15,80e19c <__multiply+0x194>
  80e194:	63000104 	addi	r12,r12,4
  80e198:	003fc606 	br	80e0b4 <__multiply+0xac>
  80e19c:	0400090e 	bge	zero,r16,80e1c4 <__multiply+0x1bc>
  80e1a0:	70bfff17 	ldw	r2,-4(r14)
  80e1a4:	70ffff04 	addi	r3,r14,-4
  80e1a8:	10000326 	beq	r2,zero,80e1b8 <__multiply+0x1b0>
  80e1ac:	00000506 	br	80e1c4 <__multiply+0x1bc>
  80e1b0:	18800017 	ldw	r2,0(r3)
  80e1b4:	1000031e 	bne	r2,zero,80e1c4 <__multiply+0x1bc>
  80e1b8:	843fffc4 	addi	r16,r16,-1
  80e1bc:	18ffff04 	addi	r3,r3,-4
  80e1c0:	803ffb1e 	bne	r16,zero,80e1b0 <__multiply+0x1a8>
  80e1c4:	a805883a 	mov	r2,r21
  80e1c8:	ac000415 	stw	r16,16(r21)
  80e1cc:	dfc00617 	ldw	ra,24(sp)
  80e1d0:	dd400517 	ldw	r21,20(sp)
  80e1d4:	dd000417 	ldw	r20,16(sp)
  80e1d8:	dcc00317 	ldw	r19,12(sp)
  80e1dc:	dc800217 	ldw	r18,8(sp)
  80e1e0:	dc400117 	ldw	r17,4(sp)
  80e1e4:	dc000017 	ldw	r16,0(sp)
  80e1e8:	dec00704 	addi	sp,sp,28
  80e1ec:	f800283a 	ret

0080e1f0 <__i2b>:
  80e1f0:	defffd04 	addi	sp,sp,-12
  80e1f4:	dc000015 	stw	r16,0(sp)
  80e1f8:	04000044 	movi	r16,1
  80e1fc:	dc800115 	stw	r18,4(sp)
  80e200:	2825883a 	mov	r18,r5
  80e204:	800b883a 	mov	r5,r16
  80e208:	dfc00215 	stw	ra,8(sp)
  80e20c:	080daf80 	call	80daf8 <_Balloc>
  80e210:	14000415 	stw	r16,16(r2)
  80e214:	14800515 	stw	r18,20(r2)
  80e218:	dfc00217 	ldw	ra,8(sp)
  80e21c:	dc800117 	ldw	r18,4(sp)
  80e220:	dc000017 	ldw	r16,0(sp)
  80e224:	dec00304 	addi	sp,sp,12
  80e228:	f800283a 	ret

0080e22c <__multadd>:
  80e22c:	defffa04 	addi	sp,sp,-24
  80e230:	dc800215 	stw	r18,8(sp)
  80e234:	2c800417 	ldw	r18,16(r5)
  80e238:	dd000415 	stw	r20,16(sp)
  80e23c:	dcc00315 	stw	r19,12(sp)
  80e240:	dc000015 	stw	r16,0(sp)
  80e244:	dfc00515 	stw	ra,20(sp)
  80e248:	3821883a 	mov	r16,r7
  80e24c:	dc400115 	stw	r17,4(sp)
  80e250:	2827883a 	mov	r19,r5
  80e254:	2029883a 	mov	r20,r4
  80e258:	2a000504 	addi	r8,r5,20
  80e25c:	000f883a 	mov	r7,zero
  80e260:	40800017 	ldw	r2,0(r8)
  80e264:	39c00044 	addi	r7,r7,1
  80e268:	10ffffcc 	andi	r3,r2,65535
  80e26c:	1987383a 	mul	r3,r3,r6
  80e270:	1004d43a 	srli	r2,r2,16
  80e274:	1c07883a 	add	r3,r3,r16
  80e278:	180ad43a 	srli	r5,r3,16
  80e27c:	1185383a 	mul	r2,r2,r6
  80e280:	18ffffcc 	andi	r3,r3,65535
  80e284:	1145883a 	add	r2,r2,r5
  80e288:	1008943a 	slli	r4,r2,16
  80e28c:	1020d43a 	srli	r16,r2,16
  80e290:	20c9883a 	add	r4,r4,r3
  80e294:	41000015 	stw	r4,0(r8)
  80e298:	42000104 	addi	r8,r8,4
  80e29c:	3cbff016 	blt	r7,r18,80e260 <__multadd+0x34>
  80e2a0:	80000826 	beq	r16,zero,80e2c4 <__multadd+0x98>
  80e2a4:	98800217 	ldw	r2,8(r19)
  80e2a8:	90800f0e 	bge	r18,r2,80e2e8 <__multadd+0xbc>
  80e2ac:	9485883a 	add	r2,r18,r18
  80e2b0:	1085883a 	add	r2,r2,r2
  80e2b4:	14c5883a 	add	r2,r2,r19
  80e2b8:	90c00044 	addi	r3,r18,1
  80e2bc:	14000515 	stw	r16,20(r2)
  80e2c0:	98c00415 	stw	r3,16(r19)
  80e2c4:	9805883a 	mov	r2,r19
  80e2c8:	dfc00517 	ldw	ra,20(sp)
  80e2cc:	dd000417 	ldw	r20,16(sp)
  80e2d0:	dcc00317 	ldw	r19,12(sp)
  80e2d4:	dc800217 	ldw	r18,8(sp)
  80e2d8:	dc400117 	ldw	r17,4(sp)
  80e2dc:	dc000017 	ldw	r16,0(sp)
  80e2e0:	dec00604 	addi	sp,sp,24
  80e2e4:	f800283a 	ret
  80e2e8:	99400117 	ldw	r5,4(r19)
  80e2ec:	a009883a 	mov	r4,r20
  80e2f0:	29400044 	addi	r5,r5,1
  80e2f4:	080daf80 	call	80daf8 <_Balloc>
  80e2f8:	99800417 	ldw	r6,16(r19)
  80e2fc:	99400304 	addi	r5,r19,12
  80e300:	11000304 	addi	r4,r2,12
  80e304:	318d883a 	add	r6,r6,r6
  80e308:	318d883a 	add	r6,r6,r6
  80e30c:	31800204 	addi	r6,r6,8
  80e310:	1023883a 	mov	r17,r2
  80e314:	080d3600 	call	80d360 <memcpy>
  80e318:	980b883a 	mov	r5,r19
  80e31c:	a009883a 	mov	r4,r20
  80e320:	080d5780 	call	80d578 <_Bfree>
  80e324:	8827883a 	mov	r19,r17
  80e328:	003fe006 	br	80e2ac <__multadd+0x80>

0080e32c <__pow5mult>:
  80e32c:	defffa04 	addi	sp,sp,-24
  80e330:	308000cc 	andi	r2,r6,3
  80e334:	dd000415 	stw	r20,16(sp)
  80e338:	dcc00315 	stw	r19,12(sp)
  80e33c:	dc000015 	stw	r16,0(sp)
  80e340:	dfc00515 	stw	ra,20(sp)
  80e344:	dc800215 	stw	r18,8(sp)
  80e348:	dc400115 	stw	r17,4(sp)
  80e34c:	3021883a 	mov	r16,r6
  80e350:	2027883a 	mov	r19,r4
  80e354:	2829883a 	mov	r20,r5
  80e358:	10002b1e 	bne	r2,zero,80e408 <__pow5mult+0xdc>
  80e35c:	8025d0ba 	srai	r18,r16,2
  80e360:	90001b26 	beq	r18,zero,80e3d0 <__pow5mult+0xa4>
  80e364:	9c001217 	ldw	r16,72(r19)
  80e368:	8000081e 	bne	r16,zero,80e38c <__pow5mult+0x60>
  80e36c:	00003006 	br	80e430 <__pow5mult+0x104>
  80e370:	800b883a 	mov	r5,r16
  80e374:	800d883a 	mov	r6,r16
  80e378:	9809883a 	mov	r4,r19
  80e37c:	90001426 	beq	r18,zero,80e3d0 <__pow5mult+0xa4>
  80e380:	80800017 	ldw	r2,0(r16)
  80e384:	10001b26 	beq	r2,zero,80e3f4 <__pow5mult+0xc8>
  80e388:	1021883a 	mov	r16,r2
  80e38c:	9080004c 	andi	r2,r18,1
  80e390:	1005003a 	cmpeq	r2,r2,zero
  80e394:	9025d07a 	srai	r18,r18,1
  80e398:	800d883a 	mov	r6,r16
  80e39c:	9809883a 	mov	r4,r19
  80e3a0:	a00b883a 	mov	r5,r20
  80e3a4:	103ff21e 	bne	r2,zero,80e370 <__pow5mult+0x44>
  80e3a8:	080e0080 	call	80e008 <__multiply>
  80e3ac:	a00b883a 	mov	r5,r20
  80e3b0:	9809883a 	mov	r4,r19
  80e3b4:	1023883a 	mov	r17,r2
  80e3b8:	080d5780 	call	80d578 <_Bfree>
  80e3bc:	8829883a 	mov	r20,r17
  80e3c0:	800b883a 	mov	r5,r16
  80e3c4:	800d883a 	mov	r6,r16
  80e3c8:	9809883a 	mov	r4,r19
  80e3cc:	903fec1e 	bne	r18,zero,80e380 <__pow5mult+0x54>
  80e3d0:	a005883a 	mov	r2,r20
  80e3d4:	dfc00517 	ldw	ra,20(sp)
  80e3d8:	dd000417 	ldw	r20,16(sp)
  80e3dc:	dcc00317 	ldw	r19,12(sp)
  80e3e0:	dc800217 	ldw	r18,8(sp)
  80e3e4:	dc400117 	ldw	r17,4(sp)
  80e3e8:	dc000017 	ldw	r16,0(sp)
  80e3ec:	dec00604 	addi	sp,sp,24
  80e3f0:	f800283a 	ret
  80e3f4:	080e0080 	call	80e008 <__multiply>
  80e3f8:	80800015 	stw	r2,0(r16)
  80e3fc:	1021883a 	mov	r16,r2
  80e400:	10000015 	stw	zero,0(r2)
  80e404:	003fe106 	br	80e38c <__pow5mult+0x60>
  80e408:	1085883a 	add	r2,r2,r2
  80e40c:	00c020b4 	movhi	r3,130
  80e410:	18f35704 	addi	r3,r3,-12964
  80e414:	1085883a 	add	r2,r2,r2
  80e418:	10c5883a 	add	r2,r2,r3
  80e41c:	11bfff17 	ldw	r6,-4(r2)
  80e420:	000f883a 	mov	r7,zero
  80e424:	080e22c0 	call	80e22c <__multadd>
  80e428:	1029883a 	mov	r20,r2
  80e42c:	003fcb06 	br	80e35c <__pow5mult+0x30>
  80e430:	9809883a 	mov	r4,r19
  80e434:	01409c44 	movi	r5,625
  80e438:	080e1f00 	call	80e1f0 <__i2b>
  80e43c:	98801215 	stw	r2,72(r19)
  80e440:	1021883a 	mov	r16,r2
  80e444:	10000015 	stw	zero,0(r2)
  80e448:	003fd006 	br	80e38c <__pow5mult+0x60>

0080e44c <__s2b>:
  80e44c:	defff904 	addi	sp,sp,-28
  80e450:	dcc00315 	stw	r19,12(sp)
  80e454:	dc800215 	stw	r18,8(sp)
  80e458:	2827883a 	mov	r19,r5
  80e45c:	2025883a 	mov	r18,r4
  80e460:	01400244 	movi	r5,9
  80e464:	39000204 	addi	r4,r7,8
  80e468:	dd000415 	stw	r20,16(sp)
  80e46c:	dc400115 	stw	r17,4(sp)
  80e470:	dfc00615 	stw	ra,24(sp)
  80e474:	dd400515 	stw	r21,20(sp)
  80e478:	dc000015 	stw	r16,0(sp)
  80e47c:	3829883a 	mov	r20,r7
  80e480:	3023883a 	mov	r17,r6
  80e484:	08073980 	call	807398 <__divsi3>
  80e488:	00c00044 	movi	r3,1
  80e48c:	1880350e 	bge	r3,r2,80e564 <__s2b+0x118>
  80e490:	000b883a 	mov	r5,zero
  80e494:	18c7883a 	add	r3,r3,r3
  80e498:	29400044 	addi	r5,r5,1
  80e49c:	18bffd16 	blt	r3,r2,80e494 <__s2b+0x48>
  80e4a0:	9009883a 	mov	r4,r18
  80e4a4:	080daf80 	call	80daf8 <_Balloc>
  80e4a8:	1011883a 	mov	r8,r2
  80e4ac:	d8800717 	ldw	r2,28(sp)
  80e4b0:	00c00044 	movi	r3,1
  80e4b4:	01800244 	movi	r6,9
  80e4b8:	40800515 	stw	r2,20(r8)
  80e4bc:	40c00415 	stw	r3,16(r8)
  80e4c0:	3440260e 	bge	r6,r17,80e55c <__s2b+0x110>
  80e4c4:	3021883a 	mov	r16,r6
  80e4c8:	99ab883a 	add	r21,r19,r6
  80e4cc:	9c05883a 	add	r2,r19,r16
  80e4d0:	11c00007 	ldb	r7,0(r2)
  80e4d4:	400b883a 	mov	r5,r8
  80e4d8:	9009883a 	mov	r4,r18
  80e4dc:	39fff404 	addi	r7,r7,-48
  80e4e0:	01800284 	movi	r6,10
  80e4e4:	080e22c0 	call	80e22c <__multadd>
  80e4e8:	84000044 	addi	r16,r16,1
  80e4ec:	1011883a 	mov	r8,r2
  80e4f0:	8c3ff61e 	bne	r17,r16,80e4cc <__s2b+0x80>
  80e4f4:	ac45883a 	add	r2,r21,r17
  80e4f8:	117ffe04 	addi	r5,r2,-8
  80e4fc:	880d883a 	mov	r6,r17
  80e500:	35000c0e 	bge	r6,r20,80e534 <__s2b+0xe8>
  80e504:	a185c83a 	sub	r2,r20,r6
  80e508:	2821883a 	mov	r16,r5
  80e50c:	28a3883a 	add	r17,r5,r2
  80e510:	81c00007 	ldb	r7,0(r16)
  80e514:	400b883a 	mov	r5,r8
  80e518:	9009883a 	mov	r4,r18
  80e51c:	39fff404 	addi	r7,r7,-48
  80e520:	01800284 	movi	r6,10
  80e524:	080e22c0 	call	80e22c <__multadd>
  80e528:	84000044 	addi	r16,r16,1
  80e52c:	1011883a 	mov	r8,r2
  80e530:	847ff71e 	bne	r16,r17,80e510 <__s2b+0xc4>
  80e534:	4005883a 	mov	r2,r8
  80e538:	dfc00617 	ldw	ra,24(sp)
  80e53c:	dd400517 	ldw	r21,20(sp)
  80e540:	dd000417 	ldw	r20,16(sp)
  80e544:	dcc00317 	ldw	r19,12(sp)
  80e548:	dc800217 	ldw	r18,8(sp)
  80e54c:	dc400117 	ldw	r17,4(sp)
  80e550:	dc000017 	ldw	r16,0(sp)
  80e554:	dec00704 	addi	sp,sp,28
  80e558:	f800283a 	ret
  80e55c:	99400284 	addi	r5,r19,10
  80e560:	003fe706 	br	80e500 <__s2b+0xb4>
  80e564:	000b883a 	mov	r5,zero
  80e568:	003fcd06 	br	80e4a0 <__s2b+0x54>

0080e56c <_realloc_r>:
  80e56c:	defff404 	addi	sp,sp,-48
  80e570:	dd800815 	stw	r22,32(sp)
  80e574:	dc800415 	stw	r18,16(sp)
  80e578:	dc400315 	stw	r17,12(sp)
  80e57c:	dfc00b15 	stw	ra,44(sp)
  80e580:	df000a15 	stw	fp,40(sp)
  80e584:	ddc00915 	stw	r23,36(sp)
  80e588:	dd400715 	stw	r21,28(sp)
  80e58c:	dd000615 	stw	r20,24(sp)
  80e590:	dcc00515 	stw	r19,20(sp)
  80e594:	dc000215 	stw	r16,8(sp)
  80e598:	2825883a 	mov	r18,r5
  80e59c:	3023883a 	mov	r17,r6
  80e5a0:	202d883a 	mov	r22,r4
  80e5a4:	2800c926 	beq	r5,zero,80e8cc <_realloc_r+0x360>
  80e5a8:	0810db00 	call	810db0 <__malloc_lock>
  80e5ac:	943ffe04 	addi	r16,r18,-8
  80e5b0:	88c002c4 	addi	r3,r17,11
  80e5b4:	00800584 	movi	r2,22
  80e5b8:	82000117 	ldw	r8,4(r16)
  80e5bc:	10c01b2e 	bgeu	r2,r3,80e62c <_realloc_r+0xc0>
  80e5c0:	00bffe04 	movi	r2,-8
  80e5c4:	188e703a 	and	r7,r3,r2
  80e5c8:	3839883a 	mov	fp,r7
  80e5cc:	38001a16 	blt	r7,zero,80e638 <_realloc_r+0xcc>
  80e5d0:	e4401936 	bltu	fp,r17,80e638 <_realloc_r+0xcc>
  80e5d4:	013fff04 	movi	r4,-4
  80e5d8:	4126703a 	and	r19,r8,r4
  80e5dc:	99c02616 	blt	r19,r7,80e678 <_realloc_r+0x10c>
  80e5e0:	802b883a 	mov	r21,r16
  80e5e4:	9829883a 	mov	r20,r19
  80e5e8:	84000204 	addi	r16,r16,8
  80e5ec:	a80f883a 	mov	r7,r21
  80e5f0:	a70dc83a 	sub	r6,r20,fp
  80e5f4:	008003c4 	movi	r2,15
  80e5f8:	1180c136 	bltu	r2,r6,80e900 <_realloc_r+0x394>
  80e5fc:	38800117 	ldw	r2,4(r7)
  80e600:	a549883a 	add	r4,r20,r21
  80e604:	1080004c 	andi	r2,r2,1
  80e608:	a084b03a 	or	r2,r20,r2
  80e60c:	38800115 	stw	r2,4(r7)
  80e610:	20c00117 	ldw	r3,4(r4)
  80e614:	18c00054 	ori	r3,r3,1
  80e618:	20c00115 	stw	r3,4(r4)
  80e61c:	b009883a 	mov	r4,r22
  80e620:	0810eb80 	call	810eb8 <__malloc_unlock>
  80e624:	8023883a 	mov	r17,r16
  80e628:	00000606 	br	80e644 <_realloc_r+0xd8>
  80e62c:	01c00404 	movi	r7,16
  80e630:	3839883a 	mov	fp,r7
  80e634:	e47fe72e 	bgeu	fp,r17,80e5d4 <_realloc_r+0x68>
  80e638:	00800304 	movi	r2,12
  80e63c:	0023883a 	mov	r17,zero
  80e640:	b0800015 	stw	r2,0(r22)
  80e644:	8805883a 	mov	r2,r17
  80e648:	dfc00b17 	ldw	ra,44(sp)
  80e64c:	df000a17 	ldw	fp,40(sp)
  80e650:	ddc00917 	ldw	r23,36(sp)
  80e654:	dd800817 	ldw	r22,32(sp)
  80e658:	dd400717 	ldw	r21,28(sp)
  80e65c:	dd000617 	ldw	r20,24(sp)
  80e660:	dcc00517 	ldw	r19,20(sp)
  80e664:	dc800417 	ldw	r18,16(sp)
  80e668:	dc400317 	ldw	r17,12(sp)
  80e66c:	dc000217 	ldw	r16,8(sp)
  80e670:	dec00c04 	addi	sp,sp,48
  80e674:	f800283a 	ret
  80e678:	008020b4 	movhi	r2,130
  80e67c:	10b55004 	addi	r2,r2,-10944
  80e680:	12400217 	ldw	r9,8(r2)
  80e684:	84cd883a 	add	r6,r16,r19
  80e688:	802b883a 	mov	r21,r16
  80e68c:	3240b926 	beq	r6,r9,80e974 <_realloc_r+0x408>
  80e690:	31400117 	ldw	r5,4(r6)
  80e694:	00bfff84 	movi	r2,-2
  80e698:	2884703a 	and	r2,r5,r2
  80e69c:	1185883a 	add	r2,r2,r6
  80e6a0:	10c00117 	ldw	r3,4(r2)
  80e6a4:	18c0004c 	andi	r3,r3,1
  80e6a8:	1807003a 	cmpeq	r3,r3,zero
  80e6ac:	1800a326 	beq	r3,zero,80e93c <_realloc_r+0x3d0>
  80e6b0:	2908703a 	and	r4,r5,r4
  80e6b4:	9929883a 	add	r20,r19,r4
  80e6b8:	a1c0a30e 	bge	r20,r7,80e948 <_realloc_r+0x3dc>
  80e6bc:	4080004c 	andi	r2,r8,1
  80e6c0:	1000551e 	bne	r2,zero,80e818 <_realloc_r+0x2ac>
  80e6c4:	80800017 	ldw	r2,0(r16)
  80e6c8:	80afc83a 	sub	r23,r16,r2
  80e6cc:	b8c00117 	ldw	r3,4(r23)
  80e6d0:	00bfff04 	movi	r2,-4
  80e6d4:	1884703a 	and	r2,r3,r2
  80e6d8:	30002e26 	beq	r6,zero,80e794 <_realloc_r+0x228>
  80e6dc:	3240b926 	beq	r6,r9,80e9c4 <_realloc_r+0x458>
  80e6e0:	98a9883a 	add	r20,r19,r2
  80e6e4:	2509883a 	add	r4,r4,r20
  80e6e8:	d9000015 	stw	r4,0(sp)
  80e6ec:	21c02a16 	blt	r4,r7,80e798 <_realloc_r+0x22c>
  80e6f0:	30800317 	ldw	r2,12(r6)
  80e6f4:	30c00217 	ldw	r3,8(r6)
  80e6f8:	01400904 	movi	r5,36
  80e6fc:	99bfff04 	addi	r6,r19,-4
  80e700:	18800315 	stw	r2,12(r3)
  80e704:	10c00215 	stw	r3,8(r2)
  80e708:	b9000317 	ldw	r4,12(r23)
  80e70c:	b8800217 	ldw	r2,8(r23)
  80e710:	b82b883a 	mov	r21,r23
  80e714:	bc000204 	addi	r16,r23,8
  80e718:	20800215 	stw	r2,8(r4)
  80e71c:	11000315 	stw	r4,12(r2)
  80e720:	2980e436 	bltu	r5,r6,80eab4 <_realloc_r+0x548>
  80e724:	008004c4 	movi	r2,19
  80e728:	9009883a 	mov	r4,r18
  80e72c:	8011883a 	mov	r8,r16
  80e730:	11800f2e 	bgeu	r2,r6,80e770 <_realloc_r+0x204>
  80e734:	90800017 	ldw	r2,0(r18)
  80e738:	ba000404 	addi	r8,r23,16
  80e73c:	91000204 	addi	r4,r18,8
  80e740:	b8800215 	stw	r2,8(r23)
  80e744:	90c00117 	ldw	r3,4(r18)
  80e748:	008006c4 	movi	r2,27
  80e74c:	b8c00315 	stw	r3,12(r23)
  80e750:	1180072e 	bgeu	r2,r6,80e770 <_realloc_r+0x204>
  80e754:	90c00217 	ldw	r3,8(r18)
  80e758:	ba000604 	addi	r8,r23,24
  80e75c:	91000404 	addi	r4,r18,16
  80e760:	b8c00415 	stw	r3,16(r23)
  80e764:	90800317 	ldw	r2,12(r18)
  80e768:	b8800515 	stw	r2,20(r23)
  80e76c:	3140e726 	beq	r6,r5,80eb0c <_realloc_r+0x5a0>
  80e770:	20800017 	ldw	r2,0(r4)
  80e774:	dd000017 	ldw	r20,0(sp)
  80e778:	b80f883a 	mov	r7,r23
  80e77c:	40800015 	stw	r2,0(r8)
  80e780:	20c00117 	ldw	r3,4(r4)
  80e784:	40c00115 	stw	r3,4(r8)
  80e788:	20800217 	ldw	r2,8(r4)
  80e78c:	40800215 	stw	r2,8(r8)
  80e790:	003f9706 	br	80e5f0 <_realloc_r+0x84>
  80e794:	98a9883a 	add	r20,r19,r2
  80e798:	a1c01f16 	blt	r20,r7,80e818 <_realloc_r+0x2ac>
  80e79c:	b8c00317 	ldw	r3,12(r23)
  80e7a0:	b8800217 	ldw	r2,8(r23)
  80e7a4:	99bfff04 	addi	r6,r19,-4
  80e7a8:	01400904 	movi	r5,36
  80e7ac:	b82b883a 	mov	r21,r23
  80e7b0:	18800215 	stw	r2,8(r3)
  80e7b4:	10c00315 	stw	r3,12(r2)
  80e7b8:	bc000204 	addi	r16,r23,8
  80e7bc:	2980c336 	bltu	r5,r6,80eacc <_realloc_r+0x560>
  80e7c0:	008004c4 	movi	r2,19
  80e7c4:	9009883a 	mov	r4,r18
  80e7c8:	8011883a 	mov	r8,r16
  80e7cc:	11800f2e 	bgeu	r2,r6,80e80c <_realloc_r+0x2a0>
  80e7d0:	90800017 	ldw	r2,0(r18)
  80e7d4:	ba000404 	addi	r8,r23,16
  80e7d8:	91000204 	addi	r4,r18,8
  80e7dc:	b8800215 	stw	r2,8(r23)
  80e7e0:	90c00117 	ldw	r3,4(r18)
  80e7e4:	008006c4 	movi	r2,27
  80e7e8:	b8c00315 	stw	r3,12(r23)
  80e7ec:	1180072e 	bgeu	r2,r6,80e80c <_realloc_r+0x2a0>
  80e7f0:	90c00217 	ldw	r3,8(r18)
  80e7f4:	ba000604 	addi	r8,r23,24
  80e7f8:	91000404 	addi	r4,r18,16
  80e7fc:	b8c00415 	stw	r3,16(r23)
  80e800:	90800317 	ldw	r2,12(r18)
  80e804:	b8800515 	stw	r2,20(r23)
  80e808:	3140c726 	beq	r6,r5,80eb28 <_realloc_r+0x5bc>
  80e80c:	20800017 	ldw	r2,0(r4)
  80e810:	b80f883a 	mov	r7,r23
  80e814:	003fd906 	br	80e77c <_realloc_r+0x210>
  80e818:	880b883a 	mov	r5,r17
  80e81c:	b009883a 	mov	r4,r22
  80e820:	0807dc80 	call	807dc8 <_malloc_r>
  80e824:	1023883a 	mov	r17,r2
  80e828:	10002526 	beq	r2,zero,80e8c0 <_realloc_r+0x354>
  80e82c:	80800117 	ldw	r2,4(r16)
  80e830:	00ffff84 	movi	r3,-2
  80e834:	893ffe04 	addi	r4,r17,-8
  80e838:	10c4703a 	and	r2,r2,r3
  80e83c:	8085883a 	add	r2,r16,r2
  80e840:	20809526 	beq	r4,r2,80ea98 <_realloc_r+0x52c>
  80e844:	99bfff04 	addi	r6,r19,-4
  80e848:	01c00904 	movi	r7,36
  80e84c:	39804536 	bltu	r7,r6,80e964 <_realloc_r+0x3f8>
  80e850:	008004c4 	movi	r2,19
  80e854:	9009883a 	mov	r4,r18
  80e858:	880b883a 	mov	r5,r17
  80e85c:	11800f2e 	bgeu	r2,r6,80e89c <_realloc_r+0x330>
  80e860:	90800017 	ldw	r2,0(r18)
  80e864:	89400204 	addi	r5,r17,8
  80e868:	91000204 	addi	r4,r18,8
  80e86c:	88800015 	stw	r2,0(r17)
  80e870:	90c00117 	ldw	r3,4(r18)
  80e874:	008006c4 	movi	r2,27
  80e878:	88c00115 	stw	r3,4(r17)
  80e87c:	1180072e 	bgeu	r2,r6,80e89c <_realloc_r+0x330>
  80e880:	90c00217 	ldw	r3,8(r18)
  80e884:	89400404 	addi	r5,r17,16
  80e888:	91000404 	addi	r4,r18,16
  80e88c:	88c00215 	stw	r3,8(r17)
  80e890:	90800317 	ldw	r2,12(r18)
  80e894:	88800315 	stw	r2,12(r17)
  80e898:	31c09126 	beq	r6,r7,80eae0 <_realloc_r+0x574>
  80e89c:	20800017 	ldw	r2,0(r4)
  80e8a0:	28800015 	stw	r2,0(r5)
  80e8a4:	20c00117 	ldw	r3,4(r4)
  80e8a8:	28c00115 	stw	r3,4(r5)
  80e8ac:	20800217 	ldw	r2,8(r4)
  80e8b0:	28800215 	stw	r2,8(r5)
  80e8b4:	900b883a 	mov	r5,r18
  80e8b8:	b009883a 	mov	r4,r22
  80e8bc:	080c6f40 	call	80c6f4 <_free_r>
  80e8c0:	b009883a 	mov	r4,r22
  80e8c4:	0810eb80 	call	810eb8 <__malloc_unlock>
  80e8c8:	003f5e06 	br	80e644 <_realloc_r+0xd8>
  80e8cc:	300b883a 	mov	r5,r6
  80e8d0:	dfc00b17 	ldw	ra,44(sp)
  80e8d4:	df000a17 	ldw	fp,40(sp)
  80e8d8:	ddc00917 	ldw	r23,36(sp)
  80e8dc:	dd800817 	ldw	r22,32(sp)
  80e8e0:	dd400717 	ldw	r21,28(sp)
  80e8e4:	dd000617 	ldw	r20,24(sp)
  80e8e8:	dcc00517 	ldw	r19,20(sp)
  80e8ec:	dc800417 	ldw	r18,16(sp)
  80e8f0:	dc400317 	ldw	r17,12(sp)
  80e8f4:	dc000217 	ldw	r16,8(sp)
  80e8f8:	dec00c04 	addi	sp,sp,48
  80e8fc:	0807dc81 	jmpi	807dc8 <_malloc_r>
  80e900:	38800117 	ldw	r2,4(r7)
  80e904:	e54b883a 	add	r5,fp,r21
  80e908:	31000054 	ori	r4,r6,1
  80e90c:	1080004c 	andi	r2,r2,1
  80e910:	1704b03a 	or	r2,r2,fp
  80e914:	38800115 	stw	r2,4(r7)
  80e918:	29000115 	stw	r4,4(r5)
  80e91c:	2987883a 	add	r3,r5,r6
  80e920:	18800117 	ldw	r2,4(r3)
  80e924:	29400204 	addi	r5,r5,8
  80e928:	b009883a 	mov	r4,r22
  80e92c:	10800054 	ori	r2,r2,1
  80e930:	18800115 	stw	r2,4(r3)
  80e934:	080c6f40 	call	80c6f4 <_free_r>
  80e938:	003f3806 	br	80e61c <_realloc_r+0xb0>
  80e93c:	000d883a 	mov	r6,zero
  80e940:	0009883a 	mov	r4,zero
  80e944:	003f5d06 	br	80e6bc <_realloc_r+0x150>
  80e948:	30c00217 	ldw	r3,8(r6)
  80e94c:	30800317 	ldw	r2,12(r6)
  80e950:	800f883a 	mov	r7,r16
  80e954:	84000204 	addi	r16,r16,8
  80e958:	10c00215 	stw	r3,8(r2)
  80e95c:	18800315 	stw	r2,12(r3)
  80e960:	003f2306 	br	80e5f0 <_realloc_r+0x84>
  80e964:	8809883a 	mov	r4,r17
  80e968:	900b883a 	mov	r5,r18
  80e96c:	080d4000 	call	80d400 <memmove>
  80e970:	003fd006 	br	80e8b4 <_realloc_r+0x348>
  80e974:	30800117 	ldw	r2,4(r6)
  80e978:	e0c00404 	addi	r3,fp,16
  80e97c:	1108703a 	and	r4,r2,r4
  80e980:	9905883a 	add	r2,r19,r4
  80e984:	10ff4d16 	blt	r2,r3,80e6bc <_realloc_r+0x150>
  80e988:	1705c83a 	sub	r2,r2,fp
  80e98c:	870b883a 	add	r5,r16,fp
  80e990:	10800054 	ori	r2,r2,1
  80e994:	28800115 	stw	r2,4(r5)
  80e998:	80c00117 	ldw	r3,4(r16)
  80e99c:	008020b4 	movhi	r2,130
  80e9a0:	10b55004 	addi	r2,r2,-10944
  80e9a4:	b009883a 	mov	r4,r22
  80e9a8:	18c0004c 	andi	r3,r3,1
  80e9ac:	e0c6b03a 	or	r3,fp,r3
  80e9b0:	11400215 	stw	r5,8(r2)
  80e9b4:	80c00115 	stw	r3,4(r16)
  80e9b8:	0810eb80 	call	810eb8 <__malloc_unlock>
  80e9bc:	84400204 	addi	r17,r16,8
  80e9c0:	003f2006 	br	80e644 <_realloc_r+0xd8>
  80e9c4:	98a9883a 	add	r20,r19,r2
  80e9c8:	2509883a 	add	r4,r4,r20
  80e9cc:	e0800404 	addi	r2,fp,16
  80e9d0:	d9000115 	stw	r4,4(sp)
  80e9d4:	20bf7016 	blt	r4,r2,80e798 <_realloc_r+0x22c>
  80e9d8:	b8c00317 	ldw	r3,12(r23)
  80e9dc:	b8800217 	ldw	r2,8(r23)
  80e9e0:	99bfff04 	addi	r6,r19,-4
  80e9e4:	01400904 	movi	r5,36
  80e9e8:	18800215 	stw	r2,8(r3)
  80e9ec:	10c00315 	stw	r3,12(r2)
  80e9f0:	bc400204 	addi	r17,r23,8
  80e9f4:	29804136 	bltu	r5,r6,80eafc <_realloc_r+0x590>
  80e9f8:	008004c4 	movi	r2,19
  80e9fc:	9009883a 	mov	r4,r18
  80ea00:	880f883a 	mov	r7,r17
  80ea04:	11800f2e 	bgeu	r2,r6,80ea44 <_realloc_r+0x4d8>
  80ea08:	90800017 	ldw	r2,0(r18)
  80ea0c:	b9c00404 	addi	r7,r23,16
  80ea10:	91000204 	addi	r4,r18,8
  80ea14:	b8800215 	stw	r2,8(r23)
  80ea18:	90c00117 	ldw	r3,4(r18)
  80ea1c:	008006c4 	movi	r2,27
  80ea20:	b8c00315 	stw	r3,12(r23)
  80ea24:	1180072e 	bgeu	r2,r6,80ea44 <_realloc_r+0x4d8>
  80ea28:	90c00217 	ldw	r3,8(r18)
  80ea2c:	b9c00604 	addi	r7,r23,24
  80ea30:	91000404 	addi	r4,r18,16
  80ea34:	b8c00415 	stw	r3,16(r23)
  80ea38:	90800317 	ldw	r2,12(r18)
  80ea3c:	b8800515 	stw	r2,20(r23)
  80ea40:	31404026 	beq	r6,r5,80eb44 <_realloc_r+0x5d8>
  80ea44:	20800017 	ldw	r2,0(r4)
  80ea48:	38800015 	stw	r2,0(r7)
  80ea4c:	20c00117 	ldw	r3,4(r4)
  80ea50:	38c00115 	stw	r3,4(r7)
  80ea54:	20800217 	ldw	r2,8(r4)
  80ea58:	38800215 	stw	r2,8(r7)
  80ea5c:	d8c00117 	ldw	r3,4(sp)
  80ea60:	bf0b883a 	add	r5,r23,fp
  80ea64:	b009883a 	mov	r4,r22
  80ea68:	1f05c83a 	sub	r2,r3,fp
  80ea6c:	10800054 	ori	r2,r2,1
  80ea70:	28800115 	stw	r2,4(r5)
  80ea74:	b8c00117 	ldw	r3,4(r23)
  80ea78:	008020b4 	movhi	r2,130
  80ea7c:	10b55004 	addi	r2,r2,-10944
  80ea80:	11400215 	stw	r5,8(r2)
  80ea84:	18c0004c 	andi	r3,r3,1
  80ea88:	e0c6b03a 	or	r3,fp,r3
  80ea8c:	b8c00115 	stw	r3,4(r23)
  80ea90:	0810eb80 	call	810eb8 <__malloc_unlock>
  80ea94:	003eeb06 	br	80e644 <_realloc_r+0xd8>
  80ea98:	20800117 	ldw	r2,4(r4)
  80ea9c:	00ffff04 	movi	r3,-4
  80eaa0:	800f883a 	mov	r7,r16
  80eaa4:	10c4703a 	and	r2,r2,r3
  80eaa8:	98a9883a 	add	r20,r19,r2
  80eaac:	84000204 	addi	r16,r16,8
  80eab0:	003ecf06 	br	80e5f0 <_realloc_r+0x84>
  80eab4:	900b883a 	mov	r5,r18
  80eab8:	8009883a 	mov	r4,r16
  80eabc:	080d4000 	call	80d400 <memmove>
  80eac0:	dd000017 	ldw	r20,0(sp)
  80eac4:	b80f883a 	mov	r7,r23
  80eac8:	003ec906 	br	80e5f0 <_realloc_r+0x84>
  80eacc:	900b883a 	mov	r5,r18
  80ead0:	8009883a 	mov	r4,r16
  80ead4:	080d4000 	call	80d400 <memmove>
  80ead8:	b80f883a 	mov	r7,r23
  80eadc:	003ec406 	br	80e5f0 <_realloc_r+0x84>
  80eae0:	90c00417 	ldw	r3,16(r18)
  80eae4:	89400604 	addi	r5,r17,24
  80eae8:	91000604 	addi	r4,r18,24
  80eaec:	88c00415 	stw	r3,16(r17)
  80eaf0:	90800517 	ldw	r2,20(r18)
  80eaf4:	88800515 	stw	r2,20(r17)
  80eaf8:	003f6806 	br	80e89c <_realloc_r+0x330>
  80eafc:	900b883a 	mov	r5,r18
  80eb00:	8809883a 	mov	r4,r17
  80eb04:	080d4000 	call	80d400 <memmove>
  80eb08:	003fd406 	br	80ea5c <_realloc_r+0x4f0>
  80eb0c:	90c00417 	ldw	r3,16(r18)
  80eb10:	91000604 	addi	r4,r18,24
  80eb14:	ba000804 	addi	r8,r23,32
  80eb18:	b8c00615 	stw	r3,24(r23)
  80eb1c:	90800517 	ldw	r2,20(r18)
  80eb20:	b8800715 	stw	r2,28(r23)
  80eb24:	003f1206 	br	80e770 <_realloc_r+0x204>
  80eb28:	90c00417 	ldw	r3,16(r18)
  80eb2c:	91000604 	addi	r4,r18,24
  80eb30:	ba000804 	addi	r8,r23,32
  80eb34:	b8c00615 	stw	r3,24(r23)
  80eb38:	90800517 	ldw	r2,20(r18)
  80eb3c:	b8800715 	stw	r2,28(r23)
  80eb40:	003f3206 	br	80e80c <_realloc_r+0x2a0>
  80eb44:	90c00417 	ldw	r3,16(r18)
  80eb48:	91000604 	addi	r4,r18,24
  80eb4c:	b9c00804 	addi	r7,r23,32
  80eb50:	b8c00615 	stw	r3,24(r23)
  80eb54:	90800517 	ldw	r2,20(r18)
  80eb58:	b8800715 	stw	r2,28(r23)
  80eb5c:	003fb906 	br	80ea44 <_realloc_r+0x4d8>

0080eb60 <__isinfd>:
  80eb60:	200d883a 	mov	r6,r4
  80eb64:	0109c83a 	sub	r4,zero,r4
  80eb68:	2188b03a 	or	r4,r4,r6
  80eb6c:	2008d7fa 	srli	r4,r4,31
  80eb70:	00a00034 	movhi	r2,32768
  80eb74:	10bfffc4 	addi	r2,r2,-1
  80eb78:	1144703a 	and	r2,r2,r5
  80eb7c:	2088b03a 	or	r4,r4,r2
  80eb80:	009ffc34 	movhi	r2,32752
  80eb84:	1105c83a 	sub	r2,r2,r4
  80eb88:	0087c83a 	sub	r3,zero,r2
  80eb8c:	10c4b03a 	or	r2,r2,r3
  80eb90:	1004d7fa 	srli	r2,r2,31
  80eb94:	00c00044 	movi	r3,1
  80eb98:	1885c83a 	sub	r2,r3,r2
  80eb9c:	f800283a 	ret

0080eba0 <__sclose>:
  80eba0:	2940038f 	ldh	r5,14(r5)
  80eba4:	080eed41 	jmpi	80eed4 <_close_r>

0080eba8 <__sseek>:
  80eba8:	defffe04 	addi	sp,sp,-8
  80ebac:	dc000015 	stw	r16,0(sp)
  80ebb0:	2821883a 	mov	r16,r5
  80ebb4:	2940038f 	ldh	r5,14(r5)
  80ebb8:	dfc00115 	stw	ra,4(sp)
  80ebbc:	080f14c0 	call	80f14c <_lseek_r>
  80ebc0:	1007883a 	mov	r3,r2
  80ebc4:	00bfffc4 	movi	r2,-1
  80ebc8:	18800926 	beq	r3,r2,80ebf0 <__sseek+0x48>
  80ebcc:	8080030b 	ldhu	r2,12(r16)
  80ebd0:	80c01415 	stw	r3,80(r16)
  80ebd4:	10840014 	ori	r2,r2,4096
  80ebd8:	8080030d 	sth	r2,12(r16)
  80ebdc:	1805883a 	mov	r2,r3
  80ebe0:	dfc00117 	ldw	ra,4(sp)
  80ebe4:	dc000017 	ldw	r16,0(sp)
  80ebe8:	dec00204 	addi	sp,sp,8
  80ebec:	f800283a 	ret
  80ebf0:	8080030b 	ldhu	r2,12(r16)
  80ebf4:	10bbffcc 	andi	r2,r2,61439
  80ebf8:	8080030d 	sth	r2,12(r16)
  80ebfc:	1805883a 	mov	r2,r3
  80ec00:	dfc00117 	ldw	ra,4(sp)
  80ec04:	dc000017 	ldw	r16,0(sp)
  80ec08:	dec00204 	addi	sp,sp,8
  80ec0c:	f800283a 	ret

0080ec10 <__swrite>:
  80ec10:	2880030b 	ldhu	r2,12(r5)
  80ec14:	defffb04 	addi	sp,sp,-20
  80ec18:	dcc00315 	stw	r19,12(sp)
  80ec1c:	1080400c 	andi	r2,r2,256
  80ec20:	dc800215 	stw	r18,8(sp)
  80ec24:	dc400115 	stw	r17,4(sp)
  80ec28:	dc000015 	stw	r16,0(sp)
  80ec2c:	3027883a 	mov	r19,r6
  80ec30:	3825883a 	mov	r18,r7
  80ec34:	dfc00415 	stw	ra,16(sp)
  80ec38:	2821883a 	mov	r16,r5
  80ec3c:	000d883a 	mov	r6,zero
  80ec40:	01c00084 	movi	r7,2
  80ec44:	2023883a 	mov	r17,r4
  80ec48:	10000226 	beq	r2,zero,80ec54 <__swrite+0x44>
  80ec4c:	2940038f 	ldh	r5,14(r5)
  80ec50:	080f14c0 	call	80f14c <_lseek_r>
  80ec54:	8080030b 	ldhu	r2,12(r16)
  80ec58:	8140038f 	ldh	r5,14(r16)
  80ec5c:	8809883a 	mov	r4,r17
  80ec60:	10bbffcc 	andi	r2,r2,61439
  80ec64:	980d883a 	mov	r6,r19
  80ec68:	900f883a 	mov	r7,r18
  80ec6c:	8080030d 	sth	r2,12(r16)
  80ec70:	dfc00417 	ldw	ra,16(sp)
  80ec74:	dcc00317 	ldw	r19,12(sp)
  80ec78:	dc800217 	ldw	r18,8(sp)
  80ec7c:	dc400117 	ldw	r17,4(sp)
  80ec80:	dc000017 	ldw	r16,0(sp)
  80ec84:	dec00504 	addi	sp,sp,20
  80ec88:	080eda81 	jmpi	80eda8 <_write_r>

0080ec8c <__sread>:
  80ec8c:	defffe04 	addi	sp,sp,-8
  80ec90:	dc000015 	stw	r16,0(sp)
  80ec94:	2821883a 	mov	r16,r5
  80ec98:	2940038f 	ldh	r5,14(r5)
  80ec9c:	dfc00115 	stw	ra,4(sp)
  80eca0:	080f1c40 	call	80f1c4 <_read_r>
  80eca4:	1007883a 	mov	r3,r2
  80eca8:	10000816 	blt	r2,zero,80eccc <__sread+0x40>
  80ecac:	80801417 	ldw	r2,80(r16)
  80ecb0:	10c5883a 	add	r2,r2,r3
  80ecb4:	80801415 	stw	r2,80(r16)
  80ecb8:	1805883a 	mov	r2,r3
  80ecbc:	dfc00117 	ldw	ra,4(sp)
  80ecc0:	dc000017 	ldw	r16,0(sp)
  80ecc4:	dec00204 	addi	sp,sp,8
  80ecc8:	f800283a 	ret
  80eccc:	8080030b 	ldhu	r2,12(r16)
  80ecd0:	10bbffcc 	andi	r2,r2,61439
  80ecd4:	8080030d 	sth	r2,12(r16)
  80ecd8:	1805883a 	mov	r2,r3
  80ecdc:	dfc00117 	ldw	ra,4(sp)
  80ece0:	dc000017 	ldw	r16,0(sp)
  80ece4:	dec00204 	addi	sp,sp,8
  80ece8:	f800283a 	ret

0080ecec <strcmp>:
  80ecec:	2144b03a 	or	r2,r4,r5
  80ecf0:	108000cc 	andi	r2,r2,3
  80ecf4:	10001d1e 	bne	r2,zero,80ed6c <strcmp+0x80>
  80ecf8:	200f883a 	mov	r7,r4
  80ecfc:	28800017 	ldw	r2,0(r5)
  80ed00:	21000017 	ldw	r4,0(r4)
  80ed04:	280d883a 	mov	r6,r5
  80ed08:	2080161e 	bne	r4,r2,80ed64 <strcmp+0x78>
  80ed0c:	023fbff4 	movhi	r8,65279
  80ed10:	423fbfc4 	addi	r8,r8,-257
  80ed14:	2207883a 	add	r3,r4,r8
  80ed18:	01602074 	movhi	r5,32897
  80ed1c:	29602004 	addi	r5,r5,-32640
  80ed20:	1946703a 	and	r3,r3,r5
  80ed24:	0104303a 	nor	r2,zero,r4
  80ed28:	10c4703a 	and	r2,r2,r3
  80ed2c:	10001c1e 	bne	r2,zero,80eda0 <strcmp+0xb4>
  80ed30:	4013883a 	mov	r9,r8
  80ed34:	2811883a 	mov	r8,r5
  80ed38:	00000106 	br	80ed40 <strcmp+0x54>
  80ed3c:	1800181e 	bne	r3,zero,80eda0 <strcmp+0xb4>
  80ed40:	39c00104 	addi	r7,r7,4
  80ed44:	39000017 	ldw	r4,0(r7)
  80ed48:	31800104 	addi	r6,r6,4
  80ed4c:	31400017 	ldw	r5,0(r6)
  80ed50:	2245883a 	add	r2,r4,r9
  80ed54:	1204703a 	and	r2,r2,r8
  80ed58:	0106303a 	nor	r3,zero,r4
  80ed5c:	1886703a 	and	r3,r3,r2
  80ed60:	217ff626 	beq	r4,r5,80ed3c <strcmp+0x50>
  80ed64:	3809883a 	mov	r4,r7
  80ed68:	300b883a 	mov	r5,r6
  80ed6c:	20c00007 	ldb	r3,0(r4)
  80ed70:	1800051e 	bne	r3,zero,80ed88 <strcmp+0x9c>
  80ed74:	00000606 	br	80ed90 <strcmp+0xa4>
  80ed78:	21000044 	addi	r4,r4,1
  80ed7c:	20c00007 	ldb	r3,0(r4)
  80ed80:	29400044 	addi	r5,r5,1
  80ed84:	18000226 	beq	r3,zero,80ed90 <strcmp+0xa4>
  80ed88:	28800007 	ldb	r2,0(r5)
  80ed8c:	18bffa26 	beq	r3,r2,80ed78 <strcmp+0x8c>
  80ed90:	20c00003 	ldbu	r3,0(r4)
  80ed94:	28800003 	ldbu	r2,0(r5)
  80ed98:	1885c83a 	sub	r2,r3,r2
  80ed9c:	f800283a 	ret
  80eda0:	0005883a 	mov	r2,zero
  80eda4:	f800283a 	ret

0080eda8 <_write_r>:
  80eda8:	defffd04 	addi	sp,sp,-12
  80edac:	dc000015 	stw	r16,0(sp)
  80edb0:	040020b4 	movhi	r16,130
  80edb4:	84026f04 	addi	r16,r16,2492
  80edb8:	dc400115 	stw	r17,4(sp)
  80edbc:	80000015 	stw	zero,0(r16)
  80edc0:	2023883a 	mov	r17,r4
  80edc4:	2809883a 	mov	r4,r5
  80edc8:	300b883a 	mov	r5,r6
  80edcc:	380d883a 	mov	r6,r7
  80edd0:	dfc00215 	stw	ra,8(sp)
  80edd4:	0810b280 	call	810b28 <write>
  80edd8:	1007883a 	mov	r3,r2
  80eddc:	00bfffc4 	movi	r2,-1
  80ede0:	18800626 	beq	r3,r2,80edfc <_write_r+0x54>
  80ede4:	1805883a 	mov	r2,r3
  80ede8:	dfc00217 	ldw	ra,8(sp)
  80edec:	dc400117 	ldw	r17,4(sp)
  80edf0:	dc000017 	ldw	r16,0(sp)
  80edf4:	dec00304 	addi	sp,sp,12
  80edf8:	f800283a 	ret
  80edfc:	80800017 	ldw	r2,0(r16)
  80ee00:	103ff826 	beq	r2,zero,80ede4 <_write_r+0x3c>
  80ee04:	88800015 	stw	r2,0(r17)
  80ee08:	1805883a 	mov	r2,r3
  80ee0c:	dfc00217 	ldw	ra,8(sp)
  80ee10:	dc400117 	ldw	r17,4(sp)
  80ee14:	dc000017 	ldw	r16,0(sp)
  80ee18:	dec00304 	addi	sp,sp,12
  80ee1c:	f800283a 	ret

0080ee20 <_calloc_r>:
  80ee20:	298b383a 	mul	r5,r5,r6
  80ee24:	defffe04 	addi	sp,sp,-8
  80ee28:	dc000015 	stw	r16,0(sp)
  80ee2c:	dfc00115 	stw	ra,4(sp)
  80ee30:	0807dc80 	call	807dc8 <_malloc_r>
  80ee34:	1021883a 	mov	r16,r2
  80ee38:	01c00904 	movi	r7,36
  80ee3c:	10000d26 	beq	r2,zero,80ee74 <_calloc_r+0x54>
  80ee40:	10ffff17 	ldw	r3,-4(r2)
  80ee44:	1009883a 	mov	r4,r2
  80ee48:	00bfff04 	movi	r2,-4
  80ee4c:	1886703a 	and	r3,r3,r2
  80ee50:	1887883a 	add	r3,r3,r2
  80ee54:	180d883a 	mov	r6,r3
  80ee58:	000b883a 	mov	r5,zero
  80ee5c:	38c01736 	bltu	r7,r3,80eebc <_calloc_r+0x9c>
  80ee60:	008004c4 	movi	r2,19
  80ee64:	10c00836 	bltu	r2,r3,80ee88 <_calloc_r+0x68>
  80ee68:	20000215 	stw	zero,8(r4)
  80ee6c:	20000015 	stw	zero,0(r4)
  80ee70:	20000115 	stw	zero,4(r4)
  80ee74:	8005883a 	mov	r2,r16
  80ee78:	dfc00117 	ldw	ra,4(sp)
  80ee7c:	dc000017 	ldw	r16,0(sp)
  80ee80:	dec00204 	addi	sp,sp,8
  80ee84:	f800283a 	ret
  80ee88:	008006c4 	movi	r2,27
  80ee8c:	80000015 	stw	zero,0(r16)
  80ee90:	80000115 	stw	zero,4(r16)
  80ee94:	81000204 	addi	r4,r16,8
  80ee98:	10fff32e 	bgeu	r2,r3,80ee68 <_calloc_r+0x48>
  80ee9c:	80000215 	stw	zero,8(r16)
  80eea0:	80000315 	stw	zero,12(r16)
  80eea4:	81000404 	addi	r4,r16,16
  80eea8:	19ffef1e 	bne	r3,r7,80ee68 <_calloc_r+0x48>
  80eeac:	81000604 	addi	r4,r16,24
  80eeb0:	80000415 	stw	zero,16(r16)
  80eeb4:	80000515 	stw	zero,20(r16)
  80eeb8:	003feb06 	br	80ee68 <_calloc_r+0x48>
  80eebc:	080d4e00 	call	80d4e0 <memset>
  80eec0:	8005883a 	mov	r2,r16
  80eec4:	dfc00117 	ldw	ra,4(sp)
  80eec8:	dc000017 	ldw	r16,0(sp)
  80eecc:	dec00204 	addi	sp,sp,8
  80eed0:	f800283a 	ret

0080eed4 <_close_r>:
  80eed4:	defffd04 	addi	sp,sp,-12
  80eed8:	dc000015 	stw	r16,0(sp)
  80eedc:	040020b4 	movhi	r16,130
  80eee0:	84026f04 	addi	r16,r16,2492
  80eee4:	dc400115 	stw	r17,4(sp)
  80eee8:	80000015 	stw	zero,0(r16)
  80eeec:	2023883a 	mov	r17,r4
  80eef0:	2809883a 	mov	r4,r5
  80eef4:	dfc00215 	stw	ra,8(sp)
  80eef8:	080fdc80 	call	80fdc8 <close>
  80eefc:	1007883a 	mov	r3,r2
  80ef00:	00bfffc4 	movi	r2,-1
  80ef04:	18800626 	beq	r3,r2,80ef20 <_close_r+0x4c>
  80ef08:	1805883a 	mov	r2,r3
  80ef0c:	dfc00217 	ldw	ra,8(sp)
  80ef10:	dc400117 	ldw	r17,4(sp)
  80ef14:	dc000017 	ldw	r16,0(sp)
  80ef18:	dec00304 	addi	sp,sp,12
  80ef1c:	f800283a 	ret
  80ef20:	80800017 	ldw	r2,0(r16)
  80ef24:	103ff826 	beq	r2,zero,80ef08 <_close_r+0x34>
  80ef28:	88800015 	stw	r2,0(r17)
  80ef2c:	1805883a 	mov	r2,r3
  80ef30:	dfc00217 	ldw	ra,8(sp)
  80ef34:	dc400117 	ldw	r17,4(sp)
  80ef38:	dc000017 	ldw	r16,0(sp)
  80ef3c:	dec00304 	addi	sp,sp,12
  80ef40:	f800283a 	ret

0080ef44 <_fclose_r>:
  80ef44:	defffc04 	addi	sp,sp,-16
  80ef48:	dc400115 	stw	r17,4(sp)
  80ef4c:	dc000015 	stw	r16,0(sp)
  80ef50:	dfc00315 	stw	ra,12(sp)
  80ef54:	dc800215 	stw	r18,8(sp)
  80ef58:	2821883a 	mov	r16,r5
  80ef5c:	2023883a 	mov	r17,r4
  80ef60:	28002926 	beq	r5,zero,80f008 <_fclose_r+0xc4>
  80ef64:	080c3600 	call	80c360 <__sfp_lock_acquire>
  80ef68:	88000226 	beq	r17,zero,80ef74 <_fclose_r+0x30>
  80ef6c:	88800e17 	ldw	r2,56(r17)
  80ef70:	10002d26 	beq	r2,zero,80f028 <_fclose_r+0xe4>
  80ef74:	8080030f 	ldh	r2,12(r16)
  80ef78:	10002226 	beq	r2,zero,80f004 <_fclose_r+0xc0>
  80ef7c:	8809883a 	mov	r4,r17
  80ef80:	800b883a 	mov	r5,r16
  80ef84:	080c0d80 	call	80c0d8 <_fflush_r>
  80ef88:	1025883a 	mov	r18,r2
  80ef8c:	80800b17 	ldw	r2,44(r16)
  80ef90:	10000426 	beq	r2,zero,80efa4 <_fclose_r+0x60>
  80ef94:	81400717 	ldw	r5,28(r16)
  80ef98:	8809883a 	mov	r4,r17
  80ef9c:	103ee83a 	callr	r2
  80efa0:	10002a16 	blt	r2,zero,80f04c <_fclose_r+0x108>
  80efa4:	8080030b 	ldhu	r2,12(r16)
  80efa8:	1080200c 	andi	r2,r2,128
  80efac:	1000231e 	bne	r2,zero,80f03c <_fclose_r+0xf8>
  80efb0:	81400c17 	ldw	r5,48(r16)
  80efb4:	28000526 	beq	r5,zero,80efcc <_fclose_r+0x88>
  80efb8:	80801004 	addi	r2,r16,64
  80efbc:	28800226 	beq	r5,r2,80efc8 <_fclose_r+0x84>
  80efc0:	8809883a 	mov	r4,r17
  80efc4:	080c6f40 	call	80c6f4 <_free_r>
  80efc8:	80000c15 	stw	zero,48(r16)
  80efcc:	81401117 	ldw	r5,68(r16)
  80efd0:	28000326 	beq	r5,zero,80efe0 <_fclose_r+0x9c>
  80efd4:	8809883a 	mov	r4,r17
  80efd8:	080c6f40 	call	80c6f4 <_free_r>
  80efdc:	80001115 	stw	zero,68(r16)
  80efe0:	8000030d 	sth	zero,12(r16)
  80efe4:	080c3640 	call	80c364 <__sfp_lock_release>
  80efe8:	9005883a 	mov	r2,r18
  80efec:	dfc00317 	ldw	ra,12(sp)
  80eff0:	dc800217 	ldw	r18,8(sp)
  80eff4:	dc400117 	ldw	r17,4(sp)
  80eff8:	dc000017 	ldw	r16,0(sp)
  80effc:	dec00404 	addi	sp,sp,16
  80f000:	f800283a 	ret
  80f004:	080c3640 	call	80c364 <__sfp_lock_release>
  80f008:	0025883a 	mov	r18,zero
  80f00c:	9005883a 	mov	r2,r18
  80f010:	dfc00317 	ldw	ra,12(sp)
  80f014:	dc800217 	ldw	r18,8(sp)
  80f018:	dc400117 	ldw	r17,4(sp)
  80f01c:	dc000017 	ldw	r16,0(sp)
  80f020:	dec00404 	addi	sp,sp,16
  80f024:	f800283a 	ret
  80f028:	8809883a 	mov	r4,r17
  80f02c:	080c3700 	call	80c370 <__sinit>
  80f030:	8080030f 	ldh	r2,12(r16)
  80f034:	103fd11e 	bne	r2,zero,80ef7c <_fclose_r+0x38>
  80f038:	003ff206 	br	80f004 <_fclose_r+0xc0>
  80f03c:	81400417 	ldw	r5,16(r16)
  80f040:	8809883a 	mov	r4,r17
  80f044:	080c6f40 	call	80c6f4 <_free_r>
  80f048:	003fd906 	br	80efb0 <_fclose_r+0x6c>
  80f04c:	04bfffc4 	movi	r18,-1
  80f050:	003fd406 	br	80efa4 <_fclose_r+0x60>

0080f054 <fclose>:
  80f054:	008020b4 	movhi	r2,130
  80f058:	10bb2804 	addi	r2,r2,-4960
  80f05c:	200b883a 	mov	r5,r4
  80f060:	11000017 	ldw	r4,0(r2)
  80f064:	080ef441 	jmpi	80ef44 <_fclose_r>

0080f068 <_fstat_r>:
  80f068:	defffd04 	addi	sp,sp,-12
  80f06c:	dc000015 	stw	r16,0(sp)
  80f070:	040020b4 	movhi	r16,130
  80f074:	84026f04 	addi	r16,r16,2492
  80f078:	dc400115 	stw	r17,4(sp)
  80f07c:	80000015 	stw	zero,0(r16)
  80f080:	2023883a 	mov	r17,r4
  80f084:	2809883a 	mov	r4,r5
  80f088:	300b883a 	mov	r5,r6
  80f08c:	dfc00215 	stw	ra,8(sp)
  80f090:	080ff500 	call	80ff50 <fstat>
  80f094:	1007883a 	mov	r3,r2
  80f098:	00bfffc4 	movi	r2,-1
  80f09c:	18800626 	beq	r3,r2,80f0b8 <_fstat_r+0x50>
  80f0a0:	1805883a 	mov	r2,r3
  80f0a4:	dfc00217 	ldw	ra,8(sp)
  80f0a8:	dc400117 	ldw	r17,4(sp)
  80f0ac:	dc000017 	ldw	r16,0(sp)
  80f0b0:	dec00304 	addi	sp,sp,12
  80f0b4:	f800283a 	ret
  80f0b8:	80800017 	ldw	r2,0(r16)
  80f0bc:	103ff826 	beq	r2,zero,80f0a0 <_fstat_r+0x38>
  80f0c0:	88800015 	stw	r2,0(r17)
  80f0c4:	1805883a 	mov	r2,r3
  80f0c8:	dfc00217 	ldw	ra,8(sp)
  80f0cc:	dc400117 	ldw	r17,4(sp)
  80f0d0:	dc000017 	ldw	r16,0(sp)
  80f0d4:	dec00304 	addi	sp,sp,12
  80f0d8:	f800283a 	ret

0080f0dc <_isatty_r>:
  80f0dc:	defffd04 	addi	sp,sp,-12
  80f0e0:	dc000015 	stw	r16,0(sp)
  80f0e4:	040020b4 	movhi	r16,130
  80f0e8:	84026f04 	addi	r16,r16,2492
  80f0ec:	dc400115 	stw	r17,4(sp)
  80f0f0:	80000015 	stw	zero,0(r16)
  80f0f4:	2023883a 	mov	r17,r4
  80f0f8:	2809883a 	mov	r4,r5
  80f0fc:	dfc00215 	stw	ra,8(sp)
  80f100:	08103500 	call	810350 <isatty>
  80f104:	1007883a 	mov	r3,r2
  80f108:	00bfffc4 	movi	r2,-1
  80f10c:	18800626 	beq	r3,r2,80f128 <_isatty_r+0x4c>
  80f110:	1805883a 	mov	r2,r3
  80f114:	dfc00217 	ldw	ra,8(sp)
  80f118:	dc400117 	ldw	r17,4(sp)
  80f11c:	dc000017 	ldw	r16,0(sp)
  80f120:	dec00304 	addi	sp,sp,12
  80f124:	f800283a 	ret
  80f128:	80800017 	ldw	r2,0(r16)
  80f12c:	103ff826 	beq	r2,zero,80f110 <_isatty_r+0x34>
  80f130:	88800015 	stw	r2,0(r17)
  80f134:	1805883a 	mov	r2,r3
  80f138:	dfc00217 	ldw	ra,8(sp)
  80f13c:	dc400117 	ldw	r17,4(sp)
  80f140:	dc000017 	ldw	r16,0(sp)
  80f144:	dec00304 	addi	sp,sp,12
  80f148:	f800283a 	ret

0080f14c <_lseek_r>:
  80f14c:	defffd04 	addi	sp,sp,-12
  80f150:	dc000015 	stw	r16,0(sp)
  80f154:	040020b4 	movhi	r16,130
  80f158:	84026f04 	addi	r16,r16,2492
  80f15c:	dc400115 	stw	r17,4(sp)
  80f160:	80000015 	stw	zero,0(r16)
  80f164:	2023883a 	mov	r17,r4
  80f168:	2809883a 	mov	r4,r5
  80f16c:	300b883a 	mov	r5,r6
  80f170:	380d883a 	mov	r6,r7
  80f174:	dfc00215 	stw	ra,8(sp)
  80f178:	081055c0 	call	81055c <lseek>
  80f17c:	1007883a 	mov	r3,r2
  80f180:	00bfffc4 	movi	r2,-1
  80f184:	18800626 	beq	r3,r2,80f1a0 <_lseek_r+0x54>
  80f188:	1805883a 	mov	r2,r3
  80f18c:	dfc00217 	ldw	ra,8(sp)
  80f190:	dc400117 	ldw	r17,4(sp)
  80f194:	dc000017 	ldw	r16,0(sp)
  80f198:	dec00304 	addi	sp,sp,12
  80f19c:	f800283a 	ret
  80f1a0:	80800017 	ldw	r2,0(r16)
  80f1a4:	103ff826 	beq	r2,zero,80f188 <_lseek_r+0x3c>
  80f1a8:	88800015 	stw	r2,0(r17)
  80f1ac:	1805883a 	mov	r2,r3
  80f1b0:	dfc00217 	ldw	ra,8(sp)
  80f1b4:	dc400117 	ldw	r17,4(sp)
  80f1b8:	dc000017 	ldw	r16,0(sp)
  80f1bc:	dec00304 	addi	sp,sp,12
  80f1c0:	f800283a 	ret

0080f1c4 <_read_r>:
  80f1c4:	defffd04 	addi	sp,sp,-12
  80f1c8:	dc000015 	stw	r16,0(sp)
  80f1cc:	040020b4 	movhi	r16,130
  80f1d0:	84026f04 	addi	r16,r16,2492
  80f1d4:	dc400115 	stw	r17,4(sp)
  80f1d8:	80000015 	stw	zero,0(r16)
  80f1dc:	2023883a 	mov	r17,r4
  80f1e0:	2809883a 	mov	r4,r5
  80f1e4:	300b883a 	mov	r5,r6
  80f1e8:	380d883a 	mov	r6,r7
  80f1ec:	dfc00215 	stw	ra,8(sp)
  80f1f0:	08107740 	call	810774 <read>
  80f1f4:	1007883a 	mov	r3,r2
  80f1f8:	00bfffc4 	movi	r2,-1
  80f1fc:	18800626 	beq	r3,r2,80f218 <_read_r+0x54>
  80f200:	1805883a 	mov	r2,r3
  80f204:	dfc00217 	ldw	ra,8(sp)
  80f208:	dc400117 	ldw	r17,4(sp)
  80f20c:	dc000017 	ldw	r16,0(sp)
  80f210:	dec00304 	addi	sp,sp,12
  80f214:	f800283a 	ret
  80f218:	80800017 	ldw	r2,0(r16)
  80f21c:	103ff826 	beq	r2,zero,80f200 <_read_r+0x3c>
  80f220:	88800015 	stw	r2,0(r17)
  80f224:	1805883a 	mov	r2,r3
  80f228:	dfc00217 	ldw	ra,8(sp)
  80f22c:	dc400117 	ldw	r17,4(sp)
  80f230:	dc000017 	ldw	r16,0(sp)
  80f234:	dec00304 	addi	sp,sp,12
  80f238:	f800283a 	ret

0080f23c <__udivdi3>:
  80f23c:	defff004 	addi	sp,sp,-64
  80f240:	2005883a 	mov	r2,r4
  80f244:	3011883a 	mov	r8,r6
  80f248:	df000e15 	stw	fp,56(sp)
  80f24c:	dd000a15 	stw	r20,40(sp)
  80f250:	dc000615 	stw	r16,24(sp)
  80f254:	dfc00f15 	stw	ra,60(sp)
  80f258:	ddc00d15 	stw	r23,52(sp)
  80f25c:	dd800c15 	stw	r22,48(sp)
  80f260:	dd400b15 	stw	r21,44(sp)
  80f264:	dcc00915 	stw	r19,36(sp)
  80f268:	dc800815 	stw	r18,32(sp)
  80f26c:	dc400715 	stw	r17,28(sp)
  80f270:	4021883a 	mov	r16,r8
  80f274:	1039883a 	mov	fp,r2
  80f278:	2829883a 	mov	r20,r5
  80f27c:	38003b1e 	bne	r7,zero,80f36c <__udivdi3+0x130>
  80f280:	2a005c36 	bltu	r5,r8,80f3f4 <__udivdi3+0x1b8>
  80f284:	4000a626 	beq	r8,zero,80f520 <__udivdi3+0x2e4>
  80f288:	00bfffd4 	movui	r2,65535
  80f28c:	14009e36 	bltu	r2,r16,80f508 <__udivdi3+0x2cc>
  80f290:	00803fc4 	movi	r2,255
  80f294:	14013d36 	bltu	r2,r16,80f78c <__udivdi3+0x550>
  80f298:	000b883a 	mov	r5,zero
  80f29c:	0005883a 	mov	r2,zero
  80f2a0:	8084d83a 	srl	r2,r16,r2
  80f2a4:	010020b4 	movhi	r4,130
  80f2a8:	21329b04 	addi	r4,r4,-13716
  80f2ac:	01800804 	movi	r6,32
  80f2b0:	1105883a 	add	r2,r2,r4
  80f2b4:	10c00003 	ldbu	r3,0(r2)
  80f2b8:	28c7883a 	add	r3,r5,r3
  80f2bc:	30edc83a 	sub	r22,r6,r3
  80f2c0:	b000ee1e 	bne	r22,zero,80f67c <__udivdi3+0x440>
  80f2c4:	802ad43a 	srli	r21,r16,16
  80f2c8:	00800044 	movi	r2,1
  80f2cc:	a423c83a 	sub	r17,r20,r16
  80f2d0:	85ffffcc 	andi	r23,r16,65535
  80f2d4:	d8800315 	stw	r2,12(sp)
  80f2d8:	8809883a 	mov	r4,r17
  80f2dc:	a80b883a 	mov	r5,r21
  80f2e0:	08074580 	call	807458 <__udivsi3>
  80f2e4:	8809883a 	mov	r4,r17
  80f2e8:	a80b883a 	mov	r5,r21
  80f2ec:	102d883a 	mov	r22,r2
  80f2f0:	08074600 	call	807460 <__umodsi3>
  80f2f4:	1004943a 	slli	r2,r2,16
  80f2f8:	e006d43a 	srli	r3,fp,16
  80f2fc:	bda3383a 	mul	r17,r23,r22
  80f300:	10c4b03a 	or	r2,r2,r3
  80f304:	1440042e 	bgeu	r2,r17,80f318 <__udivdi3+0xdc>
  80f308:	1405883a 	add	r2,r2,r16
  80f30c:	b5bfffc4 	addi	r22,r22,-1
  80f310:	14000136 	bltu	r2,r16,80f318 <__udivdi3+0xdc>
  80f314:	14413d36 	bltu	r2,r17,80f80c <__udivdi3+0x5d0>
  80f318:	1463c83a 	sub	r17,r2,r17
  80f31c:	8809883a 	mov	r4,r17
  80f320:	a80b883a 	mov	r5,r21
  80f324:	08074580 	call	807458 <__udivsi3>
  80f328:	8809883a 	mov	r4,r17
  80f32c:	a80b883a 	mov	r5,r21
  80f330:	1029883a 	mov	r20,r2
  80f334:	08074600 	call	807460 <__umodsi3>
  80f338:	1004943a 	slli	r2,r2,16
  80f33c:	bd09383a 	mul	r4,r23,r20
  80f340:	e0ffffcc 	andi	r3,fp,65535
  80f344:	10c4b03a 	or	r2,r2,r3
  80f348:	1100042e 	bgeu	r2,r4,80f35c <__udivdi3+0x120>
  80f34c:	8085883a 	add	r2,r16,r2
  80f350:	a53fffc4 	addi	r20,r20,-1
  80f354:	14000136 	bltu	r2,r16,80f35c <__udivdi3+0x120>
  80f358:	11012036 	bltu	r2,r4,80f7dc <__udivdi3+0x5a0>
  80f35c:	b004943a 	slli	r2,r22,16
  80f360:	d9000317 	ldw	r4,12(sp)
  80f364:	a084b03a 	or	r2,r20,r2
  80f368:	00001506 	br	80f3c0 <__udivdi3+0x184>
  80f36c:	380d883a 	mov	r6,r7
  80f370:	29c06236 	bltu	r5,r7,80f4fc <__udivdi3+0x2c0>
  80f374:	00bfffd4 	movui	r2,65535
  80f378:	11c05a36 	bltu	r2,r7,80f4e4 <__udivdi3+0x2a8>
  80f37c:	00803fc4 	movi	r2,255
  80f380:	11c0fc36 	bltu	r2,r7,80f774 <__udivdi3+0x538>
  80f384:	000b883a 	mov	r5,zero
  80f388:	0005883a 	mov	r2,zero
  80f38c:	3084d83a 	srl	r2,r6,r2
  80f390:	010020b4 	movhi	r4,130
  80f394:	21329b04 	addi	r4,r4,-13716
  80f398:	01c00804 	movi	r7,32
  80f39c:	1105883a 	add	r2,r2,r4
  80f3a0:	10c00003 	ldbu	r3,0(r2)
  80f3a4:	28c7883a 	add	r3,r5,r3
  80f3a8:	38efc83a 	sub	r23,r7,r3
  80f3ac:	b800691e 	bne	r23,zero,80f554 <__udivdi3+0x318>
  80f3b0:	35000136 	bltu	r6,r20,80f3b8 <__udivdi3+0x17c>
  80f3b4:	e4005136 	bltu	fp,r16,80f4fc <__udivdi3+0x2c0>
  80f3b8:	00800044 	movi	r2,1
  80f3bc:	0009883a 	mov	r4,zero
  80f3c0:	2007883a 	mov	r3,r4
  80f3c4:	dfc00f17 	ldw	ra,60(sp)
  80f3c8:	df000e17 	ldw	fp,56(sp)
  80f3cc:	ddc00d17 	ldw	r23,52(sp)
  80f3d0:	dd800c17 	ldw	r22,48(sp)
  80f3d4:	dd400b17 	ldw	r21,44(sp)
  80f3d8:	dd000a17 	ldw	r20,40(sp)
  80f3dc:	dcc00917 	ldw	r19,36(sp)
  80f3e0:	dc800817 	ldw	r18,32(sp)
  80f3e4:	dc400717 	ldw	r17,28(sp)
  80f3e8:	dc000617 	ldw	r16,24(sp)
  80f3ec:	dec01004 	addi	sp,sp,64
  80f3f0:	f800283a 	ret
  80f3f4:	00bfffd4 	movui	r2,65535
  80f3f8:	12005036 	bltu	r2,r8,80f53c <__udivdi3+0x300>
  80f3fc:	00803fc4 	movi	r2,255
  80f400:	1200e836 	bltu	r2,r8,80f7a4 <__udivdi3+0x568>
  80f404:	000b883a 	mov	r5,zero
  80f408:	0005883a 	mov	r2,zero
  80f40c:	8084d83a 	srl	r2,r16,r2
  80f410:	010020b4 	movhi	r4,130
  80f414:	21329b04 	addi	r4,r4,-13716
  80f418:	01800804 	movi	r6,32
  80f41c:	1105883a 	add	r2,r2,r4
  80f420:	10c00003 	ldbu	r3,0(r2)
  80f424:	28c7883a 	add	r3,r5,r3
  80f428:	30cbc83a 	sub	r5,r6,r3
  80f42c:	28000626 	beq	r5,zero,80f448 <__udivdi3+0x20c>
  80f430:	3145c83a 	sub	r2,r6,r5
  80f434:	e084d83a 	srl	r2,fp,r2
  80f438:	a146983a 	sll	r3,r20,r5
  80f43c:	e178983a 	sll	fp,fp,r5
  80f440:	8160983a 	sll	r16,r16,r5
  80f444:	18a8b03a 	or	r20,r3,r2
  80f448:	802ad43a 	srli	r21,r16,16
  80f44c:	a009883a 	mov	r4,r20
  80f450:	85ffffcc 	andi	r23,r16,65535
  80f454:	a80b883a 	mov	r5,r21
  80f458:	08074580 	call	807458 <__udivsi3>
  80f45c:	a009883a 	mov	r4,r20
  80f460:	a80b883a 	mov	r5,r21
  80f464:	102d883a 	mov	r22,r2
  80f468:	08074600 	call	807460 <__umodsi3>
  80f46c:	1004943a 	slli	r2,r2,16
  80f470:	e006d43a 	srli	r3,fp,16
  80f474:	bda3383a 	mul	r17,r23,r22
  80f478:	10c4b03a 	or	r2,r2,r3
  80f47c:	1440042e 	bgeu	r2,r17,80f490 <__udivdi3+0x254>
  80f480:	1405883a 	add	r2,r2,r16
  80f484:	b5bfffc4 	addi	r22,r22,-1
  80f488:	14000136 	bltu	r2,r16,80f490 <__udivdi3+0x254>
  80f48c:	1440d536 	bltu	r2,r17,80f7e4 <__udivdi3+0x5a8>
  80f490:	1463c83a 	sub	r17,r2,r17
  80f494:	8809883a 	mov	r4,r17
  80f498:	a80b883a 	mov	r5,r21
  80f49c:	08074580 	call	807458 <__udivsi3>
  80f4a0:	8809883a 	mov	r4,r17
  80f4a4:	a80b883a 	mov	r5,r21
  80f4a8:	1029883a 	mov	r20,r2
  80f4ac:	08074600 	call	807460 <__umodsi3>
  80f4b0:	1004943a 	slli	r2,r2,16
  80f4b4:	bd09383a 	mul	r4,r23,r20
  80f4b8:	e0ffffcc 	andi	r3,fp,65535
  80f4bc:	10c4b03a 	or	r2,r2,r3
  80f4c0:	1100042e 	bgeu	r2,r4,80f4d4 <__udivdi3+0x298>
  80f4c4:	8085883a 	add	r2,r16,r2
  80f4c8:	a53fffc4 	addi	r20,r20,-1
  80f4cc:	14000136 	bltu	r2,r16,80f4d4 <__udivdi3+0x298>
  80f4d0:	1100c736 	bltu	r2,r4,80f7f0 <__udivdi3+0x5b4>
  80f4d4:	b004943a 	slli	r2,r22,16
  80f4d8:	0009883a 	mov	r4,zero
  80f4dc:	a084b03a 	or	r2,r20,r2
  80f4e0:	003fb706 	br	80f3c0 <__udivdi3+0x184>
  80f4e4:	00804034 	movhi	r2,256
  80f4e8:	10bfffc4 	addi	r2,r2,-1
  80f4ec:	11c0a436 	bltu	r2,r7,80f780 <__udivdi3+0x544>
  80f4f0:	01400404 	movi	r5,16
  80f4f4:	2805883a 	mov	r2,r5
  80f4f8:	003fa406 	br	80f38c <__udivdi3+0x150>
  80f4fc:	0005883a 	mov	r2,zero
  80f500:	0009883a 	mov	r4,zero
  80f504:	003fae06 	br	80f3c0 <__udivdi3+0x184>
  80f508:	00804034 	movhi	r2,256
  80f50c:	10bfffc4 	addi	r2,r2,-1
  80f510:	1400a136 	bltu	r2,r16,80f798 <__udivdi3+0x55c>
  80f514:	01400404 	movi	r5,16
  80f518:	2805883a 	mov	r2,r5
  80f51c:	003f6006 	br	80f2a0 <__udivdi3+0x64>
  80f520:	01000044 	movi	r4,1
  80f524:	000b883a 	mov	r5,zero
  80f528:	08074580 	call	807458 <__udivsi3>
  80f52c:	1021883a 	mov	r16,r2
  80f530:	00bfffd4 	movui	r2,65535
  80f534:	143ff436 	bltu	r2,r16,80f508 <__udivdi3+0x2cc>
  80f538:	003f5506 	br	80f290 <__udivdi3+0x54>
  80f53c:	00804034 	movhi	r2,256
  80f540:	10bfffc4 	addi	r2,r2,-1
  80f544:	12009a36 	bltu	r2,r8,80f7b0 <__udivdi3+0x574>
  80f548:	01400404 	movi	r5,16
  80f54c:	2805883a 	mov	r2,r5
  80f550:	003fae06 	br	80f40c <__udivdi3+0x1d0>
  80f554:	3dc5c83a 	sub	r2,r7,r23
  80f558:	35c8983a 	sll	r4,r6,r23
  80f55c:	8086d83a 	srl	r3,r16,r2
  80f560:	a0a2d83a 	srl	r17,r20,r2
  80f564:	e084d83a 	srl	r2,fp,r2
  80f568:	20eab03a 	or	r21,r4,r3
  80f56c:	a82cd43a 	srli	r22,r21,16
  80f570:	a5c6983a 	sll	r3,r20,r23
  80f574:	8809883a 	mov	r4,r17
  80f578:	b00b883a 	mov	r5,r22
  80f57c:	1886b03a 	or	r3,r3,r2
  80f580:	d8c00215 	stw	r3,8(sp)
  80f584:	08074580 	call	807458 <__udivsi3>
  80f588:	8809883a 	mov	r4,r17
  80f58c:	b00b883a 	mov	r5,r22
  80f590:	1029883a 	mov	r20,r2
  80f594:	08074600 	call	807460 <__umodsi3>
  80f598:	a8ffffcc 	andi	r3,r21,65535
  80f59c:	d8c00515 	stw	r3,20(sp)
  80f5a0:	d9000217 	ldw	r4,8(sp)
  80f5a4:	d9400517 	ldw	r5,20(sp)
  80f5a8:	1004943a 	slli	r2,r2,16
  80f5ac:	2006d43a 	srli	r3,r4,16
  80f5b0:	85e0983a 	sll	r16,r16,r23
  80f5b4:	2d23383a 	mul	r17,r5,r20
  80f5b8:	10c4b03a 	or	r2,r2,r3
  80f5bc:	dc000015 	stw	r16,0(sp)
  80f5c0:	1440032e 	bgeu	r2,r17,80f5d0 <__udivdi3+0x394>
  80f5c4:	1545883a 	add	r2,r2,r21
  80f5c8:	a53fffc4 	addi	r20,r20,-1
  80f5cc:	15407f2e 	bgeu	r2,r21,80f7cc <__udivdi3+0x590>
  80f5d0:	1463c83a 	sub	r17,r2,r17
  80f5d4:	8809883a 	mov	r4,r17
  80f5d8:	b00b883a 	mov	r5,r22
  80f5dc:	08074580 	call	807458 <__udivsi3>
  80f5e0:	8809883a 	mov	r4,r17
  80f5e4:	b00b883a 	mov	r5,r22
  80f5e8:	1021883a 	mov	r16,r2
  80f5ec:	08074600 	call	807460 <__umodsi3>
  80f5f0:	d8c00517 	ldw	r3,20(sp)
  80f5f4:	d9000217 	ldw	r4,8(sp)
  80f5f8:	1004943a 	slli	r2,r2,16
  80f5fc:	1c0f383a 	mul	r7,r3,r16
  80f600:	20ffffcc 	andi	r3,r4,65535
  80f604:	10e2b03a 	or	r17,r2,r3
  80f608:	89c0032e 	bgeu	r17,r7,80f618 <__udivdi3+0x3dc>
  80f60c:	8d63883a 	add	r17,r17,r21
  80f610:	843fffc4 	addi	r16,r16,-1
  80f614:	8d40692e 	bgeu	r17,r21,80f7bc <__udivdi3+0x580>
  80f618:	a008943a 	slli	r4,r20,16
  80f61c:	d9400017 	ldw	r5,0(sp)
  80f620:	89e3c83a 	sub	r17,r17,r7
  80f624:	8110b03a 	or	r8,r16,r4
  80f628:	280cd43a 	srli	r6,r5,16
  80f62c:	28ffffcc 	andi	r3,r5,65535
  80f630:	40bfffcc 	andi	r2,r8,65535
  80f634:	400ad43a 	srli	r5,r8,16
  80f638:	10d3383a 	mul	r9,r2,r3
  80f63c:	1185383a 	mul	r2,r2,r6
  80f640:	28c7383a 	mul	r3,r5,r3
  80f644:	4808d43a 	srli	r4,r9,16
  80f648:	298b383a 	mul	r5,r5,r6
  80f64c:	10c5883a 	add	r2,r2,r3
  80f650:	2089883a 	add	r4,r4,r2
  80f654:	20c0022e 	bgeu	r4,r3,80f660 <__udivdi3+0x424>
  80f658:	00800074 	movhi	r2,1
  80f65c:	288b883a 	add	r5,r5,r2
  80f660:	2004d43a 	srli	r2,r4,16
  80f664:	288b883a 	add	r5,r5,r2
  80f668:	89403f36 	bltu	r17,r5,80f768 <__udivdi3+0x52c>
  80f66c:	89403926 	beq	r17,r5,80f754 <__udivdi3+0x518>
  80f670:	4005883a 	mov	r2,r8
  80f674:	0009883a 	mov	r4,zero
  80f678:	003f5106 	br	80f3c0 <__udivdi3+0x184>
  80f67c:	85a0983a 	sll	r16,r16,r22
  80f680:	3585c83a 	sub	r2,r6,r22
  80f684:	a0a2d83a 	srl	r17,r20,r2
  80f688:	802ad43a 	srli	r21,r16,16
  80f68c:	e084d83a 	srl	r2,fp,r2
  80f690:	a586983a 	sll	r3,r20,r22
  80f694:	8809883a 	mov	r4,r17
  80f698:	a80b883a 	mov	r5,r21
  80f69c:	1886b03a 	or	r3,r3,r2
  80f6a0:	d8c00115 	stw	r3,4(sp)
  80f6a4:	08074580 	call	807458 <__udivsi3>
  80f6a8:	8809883a 	mov	r4,r17
  80f6ac:	a80b883a 	mov	r5,r21
  80f6b0:	d8800415 	stw	r2,16(sp)
  80f6b4:	08074600 	call	807460 <__umodsi3>
  80f6b8:	d9000117 	ldw	r4,4(sp)
  80f6bc:	d9400417 	ldw	r5,16(sp)
  80f6c0:	1004943a 	slli	r2,r2,16
  80f6c4:	85ffffcc 	andi	r23,r16,65535
  80f6c8:	2006d43a 	srli	r3,r4,16
  80f6cc:	b963383a 	mul	r17,r23,r5
  80f6d0:	10c4b03a 	or	r2,r2,r3
  80f6d4:	1440042e 	bgeu	r2,r17,80f6e8 <__udivdi3+0x4ac>
  80f6d8:	297fffc4 	addi	r5,r5,-1
  80f6dc:	1405883a 	add	r2,r2,r16
  80f6e0:	d9400415 	stw	r5,16(sp)
  80f6e4:	1400442e 	bgeu	r2,r16,80f7f8 <__udivdi3+0x5bc>
  80f6e8:	1463c83a 	sub	r17,r2,r17
  80f6ec:	8809883a 	mov	r4,r17
  80f6f0:	a80b883a 	mov	r5,r21
  80f6f4:	08074580 	call	807458 <__udivsi3>
  80f6f8:	8809883a 	mov	r4,r17
  80f6fc:	a80b883a 	mov	r5,r21
  80f700:	1029883a 	mov	r20,r2
  80f704:	08074600 	call	807460 <__umodsi3>
  80f708:	d9400117 	ldw	r5,4(sp)
  80f70c:	1004943a 	slli	r2,r2,16
  80f710:	bd09383a 	mul	r4,r23,r20
  80f714:	28ffffcc 	andi	r3,r5,65535
  80f718:	10c6b03a 	or	r3,r2,r3
  80f71c:	1900062e 	bgeu	r3,r4,80f738 <__udivdi3+0x4fc>
  80f720:	1c07883a 	add	r3,r3,r16
  80f724:	a53fffc4 	addi	r20,r20,-1
  80f728:	1c000336 	bltu	r3,r16,80f738 <__udivdi3+0x4fc>
  80f72c:	1900022e 	bgeu	r3,r4,80f738 <__udivdi3+0x4fc>
  80f730:	a53fffc4 	addi	r20,r20,-1
  80f734:	1c07883a 	add	r3,r3,r16
  80f738:	d9400417 	ldw	r5,16(sp)
  80f73c:	e5b8983a 	sll	fp,fp,r22
  80f740:	1923c83a 	sub	r17,r3,r4
  80f744:	2804943a 	slli	r2,r5,16
  80f748:	a0a8b03a 	or	r20,r20,r2
  80f74c:	dd000315 	stw	r20,12(sp)
  80f750:	003ee106 	br	80f2d8 <__udivdi3+0x9c>
  80f754:	2004943a 	slli	r2,r4,16
  80f758:	e5c8983a 	sll	r4,fp,r23
  80f75c:	48ffffcc 	andi	r3,r9,65535
  80f760:	10c5883a 	add	r2,r2,r3
  80f764:	20bfc22e 	bgeu	r4,r2,80f670 <__udivdi3+0x434>
  80f768:	40bfffc4 	addi	r2,r8,-1
  80f76c:	0009883a 	mov	r4,zero
  80f770:	003f1306 	br	80f3c0 <__udivdi3+0x184>
  80f774:	01400204 	movi	r5,8
  80f778:	2805883a 	mov	r2,r5
  80f77c:	003f0306 	br	80f38c <__udivdi3+0x150>
  80f780:	01400604 	movi	r5,24
  80f784:	2805883a 	mov	r2,r5
  80f788:	003f0006 	br	80f38c <__udivdi3+0x150>
  80f78c:	01400204 	movi	r5,8
  80f790:	2805883a 	mov	r2,r5
  80f794:	003ec206 	br	80f2a0 <__udivdi3+0x64>
  80f798:	01400604 	movi	r5,24
  80f79c:	2805883a 	mov	r2,r5
  80f7a0:	003ebf06 	br	80f2a0 <__udivdi3+0x64>
  80f7a4:	01400204 	movi	r5,8
  80f7a8:	2805883a 	mov	r2,r5
  80f7ac:	003f1706 	br	80f40c <__udivdi3+0x1d0>
  80f7b0:	01400604 	movi	r5,24
  80f7b4:	2805883a 	mov	r2,r5
  80f7b8:	003f1406 	br	80f40c <__udivdi3+0x1d0>
  80f7bc:	89ff962e 	bgeu	r17,r7,80f618 <__udivdi3+0x3dc>
  80f7c0:	8d63883a 	add	r17,r17,r21
  80f7c4:	843fffc4 	addi	r16,r16,-1
  80f7c8:	003f9306 	br	80f618 <__udivdi3+0x3dc>
  80f7cc:	147f802e 	bgeu	r2,r17,80f5d0 <__udivdi3+0x394>
  80f7d0:	a53fffc4 	addi	r20,r20,-1
  80f7d4:	1545883a 	add	r2,r2,r21
  80f7d8:	003f7d06 	br	80f5d0 <__udivdi3+0x394>
  80f7dc:	a53fffc4 	addi	r20,r20,-1
  80f7e0:	003ede06 	br	80f35c <__udivdi3+0x120>
  80f7e4:	b5bfffc4 	addi	r22,r22,-1
  80f7e8:	1405883a 	add	r2,r2,r16
  80f7ec:	003f2806 	br	80f490 <__udivdi3+0x254>
  80f7f0:	a53fffc4 	addi	r20,r20,-1
  80f7f4:	003f3706 	br	80f4d4 <__udivdi3+0x298>
  80f7f8:	147fbb2e 	bgeu	r2,r17,80f6e8 <__udivdi3+0x4ac>
  80f7fc:	297fffc4 	addi	r5,r5,-1
  80f800:	1405883a 	add	r2,r2,r16
  80f804:	d9400415 	stw	r5,16(sp)
  80f808:	003fb706 	br	80f6e8 <__udivdi3+0x4ac>
  80f80c:	b5bfffc4 	addi	r22,r22,-1
  80f810:	1405883a 	add	r2,r2,r16
  80f814:	003ec006 	br	80f318 <__udivdi3+0xdc>

0080f818 <__umoddi3>:
  80f818:	defff104 	addi	sp,sp,-60
  80f81c:	dd800b15 	stw	r22,44(sp)
  80f820:	dd000915 	stw	r20,36(sp)
  80f824:	dc000515 	stw	r16,20(sp)
  80f828:	dfc00e15 	stw	ra,56(sp)
  80f82c:	df000d15 	stw	fp,52(sp)
  80f830:	ddc00c15 	stw	r23,48(sp)
  80f834:	dd400a15 	stw	r21,40(sp)
  80f838:	dcc00815 	stw	r19,32(sp)
  80f83c:	dc800715 	stw	r18,28(sp)
  80f840:	dc400615 	stw	r17,24(sp)
  80f844:	3021883a 	mov	r16,r6
  80f848:	202d883a 	mov	r22,r4
  80f84c:	2829883a 	mov	r20,r5
  80f850:	38002b1e 	bne	r7,zero,80f900 <__umoddi3+0xe8>
  80f854:	29805036 	bltu	r5,r6,80f998 <__umoddi3+0x180>
  80f858:	30008a26 	beq	r6,zero,80fa84 <__umoddi3+0x26c>
  80f85c:	00bfffd4 	movui	r2,65535
  80f860:	14008236 	bltu	r2,r16,80fa6c <__umoddi3+0x254>
  80f864:	00803fc4 	movi	r2,255
  80f868:	14013636 	bltu	r2,r16,80fd44 <__umoddi3+0x52c>
  80f86c:	000b883a 	mov	r5,zero
  80f870:	0005883a 	mov	r2,zero
  80f874:	8084d83a 	srl	r2,r16,r2
  80f878:	010020b4 	movhi	r4,130
  80f87c:	21329b04 	addi	r4,r4,-13716
  80f880:	01800804 	movi	r6,32
  80f884:	1105883a 	add	r2,r2,r4
  80f888:	10c00003 	ldbu	r3,0(r2)
  80f88c:	28c7883a 	add	r3,r5,r3
  80f890:	30efc83a 	sub	r23,r6,r3
  80f894:	b800941e 	bne	r23,zero,80fae8 <__umoddi3+0x2d0>
  80f898:	802ad43a 	srli	r21,r16,16
  80f89c:	a423c83a 	sub	r17,r20,r16
  80f8a0:	0039883a 	mov	fp,zero
  80f8a4:	853fffcc 	andi	r20,r16,65535
  80f8a8:	8809883a 	mov	r4,r17
  80f8ac:	a80b883a 	mov	r5,r21
  80f8b0:	08074580 	call	807458 <__udivsi3>
  80f8b4:	8809883a 	mov	r4,r17
  80f8b8:	a80b883a 	mov	r5,r21
  80f8bc:	a0a3383a 	mul	r17,r20,r2
  80f8c0:	08074600 	call	807460 <__umodsi3>
  80f8c4:	1004943a 	slli	r2,r2,16
  80f8c8:	b006d43a 	srli	r3,r22,16
  80f8cc:	10c4b03a 	or	r2,r2,r3
  80f8d0:	1440032e 	bgeu	r2,r17,80f8e0 <__umoddi3+0xc8>
  80f8d4:	1405883a 	add	r2,r2,r16
  80f8d8:	14000136 	bltu	r2,r16,80f8e0 <__umoddi3+0xc8>
  80f8dc:	14413536 	bltu	r2,r17,80fdb4 <__umoddi3+0x59c>
  80f8e0:	1463c83a 	sub	r17,r2,r17
  80f8e4:	8809883a 	mov	r4,r17
  80f8e8:	a80b883a 	mov	r5,r21
  80f8ec:	08074580 	call	807458 <__udivsi3>
  80f8f0:	8809883a 	mov	r4,r17
  80f8f4:	a0a3383a 	mul	r17,r20,r2
  80f8f8:	a80b883a 	mov	r5,r21
  80f8fc:	00004d06 	br	80fa34 <__umoddi3+0x21c>
  80f900:	380d883a 	mov	r6,r7
  80f904:	29c0102e 	bgeu	r5,r7,80f948 <__umoddi3+0x130>
  80f908:	2011883a 	mov	r8,r4
  80f90c:	2813883a 	mov	r9,r5
  80f910:	4005883a 	mov	r2,r8
  80f914:	4807883a 	mov	r3,r9
  80f918:	dfc00e17 	ldw	ra,56(sp)
  80f91c:	df000d17 	ldw	fp,52(sp)
  80f920:	ddc00c17 	ldw	r23,48(sp)
  80f924:	dd800b17 	ldw	r22,44(sp)
  80f928:	dd400a17 	ldw	r21,40(sp)
  80f92c:	dd000917 	ldw	r20,36(sp)
  80f930:	dcc00817 	ldw	r19,32(sp)
  80f934:	dc800717 	ldw	r18,28(sp)
  80f938:	dc400617 	ldw	r17,24(sp)
  80f93c:	dc000517 	ldw	r16,20(sp)
  80f940:	dec00f04 	addi	sp,sp,60
  80f944:	f800283a 	ret
  80f948:	00bfffd4 	movui	r2,65535
  80f94c:	11c05a36 	bltu	r2,r7,80fab8 <__umoddi3+0x2a0>
  80f950:	00803fc4 	movi	r2,255
  80f954:	11c0fe36 	bltu	r2,r7,80fd50 <__umoddi3+0x538>
  80f958:	000b883a 	mov	r5,zero
  80f95c:	0005883a 	mov	r2,zero
  80f960:	3084d83a 	srl	r2,r6,r2
  80f964:	010020b4 	movhi	r4,130
  80f968:	21329b04 	addi	r4,r4,-13716
  80f96c:	01c00804 	movi	r7,32
  80f970:	1105883a 	add	r2,r2,r4
  80f974:	10c00003 	ldbu	r3,0(r2)
  80f978:	28c7883a 	add	r3,r5,r3
  80f97c:	38ebc83a 	sub	r21,r7,r3
  80f980:	a800851e 	bne	r21,zero,80fb98 <__umoddi3+0x380>
  80f984:	35005236 	bltu	r6,r20,80fad0 <__umoddi3+0x2b8>
  80f988:	b400512e 	bgeu	r22,r16,80fad0 <__umoddi3+0x2b8>
  80f98c:	b011883a 	mov	r8,r22
  80f990:	a013883a 	mov	r9,r20
  80f994:	003fde06 	br	80f910 <__umoddi3+0xf8>
  80f998:	00bfffd4 	movui	r2,65535
  80f99c:	11804036 	bltu	r2,r6,80faa0 <__umoddi3+0x288>
  80f9a0:	00803fc4 	movi	r2,255
  80f9a4:	1180ed36 	bltu	r2,r6,80fd5c <__umoddi3+0x544>
  80f9a8:	000b883a 	mov	r5,zero
  80f9ac:	0005883a 	mov	r2,zero
  80f9b0:	8084d83a 	srl	r2,r16,r2
  80f9b4:	010020b4 	movhi	r4,130
  80f9b8:	21329b04 	addi	r4,r4,-13716
  80f9bc:	01800804 	movi	r6,32
  80f9c0:	1105883a 	add	r2,r2,r4
  80f9c4:	10c00003 	ldbu	r3,0(r2)
  80f9c8:	28c7883a 	add	r3,r5,r3
  80f9cc:	30c7c83a 	sub	r3,r6,r3
  80f9d0:	1800bf1e 	bne	r3,zero,80fcd0 <__umoddi3+0x4b8>
  80f9d4:	0039883a 	mov	fp,zero
  80f9d8:	802ad43a 	srli	r21,r16,16
  80f9dc:	a009883a 	mov	r4,r20
  80f9e0:	85ffffcc 	andi	r23,r16,65535
  80f9e4:	a80b883a 	mov	r5,r21
  80f9e8:	08074580 	call	807458 <__udivsi3>
  80f9ec:	a009883a 	mov	r4,r20
  80f9f0:	a80b883a 	mov	r5,r21
  80f9f4:	b8a3383a 	mul	r17,r23,r2
  80f9f8:	08074600 	call	807460 <__umodsi3>
  80f9fc:	1004943a 	slli	r2,r2,16
  80fa00:	b006d43a 	srli	r3,r22,16
  80fa04:	10c4b03a 	or	r2,r2,r3
  80fa08:	1440032e 	bgeu	r2,r17,80fa18 <__umoddi3+0x200>
  80fa0c:	1405883a 	add	r2,r2,r16
  80fa10:	14000136 	bltu	r2,r16,80fa18 <__umoddi3+0x200>
  80fa14:	1440e536 	bltu	r2,r17,80fdac <__umoddi3+0x594>
  80fa18:	1463c83a 	sub	r17,r2,r17
  80fa1c:	8809883a 	mov	r4,r17
  80fa20:	a80b883a 	mov	r5,r21
  80fa24:	08074580 	call	807458 <__udivsi3>
  80fa28:	8809883a 	mov	r4,r17
  80fa2c:	b8a3383a 	mul	r17,r23,r2
  80fa30:	a80b883a 	mov	r5,r21
  80fa34:	08074600 	call	807460 <__umodsi3>
  80fa38:	1004943a 	slli	r2,r2,16
  80fa3c:	b0ffffcc 	andi	r3,r22,65535
  80fa40:	10c4b03a 	or	r2,r2,r3
  80fa44:	1440042e 	bgeu	r2,r17,80fa58 <__umoddi3+0x240>
  80fa48:	1405883a 	add	r2,r2,r16
  80fa4c:	14000236 	bltu	r2,r16,80fa58 <__umoddi3+0x240>
  80fa50:	1440012e 	bgeu	r2,r17,80fa58 <__umoddi3+0x240>
  80fa54:	1405883a 	add	r2,r2,r16
  80fa58:	1445c83a 	sub	r2,r2,r17
  80fa5c:	1724d83a 	srl	r18,r2,fp
  80fa60:	0013883a 	mov	r9,zero
  80fa64:	9011883a 	mov	r8,r18
  80fa68:	003fa906 	br	80f910 <__umoddi3+0xf8>
  80fa6c:	00804034 	movhi	r2,256
  80fa70:	10bfffc4 	addi	r2,r2,-1
  80fa74:	1400b036 	bltu	r2,r16,80fd38 <__umoddi3+0x520>
  80fa78:	01400404 	movi	r5,16
  80fa7c:	2805883a 	mov	r2,r5
  80fa80:	003f7c06 	br	80f874 <__umoddi3+0x5c>
  80fa84:	01000044 	movi	r4,1
  80fa88:	000b883a 	mov	r5,zero
  80fa8c:	08074580 	call	807458 <__udivsi3>
  80fa90:	1021883a 	mov	r16,r2
  80fa94:	00bfffd4 	movui	r2,65535
  80fa98:	143ff436 	bltu	r2,r16,80fa6c <__umoddi3+0x254>
  80fa9c:	003f7106 	br	80f864 <__umoddi3+0x4c>
  80faa0:	00804034 	movhi	r2,256
  80faa4:	10bfffc4 	addi	r2,r2,-1
  80faa8:	1180af36 	bltu	r2,r6,80fd68 <__umoddi3+0x550>
  80faac:	01400404 	movi	r5,16
  80fab0:	2805883a 	mov	r2,r5
  80fab4:	003fbe06 	br	80f9b0 <__umoddi3+0x198>
  80fab8:	00804034 	movhi	r2,256
  80fabc:	10bfffc4 	addi	r2,r2,-1
  80fac0:	11c0ac36 	bltu	r2,r7,80fd74 <__umoddi3+0x55c>
  80fac4:	01400404 	movi	r5,16
  80fac8:	2805883a 	mov	r2,r5
  80facc:	003fa406 	br	80f960 <__umoddi3+0x148>
  80fad0:	b409c83a 	sub	r4,r22,r16
  80fad4:	b105803a 	cmpltu	r2,r22,r4
  80fad8:	a187c83a 	sub	r3,r20,r6
  80fadc:	18a9c83a 	sub	r20,r3,r2
  80fae0:	202d883a 	mov	r22,r4
  80fae4:	003fa906 	br	80f98c <__umoddi3+0x174>
  80fae8:	85e0983a 	sll	r16,r16,r23
  80faec:	35c5c83a 	sub	r2,r6,r23
  80faf0:	a0a2d83a 	srl	r17,r20,r2
  80faf4:	802ad43a 	srli	r21,r16,16
  80faf8:	b084d83a 	srl	r2,r22,r2
  80fafc:	a5c6983a 	sll	r3,r20,r23
  80fb00:	8809883a 	mov	r4,r17
  80fb04:	a80b883a 	mov	r5,r21
  80fb08:	1886b03a 	or	r3,r3,r2
  80fb0c:	d8c00115 	stw	r3,4(sp)
  80fb10:	853fffcc 	andi	r20,r16,65535
  80fb14:	08074580 	call	807458 <__udivsi3>
  80fb18:	8809883a 	mov	r4,r17
  80fb1c:	a80b883a 	mov	r5,r21
  80fb20:	a0a3383a 	mul	r17,r20,r2
  80fb24:	08074600 	call	807460 <__umodsi3>
  80fb28:	d9000117 	ldw	r4,4(sp)
  80fb2c:	1004943a 	slli	r2,r2,16
  80fb30:	b839883a 	mov	fp,r23
  80fb34:	2006d43a 	srli	r3,r4,16
  80fb38:	10c4b03a 	or	r2,r2,r3
  80fb3c:	1440022e 	bgeu	r2,r17,80fb48 <__umoddi3+0x330>
  80fb40:	1405883a 	add	r2,r2,r16
  80fb44:	1400962e 	bgeu	r2,r16,80fda0 <__umoddi3+0x588>
  80fb48:	1463c83a 	sub	r17,r2,r17
  80fb4c:	8809883a 	mov	r4,r17
  80fb50:	a80b883a 	mov	r5,r21
  80fb54:	08074580 	call	807458 <__udivsi3>
  80fb58:	8809883a 	mov	r4,r17
  80fb5c:	a80b883a 	mov	r5,r21
  80fb60:	a0a3383a 	mul	r17,r20,r2
  80fb64:	08074600 	call	807460 <__umodsi3>
  80fb68:	d9400117 	ldw	r5,4(sp)
  80fb6c:	1004943a 	slli	r2,r2,16
  80fb70:	28ffffcc 	andi	r3,r5,65535
  80fb74:	10c4b03a 	or	r2,r2,r3
  80fb78:	1440042e 	bgeu	r2,r17,80fb8c <__umoddi3+0x374>
  80fb7c:	1405883a 	add	r2,r2,r16
  80fb80:	14000236 	bltu	r2,r16,80fb8c <__umoddi3+0x374>
  80fb84:	1440012e 	bgeu	r2,r17,80fb8c <__umoddi3+0x374>
  80fb88:	1405883a 	add	r2,r2,r16
  80fb8c:	b5ec983a 	sll	r22,r22,r23
  80fb90:	1463c83a 	sub	r17,r2,r17
  80fb94:	003f4406 	br	80f8a8 <__umoddi3+0x90>
  80fb98:	3d4fc83a 	sub	r7,r7,r21
  80fb9c:	3546983a 	sll	r3,r6,r21
  80fba0:	81c4d83a 	srl	r2,r16,r7
  80fba4:	a1e2d83a 	srl	r17,r20,r7
  80fba8:	a54c983a 	sll	r6,r20,r21
  80fbac:	18aeb03a 	or	r23,r3,r2
  80fbb0:	b828d43a 	srli	r20,r23,16
  80fbb4:	b1c4d83a 	srl	r2,r22,r7
  80fbb8:	8809883a 	mov	r4,r17
  80fbbc:	a00b883a 	mov	r5,r20
  80fbc0:	308cb03a 	or	r6,r6,r2
  80fbc4:	d9c00315 	stw	r7,12(sp)
  80fbc8:	d9800215 	stw	r6,8(sp)
  80fbcc:	08074580 	call	807458 <__udivsi3>
  80fbd0:	8809883a 	mov	r4,r17
  80fbd4:	a00b883a 	mov	r5,r20
  80fbd8:	1039883a 	mov	fp,r2
  80fbdc:	08074600 	call	807460 <__umodsi3>
  80fbe0:	b8ffffcc 	andi	r3,r23,65535
  80fbe4:	d8c00415 	stw	r3,16(sp)
  80fbe8:	d9000217 	ldw	r4,8(sp)
  80fbec:	d9400417 	ldw	r5,16(sp)
  80fbf0:	1004943a 	slli	r2,r2,16
  80fbf4:	2006d43a 	srli	r3,r4,16
  80fbf8:	8560983a 	sll	r16,r16,r21
  80fbfc:	2f23383a 	mul	r17,r5,fp
  80fc00:	10c4b03a 	or	r2,r2,r3
  80fc04:	dc000015 	stw	r16,0(sp)
  80fc08:	b56c983a 	sll	r22,r22,r21
  80fc0c:	1440032e 	bgeu	r2,r17,80fc1c <__umoddi3+0x404>
  80fc10:	15c5883a 	add	r2,r2,r23
  80fc14:	e73fffc4 	addi	fp,fp,-1
  80fc18:	15c05d2e 	bgeu	r2,r23,80fd90 <__umoddi3+0x578>
  80fc1c:	1463c83a 	sub	r17,r2,r17
  80fc20:	8809883a 	mov	r4,r17
  80fc24:	a00b883a 	mov	r5,r20
  80fc28:	08074580 	call	807458 <__udivsi3>
  80fc2c:	8809883a 	mov	r4,r17
  80fc30:	a00b883a 	mov	r5,r20
  80fc34:	1021883a 	mov	r16,r2
  80fc38:	08074600 	call	807460 <__umodsi3>
  80fc3c:	d8c00417 	ldw	r3,16(sp)
  80fc40:	d9000217 	ldw	r4,8(sp)
  80fc44:	1004943a 	slli	r2,r2,16
  80fc48:	1c23383a 	mul	r17,r3,r16
  80fc4c:	20ffffcc 	andi	r3,r4,65535
  80fc50:	10ceb03a 	or	r7,r2,r3
  80fc54:	3c40032e 	bgeu	r7,r17,80fc64 <__umoddi3+0x44c>
  80fc58:	3dcf883a 	add	r7,r7,r23
  80fc5c:	843fffc4 	addi	r16,r16,-1
  80fc60:	3dc0472e 	bgeu	r7,r23,80fd80 <__umoddi3+0x568>
  80fc64:	e004943a 	slli	r2,fp,16
  80fc68:	d9400017 	ldw	r5,0(sp)
  80fc6c:	3c4fc83a 	sub	r7,r7,r17
  80fc70:	8084b03a 	or	r2,r16,r2
  80fc74:	28ffffcc 	andi	r3,r5,65535
  80fc78:	280cd43a 	srli	r6,r5,16
  80fc7c:	100ad43a 	srli	r5,r2,16
  80fc80:	10bfffcc 	andi	r2,r2,65535
  80fc84:	10d1383a 	mul	r8,r2,r3
  80fc88:	28c7383a 	mul	r3,r5,r3
  80fc8c:	1185383a 	mul	r2,r2,r6
  80fc90:	4008d43a 	srli	r4,r8,16
  80fc94:	298b383a 	mul	r5,r5,r6
  80fc98:	10c5883a 	add	r2,r2,r3
  80fc9c:	2089883a 	add	r4,r4,r2
  80fca0:	20c0022e 	bgeu	r4,r3,80fcac <__umoddi3+0x494>
  80fca4:	00800074 	movhi	r2,1
  80fca8:	288b883a 	add	r5,r5,r2
  80fcac:	2004d43a 	srli	r2,r4,16
  80fcb0:	2008943a 	slli	r4,r4,16
  80fcb4:	40ffffcc 	andi	r3,r8,65535
  80fcb8:	288b883a 	add	r5,r5,r2
  80fcbc:	20c9883a 	add	r4,r4,r3
  80fcc0:	39400b36 	bltu	r7,r5,80fcf0 <__umoddi3+0x4d8>
  80fcc4:	39403d26 	beq	r7,r5,80fdbc <__umoddi3+0x5a4>
  80fcc8:	394bc83a 	sub	r5,r7,r5
  80fccc:	00000f06 	br	80fd0c <__umoddi3+0x4f4>
  80fcd0:	30c5c83a 	sub	r2,r6,r3
  80fcd4:	1839883a 	mov	fp,r3
  80fcd8:	b084d83a 	srl	r2,r22,r2
  80fcdc:	a0c6983a 	sll	r3,r20,r3
  80fce0:	8720983a 	sll	r16,r16,fp
  80fce4:	b72c983a 	sll	r22,r22,fp
  80fce8:	18a8b03a 	or	r20,r3,r2
  80fcec:	003f3a06 	br	80f9d8 <__umoddi3+0x1c0>
  80fcf0:	d8c00017 	ldw	r3,0(sp)
  80fcf4:	20c5c83a 	sub	r2,r4,r3
  80fcf8:	2089803a 	cmpltu	r4,r4,r2
  80fcfc:	2dc7c83a 	sub	r3,r5,r23
  80fd00:	1907c83a 	sub	r3,r3,r4
  80fd04:	38cbc83a 	sub	r5,r7,r3
  80fd08:	1009883a 	mov	r4,r2
  80fd0c:	b105c83a 	sub	r2,r22,r4
  80fd10:	b087803a 	cmpltu	r3,r22,r2
  80fd14:	28c7c83a 	sub	r3,r5,r3
  80fd18:	d9400317 	ldw	r5,12(sp)
  80fd1c:	1544d83a 	srl	r2,r2,r21
  80fd20:	1948983a 	sll	r4,r3,r5
  80fd24:	1d46d83a 	srl	r3,r3,r21
  80fd28:	20a4b03a 	or	r18,r4,r2
  80fd2c:	9011883a 	mov	r8,r18
  80fd30:	1813883a 	mov	r9,r3
  80fd34:	003ef606 	br	80f910 <__umoddi3+0xf8>
  80fd38:	01400604 	movi	r5,24
  80fd3c:	2805883a 	mov	r2,r5
  80fd40:	003ecc06 	br	80f874 <__umoddi3+0x5c>
  80fd44:	01400204 	movi	r5,8
  80fd48:	2805883a 	mov	r2,r5
  80fd4c:	003ec906 	br	80f874 <__umoddi3+0x5c>
  80fd50:	01400204 	movi	r5,8
  80fd54:	2805883a 	mov	r2,r5
  80fd58:	003f0106 	br	80f960 <__umoddi3+0x148>
  80fd5c:	01400204 	movi	r5,8
  80fd60:	2805883a 	mov	r2,r5
  80fd64:	003f1206 	br	80f9b0 <__umoddi3+0x198>
  80fd68:	01400604 	movi	r5,24
  80fd6c:	2805883a 	mov	r2,r5
  80fd70:	003f0f06 	br	80f9b0 <__umoddi3+0x198>
  80fd74:	01400604 	movi	r5,24
  80fd78:	2805883a 	mov	r2,r5
  80fd7c:	003ef806 	br	80f960 <__umoddi3+0x148>
  80fd80:	3c7fb82e 	bgeu	r7,r17,80fc64 <__umoddi3+0x44c>
  80fd84:	843fffc4 	addi	r16,r16,-1
  80fd88:	3dcf883a 	add	r7,r7,r23
  80fd8c:	003fb506 	br	80fc64 <__umoddi3+0x44c>
  80fd90:	147fa22e 	bgeu	r2,r17,80fc1c <__umoddi3+0x404>
  80fd94:	e73fffc4 	addi	fp,fp,-1
  80fd98:	15c5883a 	add	r2,r2,r23
  80fd9c:	003f9f06 	br	80fc1c <__umoddi3+0x404>
  80fda0:	147f692e 	bgeu	r2,r17,80fb48 <__umoddi3+0x330>
  80fda4:	1405883a 	add	r2,r2,r16
  80fda8:	003f6706 	br	80fb48 <__umoddi3+0x330>
  80fdac:	1405883a 	add	r2,r2,r16
  80fdb0:	003f1906 	br	80fa18 <__umoddi3+0x200>
  80fdb4:	1405883a 	add	r2,r2,r16
  80fdb8:	003ec906 	br	80f8e0 <__umoddi3+0xc8>
  80fdbc:	b13fcc36 	bltu	r22,r4,80fcf0 <__umoddi3+0x4d8>
  80fdc0:	000b883a 	mov	r5,zero
  80fdc4:	003fd106 	br	80fd0c <__umoddi3+0x4f4>

0080fdc8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80fdc8:	defff804 	addi	sp,sp,-32
  80fdcc:	dfc00715 	stw	ra,28(sp)
  80fdd0:	df000615 	stw	fp,24(sp)
  80fdd4:	df000604 	addi	fp,sp,24
  80fdd8:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80fddc:	e0bffc17 	ldw	r2,-16(fp)
  80fde0:	1004803a 	cmplt	r2,r2,zero
  80fde4:	1000081e 	bne	r2,zero,80fe08 <close+0x40>
  80fde8:	e0bffc17 	ldw	r2,-16(fp)
  80fdec:	10800324 	muli	r2,r2,12
  80fdf0:	1007883a 	mov	r3,r2
  80fdf4:	008020b4 	movhi	r2,130
  80fdf8:	10b65f04 	addi	r2,r2,-9860
  80fdfc:	1887883a 	add	r3,r3,r2
  80fe00:	e0ffff15 	stw	r3,-4(fp)
  80fe04:	00000106 	br	80fe0c <close+0x44>
  80fe08:	e03fff15 	stw	zero,-4(fp)
  80fe0c:	e0bfff17 	ldw	r2,-4(fp)
  80fe10:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  80fe14:	e0bffb17 	ldw	r2,-20(fp)
  80fe18:	1005003a 	cmpeq	r2,r2,zero
  80fe1c:	10001d1e 	bne	r2,zero,80fe94 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80fe20:	e0bffb17 	ldw	r2,-20(fp)
  80fe24:	10800017 	ldw	r2,0(r2)
  80fe28:	10800417 	ldw	r2,16(r2)
  80fe2c:	1005003a 	cmpeq	r2,r2,zero
  80fe30:	1000071e 	bne	r2,zero,80fe50 <close+0x88>
  80fe34:	e0bffb17 	ldw	r2,-20(fp)
  80fe38:	10800017 	ldw	r2,0(r2)
  80fe3c:	10800417 	ldw	r2,16(r2)
  80fe40:	e13ffb17 	ldw	r4,-20(fp)
  80fe44:	103ee83a 	callr	r2
  80fe48:	e0bffe15 	stw	r2,-8(fp)
  80fe4c:	00000106 	br	80fe54 <close+0x8c>
  80fe50:	e03ffe15 	stw	zero,-8(fp)
  80fe54:	e0bffe17 	ldw	r2,-8(fp)
  80fe58:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80fe5c:	e13ffc17 	ldw	r4,-16(fp)
  80fe60:	08108f40 	call	8108f4 <alt_release_fd>
    if (rval < 0)
  80fe64:	e0bffa17 	ldw	r2,-24(fp)
  80fe68:	1004403a 	cmpge	r2,r2,zero
  80fe6c:	1000071e 	bne	r2,zero,80fe8c <close+0xc4>
    {
      ALT_ERRNO = -rval;
  80fe70:	080fec40 	call	80fec4 <alt_get_errno>
  80fe74:	e0fffa17 	ldw	r3,-24(fp)
  80fe78:	00c7c83a 	sub	r3,zero,r3
  80fe7c:	10c00015 	stw	r3,0(r2)
      return -1;
  80fe80:	00bfffc4 	movi	r2,-1
  80fe84:	e0bffd15 	stw	r2,-12(fp)
  80fe88:	00000806 	br	80feac <close+0xe4>
    }
    return 0;
  80fe8c:	e03ffd15 	stw	zero,-12(fp)
  80fe90:	00000606 	br	80feac <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80fe94:	080fec40 	call	80fec4 <alt_get_errno>
  80fe98:	1007883a 	mov	r3,r2
  80fe9c:	00801444 	movi	r2,81
  80fea0:	18800015 	stw	r2,0(r3)
    return -1;
  80fea4:	00bfffc4 	movi	r2,-1
  80fea8:	e0bffd15 	stw	r2,-12(fp)
  80feac:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  80feb0:	e037883a 	mov	sp,fp
  80feb4:	dfc00117 	ldw	ra,4(sp)
  80feb8:	df000017 	ldw	fp,0(sp)
  80febc:	dec00204 	addi	sp,sp,8
  80fec0:	f800283a 	ret

0080fec4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80fec4:	defffd04 	addi	sp,sp,-12
  80fec8:	dfc00215 	stw	ra,8(sp)
  80fecc:	df000115 	stw	fp,4(sp)
  80fed0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80fed4:	008020b4 	movhi	r2,130
  80fed8:	10bb3304 	addi	r2,r2,-4916
  80fedc:	10800017 	ldw	r2,0(r2)
  80fee0:	1005003a 	cmpeq	r2,r2,zero
  80fee4:	1000061e 	bne	r2,zero,80ff00 <alt_get_errno+0x3c>
  80fee8:	008020b4 	movhi	r2,130
  80feec:	10bb3304 	addi	r2,r2,-4916
  80fef0:	10800017 	ldw	r2,0(r2)
  80fef4:	103ee83a 	callr	r2
  80fef8:	e0bfff15 	stw	r2,-4(fp)
  80fefc:	00000306 	br	80ff0c <alt_get_errno+0x48>
  80ff00:	008020b4 	movhi	r2,130
  80ff04:	10826f04 	addi	r2,r2,2492
  80ff08:	e0bfff15 	stw	r2,-4(fp)
  80ff0c:	e0bfff17 	ldw	r2,-4(fp)
}
  80ff10:	e037883a 	mov	sp,fp
  80ff14:	dfc00117 	ldw	ra,4(sp)
  80ff18:	df000017 	ldw	fp,0(sp)
  80ff1c:	dec00204 	addi	sp,sp,8
  80ff20:	f800283a 	ret

0080ff24 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80ff24:	defffc04 	addi	sp,sp,-16
  80ff28:	df000315 	stw	fp,12(sp)
  80ff2c:	df000304 	addi	fp,sp,12
  80ff30:	e13ffd15 	stw	r4,-12(fp)
  80ff34:	e17ffe15 	stw	r5,-8(fp)
  80ff38:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80ff3c:	e0bfff17 	ldw	r2,-4(fp)
}
  80ff40:	e037883a 	mov	sp,fp
  80ff44:	df000017 	ldw	fp,0(sp)
  80ff48:	dec00104 	addi	sp,sp,4
  80ff4c:	f800283a 	ret

0080ff50 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80ff50:	defff904 	addi	sp,sp,-28
  80ff54:	dfc00615 	stw	ra,24(sp)
  80ff58:	df000515 	stw	fp,20(sp)
  80ff5c:	df000504 	addi	fp,sp,20
  80ff60:	e13ffc15 	stw	r4,-16(fp)
  80ff64:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80ff68:	e0bffc17 	ldw	r2,-16(fp)
  80ff6c:	1004803a 	cmplt	r2,r2,zero
  80ff70:	1000081e 	bne	r2,zero,80ff94 <fstat+0x44>
  80ff74:	e0bffc17 	ldw	r2,-16(fp)
  80ff78:	10800324 	muli	r2,r2,12
  80ff7c:	1007883a 	mov	r3,r2
  80ff80:	008020b4 	movhi	r2,130
  80ff84:	10b65f04 	addi	r2,r2,-9860
  80ff88:	1887883a 	add	r3,r3,r2
  80ff8c:	e0ffff15 	stw	r3,-4(fp)
  80ff90:	00000106 	br	80ff98 <fstat+0x48>
  80ff94:	e03fff15 	stw	zero,-4(fp)
  80ff98:	e0bfff17 	ldw	r2,-4(fp)
  80ff9c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80ffa0:	e0bffb17 	ldw	r2,-20(fp)
  80ffa4:	1005003a 	cmpeq	r2,r2,zero
  80ffa8:	1000121e 	bne	r2,zero,80fff4 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80ffac:	e0bffb17 	ldw	r2,-20(fp)
  80ffb0:	10800017 	ldw	r2,0(r2)
  80ffb4:	10800817 	ldw	r2,32(r2)
  80ffb8:	1005003a 	cmpeq	r2,r2,zero
  80ffbc:	1000081e 	bne	r2,zero,80ffe0 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  80ffc0:	e0bffb17 	ldw	r2,-20(fp)
  80ffc4:	10800017 	ldw	r2,0(r2)
  80ffc8:	10800817 	ldw	r2,32(r2)
  80ffcc:	e13ffb17 	ldw	r4,-20(fp)
  80ffd0:	e17ffd17 	ldw	r5,-12(fp)
  80ffd4:	103ee83a 	callr	r2
  80ffd8:	e0bffe15 	stw	r2,-8(fp)
  80ffdc:	00000b06 	br	81000c <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80ffe0:	e0fffd17 	ldw	r3,-12(fp)
  80ffe4:	00880004 	movi	r2,8192
  80ffe8:	18800115 	stw	r2,4(r3)
      return 0;
  80ffec:	e03ffe15 	stw	zero,-8(fp)
  80fff0:	00000606 	br	81000c <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80fff4:	08100240 	call	810024 <alt_get_errno>
  80fff8:	1007883a 	mov	r3,r2
  80fffc:	00801444 	movi	r2,81
  810000:	18800015 	stw	r2,0(r3)
    return -1;
  810004:	00bfffc4 	movi	r2,-1
  810008:	e0bffe15 	stw	r2,-8(fp)
  81000c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  810010:	e037883a 	mov	sp,fp
  810014:	dfc00117 	ldw	ra,4(sp)
  810018:	df000017 	ldw	fp,0(sp)
  81001c:	dec00204 	addi	sp,sp,8
  810020:	f800283a 	ret

00810024 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810024:	defffd04 	addi	sp,sp,-12
  810028:	dfc00215 	stw	ra,8(sp)
  81002c:	df000115 	stw	fp,4(sp)
  810030:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  810034:	008020b4 	movhi	r2,130
  810038:	10bb3304 	addi	r2,r2,-4916
  81003c:	10800017 	ldw	r2,0(r2)
  810040:	1005003a 	cmpeq	r2,r2,zero
  810044:	1000061e 	bne	r2,zero,810060 <alt_get_errno+0x3c>
  810048:	008020b4 	movhi	r2,130
  81004c:	10bb3304 	addi	r2,r2,-4916
  810050:	10800017 	ldw	r2,0(r2)
  810054:	103ee83a 	callr	r2
  810058:	e0bfff15 	stw	r2,-4(fp)
  81005c:	00000306 	br	81006c <alt_get_errno+0x48>
  810060:	008020b4 	movhi	r2,130
  810064:	10826f04 	addi	r2,r2,2492
  810068:	e0bfff15 	stw	r2,-4(fp)
  81006c:	e0bfff17 	ldw	r2,-4(fp)
}
  810070:	e037883a 	mov	sp,fp
  810074:	dfc00117 	ldw	ra,4(sp)
  810078:	df000017 	ldw	fp,0(sp)
  81007c:	dec00204 	addi	sp,sp,8
  810080:	f800283a 	ret

00810084 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  810084:	defff904 	addi	sp,sp,-28
  810088:	dfc00615 	stw	ra,24(sp)
  81008c:	df000515 	stw	fp,20(sp)
  810090:	df000504 	addi	fp,sp,20
  810094:	e13ffc15 	stw	r4,-16(fp)
  810098:	e17ffd15 	stw	r5,-12(fp)
  81009c:	e1bffe15 	stw	r6,-8(fp)
  8100a0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  8100a4:	e0800217 	ldw	r2,8(fp)
  8100a8:	d8800015 	stw	r2,0(sp)
  8100ac:	e13ffc17 	ldw	r4,-16(fp)
  8100b0:	e17ffd17 	ldw	r5,-12(fp)
  8100b4:	e1bffe17 	ldw	r6,-8(fp)
  8100b8:	e1ffff17 	ldw	r7,-4(fp)
  8100bc:	08102580 	call	810258 <alt_iic_isr_register>
}  
  8100c0:	e037883a 	mov	sp,fp
  8100c4:	dfc00117 	ldw	ra,4(sp)
  8100c8:	df000017 	ldw	fp,0(sp)
  8100cc:	dec00204 	addi	sp,sp,8
  8100d0:	f800283a 	ret

008100d4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  8100d4:	defff904 	addi	sp,sp,-28
  8100d8:	df000615 	stw	fp,24(sp)
  8100dc:	df000604 	addi	fp,sp,24
  8100e0:	e13ffe15 	stw	r4,-8(fp)
  8100e4:	e17fff15 	stw	r5,-4(fp)
  8100e8:	e0bfff17 	ldw	r2,-4(fp)
  8100ec:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8100f0:	0005303a 	rdctl	r2,status
  8100f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8100f8:	e0fffb17 	ldw	r3,-20(fp)
  8100fc:	00bfff84 	movi	r2,-2
  810100:	1884703a 	and	r2,r3,r2
  810104:	1001703a 	wrctl	status,r2
  
  return context;
  810108:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  81010c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  810110:	e0fffc17 	ldw	r3,-16(fp)
  810114:	00800044 	movi	r2,1
  810118:	10c4983a 	sll	r2,r2,r3
  81011c:	1007883a 	mov	r3,r2
  810120:	008020b4 	movhi	r2,130
  810124:	10827404 	addi	r2,r2,2512
  810128:	10800017 	ldw	r2,0(r2)
  81012c:	1886b03a 	or	r3,r3,r2
  810130:	008020b4 	movhi	r2,130
  810134:	10827404 	addi	r2,r2,2512
  810138:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  81013c:	008020b4 	movhi	r2,130
  810140:	10827404 	addi	r2,r2,2512
  810144:	10800017 	ldw	r2,0(r2)
  810148:	100170fa 	wrctl	ienable,r2
  81014c:	e0bffd17 	ldw	r2,-12(fp)
  810150:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810154:	e0bffa17 	ldw	r2,-24(fp)
  810158:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  81015c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  810160:	e037883a 	mov	sp,fp
  810164:	df000017 	ldw	fp,0(sp)
  810168:	dec00104 	addi	sp,sp,4
  81016c:	f800283a 	ret

00810170 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  810170:	defff904 	addi	sp,sp,-28
  810174:	df000615 	stw	fp,24(sp)
  810178:	df000604 	addi	fp,sp,24
  81017c:	e13ffe15 	stw	r4,-8(fp)
  810180:	e17fff15 	stw	r5,-4(fp)
  810184:	e0bfff17 	ldw	r2,-4(fp)
  810188:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81018c:	0005303a 	rdctl	r2,status
  810190:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810194:	e0fffb17 	ldw	r3,-20(fp)
  810198:	00bfff84 	movi	r2,-2
  81019c:	1884703a 	and	r2,r3,r2
  8101a0:	1001703a 	wrctl	status,r2
  
  return context;
  8101a4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8101a8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  8101ac:	e0fffc17 	ldw	r3,-16(fp)
  8101b0:	00800044 	movi	r2,1
  8101b4:	10c4983a 	sll	r2,r2,r3
  8101b8:	0084303a 	nor	r2,zero,r2
  8101bc:	1007883a 	mov	r3,r2
  8101c0:	008020b4 	movhi	r2,130
  8101c4:	10827404 	addi	r2,r2,2512
  8101c8:	10800017 	ldw	r2,0(r2)
  8101cc:	1886703a 	and	r3,r3,r2
  8101d0:	008020b4 	movhi	r2,130
  8101d4:	10827404 	addi	r2,r2,2512
  8101d8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8101dc:	008020b4 	movhi	r2,130
  8101e0:	10827404 	addi	r2,r2,2512
  8101e4:	10800017 	ldw	r2,0(r2)
  8101e8:	100170fa 	wrctl	ienable,r2
  8101ec:	e0bffd17 	ldw	r2,-12(fp)
  8101f0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8101f4:	e0bffa17 	ldw	r2,-24(fp)
  8101f8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8101fc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  810200:	e037883a 	mov	sp,fp
  810204:	df000017 	ldw	fp,0(sp)
  810208:	dec00104 	addi	sp,sp,4
  81020c:	f800283a 	ret

00810210 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  810210:	defffc04 	addi	sp,sp,-16
  810214:	df000315 	stw	fp,12(sp)
  810218:	df000304 	addi	fp,sp,12
  81021c:	e13ffe15 	stw	r4,-8(fp)
  810220:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  810224:	000530fa 	rdctl	r2,ienable
  810228:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  81022c:	e0ffff17 	ldw	r3,-4(fp)
  810230:	00800044 	movi	r2,1
  810234:	10c4983a 	sll	r2,r2,r3
  810238:	1007883a 	mov	r3,r2
  81023c:	e0bffd17 	ldw	r2,-12(fp)
  810240:	1884703a 	and	r2,r3,r2
  810244:	1004c03a 	cmpne	r2,r2,zero
}
  810248:	e037883a 	mov	sp,fp
  81024c:	df000017 	ldw	fp,0(sp)
  810250:	dec00104 	addi	sp,sp,4
  810254:	f800283a 	ret

00810258 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  810258:	defff404 	addi	sp,sp,-48
  81025c:	dfc00b15 	stw	ra,44(sp)
  810260:	df000a15 	stw	fp,40(sp)
  810264:	df000a04 	addi	fp,sp,40
  810268:	e13ffb15 	stw	r4,-20(fp)
  81026c:	e17ffc15 	stw	r5,-16(fp)
  810270:	e1bffd15 	stw	r6,-12(fp)
  810274:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  810278:	00bffa84 	movi	r2,-22
  81027c:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  810280:	e0bffc17 	ldw	r2,-16(fp)
  810284:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  810288:	e0bff917 	ldw	r2,-28(fp)
  81028c:	10800808 	cmpgei	r2,r2,32
  810290:	1000291e 	bne	r2,zero,810338 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810294:	0005303a 	rdctl	r2,status
  810298:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81029c:	e0fff717 	ldw	r3,-36(fp)
  8102a0:	00bfff84 	movi	r2,-2
  8102a4:	1884703a 	and	r2,r3,r2
  8102a8:	1001703a 	wrctl	status,r2
  
  return context;
  8102ac:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  8102b0:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  8102b4:	e0bff917 	ldw	r2,-28(fp)
  8102b8:	00c020b4 	movhi	r3,130
  8102bc:	18d43304 	addi	r3,r3,20684
  8102c0:	100490fa 	slli	r2,r2,3
  8102c4:	10c7883a 	add	r3,r2,r3
  8102c8:	e0bffd17 	ldw	r2,-12(fp)
  8102cc:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  8102d0:	e0bff917 	ldw	r2,-28(fp)
  8102d4:	00c020b4 	movhi	r3,130
  8102d8:	18d43304 	addi	r3,r3,20684
  8102dc:	100490fa 	slli	r2,r2,3
  8102e0:	10c5883a 	add	r2,r2,r3
  8102e4:	10c00104 	addi	r3,r2,4
  8102e8:	e0bffe17 	ldw	r2,-8(fp)
  8102ec:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  8102f0:	e0bffd17 	ldw	r2,-12(fp)
  8102f4:	1005003a 	cmpeq	r2,r2,zero
  8102f8:	1000051e 	bne	r2,zero,810310 <alt_iic_isr_register+0xb8>
  8102fc:	e17ff917 	ldw	r5,-28(fp)
  810300:	e13ffb17 	ldw	r4,-20(fp)
  810304:	08100d40 	call	8100d4 <alt_ic_irq_enable>
  810308:	e0bfff15 	stw	r2,-4(fp)
  81030c:	00000406 	br	810320 <alt_iic_isr_register+0xc8>
  810310:	e17ff917 	ldw	r5,-28(fp)
  810314:	e13ffb17 	ldw	r4,-20(fp)
  810318:	08101700 	call	810170 <alt_ic_irq_disable>
  81031c:	e0bfff15 	stw	r2,-4(fp)
  810320:	e0bfff17 	ldw	r2,-4(fp)
  810324:	e0bffa15 	stw	r2,-24(fp)
  810328:	e0bff817 	ldw	r2,-32(fp)
  81032c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810330:	e0bff617 	ldw	r2,-40(fp)
  810334:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  810338:	e0bffa17 	ldw	r2,-24(fp)
}
  81033c:	e037883a 	mov	sp,fp
  810340:	dfc00117 	ldw	ra,4(sp)
  810344:	df000017 	ldw	fp,0(sp)
  810348:	dec00204 	addi	sp,sp,8
  81034c:	f800283a 	ret

00810350 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  810350:	deffeb04 	addi	sp,sp,-84
  810354:	dfc01415 	stw	ra,80(sp)
  810358:	df001315 	stw	fp,76(sp)
  81035c:	df001304 	addi	fp,sp,76
  810360:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  810364:	e0bffd17 	ldw	r2,-12(fp)
  810368:	1004803a 	cmplt	r2,r2,zero
  81036c:	1000081e 	bne	r2,zero,810390 <isatty+0x40>
  810370:	e0bffd17 	ldw	r2,-12(fp)
  810374:	10800324 	muli	r2,r2,12
  810378:	1007883a 	mov	r3,r2
  81037c:	008020b4 	movhi	r2,130
  810380:	10b65f04 	addi	r2,r2,-9860
  810384:	1887883a 	add	r3,r3,r2
  810388:	e0ffff15 	stw	r3,-4(fp)
  81038c:	00000106 	br	810394 <isatty+0x44>
  810390:	e03fff15 	stw	zero,-4(fp)
  810394:	e0bfff17 	ldw	r2,-4(fp)
  810398:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  81039c:	e0bfed17 	ldw	r2,-76(fp)
  8103a0:	1005003a 	cmpeq	r2,r2,zero
  8103a4:	10000f1e 	bne	r2,zero,8103e4 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  8103a8:	e0bfed17 	ldw	r2,-76(fp)
  8103ac:	10800017 	ldw	r2,0(r2)
  8103b0:	10800817 	ldw	r2,32(r2)
  8103b4:	1004c03a 	cmpne	r2,r2,zero
  8103b8:	1000031e 	bne	r2,zero,8103c8 <isatty+0x78>
    {
      return 1;
  8103bc:	00800044 	movi	r2,1
  8103c0:	e0bffe15 	stw	r2,-8(fp)
  8103c4:	00000c06 	br	8103f8 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  8103c8:	e17fee04 	addi	r5,fp,-72
  8103cc:	e13ffd17 	ldw	r4,-12(fp)
  8103d0:	080ff500 	call	80ff50 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  8103d4:	e0bfef17 	ldw	r2,-68(fp)
  8103d8:	10880020 	cmpeqi	r2,r2,8192
  8103dc:	e0bffe15 	stw	r2,-8(fp)
  8103e0:	00000506 	br	8103f8 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8103e4:	08104100 	call	810410 <alt_get_errno>
  8103e8:	1007883a 	mov	r3,r2
  8103ec:	00801444 	movi	r2,81
  8103f0:	18800015 	stw	r2,0(r3)
    return 0;
  8103f4:	e03ffe15 	stw	zero,-8(fp)
  8103f8:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  8103fc:	e037883a 	mov	sp,fp
  810400:	dfc00117 	ldw	ra,4(sp)
  810404:	df000017 	ldw	fp,0(sp)
  810408:	dec00204 	addi	sp,sp,8
  81040c:	f800283a 	ret

00810410 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810410:	defffd04 	addi	sp,sp,-12
  810414:	dfc00215 	stw	ra,8(sp)
  810418:	df000115 	stw	fp,4(sp)
  81041c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  810420:	008020b4 	movhi	r2,130
  810424:	10bb3304 	addi	r2,r2,-4916
  810428:	10800017 	ldw	r2,0(r2)
  81042c:	1005003a 	cmpeq	r2,r2,zero
  810430:	1000061e 	bne	r2,zero,81044c <alt_get_errno+0x3c>
  810434:	008020b4 	movhi	r2,130
  810438:	10bb3304 	addi	r2,r2,-4916
  81043c:	10800017 	ldw	r2,0(r2)
  810440:	103ee83a 	callr	r2
  810444:	e0bfff15 	stw	r2,-4(fp)
  810448:	00000306 	br	810458 <alt_get_errno+0x48>
  81044c:	008020b4 	movhi	r2,130
  810450:	10826f04 	addi	r2,r2,2492
  810454:	e0bfff15 	stw	r2,-4(fp)
  810458:	e0bfff17 	ldw	r2,-4(fp)
}
  81045c:	e037883a 	mov	sp,fp
  810460:	dfc00117 	ldw	ra,4(sp)
  810464:	df000017 	ldw	fp,0(sp)
  810468:	dec00204 	addi	sp,sp,8
  81046c:	f800283a 	ret

00810470 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  810470:	defffe04 	addi	sp,sp,-8
  810474:	dfc00115 	stw	ra,4(sp)
  810478:	df000015 	stw	fp,0(sp)
  81047c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  810480:	010020b4 	movhi	r4,130
  810484:	213b5904 	addi	r4,r4,-4764
  810488:	014020b4 	movhi	r5,130
  81048c:	29745004 	addi	r5,r5,-11968
  810490:	018020b4 	movhi	r6,130
  810494:	31bb5904 	addi	r6,r6,-4764
  810498:	08104f00 	call	8104f0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  81049c:	01002034 	movhi	r4,128
  8104a0:	21000804 	addi	r4,r4,32
  8104a4:	01402034 	movhi	r5,128
  8104a8:	29400804 	addi	r5,r5,32
  8104ac:	01802034 	movhi	r6,128
  8104b0:	31806f04 	addi	r6,r6,444
  8104b4:	08104f00 	call	8104f0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  8104b8:	010020b4 	movhi	r4,130
  8104bc:	21323d04 	addi	r4,r4,-14092
  8104c0:	014020b4 	movhi	r5,130
  8104c4:	29723d04 	addi	r5,r5,-14092
  8104c8:	018020b4 	movhi	r6,130
  8104cc:	31b45004 	addi	r6,r6,-11968
  8104d0:	08104f00 	call	8104f0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  8104d4:	081b4a40 	call	81b4a4 <alt_dcache_flush_all>
  alt_icache_flush_all();
  8104d8:	081b6c40 	call	81b6c4 <alt_icache_flush_all>
}
  8104dc:	e037883a 	mov	sp,fp
  8104e0:	dfc00117 	ldw	ra,4(sp)
  8104e4:	df000017 	ldw	fp,0(sp)
  8104e8:	dec00204 	addi	sp,sp,8
  8104ec:	f800283a 	ret

008104f0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  8104f0:	defffc04 	addi	sp,sp,-16
  8104f4:	df000315 	stw	fp,12(sp)
  8104f8:	df000304 	addi	fp,sp,12
  8104fc:	e13ffd15 	stw	r4,-12(fp)
  810500:	e17ffe15 	stw	r5,-8(fp)
  810504:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  810508:	e0fffe17 	ldw	r3,-8(fp)
  81050c:	e0bffd17 	ldw	r2,-12(fp)
  810510:	18800e26 	beq	r3,r2,81054c <alt_load_section+0x5c>
  {
    while( to != end )
  810514:	00000a06 	br	810540 <alt_load_section+0x50>
    {
      *to++ = *from++;
  810518:	e0bffd17 	ldw	r2,-12(fp)
  81051c:	10c00017 	ldw	r3,0(r2)
  810520:	e0bffe17 	ldw	r2,-8(fp)
  810524:	10c00015 	stw	r3,0(r2)
  810528:	e0bffe17 	ldw	r2,-8(fp)
  81052c:	10800104 	addi	r2,r2,4
  810530:	e0bffe15 	stw	r2,-8(fp)
  810534:	e0bffd17 	ldw	r2,-12(fp)
  810538:	10800104 	addi	r2,r2,4
  81053c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  810540:	e0fffe17 	ldw	r3,-8(fp)
  810544:	e0bfff17 	ldw	r2,-4(fp)
  810548:	18bff31e 	bne	r3,r2,810518 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  81054c:	e037883a 	mov	sp,fp
  810550:	df000017 	ldw	fp,0(sp)
  810554:	dec00104 	addi	sp,sp,4
  810558:	f800283a 	ret

0081055c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  81055c:	defff804 	addi	sp,sp,-32
  810560:	dfc00715 	stw	ra,28(sp)
  810564:	df000615 	stw	fp,24(sp)
  810568:	df000604 	addi	fp,sp,24
  81056c:	e13ffc15 	stw	r4,-16(fp)
  810570:	e17ffd15 	stw	r5,-12(fp)
  810574:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  810578:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  81057c:	e0bffc17 	ldw	r2,-16(fp)
  810580:	1004803a 	cmplt	r2,r2,zero
  810584:	1000081e 	bne	r2,zero,8105a8 <lseek+0x4c>
  810588:	e0bffc17 	ldw	r2,-16(fp)
  81058c:	10800324 	muli	r2,r2,12
  810590:	1007883a 	mov	r3,r2
  810594:	008020b4 	movhi	r2,130
  810598:	10b65f04 	addi	r2,r2,-9860
  81059c:	1887883a 	add	r3,r3,r2
  8105a0:	e0ffff15 	stw	r3,-4(fp)
  8105a4:	00000106 	br	8105ac <lseek+0x50>
  8105a8:	e03fff15 	stw	zero,-4(fp)
  8105ac:	e0bfff17 	ldw	r2,-4(fp)
  8105b0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  8105b4:	e0bffb17 	ldw	r2,-20(fp)
  8105b8:	1005003a 	cmpeq	r2,r2,zero
  8105bc:	1000111e 	bne	r2,zero,810604 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  8105c0:	e0bffb17 	ldw	r2,-20(fp)
  8105c4:	10800017 	ldw	r2,0(r2)
  8105c8:	10800717 	ldw	r2,28(r2)
  8105cc:	1005003a 	cmpeq	r2,r2,zero
  8105d0:	1000091e 	bne	r2,zero,8105f8 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  8105d4:	e0bffb17 	ldw	r2,-20(fp)
  8105d8:	10800017 	ldw	r2,0(r2)
  8105dc:	10800717 	ldw	r2,28(r2)
  8105e0:	e13ffb17 	ldw	r4,-20(fp)
  8105e4:	e17ffd17 	ldw	r5,-12(fp)
  8105e8:	e1bffe17 	ldw	r6,-8(fp)
  8105ec:	103ee83a 	callr	r2
  8105f0:	e0bffa15 	stw	r2,-24(fp)
  8105f4:	00000506 	br	81060c <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  8105f8:	00bfde84 	movi	r2,-134
  8105fc:	e0bffa15 	stw	r2,-24(fp)
  810600:	00000206 	br	81060c <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  810604:	00bfebc4 	movi	r2,-81
  810608:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  81060c:	e0bffa17 	ldw	r2,-24(fp)
  810610:	1004403a 	cmpge	r2,r2,zero
  810614:	1000071e 	bne	r2,zero,810634 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  810618:	081064c0 	call	81064c <alt_get_errno>
  81061c:	1007883a 	mov	r3,r2
  810620:	e0bffa17 	ldw	r2,-24(fp)
  810624:	0085c83a 	sub	r2,zero,r2
  810628:	18800015 	stw	r2,0(r3)
    rc = -1;
  81062c:	00bfffc4 	movi	r2,-1
  810630:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  810634:	e0bffa17 	ldw	r2,-24(fp)
}
  810638:	e037883a 	mov	sp,fp
  81063c:	dfc00117 	ldw	ra,4(sp)
  810640:	df000017 	ldw	fp,0(sp)
  810644:	dec00204 	addi	sp,sp,8
  810648:	f800283a 	ret

0081064c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81064c:	defffd04 	addi	sp,sp,-12
  810650:	dfc00215 	stw	ra,8(sp)
  810654:	df000115 	stw	fp,4(sp)
  810658:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81065c:	008020b4 	movhi	r2,130
  810660:	10bb3304 	addi	r2,r2,-4916
  810664:	10800017 	ldw	r2,0(r2)
  810668:	1005003a 	cmpeq	r2,r2,zero
  81066c:	1000061e 	bne	r2,zero,810688 <alt_get_errno+0x3c>
  810670:	008020b4 	movhi	r2,130
  810674:	10bb3304 	addi	r2,r2,-4916
  810678:	10800017 	ldw	r2,0(r2)
  81067c:	103ee83a 	callr	r2
  810680:	e0bfff15 	stw	r2,-4(fp)
  810684:	00000306 	br	810694 <alt_get_errno+0x48>
  810688:	008020b4 	movhi	r2,130
  81068c:	10826f04 	addi	r2,r2,2492
  810690:	e0bfff15 	stw	r2,-4(fp)
  810694:	e0bfff17 	ldw	r2,-4(fp)
}
  810698:	e037883a 	mov	sp,fp
  81069c:	dfc00117 	ldw	ra,4(sp)
  8106a0:	df000017 	ldw	fp,0(sp)
  8106a4:	dec00204 	addi	sp,sp,8
  8106a8:	f800283a 	ret

008106ac <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  8106ac:	defffb04 	addi	sp,sp,-20
  8106b0:	dfc00415 	stw	ra,16(sp)
  8106b4:	df000315 	stw	fp,12(sp)
  8106b8:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  8106bc:	0009883a 	mov	r4,zero
  8106c0:	08193340 	call	819334 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  8106c4:	08118b00 	call	8118b0 <OSInit>
  8106c8:	01000044 	movi	r4,1
  8106cc:	08167740 	call	816774 <OSSemCreate>
  8106d0:	1007883a 	mov	r3,r2
  8106d4:	008020b4 	movhi	r2,130
  8106d8:	10827904 	addi	r2,r2,2532
  8106dc:	10c00015 	stw	r3,0(r2)
  8106e0:	01000044 	movi	r4,1
  8106e4:	08167740 	call	816774 <OSSemCreate>
  8106e8:	1007883a 	mov	r3,r2
  8106ec:	008020b4 	movhi	r2,130
  8106f0:	10827b04 	addi	r2,r2,2540
  8106f4:	10c00015 	stw	r3,0(r2)
  8106f8:	008020b4 	movhi	r2,130
  8106fc:	10827304 	addi	r2,r2,2508
  810700:	e0bffd15 	stw	r2,-12(fp)
  810704:	00800044 	movi	r2,1
  810708:	e0bffe0d 	sth	r2,-8(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  81070c:	e13ffe0b 	ldhu	r4,-8(fp)
  810710:	08167740 	call	816774 <OSSemCreate>
  810714:	1007883a 	mov	r3,r2
  810718:	e0bffd17 	ldw	r2,-12(fp)
  81071c:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  810720:	08193680 	call	819368 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  810724:	010020b4 	movhi	r4,130
  810728:	21335d04 	addi	r4,r4,-12940
  81072c:	014020b4 	movhi	r5,130
  810730:	29735d04 	addi	r5,r5,-12940
  810734:	018020b4 	movhi	r6,130
  810738:	31b35d04 	addi	r6,r6,-12940
  81073c:	081b7b80 	call	81b7b8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  810740:	081b5fc0 	call	81b5fc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  810744:	010020b4 	movhi	r4,130
  810748:	212d9804 	addi	r4,r4,-18848
  81074c:	081c4dc0 	call	81c4dc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  810750:	d1275217 	ldw	r4,-25272(gp)
  810754:	d1675317 	ldw	r5,-25268(gp)
  810758:	d1a75417 	ldw	r6,-25264(gp)
  81075c:	080088c0 	call	80088c <main>
  810760:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  810764:	01000044 	movi	r4,1
  810768:	080fdc80 	call	80fdc8 <close>
  exit (result);
  81076c:	e13fff17 	ldw	r4,-4(fp)
  810770:	081c4f00 	call	81c4f0 <exit>

00810774 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  810774:	defff704 	addi	sp,sp,-36
  810778:	dfc00815 	stw	ra,32(sp)
  81077c:	df000715 	stw	fp,28(sp)
  810780:	df000704 	addi	fp,sp,28
  810784:	e13ffb15 	stw	r4,-20(fp)
  810788:	e17ffc15 	stw	r5,-16(fp)
  81078c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  810790:	e0bffb17 	ldw	r2,-20(fp)
  810794:	1004803a 	cmplt	r2,r2,zero
  810798:	1000081e 	bne	r2,zero,8107bc <read+0x48>
  81079c:	e0bffb17 	ldw	r2,-20(fp)
  8107a0:	10800324 	muli	r2,r2,12
  8107a4:	1007883a 	mov	r3,r2
  8107a8:	008020b4 	movhi	r2,130
  8107ac:	10b65f04 	addi	r2,r2,-9860
  8107b0:	1887883a 	add	r3,r3,r2
  8107b4:	e0ffff15 	stw	r3,-4(fp)
  8107b8:	00000106 	br	8107c0 <read+0x4c>
  8107bc:	e03fff15 	stw	zero,-4(fp)
  8107c0:	e0bfff17 	ldw	r2,-4(fp)
  8107c4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  8107c8:	e0bffa17 	ldw	r2,-24(fp)
  8107cc:	1005003a 	cmpeq	r2,r2,zero
  8107d0:	1000241e 	bne	r2,zero,810864 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  8107d4:	e0bffa17 	ldw	r2,-24(fp)
  8107d8:	10800217 	ldw	r2,8(r2)
  8107dc:	108000cc 	andi	r2,r2,3
  8107e0:	10800060 	cmpeqi	r2,r2,1
  8107e4:	10001a1e 	bne	r2,zero,810850 <read+0xdc>
  8107e8:	e0bffa17 	ldw	r2,-24(fp)
  8107ec:	10800017 	ldw	r2,0(r2)
  8107f0:	10800517 	ldw	r2,20(r2)
  8107f4:	1005003a 	cmpeq	r2,r2,zero
  8107f8:	1000151e 	bne	r2,zero,810850 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  8107fc:	e0bffa17 	ldw	r2,-24(fp)
  810800:	10800017 	ldw	r2,0(r2)
  810804:	10800517 	ldw	r2,20(r2)
  810808:	e17ffc17 	ldw	r5,-16(fp)
  81080c:	e1bffd17 	ldw	r6,-12(fp)
  810810:	e13ffa17 	ldw	r4,-24(fp)
  810814:	103ee83a 	callr	r2
  810818:	e0bff915 	stw	r2,-28(fp)
  81081c:	e0bff917 	ldw	r2,-28(fp)
  810820:	1004403a 	cmpge	r2,r2,zero
  810824:	1000071e 	bne	r2,zero,810844 <read+0xd0>
        {
          ALT_ERRNO = -rval;
  810828:	08108940 	call	810894 <alt_get_errno>
  81082c:	e0fff917 	ldw	r3,-28(fp)
  810830:	00c7c83a 	sub	r3,zero,r3
  810834:	10c00015 	stw	r3,0(r2)
          return -1;
  810838:	00bfffc4 	movi	r2,-1
  81083c:	e0bffe15 	stw	r2,-8(fp)
  810840:	00000e06 	br	81087c <read+0x108>
        }
        return rval;
  810844:	e0bff917 	ldw	r2,-28(fp)
  810848:	e0bffe15 	stw	r2,-8(fp)
  81084c:	00000b06 	br	81087c <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  810850:	08108940 	call	810894 <alt_get_errno>
  810854:	1007883a 	mov	r3,r2
  810858:	00800344 	movi	r2,13
  81085c:	18800015 	stw	r2,0(r3)
  810860:	00000406 	br	810874 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  810864:	08108940 	call	810894 <alt_get_errno>
  810868:	1007883a 	mov	r3,r2
  81086c:	00801444 	movi	r2,81
  810870:	18800015 	stw	r2,0(r3)
  }
  return -1;
  810874:	00bfffc4 	movi	r2,-1
  810878:	e0bffe15 	stw	r2,-8(fp)
  81087c:	e0bffe17 	ldw	r2,-8(fp)
}
  810880:	e037883a 	mov	sp,fp
  810884:	dfc00117 	ldw	ra,4(sp)
  810888:	df000017 	ldw	fp,0(sp)
  81088c:	dec00204 	addi	sp,sp,8
  810890:	f800283a 	ret

00810894 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810894:	defffd04 	addi	sp,sp,-12
  810898:	dfc00215 	stw	ra,8(sp)
  81089c:	df000115 	stw	fp,4(sp)
  8108a0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8108a4:	008020b4 	movhi	r2,130
  8108a8:	10bb3304 	addi	r2,r2,-4916
  8108ac:	10800017 	ldw	r2,0(r2)
  8108b0:	1005003a 	cmpeq	r2,r2,zero
  8108b4:	1000061e 	bne	r2,zero,8108d0 <alt_get_errno+0x3c>
  8108b8:	008020b4 	movhi	r2,130
  8108bc:	10bb3304 	addi	r2,r2,-4916
  8108c0:	10800017 	ldw	r2,0(r2)
  8108c4:	103ee83a 	callr	r2
  8108c8:	e0bfff15 	stw	r2,-4(fp)
  8108cc:	00000306 	br	8108dc <alt_get_errno+0x48>
  8108d0:	008020b4 	movhi	r2,130
  8108d4:	10826f04 	addi	r2,r2,2492
  8108d8:	e0bfff15 	stw	r2,-4(fp)
  8108dc:	e0bfff17 	ldw	r2,-4(fp)
}
  8108e0:	e037883a 	mov	sp,fp
  8108e4:	dfc00117 	ldw	ra,4(sp)
  8108e8:	df000017 	ldw	fp,0(sp)
  8108ec:	dec00204 	addi	sp,sp,8
  8108f0:	f800283a 	ret

008108f4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  8108f4:	defffe04 	addi	sp,sp,-8
  8108f8:	df000115 	stw	fp,4(sp)
  8108fc:	df000104 	addi	fp,sp,4
  810900:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  810904:	e0bfff17 	ldw	r2,-4(fp)
  810908:	108000d0 	cmplti	r2,r2,3
  81090c:	10000d1e 	bne	r2,zero,810944 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  810910:	e0bfff17 	ldw	r2,-4(fp)
  810914:	00c020b4 	movhi	r3,130
  810918:	18f65f04 	addi	r3,r3,-9860
  81091c:	10800324 	muli	r2,r2,12
  810920:	10c5883a 	add	r2,r2,r3
  810924:	10800204 	addi	r2,r2,8
  810928:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  81092c:	e0bfff17 	ldw	r2,-4(fp)
  810930:	00c020b4 	movhi	r3,130
  810934:	18f65f04 	addi	r3,r3,-9860
  810938:	10800324 	muli	r2,r2,12
  81093c:	10c5883a 	add	r2,r2,r3
  810940:	10000015 	stw	zero,0(r2)
  }
}
  810944:	e037883a 	mov	sp,fp
  810948:	df000017 	ldw	fp,0(sp)
  81094c:	dec00104 	addi	sp,sp,4
  810950:	f800283a 	ret

00810954 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  810954:	defff804 	addi	sp,sp,-32
  810958:	df000715 	stw	fp,28(sp)
  81095c:	df000704 	addi	fp,sp,28
  810960:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810964:	0005303a 	rdctl	r2,status
  810968:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81096c:	e0fffb17 	ldw	r3,-20(fp)
  810970:	00bfff84 	movi	r2,-2
  810974:	1884703a 	and	r2,r3,r2
  810978:	1001703a 	wrctl	status,r2
  
  return context;
  81097c:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  810980:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  810984:	d0a01217 	ldw	r2,-32696(gp)
  810988:	10c000c4 	addi	r3,r2,3
  81098c:	00bfff04 	movi	r2,-4
  810990:	1884703a 	and	r2,r3,r2
  810994:	d0a01215 	stw	r2,-32696(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  810998:	d0e01217 	ldw	r3,-32696(gp)
  81099c:	e0bffe17 	ldw	r2,-8(fp)
  8109a0:	1887883a 	add	r3,r3,r2
  8109a4:	00804034 	movhi	r2,256
  8109a8:	10800004 	addi	r2,r2,0
  8109ac:	10c0072e 	bgeu	r2,r3,8109cc <sbrk+0x78>
  8109b0:	e0bffd17 	ldw	r2,-12(fp)
  8109b4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8109b8:	e0bffa17 	ldw	r2,-24(fp)
  8109bc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  8109c0:	00bfffc4 	movi	r2,-1
  8109c4:	e0bfff15 	stw	r2,-4(fp)
  8109c8:	00000c06 	br	8109fc <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  8109cc:	d0a01217 	ldw	r2,-32696(gp)
  8109d0:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  8109d4:	d0e01217 	ldw	r3,-32696(gp)
  8109d8:	e0bffe17 	ldw	r2,-8(fp)
  8109dc:	1885883a 	add	r2,r3,r2
  8109e0:	d0a01215 	stw	r2,-32696(gp)
  8109e4:	e0bffd17 	ldw	r2,-12(fp)
  8109e8:	e0bff915 	stw	r2,-28(fp)
  8109ec:	e0bff917 	ldw	r2,-28(fp)
  8109f0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  8109f4:	e0bffc17 	ldw	r2,-16(fp)
  8109f8:	e0bfff15 	stw	r2,-4(fp)
  8109fc:	e0bfff17 	ldw	r2,-4(fp)
} 
  810a00:	e037883a 	mov	sp,fp
  810a04:	df000017 	ldw	fp,0(sp)
  810a08:	dec00104 	addi	sp,sp,4
  810a0c:	f800283a 	ret

00810a10 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  810a10:	defff904 	addi	sp,sp,-28
  810a14:	dfc00615 	stw	ra,24(sp)
  810a18:	df000515 	stw	fp,20(sp)
  810a1c:	dc000415 	stw	r16,16(sp)
  810a20:	df000404 	addi	fp,sp,16
  810a24:	e13ffe15 	stw	r4,-8(fp)
   * If the O/S hasn't started yet, then we delay using a busy loop, rather than
   * OSTimeDly (since this would fail). The use of a busy loop is acceptable,
   * since the system is still running in a single-threaded mode.
   */ 

  if (OSRunning == OS_FALSE)
  810a28:	008020b4 	movhi	r2,130
  810a2c:	10827c44 	addi	r2,r2,2545
  810a30:	10800003 	ldbu	r2,0(r2)
  810a34:	10803fcc 	andi	r2,r2,255
  810a38:	1004c03a 	cmpne	r2,r2,zero
  810a3c:	1000041e 	bne	r2,zero,810a50 <usleep+0x40>
  {
    return alt_busy_sleep (us);
  810a40:	e13ffe17 	ldw	r4,-8(fp)
  810a44:	081b3580 	call	81b358 <alt_busy_sleep>
  810a48:	e0bfff15 	stw	r2,-4(fp)
  810a4c:	00002f06 	br	810b0c <usleep+0xfc>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  810a50:	008020b4 	movhi	r2,130
  810a54:	10829004 	addi	r2,r2,2624
  810a58:	10800017 	ldw	r2,0(r2)

  /* 
   * Calculate the number of whole system clock ticks to delay.
   */

  tick_rate = alt_ticks_per_second ();
  810a5c:	e0bffc15 	stw	r2,-16(fp)
  ticks     = (us/ALT_US)* tick_rate + ((us%ALT_US)*tick_rate)/ALT_US;
  810a60:	e13ffe17 	ldw	r4,-8(fp)
  810a64:	014003f4 	movhi	r5,15
  810a68:	29509004 	addi	r5,r5,16960
  810a6c:	08074580 	call	807458 <__udivsi3>
  810a70:	1007883a 	mov	r3,r2
  810a74:	e0bffc17 	ldw	r2,-16(fp)
  810a78:	18a1383a 	mul	r16,r3,r2
  810a7c:	e13ffe17 	ldw	r4,-8(fp)
  810a80:	014003f4 	movhi	r5,15
  810a84:	29509004 	addi	r5,r5,16960
  810a88:	08074600 	call	807460 <__umodsi3>
  810a8c:	1007883a 	mov	r3,r2
  810a90:	e0bffc17 	ldw	r2,-16(fp)
  810a94:	1889383a 	mul	r4,r3,r2
  810a98:	014003f4 	movhi	r5,15
  810a9c:	29509004 	addi	r5,r5,16960
  810aa0:	08074580 	call	807458 <__udivsi3>
  810aa4:	8085883a 	add	r2,r16,r2
  810aa8:	e0bffd15 	stw	r2,-12(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
  810aac:	00000706 	br	810acc <usleep+0xbc>
  {
    OSTimeDly(0xffff);
  810ab0:	013fffd4 	movui	r4,65535
  810ab4:	0818cbc0 	call	818cbc <OSTimeDly>
    ticks -= 0xffff;
  810ab8:	e0bffd17 	ldw	r2,-12(fp)
  810abc:	00fffff4 	movhi	r3,65535
  810ac0:	18c00044 	addi	r3,r3,1
  810ac4:	10c5883a 	add	r2,r2,r3
  810ac8:	e0bffd15 	stw	r2,-12(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
  810acc:	e0fffd17 	ldw	r3,-12(fp)
  810ad0:	00bfffd4 	movui	r2,65535
  810ad4:	10fff636 	bltu	r2,r3,810ab0 <usleep+0xa0>
  {
    OSTimeDly(0xffff);
    ticks -= 0xffff;
  }

  OSTimeDly ((INT16U) (ticks));
  810ad8:	e0bffd17 	ldw	r2,-12(fp)
  810adc:	113fffcc 	andi	r4,r2,65535
  810ae0:	0818cbc0 	call	818cbc <OSTimeDly>
  /*
   * Now delay by the remainder using a busy loop. This is here in order to
   * provide very short delays of less than one clock tick.
   */

  alt_busy_sleep (us%(ALT_US/tick_rate));  
  810ae4:	010003f4 	movhi	r4,15
  810ae8:	21109004 	addi	r4,r4,16960
  810aec:	e17ffc17 	ldw	r5,-16(fp)
  810af0:	08074580 	call	807458 <__udivsi3>
  810af4:	100b883a 	mov	r5,r2
  810af8:	e13ffe17 	ldw	r4,-8(fp)
  810afc:	08074600 	call	807460 <__umodsi3>
  810b00:	1009883a 	mov	r4,r2
  810b04:	081b3580 	call	81b358 <alt_busy_sleep>

  return 0;  
  810b08:	e03fff15 	stw	zero,-4(fp)
  810b0c:	e0bfff17 	ldw	r2,-4(fp)
}
  810b10:	e037883a 	mov	sp,fp
  810b14:	dfc00217 	ldw	ra,8(sp)
  810b18:	df000117 	ldw	fp,4(sp)
  810b1c:	dc000017 	ldw	r16,0(sp)
  810b20:	dec00304 	addi	sp,sp,12
  810b24:	f800283a 	ret

00810b28 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  810b28:	defff704 	addi	sp,sp,-36
  810b2c:	dfc00815 	stw	ra,32(sp)
  810b30:	df000715 	stw	fp,28(sp)
  810b34:	df000704 	addi	fp,sp,28
  810b38:	e13ffb15 	stw	r4,-20(fp)
  810b3c:	e17ffc15 	stw	r5,-16(fp)
  810b40:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  810b44:	e0bffb17 	ldw	r2,-20(fp)
  810b48:	1004803a 	cmplt	r2,r2,zero
  810b4c:	1000081e 	bne	r2,zero,810b70 <write+0x48>
  810b50:	e0bffb17 	ldw	r2,-20(fp)
  810b54:	10800324 	muli	r2,r2,12
  810b58:	1007883a 	mov	r3,r2
  810b5c:	008020b4 	movhi	r2,130
  810b60:	10b65f04 	addi	r2,r2,-9860
  810b64:	1887883a 	add	r3,r3,r2
  810b68:	e0ffff15 	stw	r3,-4(fp)
  810b6c:	00000106 	br	810b74 <write+0x4c>
  810b70:	e03fff15 	stw	zero,-4(fp)
  810b74:	e0bfff17 	ldw	r2,-4(fp)
  810b78:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  810b7c:	e0bffa17 	ldw	r2,-24(fp)
  810b80:	1005003a 	cmpeq	r2,r2,zero
  810b84:	1000241e 	bne	r2,zero,810c18 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  810b88:	e0bffa17 	ldw	r2,-24(fp)
  810b8c:	10800217 	ldw	r2,8(r2)
  810b90:	108000cc 	andi	r2,r2,3
  810b94:	1005003a 	cmpeq	r2,r2,zero
  810b98:	10001a1e 	bne	r2,zero,810c04 <write+0xdc>
  810b9c:	e0bffa17 	ldw	r2,-24(fp)
  810ba0:	10800017 	ldw	r2,0(r2)
  810ba4:	10800617 	ldw	r2,24(r2)
  810ba8:	1005003a 	cmpeq	r2,r2,zero
  810bac:	1000151e 	bne	r2,zero,810c04 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  810bb0:	e0bffa17 	ldw	r2,-24(fp)
  810bb4:	10800017 	ldw	r2,0(r2)
  810bb8:	10800617 	ldw	r2,24(r2)
  810bbc:	e17ffc17 	ldw	r5,-16(fp)
  810bc0:	e1bffd17 	ldw	r6,-12(fp)
  810bc4:	e13ffa17 	ldw	r4,-24(fp)
  810bc8:	103ee83a 	callr	r2
  810bcc:	e0bff915 	stw	r2,-28(fp)
  810bd0:	e0bff917 	ldw	r2,-28(fp)
  810bd4:	1004403a 	cmpge	r2,r2,zero
  810bd8:	1000071e 	bne	r2,zero,810bf8 <write+0xd0>
      {
        ALT_ERRNO = -rval;
  810bdc:	0810c480 	call	810c48 <alt_get_errno>
  810be0:	e0fff917 	ldw	r3,-28(fp)
  810be4:	00c7c83a 	sub	r3,zero,r3
  810be8:	10c00015 	stw	r3,0(r2)
        return -1;
  810bec:	00bfffc4 	movi	r2,-1
  810bf0:	e0bffe15 	stw	r2,-8(fp)
  810bf4:	00000e06 	br	810c30 <write+0x108>
      }
      return rval;
  810bf8:	e0bff917 	ldw	r2,-28(fp)
  810bfc:	e0bffe15 	stw	r2,-8(fp)
  810c00:	00000b06 	br	810c30 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  810c04:	0810c480 	call	810c48 <alt_get_errno>
  810c08:	1007883a 	mov	r3,r2
  810c0c:	00800344 	movi	r2,13
  810c10:	18800015 	stw	r2,0(r3)
  810c14:	00000406 	br	810c28 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  810c18:	0810c480 	call	810c48 <alt_get_errno>
  810c1c:	1007883a 	mov	r3,r2
  810c20:	00801444 	movi	r2,81
  810c24:	18800015 	stw	r2,0(r3)
  }
  return -1;
  810c28:	00bfffc4 	movi	r2,-1
  810c2c:	e0bffe15 	stw	r2,-8(fp)
  810c30:	e0bffe17 	ldw	r2,-8(fp)
}
  810c34:	e037883a 	mov	sp,fp
  810c38:	dfc00117 	ldw	ra,4(sp)
  810c3c:	df000017 	ldw	fp,0(sp)
  810c40:	dec00204 	addi	sp,sp,8
  810c44:	f800283a 	ret

00810c48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810c48:	defffd04 	addi	sp,sp,-12
  810c4c:	dfc00215 	stw	ra,8(sp)
  810c50:	df000115 	stw	fp,4(sp)
  810c54:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  810c58:	008020b4 	movhi	r2,130
  810c5c:	10bb3304 	addi	r2,r2,-4916
  810c60:	10800017 	ldw	r2,0(r2)
  810c64:	1005003a 	cmpeq	r2,r2,zero
  810c68:	1000061e 	bne	r2,zero,810c84 <alt_get_errno+0x3c>
  810c6c:	008020b4 	movhi	r2,130
  810c70:	10bb3304 	addi	r2,r2,-4916
  810c74:	10800017 	ldw	r2,0(r2)
  810c78:	103ee83a 	callr	r2
  810c7c:	e0bfff15 	stw	r2,-4(fp)
  810c80:	00000306 	br	810c90 <alt_get_errno+0x48>
  810c84:	008020b4 	movhi	r2,130
  810c88:	10826f04 	addi	r2,r2,2492
  810c8c:	e0bfff15 	stw	r2,-4(fp)
  810c90:	e0bfff17 	ldw	r2,-4(fp)
}
  810c94:	e037883a 	mov	sp,fp
  810c98:	dfc00117 	ldw	ra,4(sp)
  810c9c:	df000017 	ldw	fp,0(sp)
  810ca0:	dec00204 	addi	sp,sp,8
  810ca4:	f800283a 	ret

00810ca8 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
  810ca8:	deffdf04 	addi	sp,sp,-132
  810cac:	dfc02015 	stw	ra,128(sp)
  810cb0:	df001f15 	stw	fp,124(sp)
  810cb4:	df001f04 	addi	fp,sp,124
  810cb8:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  810cbc:	e17fe204 	addi	r5,fp,-120
  810cc0:	01003fc4 	movi	r4,255
  810cc4:	0818afc0 	call	818afc <OSTaskQuery>
  810cc8:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  810ccc:	e0bffe83 	ldbu	r2,-6(fp)
  810cd0:	10803fcc 	andi	r2,r2,255
  810cd4:	1004c03a 	cmpne	r2,r2,zero
  810cd8:	1000191e 	bne	r2,zero,810d40 <__env_lock+0x98>
    return;

  id = tcb.OSTCBPrio;
  810cdc:	e0bfee83 	ldbu	r2,-70(fp)
  810ce0:	10803fcc 	andi	r2,r2,255
  810ce4:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  810ce8:	d1275617 	ldw	r4,-25256(gp)
  810cec:	e17ffd04 	addi	r5,fp,-12
  810cf0:	08170480 	call	817048 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
  810cf4:	e0bffe43 	ldbu	r2,-7(fp)
  810cf8:	10803fcc 	andi	r2,r2,255
  810cfc:	1005003a 	cmpeq	r2,r2,zero
  810d00:	1000071e 	bne	r2,zero,810d20 <__env_lock+0x78>
  810d04:	d0e01317 	ldw	r3,-32692(gp)
  810d08:	e0bfe117 	ldw	r2,-124(fp)
  810d0c:	10c0041e 	bne	r2,r3,810d20 <__env_lock+0x78>
  {
    /* we do; just count the recursion */

    locks++;
  810d10:	d0a75517 	ldw	r2,-25260(gp)
  810d14:	10800044 	addi	r2,r2,1
  810d18:	d0a75515 	stw	r2,-25260(gp)
  id = tcb.OSTCBPrio;
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  if( semdata.OSEventGrp && id == lockid ) 
  810d1c:	00000806 	br	810d40 <__env_lock+0x98>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
  810d20:	d1275617 	ldw	r4,-25256(gp)
  810d24:	e1bffe84 	addi	r6,fp,-6
  810d28:	000b883a 	mov	r5,zero
  810d2c:	0816b280 	call	816b28 <OSSemPend>
    locks  = 1;
  810d30:	00800044 	movi	r2,1
  810d34:	d0a75515 	stw	r2,-25260(gp)
    lockid = id;
  810d38:	e0bfe117 	ldw	r2,-124(fp)
  810d3c:	d0a01315 	stw	r2,-32692(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  810d40:	e037883a 	mov	sp,fp
  810d44:	dfc00117 	ldw	ra,4(sp)
  810d48:	df000017 	ldw	fp,0(sp)
  810d4c:	dec00204 	addi	sp,sp,8
  810d50:	f800283a 	ret

00810d54 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
  810d54:	defffd04 	addi	sp,sp,-12
  810d58:	dfc00215 	stw	ra,8(sp)
  810d5c:	df000115 	stw	fp,4(sp)
  810d60:	df000104 	addi	fp,sp,4
  810d64:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
  810d68:	d0a75517 	ldw	r2,-25260(gp)
  810d6c:	1005003a 	cmpeq	r2,r2,zero
  810d70:	10000a1e 	bne	r2,zero,810d9c <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
  810d74:	d0a75517 	ldw	r2,-25260(gp)
  810d78:	10bfffc4 	addi	r2,r2,-1
  810d7c:	d0a75515 	stw	r2,-25260(gp)
  810d80:	d0a75517 	ldw	r2,-25260(gp)
  810d84:	1004c03a 	cmpne	r2,r2,zero
  810d88:	1000041e 	bne	r2,zero,810d9c <__env_unlock+0x48>
  {
    lockid = -1;
  810d8c:	00bfffc4 	movi	r2,-1
  810d90:	d0a01315 	stw	r2,-32692(gp)
    OSSemPost( alt_envsem );
  810d94:	d1275617 	ldw	r4,-25256(gp)
  810d98:	0816f200 	call	816f20 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  810d9c:	e037883a 	mov	sp,fp
  810da0:	dfc00117 	ldw	ra,4(sp)
  810da4:	df000017 	ldw	fp,0(sp)
  810da8:	dec00204 	addi	sp,sp,8
  810dac:	f800283a 	ret

00810db0 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
  810db0:	deffdb04 	addi	sp,sp,-148
  810db4:	dfc02415 	stw	ra,144(sp)
  810db8:	df002315 	stw	fp,140(sp)
  810dbc:	df002304 	addi	fp,sp,140
  810dc0:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  810dc4:	e03fe015 	stw	zero,-128(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
  810dc8:	008020b4 	movhi	r2,130
  810dcc:	10827c44 	addi	r2,r2,2545
  810dd0:	10800003 	ldbu	r2,0(r2)
  810dd4:	10803fcc 	andi	r2,r2,255
  810dd8:	10800058 	cmpnei	r2,r2,1
  810ddc:	1000311e 	bne	r2,zero,810ea4 <__malloc_lock+0xf4>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  810de0:	e17fe204 	addi	r5,fp,-120
  810de4:	01003fc4 	movi	r4,255
  810de8:	0818afc0 	call	818afc <OSTaskQuery>
  810dec:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  810df0:	e0bffe83 	ldbu	r2,-6(fp)
  810df4:	10803fcc 	andi	r2,r2,255
  810df8:	1004c03a 	cmpne	r2,r2,zero
  810dfc:	1000291e 	bne	r2,zero,810ea4 <__malloc_lock+0xf4>
    return;

  id = tcb.OSTCBPrio;
  810e00:	e0bfee83 	ldbu	r2,-70(fp)
  810e04:	10803fcc 	andi	r2,r2,255
  810e08:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
  810e0c:	d1275817 	ldw	r4,-25248(gp)
  810e10:	e17ffd04 	addi	r5,fp,-12
  810e14:	08170480 	call	817048 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810e18:	0005303a 	rdctl	r2,status
  810e1c:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810e20:	e0ffdf17 	ldw	r3,-132(fp)
  810e24:	00bfff84 	movi	r2,-2
  810e28:	1884703a 	and	r2,r3,r2
  810e2c:	1001703a 	wrctl	status,r2
  
  return context;
  810e30:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
  810e34:	e0bfe015 	stw	r2,-128(fp)

  if( !semdata.OSCnt && id == lockid ) 
  810e38:	e0bffd0b 	ldhu	r2,-12(fp)
  810e3c:	10bfffcc 	andi	r2,r2,65535
  810e40:	1004c03a 	cmpne	r2,r2,zero
  810e44:	10000b1e 	bne	r2,zero,810e74 <__malloc_lock+0xc4>
  810e48:	d0e01417 	ldw	r3,-32688(gp)
  810e4c:	e0bfe117 	ldw	r2,-124(fp)
  810e50:	10c0081e 	bne	r2,r3,810e74 <__malloc_lock+0xc4>
  {
    /* we do; just count the recursion */
    locks++;
  810e54:	d0a75717 	ldw	r2,-25252(gp)
  810e58:	10800044 	addi	r2,r2,1
  810e5c:	d0a75715 	stw	r2,-25252(gp)
  810e60:	e0bfe017 	ldw	r2,-128(fp)
  810e64:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810e68:	e0bfde17 	ldw	r2,-136(fp)
  810e6c:	1001703a 	wrctl	status,r2

  OSSemQuery( alt_heapsem, &semdata );
  
  OS_ENTER_CRITICAL();

  if( !semdata.OSCnt && id == lockid ) 
  810e70:	00000c06 	br	810ea4 <__malloc_lock+0xf4>
  810e74:	e0bfe017 	ldw	r2,-128(fp)
  810e78:	e0bfdd15 	stw	r2,-140(fp)
  810e7c:	e0bfdd17 	ldw	r2,-140(fp)
  810e80:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
  810e84:	d1275817 	ldw	r4,-25248(gp)
  810e88:	e1bffe84 	addi	r6,fp,-6
  810e8c:	000b883a 	mov	r5,zero
  810e90:	0816b280 	call	816b28 <OSSemPend>
    locks  = 1;
  810e94:	00800044 	movi	r2,1
  810e98:	d0a75715 	stw	r2,-25252(gp)
    lockid = id;
  810e9c:	e0bfe117 	ldw	r2,-124(fp)
  810ea0:	d0a01415 	stw	r2,-32688(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  810ea4:	e037883a 	mov	sp,fp
  810ea8:	dfc00117 	ldw	ra,4(sp)
  810eac:	df000017 	ldw	fp,0(sp)
  810eb0:	dec00204 	addi	sp,sp,8
  810eb4:	f800283a 	ret

00810eb8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  810eb8:	defff804 	addi	sp,sp,-32
  810ebc:	dfc00715 	stw	ra,28(sp)
  810ec0:	df000615 	stw	fp,24(sp)
  810ec4:	df000604 	addi	fp,sp,24
  810ec8:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  810ecc:	e03ffe15 	stw	zero,-8(fp)
#endif 

  if (OSRunning != OS_TRUE)
  810ed0:	008020b4 	movhi	r2,130
  810ed4:	10827c44 	addi	r2,r2,2545
  810ed8:	10800003 	ldbu	r2,0(r2)
  810edc:	10803fcc 	andi	r2,r2,255
  810ee0:	10800058 	cmpnei	r2,r2,1
  810ee4:	1000231e 	bne	r2,zero,810f74 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810ee8:	0005303a 	rdctl	r2,status
  810eec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810ef0:	e0fffd17 	ldw	r3,-12(fp)
  810ef4:	00bfff84 	movi	r2,-2
  810ef8:	1884703a 	and	r2,r3,r2
  810efc:	1001703a 	wrctl	status,r2
  
  return context;
  810f00:	e0bffd17 	ldw	r2,-12(fp)
      return;

  OS_ENTER_CRITICAL();
  810f04:	e0bffe15 	stw	r2,-8(fp)
  if (locks == 0)
  810f08:	d0a75717 	ldw	r2,-25252(gp)
  810f0c:	1004c03a 	cmpne	r2,r2,zero
  810f10:	1000051e 	bne	r2,zero,810f28 <__malloc_unlock+0x70>
  810f14:	e0bffe17 	ldw	r2,-8(fp)
  810f18:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810f1c:	e0bffc17 	ldw	r2,-16(fp)
  810f20:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
  810f24:	00001306 	br	810f74 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
  810f28:	d0a75717 	ldw	r2,-25252(gp)
  810f2c:	10bfffc4 	addi	r2,r2,-1
  810f30:	d0a75715 	stw	r2,-25252(gp)
  810f34:	d0a75717 	ldw	r2,-25252(gp)
  810f38:	1004c03a 	cmpne	r2,r2,zero
  810f3c:	1000091e 	bne	r2,zero,810f64 <__malloc_unlock+0xac>
  {
    lockid = -1;
  810f40:	00bfffc4 	movi	r2,-1
  810f44:	d0a01415 	stw	r2,-32688(gp)
  810f48:	e0bffe17 	ldw	r2,-8(fp)
  810f4c:	e0bffb15 	stw	r2,-20(fp)
  810f50:	e0bffb17 	ldw	r2,-20(fp)
  810f54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
  810f58:	d1275817 	ldw	r4,-25248(gp)
  810f5c:	0816f200 	call	816f20 <OSSemPost>
  810f60:	00000406 	br	810f74 <__malloc_unlock+0xbc>
  810f64:	e0bffe17 	ldw	r2,-8(fp)
  810f68:	e0bffa15 	stw	r2,-24(fp)
  810f6c:	e0bffa17 	ldw	r2,-24(fp)
  810f70:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  810f74:	e037883a 	mov	sp,fp
  810f78:	dfc00117 	ldw	ra,4(sp)
  810f7c:	df000017 	ldw	fp,0(sp)
  810f80:	dec00204 	addi	sp,sp,8
  810f84:	f800283a 	ret

00810f88 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  810f88:	defff604 	addi	sp,sp,-40
  810f8c:	dfc00915 	stw	ra,36(sp)
  810f90:	df000815 	stw	fp,32(sp)
  810f94:	df000804 	addi	fp,sp,32
  810f98:	e13ffc15 	stw	r4,-16(fp)
  810f9c:	e17ffd15 	stw	r5,-12(fp)
  810fa0:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  810fa4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  810fa8:	e0bffe17 	ldw	r2,-8(fp)
  810fac:	1004c03a 	cmpne	r2,r2,zero
  810fb0:	1000021e 	bne	r2,zero,810fbc <OSEventNameGet+0x34>
        return (0);
  810fb4:	e03fff15 	stw	zero,-4(fp)
  810fb8:	00003906 	br	8110a0 <OSEventNameGet+0x118>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  810fbc:	e0bffc17 	ldw	r2,-16(fp)
  810fc0:	1004c03a 	cmpne	r2,r2,zero
  810fc4:	1000051e 	bne	r2,zero,810fdc <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  810fc8:	e0fffe17 	ldw	r3,-8(fp)
  810fcc:	00800104 	movi	r2,4
  810fd0:	18800005 	stb	r2,0(r3)
        return (0);
  810fd4:	e03fff15 	stw	zero,-4(fp)
  810fd8:	00003106 	br	8110a0 <OSEventNameGet+0x118>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  810fdc:	e0bffd17 	ldw	r2,-12(fp)
  810fe0:	1004c03a 	cmpne	r2,r2,zero
  810fe4:	1000051e 	bne	r2,zero,810ffc <OSEventNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  810fe8:	e0fffe17 	ldw	r3,-8(fp)
  810fec:	00800304 	movi	r2,12
  810ff0:	18800005 	stb	r2,0(r3)
        return (0);
  810ff4:	e03fff15 	stw	zero,-4(fp)
  810ff8:	00002906 	br	8110a0 <OSEventNameGet+0x118>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  810ffc:	d0a76703 	ldbu	r2,-25188(gp)
  811000:	10803fcc 	andi	r2,r2,255
  811004:	1005003a 	cmpeq	r2,r2,zero
  811008:	1000051e 	bne	r2,zero,811020 <OSEventNameGet+0x98>
        *perr  = OS_ERR_NAME_GET_ISR;
  81100c:	e0fffe17 	ldw	r3,-8(fp)
  811010:	00800444 	movi	r2,17
  811014:	18800005 	stb	r2,0(r3)
        return (0);
  811018:	e03fff15 	stw	zero,-4(fp)
  81101c:	00002006 	br	8110a0 <OSEventNameGet+0x118>
    }
    switch (pevent->OSEventType) {
  811020:	e0bffc17 	ldw	r2,-16(fp)
  811024:	10800003 	ldbu	r2,0(r2)
  811028:	10803fcc 	andi	r2,r2,255
  81102c:	10bfffc4 	addi	r2,r2,-1
  811030:	10800128 	cmpgeui	r2,r2,4
  811034:	1000161e 	bne	r2,zero,811090 <OSEventNameGet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811038:	0005303a 	rdctl	r2,status
  81103c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811040:	e0fff917 	ldw	r3,-28(fp)
  811044:	00bfff84 	movi	r2,-2
  811048:	1884703a 	and	r2,r3,r2
  81104c:	1001703a 	wrctl	status,r2
  
  return context;
  811050:	e0bff917 	ldw	r2,-28(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
  811054:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
  811058:	e0bffc17 	ldw	r2,-16(fp)
  81105c:	11400384 	addi	r5,r2,14
  811060:	e13ffd17 	ldw	r4,-12(fp)
  811064:	0812b0c0 	call	812b0c <OS_StrCopy>
  811068:	e0bffb05 	stb	r2,-20(fp)
  81106c:	e0bffa17 	ldw	r2,-24(fp)
  811070:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811074:	e0bff817 	ldw	r2,-32(fp)
  811078:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  81107c:	e0bffe17 	ldw	r2,-8(fp)
  811080:	10000005 	stb	zero,0(r2)
    return (len);
  811084:	e0bffb03 	ldbu	r2,-20(fp)
  811088:	e0bfff15 	stw	r2,-4(fp)
  81108c:	00000406 	br	8110a0 <OSEventNameGet+0x118>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  811090:	e0fffe17 	ldw	r3,-8(fp)
  811094:	00800044 	movi	r2,1
  811098:	18800005 	stb	r2,0(r3)
             return (0);
  81109c:	e03fff15 	stw	zero,-4(fp)
  8110a0:	e0bfff17 	ldw	r2,-4(fp)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
  8110a4:	e037883a 	mov	sp,fp
  8110a8:	dfc00117 	ldw	ra,4(sp)
  8110ac:	df000017 	ldw	fp,0(sp)
  8110b0:	dec00204 	addi	sp,sp,8
  8110b4:	f800283a 	ret

008110b8 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  8110b8:	defff604 	addi	sp,sp,-40
  8110bc:	dfc00915 	stw	ra,36(sp)
  8110c0:	df000815 	stw	fp,32(sp)
  8110c4:	df000804 	addi	fp,sp,32
  8110c8:	e13ffd15 	stw	r4,-12(fp)
  8110cc:	e17ffe15 	stw	r5,-8(fp)
  8110d0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8110d4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  8110d8:	e0bfff17 	ldw	r2,-4(fp)
  8110dc:	1005003a 	cmpeq	r2,r2,zero
  8110e0:	1000411e 	bne	r2,zero,8111e8 <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  8110e4:	e0bffd17 	ldw	r2,-12(fp)
  8110e8:	1004c03a 	cmpne	r2,r2,zero
  8110ec:	1000041e 	bne	r2,zero,811100 <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
  8110f0:	e0ffff17 	ldw	r3,-4(fp)
  8110f4:	00800104 	movi	r2,4
  8110f8:	18800005 	stb	r2,0(r3)
        return;
  8110fc:	00003a06 	br	8111e8 <OSEventNameSet+0x130>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  811100:	e0bffe17 	ldw	r2,-8(fp)
  811104:	1004c03a 	cmpne	r2,r2,zero
  811108:	1000041e 	bne	r2,zero,81111c <OSEventNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  81110c:	e0ffff17 	ldw	r3,-4(fp)
  811110:	00800304 	movi	r2,12
  811114:	18800005 	stb	r2,0(r3)
        return;
  811118:	00003306 	br	8111e8 <OSEventNameSet+0x130>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  81111c:	d0a76703 	ldbu	r2,-25188(gp)
  811120:	10803fcc 	andi	r2,r2,255
  811124:	1005003a 	cmpeq	r2,r2,zero
  811128:	1000041e 	bne	r2,zero,81113c <OSEventNameSet+0x84>
        *perr = OS_ERR_NAME_SET_ISR;
  81112c:	e0ffff17 	ldw	r3,-4(fp)
  811130:	00800484 	movi	r2,18
  811134:	18800005 	stb	r2,0(r3)
        return;
  811138:	00002b06 	br	8111e8 <OSEventNameSet+0x130>
    }
    switch (pevent->OSEventType) {
  81113c:	e0bffd17 	ldw	r2,-12(fp)
  811140:	10800003 	ldbu	r2,0(r2)
  811144:	10803fcc 	andi	r2,r2,255
  811148:	10bfffc4 	addi	r2,r2,-1
  81114c:	10800128 	cmpgeui	r2,r2,4
  811150:	10000f1e 	bne	r2,zero,811190 <OSEventNameSet+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811154:	0005303a 	rdctl	r2,status
  811158:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81115c:	e0fffa17 	ldw	r3,-24(fp)
  811160:	00bfff84 	movi	r2,-2
  811164:	1884703a 	and	r2,r3,r2
  811168:	1001703a 	wrctl	status,r2
  
  return context;
  81116c:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
  811170:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
  811174:	e13ffe17 	ldw	r4,-8(fp)
  811178:	0812b8c0 	call	812b8c <OS_StrLen>
  81117c:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
  811180:	e0bffc03 	ldbu	r2,-16(fp)
  811184:	10800828 	cmpgeui	r2,r2,32
  811188:	1000051e 	bne	r2,zero,8111a0 <OSEventNameSet+0xe8>
  81118c:	00000c06 	br	8111c0 <OSEventNameSet+0x108>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  811190:	e0ffff17 	ldw	r3,-4(fp)
  811194:	00800044 	movi	r2,1
  811198:	18800005 	stb	r2,0(r3)
             return;
  81119c:	00001206 	br	8111e8 <OSEventNameSet+0x130>
  8111a0:	e0bffb17 	ldw	r2,-20(fp)
  8111a4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8111a8:	e0bff917 	ldw	r2,-28(fp)
  8111ac:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
  8111b0:	e0ffff17 	ldw	r3,-4(fp)
  8111b4:	008002c4 	movi	r2,11
  8111b8:	18800005 	stb	r2,0(r3)
        return;
  8111bc:	00000a06 	br	8111e8 <OSEventNameSet+0x130>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
  8111c0:	e0bffd17 	ldw	r2,-12(fp)
  8111c4:	11000384 	addi	r4,r2,14
  8111c8:	e17ffe17 	ldw	r5,-8(fp)
  8111cc:	0812b0c0 	call	812b0c <OS_StrCopy>
  8111d0:	e0bffb17 	ldw	r2,-20(fp)
  8111d4:	e0bff815 	stw	r2,-32(fp)
  8111d8:	e0bff817 	ldw	r2,-32(fp)
  8111dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  8111e0:	e0bfff17 	ldw	r2,-4(fp)
  8111e4:	10000005 	stb	zero,0(r2)
}
  8111e8:	e037883a 	mov	sp,fp
  8111ec:	dfc00117 	ldw	ra,4(sp)
  8111f0:	df000017 	ldw	fp,0(sp)
  8111f4:	dec00204 	addi	sp,sp,8
  8111f8:	f800283a 	ret

008111fc <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
  8111fc:	deffe704 	addi	sp,sp,-100
  811200:	dfc01815 	stw	ra,96(sp)
  811204:	df001715 	stw	fp,92(sp)
  811208:	df001704 	addi	fp,sp,92
  81120c:	e13ff615 	stw	r4,-40(fp)
  811210:	e17ff715 	stw	r5,-36(fp)
  811214:	e1bff815 	stw	r6,-32(fp)
  811218:	e1fff90d 	sth	r7,-28(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
  81121c:	e03ff015 	stw	zero,-64(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
  811220:	e0800217 	ldw	r2,8(fp)
  811224:	1004c03a 	cmpne	r2,r2,zero
  811228:	1000021e 	bne	r2,zero,811234 <OSEventPendMulti+0x38>
        return (0);
  81122c:	e03fff15 	stw	zero,-4(fp)
  811230:	00019906 	br	811898 <OSEventPendMulti+0x69c>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
  811234:	e0bff617 	ldw	r2,-40(fp)
  811238:	1004c03a 	cmpne	r2,r2,zero
  81123c:	1000051e 	bne	r2,zero,811254 <OSEventPendMulti+0x58>
       *perr =  OS_ERR_PEVENT_NULL;
  811240:	e0c00217 	ldw	r3,8(fp)
  811244:	00800104 	movi	r2,4
  811248:	18800005 	stb	r2,0(r3)
        return (0);
  81124c:	e03fff15 	stw	zero,-4(fp)
  811250:	00019106 	br	811898 <OSEventPendMulti+0x69c>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
  811254:	e0bff717 	ldw	r2,-36(fp)
  811258:	1004c03a 	cmpne	r2,r2,zero
  81125c:	1000051e 	bne	r2,zero,811274 <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
  811260:	e0c00217 	ldw	r3,8(fp)
  811264:	00800104 	movi	r2,4
  811268:	18800005 	stb	r2,0(r3)
        return (0);
  81126c:	e03fff15 	stw	zero,-4(fp)
  811270:	00018906 	br	811898 <OSEventPendMulti+0x69c>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
  811274:	e0bff817 	ldw	r2,-32(fp)
  811278:	1004c03a 	cmpne	r2,r2,zero
  81127c:	1000051e 	bne	r2,zero,811294 <OSEventPendMulti+0x98>
       *perr =  OS_ERR_PEVENT_NULL;
  811280:	e0c00217 	ldw	r3,8(fp)
  811284:	00800104 	movi	r2,4
  811288:	18800005 	stb	r2,0(r3)
        return (0);
  81128c:	e03fff15 	stw	zero,-4(fp)
  811290:	00018106 	br	811898 <OSEventPendMulti+0x69c>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
  811294:	e0bff717 	ldw	r2,-36(fp)
  811298:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
  81129c:	e0bff617 	ldw	r2,-40(fp)
  8112a0:	e0bff515 	stw	r2,-44(fp)
    pevent      = *pevents;
  8112a4:	e0bff517 	ldw	r2,-44(fp)
  8112a8:	10800017 	ldw	r2,0(r2)
  8112ac:	e0bff415 	stw	r2,-48(fp)
    while  (pevent != (OS_EVENT *)0) {
  8112b0:	00001806 	br	811314 <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
  8112b4:	e0bff417 	ldw	r2,-48(fp)
  8112b8:	10800003 	ldbu	r2,0(r2)
  8112bc:	10803fcc 	andi	r2,r2,255
  8112c0:	e0bffe15 	stw	r2,-8(fp)
  8112c4:	e0fffe17 	ldw	r3,-8(fp)
  8112c8:	188000a0 	cmpeqi	r2,r3,2
  8112cc:	10000b1e 	bne	r2,zero,8112fc <OSEventPendMulti+0x100>
  8112d0:	e0fffe17 	ldw	r3,-8(fp)
  8112d4:	188000e0 	cmpeqi	r2,r3,3
  8112d8:	1000081e 	bne	r2,zero,8112fc <OSEventPendMulti+0x100>
  8112dc:	e0fffe17 	ldw	r3,-8(fp)
  8112e0:	18800060 	cmpeqi	r2,r3,1
  8112e4:	1000051e 	bne	r2,zero,8112fc <OSEventPendMulti+0x100>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
  8112e8:	e0c00217 	ldw	r3,8(fp)
  8112ec:	00800044 	movi	r2,1
  8112f0:	18800005 	stb	r2,0(r3)
                 return (0);
  8112f4:	e03fff15 	stw	zero,-4(fp)
  8112f8:	00016706 	br	811898 <OSEventPendMulti+0x69c>
        }
        pevents++;
  8112fc:	e0bff517 	ldw	r2,-44(fp)
  811300:	10800104 	addi	r2,r2,4
  811304:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
  811308:	e0bff517 	ldw	r2,-44(fp)
  81130c:	10800017 	ldw	r2,0(r2)
  811310:	e0bff415 	stw	r2,-48(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
  811314:	e0bff417 	ldw	r2,-48(fp)
  811318:	1004c03a 	cmpne	r2,r2,zero
  81131c:	103fe51e 	bne	r2,zero,8112b4 <OSEventPendMulti+0xb8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
  811320:	d0a76703 	ldbu	r2,-25188(gp)
  811324:	10803fcc 	andi	r2,r2,255
  811328:	1005003a 	cmpeq	r2,r2,zero
  81132c:	1000051e 	bne	r2,zero,811344 <OSEventPendMulti+0x148>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
  811330:	e0c00217 	ldw	r3,8(fp)
  811334:	00800084 	movi	r2,2
  811338:	18800005 	stb	r2,0(r3)
        return (0);
  81133c:	e03fff15 	stw	zero,-4(fp)
  811340:	00015506 	br	811898 <OSEventPendMulti+0x69c>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
  811344:	d0a75903 	ldbu	r2,-25244(gp)
  811348:	10803fcc 	andi	r2,r2,255
  81134c:	1005003a 	cmpeq	r2,r2,zero
  811350:	1000051e 	bne	r2,zero,811368 <OSEventPendMulti+0x16c>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
  811354:	e0c00217 	ldw	r3,8(fp)
  811358:	00800344 	movi	r2,13
  81135c:	18800005 	stb	r2,0(r3)
        return (0);
  811360:	e03fff15 	stw	zero,-4(fp)
  811364:	00014c06 	br	811898 <OSEventPendMulti+0x69c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811368:	0005303a 	rdctl	r2,status
  81136c:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811370:	e0ffef17 	ldw	r3,-68(fp)
  811374:	00bfff84 	movi	r2,-2
  811378:	1884703a 	and	r2,r3,r2
  81137c:	1001703a 	wrctl	status,r2
  
  return context;
  811380:	e0bfef17 	ldw	r2,-68(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
  811384:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
  811388:	e03ff205 	stb	zero,-56(fp)
    events_rdy_nbr =  0;
  81138c:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
  811390:	e03ff105 	stb	zero,-60(fp)
    pevents        =  pevents_pend;
  811394:	e0bff617 	ldw	r2,-40(fp)
  811398:	e0bff515 	stw	r2,-44(fp)
    pevent         = *pevents;
  81139c:	e0bff517 	ldw	r2,-44(fp)
  8113a0:	10800017 	ldw	r2,0(r2)
  8113a4:	e0bff415 	stw	r2,-48(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  8113a8:	00008f06 	br	8115e8 <OSEventPendMulti+0x3ec>
        switch (pevent->OSEventType) {
  8113ac:	e0bff417 	ldw	r2,-48(fp)
  8113b0:	10800003 	ldbu	r2,0(r2)
  8113b4:	10803fcc 	andi	r2,r2,255
  8113b8:	e0bffd15 	stw	r2,-12(fp)
  8113bc:	e0fffd17 	ldw	r3,-12(fp)
  8113c0:	188000a0 	cmpeqi	r2,r3,2
  8113c4:	1000441e 	bne	r2,zero,8114d8 <OSEventPendMulti+0x2dc>
  8113c8:	e0fffd17 	ldw	r3,-12(fp)
  8113cc:	188000e0 	cmpeqi	r2,r3,3
  8113d0:	1000041e 	bne	r2,zero,8113e4 <OSEventPendMulti+0x1e8>
  8113d4:	e0fffd17 	ldw	r3,-12(fp)
  8113d8:	18800060 	cmpeqi	r2,r3,1
  8113dc:	1000211e 	bne	r2,zero,811464 <OSEventPendMulti+0x268>
  8113e0:	00006f06 	br	8115a0 <OSEventPendMulti+0x3a4>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
  8113e4:	e0bff417 	ldw	r2,-48(fp)
  8113e8:	1080020b 	ldhu	r2,8(r2)
  8113ec:	10bfffcc 	andi	r2,r2,65535
  8113f0:	1005003a 	cmpeq	r2,r2,zero
  8113f4:	1000171e 	bne	r2,zero,811454 <OSEventPendMulti+0x258>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
  8113f8:	e0bff417 	ldw	r2,-48(fp)
  8113fc:	1080020b 	ldhu	r2,8(r2)
  811400:	10bfffc4 	addi	r2,r2,-1
  811404:	1007883a 	mov	r3,r2
  811408:	e0bff417 	ldw	r2,-48(fp)
  81140c:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
  811410:	e0fff717 	ldw	r3,-36(fp)
  811414:	e0bff417 	ldw	r2,-48(fp)
  811418:	18800015 	stw	r2,0(r3)
  81141c:	e0bff717 	ldw	r2,-36(fp)
  811420:	10800104 	addi	r2,r2,4
  811424:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   =  OS_TRUE;
  811428:	00800044 	movi	r2,1
  81142c:	e0bff205 	stb	r2,-56(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
  811430:	e0bff817 	ldw	r2,-32(fp)
  811434:	10000015 	stw	zero,0(r2)
  811438:	e0bff817 	ldw	r2,-32(fp)
  81143c:	10800104 	addi	r2,r2,4
  811440:	e0bff815 	stw	r2,-32(fp)
                      events_rdy_nbr++;
  811444:	e0bff18b 	ldhu	r2,-58(fp)
  811448:	10800044 	addi	r2,r2,1
  81144c:	e0bff18d 	sth	r2,-58(fp)
  811450:	00005f06 	br	8115d0 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
  811454:	e0bff103 	ldbu	r2,-60(fp)
  811458:	10800054 	ori	r2,r2,1
  81145c:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  811460:	00005b06 	br	8115d0 <OSEventPendMulti+0x3d4>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
  811464:	e0bff417 	ldw	r2,-48(fp)
  811468:	10800117 	ldw	r2,4(r2)
  81146c:	1005003a 	cmpeq	r2,r2,zero
  811470:	1000151e 	bne	r2,zero,8114c8 <OSEventPendMulti+0x2cc>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
  811474:	e0bff417 	ldw	r2,-48(fp)
  811478:	10c00117 	ldw	r3,4(r2)
  81147c:	e0bff817 	ldw	r2,-32(fp)
  811480:	10c00015 	stw	r3,0(r2)
  811484:	e0bff817 	ldw	r2,-32(fp)
  811488:	10800104 	addi	r2,r2,4
  81148c:	e0bff815 	stw	r2,-32(fp)
                     pevent->OSEventPtr  = (void *)0;
  811490:	e0bff417 	ldw	r2,-48(fp)
  811494:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
  811498:	e0fff717 	ldw	r3,-36(fp)
  81149c:	e0bff417 	ldw	r2,-48(fp)
  8114a0:	18800015 	stw	r2,0(r3)
  8114a4:	e0bff717 	ldw	r2,-36(fp)
  8114a8:	10800104 	addi	r2,r2,4
  8114ac:	e0bff715 	stw	r2,-36(fp)
                      events_rdy         =  OS_TRUE;
  8114b0:	00800044 	movi	r2,1
  8114b4:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
  8114b8:	e0bff18b 	ldhu	r2,-58(fp)
  8114bc:	10800044 	addi	r2,r2,1
  8114c0:	e0bff18d 	sth	r2,-58(fp)
  8114c4:	00004206 	br	8115d0 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
  8114c8:	e0bff103 	ldbu	r2,-60(fp)
  8114cc:	10800094 	ori	r2,r2,2
  8114d0:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  8114d4:	00003e06 	br	8115d0 <OSEventPendMulti+0x3d4>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
  8114d8:	e0bff417 	ldw	r2,-48(fp)
  8114dc:	10800117 	ldw	r2,4(r2)
  8114e0:	e0bff315 	stw	r2,-52(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
  8114e4:	e0bff317 	ldw	r2,-52(fp)
  8114e8:	1080058b 	ldhu	r2,22(r2)
  8114ec:	10bfffcc 	andi	r2,r2,65535
  8114f0:	1005003a 	cmpeq	r2,r2,zero
  8114f4:	1000261e 	bne	r2,zero,811590 <OSEventPendMulti+0x394>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
  8114f8:	e0bff317 	ldw	r2,-52(fp)
  8114fc:	11000417 	ldw	r4,16(r2)
  811500:	20c00017 	ldw	r3,0(r4)
  811504:	e0bff817 	ldw	r2,-32(fp)
  811508:	10c00015 	stw	r3,0(r2)
  81150c:	e0bff817 	ldw	r2,-32(fp)
  811510:	10800104 	addi	r2,r2,4
  811514:	e0bff815 	stw	r2,-32(fp)
  811518:	20c00104 	addi	r3,r4,4
  81151c:	e0bff317 	ldw	r2,-52(fp)
  811520:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
  811524:	e0bff317 	ldw	r2,-52(fp)
  811528:	10c00417 	ldw	r3,16(r2)
  81152c:	e0bff317 	ldw	r2,-52(fp)
  811530:	10800217 	ldw	r2,8(r2)
  811534:	1880041e 	bne	r3,r2,811548 <OSEventPendMulti+0x34c>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
  811538:	e0bff317 	ldw	r2,-52(fp)
  81153c:	10c00117 	ldw	r3,4(r2)
  811540:	e0bff317 	ldw	r2,-52(fp)
  811544:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
  811548:	e0bff317 	ldw	r2,-52(fp)
  81154c:	1080058b 	ldhu	r2,22(r2)
  811550:	10bfffc4 	addi	r2,r2,-1
  811554:	1007883a 	mov	r3,r2
  811558:	e0bff317 	ldw	r2,-52(fp)
  81155c:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
  811560:	e0fff717 	ldw	r3,-36(fp)
  811564:	e0bff417 	ldw	r2,-48(fp)
  811568:	18800015 	stw	r2,0(r3)
  81156c:	e0bff717 	ldw	r2,-36(fp)
  811570:	10800104 	addi	r2,r2,4
  811574:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   = OS_TRUE;
  811578:	00800044 	movi	r2,1
  81157c:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
  811580:	e0bff18b 	ldhu	r2,-58(fp)
  811584:	10800044 	addi	r2,r2,1
  811588:	e0bff18d 	sth	r2,-58(fp)
  81158c:	00001006 	br	8115d0 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
  811590:	e0bff103 	ldbu	r2,-60(fp)
  811594:	10800114 	ori	r2,r2,4
  811598:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  81159c:	00000c06 	br	8115d0 <OSEventPendMulti+0x3d4>
  8115a0:	e0bff017 	ldw	r2,-64(fp)
  8115a4:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8115a8:	e0bfee17 	ldw	r2,-72(fp)
  8115ac:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
  8115b0:	e0bff717 	ldw	r2,-36(fp)
  8115b4:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
  8115b8:	e0c00217 	ldw	r3,8(fp)
  8115bc:	00800044 	movi	r2,1
  8115c0:	18800005 	stb	r2,0(r3)
                 return (events_rdy_nbr);
  8115c4:	e0bff18b 	ldhu	r2,-58(fp)
  8115c8:	e0bfff15 	stw	r2,-4(fp)
  8115cc:	0000b206 	br	811898 <OSEventPendMulti+0x69c>
        }
        pevents++;
  8115d0:	e0bff517 	ldw	r2,-44(fp)
  8115d4:	10800104 	addi	r2,r2,4
  8115d8:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
  8115dc:	e0bff517 	ldw	r2,-44(fp)
  8115e0:	10800017 	ldw	r2,0(r2)
  8115e4:	e0bff415 	stw	r2,-48(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  8115e8:	e0bff417 	ldw	r2,-48(fp)
  8115ec:	1004c03a 	cmpne	r2,r2,zero
  8115f0:	103f6e1e 	bne	r2,zero,8113ac <OSEventPendMulti+0x1b0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
  8115f4:	e0bff203 	ldbu	r2,-56(fp)
  8115f8:	10800058 	cmpnei	r2,r2,1
  8115fc:	10000b1e 	bne	r2,zero,81162c <OSEventPendMulti+0x430>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
  811600:	e0bff717 	ldw	r2,-36(fp)
  811604:	10000015 	stw	zero,0(r2)
  811608:	e0bff017 	ldw	r2,-64(fp)
  81160c:	e0bfed15 	stw	r2,-76(fp)
  811610:	e0bfed17 	ldw	r2,-76(fp)
  811614:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
  811618:	e0800217 	ldw	r2,8(fp)
  81161c:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
  811620:	e0fff18b 	ldhu	r3,-58(fp)
  811624:	e0ffff15 	stw	r3,-4(fp)
  811628:	00009b06 	br	811898 <OSEventPendMulti+0x69c>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
  81162c:	d1276817 	ldw	r4,-25184(gp)
  811630:	d0a76817 	ldw	r2,-25184(gp)
  811634:	10c00c03 	ldbu	r3,48(r2)
  811638:	e0bff103 	ldbu	r2,-60(fp)
  81163c:	1884b03a 	or	r2,r3,r2
  811640:	1007883a 	mov	r3,r2
  811644:	00bfe004 	movi	r2,-128
  811648:	1884b03a 	or	r2,r3,r2
  81164c:	20800c05 	stb	r2,48(r4)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  811650:	d0a76817 	ldw	r2,-25184(gp)
  811654:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
  811658:	d0e76817 	ldw	r3,-25184(gp)
  81165c:	e0bff90b 	ldhu	r2,-28(fp)
  811660:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
  811664:	e13ff617 	ldw	r4,-40(fp)
  811668:	081222c0 	call	81222c <OS_EventTaskWaitMulti>
  81166c:	e0bff017 	ldw	r2,-64(fp)
  811670:	e0bfec15 	stw	r2,-80(fp)
  811674:	e0bfec17 	ldw	r2,-80(fp)
  811678:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
  81167c:	08129c80 	call	8129c8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811680:	0005303a 	rdctl	r2,status
  811684:	e0bfeb15 	stw	r2,-84(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811688:	e0ffeb17 	ldw	r3,-84(fp)
  81168c:	00bfff84 	movi	r2,-2
  811690:	1884703a 	and	r2,r3,r2
  811694:	1001703a 	wrctl	status,r2
  
  return context;
  811698:	e0bfeb17 	ldw	r2,-84(fp)
    OS_ENTER_CRITICAL();
  81169c:	e0bff015 	stw	r2,-64(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
  8116a0:	d0a76817 	ldw	r2,-25184(gp)
  8116a4:	10800c43 	ldbu	r2,49(r2)
  8116a8:	10803fcc 	andi	r2,r2,255
  8116ac:	e0bffc15 	stw	r2,-16(fp)
  8116b0:	e0fffc17 	ldw	r3,-16(fp)
  8116b4:	1805003a 	cmpeq	r2,r3,zero
  8116b8:	1000041e 	bne	r2,zero,8116cc <OSEventPendMulti+0x4d0>
  8116bc:	e0fffc17 	ldw	r3,-16(fp)
  8116c0:	188000a0 	cmpeqi	r2,r3,2
  8116c4:	1000011e 	bne	r2,zero,8116cc <OSEventPendMulti+0x4d0>
  8116c8:	00001906 	br	811730 <OSEventPendMulti+0x534>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
  8116cc:	d0a76817 	ldw	r2,-25184(gp)
  8116d0:	10800717 	ldw	r2,28(r2)
  8116d4:	e0bff415 	stw	r2,-48(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
  8116d8:	e0bff417 	ldw	r2,-48(fp)
  8116dc:	1005003a 	cmpeq	r2,r2,zero
  8116e0:	10000c1e 	bne	r2,zero,811714 <OSEventPendMulti+0x518>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
  8116e4:	e0fff717 	ldw	r3,-36(fp)
  8116e8:	e0bff417 	ldw	r2,-48(fp)
  8116ec:	18800015 	stw	r2,0(r3)
  8116f0:	e0bff717 	ldw	r2,-36(fp)
  8116f4:	10800104 	addi	r2,r2,4
  8116f8:	e0bff715 	stw	r2,-36(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
  8116fc:	e0bff717 	ldw	r2,-36(fp)
  811700:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
  811704:	e0bff18b 	ldhu	r2,-58(fp)
  811708:	10800044 	addi	r2,r2,1
  81170c:	e0bff18d 	sth	r2,-58(fp)
  811710:	00000a06 	br	81173c <OSEventPendMulti+0x540>

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
  811714:	d0a76817 	ldw	r2,-25184(gp)
  811718:	00c00044 	movi	r3,1
  81171c:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  811720:	d1276817 	ldw	r4,-25184(gp)
  811724:	e17ff617 	ldw	r5,-40(fp)
  811728:	08124380 	call	812438 <OS_EventTaskRemoveMulti>
             }
			 break;
  81172c:	00000306 	br	81173c <OSEventPendMulti+0x540>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  811730:	d1276817 	ldw	r4,-25184(gp)
  811734:	e17ff617 	ldw	r5,-40(fp)
  811738:	08124380 	call	812438 <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
  81173c:	d0a76817 	ldw	r2,-25184(gp)
  811740:	10800c43 	ldbu	r2,49(r2)
  811744:	10803fcc 	andi	r2,r2,255
  811748:	e0bffb15 	stw	r2,-20(fp)
  81174c:	e0fffb17 	ldw	r3,-20(fp)
  811750:	1805003a 	cmpeq	r2,r3,zero
  811754:	1000041e 	bne	r2,zero,811768 <OSEventPendMulti+0x56c>
  811758:	e0fffb17 	ldw	r3,-20(fp)
  81175c:	188000a0 	cmpeqi	r2,r3,2
  811760:	10002c1e 	bne	r2,zero,811814 <OSEventPendMulti+0x618>
  811764:	00003406 	br	811838 <OSEventPendMulti+0x63c>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
  811768:	e0bff417 	ldw	r2,-48(fp)
  81176c:	10800003 	ldbu	r2,0(r2)
  811770:	10803fcc 	andi	r2,r2,255
  811774:	e0bffa15 	stw	r2,-24(fp)
  811778:	e0fffa17 	ldw	r3,-24(fp)
  81177c:	18800050 	cmplti	r2,r3,1
  811780:	1000151e 	bne	r2,zero,8117d8 <OSEventPendMulti+0x5dc>
  811784:	e0fffa17 	ldw	r3,-24(fp)
  811788:	188000d0 	cmplti	r2,r3,3
  81178c:	10000a1e 	bne	r2,zero,8117b8 <OSEventPendMulti+0x5bc>
  811790:	e0fffa17 	ldw	r3,-24(fp)
  811794:	188000e0 	cmpeqi	r2,r3,3
  811798:	1000011e 	bne	r2,zero,8117a0 <OSEventPendMulti+0x5a4>
  81179c:	00000e06 	br	8117d8 <OSEventPendMulti+0x5dc>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
  8117a0:	e0bff817 	ldw	r2,-32(fp)
  8117a4:	10000015 	stw	zero,0(r2)
  8117a8:	e0bff817 	ldw	r2,-32(fp)
  8117ac:	10800104 	addi	r2,r2,4
  8117b0:	e0bff815 	stw	r2,-32(fp)
                      break;
  8117b4:	00001406 	br	811808 <OSEventPendMulti+0x60c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
  8117b8:	d0a76817 	ldw	r2,-25184(gp)
  8117bc:	10c00917 	ldw	r3,36(r2)
  8117c0:	e0bff817 	ldw	r2,-32(fp)
  8117c4:	10c00015 	stw	r3,0(r2)
  8117c8:	e0bff817 	ldw	r2,-32(fp)
  8117cc:	10800104 	addi	r2,r2,4
  8117d0:	e0bff815 	stw	r2,-32(fp)
                      break;
  8117d4:	00000c06 	br	811808 <OSEventPendMulti+0x60c>
  8117d8:	e0bff017 	ldw	r2,-64(fp)
  8117dc:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8117e0:	e0bfea17 	ldw	r2,-88(fp)
  8117e4:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
  8117e8:	e0bff717 	ldw	r2,-36(fp)
  8117ec:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
  8117f0:	e0c00217 	ldw	r3,8(fp)
  8117f4:	00800044 	movi	r2,1
  8117f8:	18800005 	stb	r2,0(r3)
                      return (events_rdy_nbr);
  8117fc:	e0bff18b 	ldhu	r2,-58(fp)
  811800:	e0bfff15 	stw	r2,-4(fp)
  811804:	00002406 	br	811898 <OSEventPendMulti+0x69c>
             }
            *perr = OS_ERR_NONE;
  811808:	e0800217 	ldw	r2,8(fp)
  81180c:	10000005 	stb	zero,0(r2)
             break;
  811810:	00001106 	br	811858 <OSEventPendMulti+0x65c>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
  811814:	e0bff817 	ldw	r2,-32(fp)
  811818:	10000015 	stw	zero,0(r2)
  81181c:	e0bff817 	ldw	r2,-32(fp)
  811820:	10800104 	addi	r2,r2,4
  811824:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
  811828:	e0c00217 	ldw	r3,8(fp)
  81182c:	00800384 	movi	r2,14
  811830:	18800005 	stb	r2,0(r3)
             break;
  811834:	00000806 	br	811858 <OSEventPendMulti+0x65c>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
  811838:	e0bff817 	ldw	r2,-32(fp)
  81183c:	10000015 	stw	zero,0(r2)
  811840:	e0bff817 	ldw	r2,-32(fp)
  811844:	10800104 	addi	r2,r2,4
  811848:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
  81184c:	e0c00217 	ldw	r3,8(fp)
  811850:	00800284 	movi	r2,10
  811854:	18800005 	stb	r2,0(r3)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
  811858:	d0a76817 	ldw	r2,-25184(gp)
  81185c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
  811860:	d0a76817 	ldw	r2,-25184(gp)
  811864:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
  811868:	d0a76817 	ldw	r2,-25184(gp)
  81186c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  811870:	d0a76817 	ldw	r2,-25184(gp)
  811874:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
  811878:	d0a76817 	ldw	r2,-25184(gp)
  81187c:	10000915 	stw	zero,36(r2)
  811880:	e0bff017 	ldw	r2,-64(fp)
  811884:	e0bfe915 	stw	r2,-92(fp)
  811888:	e0bfe917 	ldw	r2,-92(fp)
  81188c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
  811890:	e0fff18b 	ldhu	r3,-58(fp)
  811894:	e0ffff15 	stw	r3,-4(fp)
  811898:	e0bfff17 	ldw	r2,-4(fp)
}
  81189c:	e037883a 	mov	sp,fp
  8118a0:	dfc00117 	ldw	ra,4(sp)
  8118a4:	df000017 	ldw	fp,0(sp)
  8118a8:	dec00204 	addi	sp,sp,8
  8118ac:	f800283a 	ret

008118b0 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
  8118b0:	defffe04 	addi	sp,sp,-8
  8118b4:	dfc00115 	stw	ra,4(sp)
  8118b8:	df000015 	stw	fp,0(sp)
  8118bc:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
  8118c0:	081c1300 	call	81c130 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
  8118c4:	08126800 	call	812680 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
  8118c8:	08126c40 	call	8126c4 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
  8118cc:	08128280 	call	812828 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
  8118d0:	08125a40 	call	8125a4 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
  8118d4:	08148d80 	call	8148d8 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
  8118d8:	08152b00 	call	8152b0 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
  8118dc:	08166080 	call	816608 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
  8118e0:	08127300 	call	812730 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
  8118e4:	08127ac0 	call	8127ac <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
  8118e8:	081c14c0 	call	81c14c <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
  8118ec:	08130b00 	call	8130b0 <OSDebugInit>
#endif
}
  8118f0:	e037883a 	mov	sp,fp
  8118f4:	dfc00117 	ldw	ra,4(sp)
  8118f8:	df000017 	ldw	fp,0(sp)
  8118fc:	dec00204 	addi	sp,sp,8
  811900:	f800283a 	ret

00811904 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
  811904:	defffc04 	addi	sp,sp,-16
  811908:	df000315 	stw	fp,12(sp)
  81190c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  811910:	e03fff15 	stw	zero,-4(fp)
#endif

    if (OSRunning == OS_TRUE) {
  811914:	d0a75943 	ldbu	r2,-25243(gp)
  811918:	10803fcc 	andi	r2,r2,255
  81191c:	10800058 	cmpnei	r2,r2,1
  811920:	1000131e 	bne	r2,zero,811970 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811924:	0005303a 	rdctl	r2,status
  811928:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81192c:	e0fffe17 	ldw	r3,-8(fp)
  811930:	00bfff84 	movi	r2,-2
  811934:	1884703a 	and	r2,r3,r2
  811938:	1001703a 	wrctl	status,r2
  
  return context;
  81193c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  811940:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting < 255u) {
  811944:	d0a76703 	ldbu	r2,-25188(gp)
  811948:	10803fcc 	andi	r2,r2,255
  81194c:	10803fe0 	cmpeqi	r2,r2,255
  811950:	1000031e 	bne	r2,zero,811960 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
  811954:	d0a76703 	ldbu	r2,-25188(gp)
  811958:	10800044 	addi	r2,r2,1
  81195c:	d0a76705 	stb	r2,-25188(gp)
  811960:	e0bfff17 	ldw	r2,-4(fp)
  811964:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811968:	e0bffd17 	ldw	r2,-12(fp)
  81196c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
  811970:	e037883a 	mov	sp,fp
  811974:	df000017 	ldw	fp,0(sp)
  811978:	dec00104 	addi	sp,sp,4
  81197c:	f800283a 	ret

00811980 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
  811980:	defffb04 	addi	sp,sp,-20
  811984:	dfc00415 	stw	ra,16(sp)
  811988:	df000315 	stw	fp,12(sp)
  81198c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  811990:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
  811994:	d0a75943 	ldbu	r2,-25243(gp)
  811998:	10803fcc 	andi	r2,r2,255
  81199c:	10800058 	cmpnei	r2,r2,1
  8119a0:	1000321e 	bne	r2,zero,811a6c <OSIntExit+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8119a4:	0005303a 	rdctl	r2,status
  8119a8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8119ac:	e0fffe17 	ldw	r3,-8(fp)
  8119b0:	00bfff84 	movi	r2,-2
  8119b4:	1884703a 	and	r2,r3,r2
  8119b8:	1001703a 	wrctl	status,r2
  
  return context;
  8119bc:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  8119c0:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
  8119c4:	d0a76703 	ldbu	r2,-25188(gp)
  8119c8:	10803fcc 	andi	r2,r2,255
  8119cc:	1005003a 	cmpeq	r2,r2,zero
  8119d0:	1000031e 	bne	r2,zero,8119e0 <OSIntExit+0x60>
            OSIntNesting--;
  8119d4:	d0a76703 	ldbu	r2,-25188(gp)
  8119d8:	10bfffc4 	addi	r2,r2,-1
  8119dc:	d0a76705 	stb	r2,-25188(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
  8119e0:	d0a76703 	ldbu	r2,-25188(gp)
  8119e4:	10803fcc 	andi	r2,r2,255
  8119e8:	1004c03a 	cmpne	r2,r2,zero
  8119ec:	10001b1e 	bne	r2,zero,811a5c <OSIntExit+0xdc>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
  8119f0:	d0a75903 	ldbu	r2,-25244(gp)
  8119f4:	10803fcc 	andi	r2,r2,255
  8119f8:	1004c03a 	cmpne	r2,r2,zero
  8119fc:	1000171e 	bne	r2,zero,811a5c <OSIntExit+0xdc>
                OS_SchedNew();
  811a00:	0812a9c0 	call	812a9c <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
  811a04:	d0a75b03 	ldbu	r2,-25236(gp)
  811a08:	d0e75b43 	ldbu	r3,-25235(gp)
  811a0c:	11003fcc 	andi	r4,r2,255
  811a10:	18803fcc 	andi	r2,r3,255
  811a14:	20801126 	beq	r4,r2,811a5c <OSIntExit+0xdc>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
  811a18:	d0a75b03 	ldbu	r2,-25236(gp)
  811a1c:	10803fcc 	andi	r2,r2,255
  811a20:	00c020f4 	movhi	r3,131
  811a24:	18e0e704 	addi	r3,r3,-31844
  811a28:	1085883a 	add	r2,r2,r2
  811a2c:	1085883a 	add	r2,r2,r2
  811a30:	10c5883a 	add	r2,r2,r3
  811a34:	10800017 	ldw	r2,0(r2)
  811a38:	d0a76315 	stw	r2,-25204(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
  811a3c:	d0e76317 	ldw	r3,-25204(gp)
  811a40:	18800e17 	ldw	r2,56(r3)
  811a44:	10800044 	addi	r2,r2,1
  811a48:	18800e15 	stw	r2,56(r3)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
  811a4c:	d0a75e17 	ldw	r2,-25224(gp)
  811a50:	10800044 	addi	r2,r2,1
  811a54:	d0a75e15 	stw	r2,-25224(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
  811a58:	081bcbc0 	call	81bcbc <OSCtxSw>
  811a5c:	e0bfff17 	ldw	r2,-4(fp)
  811a60:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811a64:	e0bffd17 	ldw	r2,-12(fp)
  811a68:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  811a6c:	e037883a 	mov	sp,fp
  811a70:	dfc00117 	ldw	ra,4(sp)
  811a74:	df000017 	ldw	fp,0(sp)
  811a78:	dec00204 	addi	sp,sp,8
  811a7c:	f800283a 	ret

00811a80 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
  811a80:	defffc04 	addi	sp,sp,-16
  811a84:	df000315 	stw	fp,12(sp)
  811a88:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  811a8c:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
  811a90:	d0a75943 	ldbu	r2,-25243(gp)
  811a94:	10803fcc 	andi	r2,r2,255
  811a98:	10800058 	cmpnei	r2,r2,1
  811a9c:	1000171e 	bne	r2,zero,811afc <OSSchedLock+0x7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811aa0:	0005303a 	rdctl	r2,status
  811aa4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811aa8:	e0fffe17 	ldw	r3,-8(fp)
  811aac:	00bfff84 	movi	r2,-2
  811ab0:	1884703a 	and	r2,r3,r2
  811ab4:	1001703a 	wrctl	status,r2
  
  return context;
  811ab8:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  811abc:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
  811ac0:	d0a76703 	ldbu	r2,-25188(gp)
  811ac4:	10803fcc 	andi	r2,r2,255
  811ac8:	1004c03a 	cmpne	r2,r2,zero
  811acc:	1000071e 	bne	r2,zero,811aec <OSSchedLock+0x6c>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
  811ad0:	d0a75903 	ldbu	r2,-25244(gp)
  811ad4:	10803fcc 	andi	r2,r2,255
  811ad8:	10803fe0 	cmpeqi	r2,r2,255
  811adc:	1000031e 	bne	r2,zero,811aec <OSSchedLock+0x6c>
                OSLockNesting++;                 /* Increment lock nesting level                       */
  811ae0:	d0a75903 	ldbu	r2,-25244(gp)
  811ae4:	10800044 	addi	r2,r2,1
  811ae8:	d0a75905 	stb	r2,-25244(gp)
  811aec:	e0bfff17 	ldw	r2,-4(fp)
  811af0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811af4:	e0bffd17 	ldw	r2,-12(fp)
  811af8:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  811afc:	e037883a 	mov	sp,fp
  811b00:	df000017 	ldw	fp,0(sp)
  811b04:	dec00104 	addi	sp,sp,4
  811b08:	f800283a 	ret

00811b0c <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
  811b0c:	defff804 	addi	sp,sp,-32
  811b10:	dfc00715 	stw	ra,28(sp)
  811b14:	df000615 	stw	fp,24(sp)
  811b18:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  811b1c:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
  811b20:	d0a75943 	ldbu	r2,-25243(gp)
  811b24:	10803fcc 	andi	r2,r2,255
  811b28:	10800058 	cmpnei	r2,r2,1
  811b2c:	10002b1e 	bne	r2,zero,811bdc <OSSchedUnlock+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811b30:	0005303a 	rdctl	r2,status
  811b34:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811b38:	e0fffe17 	ldw	r3,-8(fp)
  811b3c:	00bfff84 	movi	r2,-2
  811b40:	1884703a 	and	r2,r3,r2
  811b44:	1001703a 	wrctl	status,r2
  
  return context;
  811b48:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  811b4c:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
  811b50:	d0a75903 	ldbu	r2,-25244(gp)
  811b54:	10803fcc 	andi	r2,r2,255
  811b58:	1005003a 	cmpeq	r2,r2,zero
  811b5c:	10001b1e 	bne	r2,zero,811bcc <OSSchedUnlock+0xc0>
            OSLockNesting--;                               /* Decrement lock nesting level             */
  811b60:	d0a75903 	ldbu	r2,-25244(gp)
  811b64:	10bfffc4 	addi	r2,r2,-1
  811b68:	d0a75905 	stb	r2,-25244(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
  811b6c:	d0a75903 	ldbu	r2,-25244(gp)
  811b70:	10803fcc 	andi	r2,r2,255
  811b74:	1004c03a 	cmpne	r2,r2,zero
  811b78:	10000f1e 	bne	r2,zero,811bb8 <OSSchedUnlock+0xac>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
  811b7c:	d0a76703 	ldbu	r2,-25188(gp)
  811b80:	10803fcc 	andi	r2,r2,255
  811b84:	1004c03a 	cmpne	r2,r2,zero
  811b88:	1000061e 	bne	r2,zero,811ba4 <OSSchedUnlock+0x98>
  811b8c:	e0bfff17 	ldw	r2,-4(fp)
  811b90:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811b94:	e0bffd17 	ldw	r2,-12(fp)
  811b98:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
  811b9c:	08129c80 	call	8129c8 <OS_Sched>
  811ba0:	00000e06 	br	811bdc <OSSchedUnlock+0xd0>
  811ba4:	e0bfff17 	ldw	r2,-4(fp)
  811ba8:	e0bffc15 	stw	r2,-16(fp)
  811bac:	e0bffc17 	ldw	r2,-16(fp)
  811bb0:	1001703a 	wrctl	status,r2
  811bb4:	00000906 	br	811bdc <OSSchedUnlock+0xd0>
  811bb8:	e0bfff17 	ldw	r2,-4(fp)
  811bbc:	e0bffb15 	stw	r2,-20(fp)
  811bc0:	e0bffb17 	ldw	r2,-20(fp)
  811bc4:	1001703a 	wrctl	status,r2
  811bc8:	00000406 	br	811bdc <OSSchedUnlock+0xd0>
  811bcc:	e0bfff17 	ldw	r2,-4(fp)
  811bd0:	e0bffa15 	stw	r2,-24(fp)
  811bd4:	e0bffa17 	ldw	r2,-24(fp)
  811bd8:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
  811bdc:	e037883a 	mov	sp,fp
  811be0:	dfc00117 	ldw	ra,4(sp)
  811be4:	df000017 	ldw	fp,0(sp)
  811be8:	dec00204 	addi	sp,sp,8
  811bec:	f800283a 	ret

00811bf0 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
  811bf0:	defffe04 	addi	sp,sp,-8
  811bf4:	dfc00115 	stw	ra,4(sp)
  811bf8:	df000015 	stw	fp,0(sp)
  811bfc:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
  811c00:	d0a75943 	ldbu	r2,-25243(gp)
  811c04:	10803fcc 	andi	r2,r2,255
  811c08:	1004c03a 	cmpne	r2,r2,zero
  811c0c:	10000f1e 	bne	r2,zero,811c4c <OSStart+0x5c>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
  811c10:	0812a9c0 	call	812a9c <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
  811c14:	d0a75b03 	ldbu	r2,-25236(gp)
  811c18:	d0a75b45 	stb	r2,-25235(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
  811c1c:	d0a75b03 	ldbu	r2,-25236(gp)
  811c20:	10803fcc 	andi	r2,r2,255
  811c24:	00c020f4 	movhi	r3,131
  811c28:	18e0e704 	addi	r3,r3,-31844
  811c2c:	1085883a 	add	r2,r2,r2
  811c30:	1085883a 	add	r2,r2,r2
  811c34:	10c5883a 	add	r2,r2,r3
  811c38:	10800017 	ldw	r2,0(r2)
  811c3c:	d0a76315 	stw	r2,-25204(gp)
        OSTCBCur      = OSTCBHighRdy;
  811c40:	d0a76317 	ldw	r2,-25204(gp)
  811c44:	d0a76815 	stw	r2,-25184(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
  811c48:	081bd480 	call	81bd48 <OSStartHighRdy>
    }
}
  811c4c:	e037883a 	mov	sp,fp
  811c50:	dfc00117 	ldw	ra,4(sp)
  811c54:	df000017 	ldw	fp,0(sp)
  811c58:	dec00204 	addi	sp,sp,8
  811c5c:	f800283a 	ret

00811c60 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
  811c60:	defff904 	addi	sp,sp,-28
  811c64:	dfc00615 	stw	ra,24(sp)
  811c68:	df000515 	stw	fp,20(sp)
  811c6c:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  811c70:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
  811c74:	01000084 	movi	r4,2
  811c78:	0818cbc0 	call	818cbc <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811c7c:	0005303a 	rdctl	r2,status
  811c80:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811c84:	e0fffe17 	ldw	r3,-8(fp)
  811c88:	00bfff84 	movi	r2,-2
  811c8c:	1884703a 	and	r2,r3,r2
  811c90:	1001703a 	wrctl	status,r2
  
  return context;
  811c94:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
  811c98:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
  811c9c:	d0275a15 	stw	zero,-25240(gp)
  811ca0:	e0bfff17 	ldw	r2,-4(fp)
  811ca4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811ca8:	e0bffd17 	ldw	r2,-12(fp)
  811cac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
  811cb0:	0100fa04 	movi	r4,1000
  811cb4:	0818cbc0 	call	818cbc <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811cb8:	0005303a 	rdctl	r2,status
  811cbc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811cc0:	e0fffc17 	ldw	r3,-16(fp)
  811cc4:	00bfff84 	movi	r2,-2
  811cc8:	1884703a 	and	r2,r3,r2
  811ccc:	1001703a 	wrctl	status,r2
  
  return context;
  811cd0:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
  811cd4:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
  811cd8:	d0a75a17 	ldw	r2,-25240(gp)
  811cdc:	d0a75f15 	stw	r2,-25220(gp)
    OSStatRdy    = OS_TRUE;
  811ce0:	00800044 	movi	r2,1
  811ce4:	d0a76b05 	stb	r2,-25172(gp)
  811ce8:	e0bfff17 	ldw	r2,-4(fp)
  811cec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811cf0:	e0bffb17 	ldw	r2,-20(fp)
  811cf4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  811cf8:	e037883a 	mov	sp,fp
  811cfc:	dfc00117 	ldw	ra,4(sp)
  811d00:	df000017 	ldw	fp,0(sp)
  811d04:	dec00204 	addi	sp,sp,8
  811d08:	f800283a 	ret

00811d0c <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
  811d0c:	defff604 	addi	sp,sp,-40
  811d10:	dfc00915 	stw	ra,36(sp)
  811d14:	df000815 	stw	fp,32(sp)
  811d18:	df000804 	addi	fp,sp,32
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  811d1c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
  811d20:	081c1140 	call	81c114 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811d24:	0005303a 	rdctl	r2,status
  811d28:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811d2c:	e0fffb17 	ldw	r3,-20(fp)
  811d30:	00bfff84 	movi	r2,-2
  811d34:	1884703a 	and	r2,r3,r2
  811d38:	1001703a 	wrctl	status,r2
  
  return context;
  811d3c:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
  811d40:	e0bffc15 	stw	r2,-16(fp)
    OSTime++;
  811d44:	d0a76917 	ldw	r2,-25180(gp)
  811d48:	10800044 	addi	r2,r2,1
  811d4c:	d0a76915 	stw	r2,-25180(gp)
  811d50:	e0bffc17 	ldw	r2,-16(fp)
  811d54:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811d58:	e0bffa17 	ldw	r2,-24(fp)
  811d5c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
  811d60:	d0a75943 	ldbu	r2,-25243(gp)
  811d64:	10803fcc 	andi	r2,r2,255
  811d68:	10800058 	cmpnei	r2,r2,1
  811d6c:	1000721e 	bne	r2,zero,811f38 <OSTimeTick+0x22c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
  811d70:	d0a75d03 	ldbu	r2,-25228(gp)
  811d74:	10803fcc 	andi	r2,r2,255
  811d78:	e0bfff15 	stw	r2,-4(fp)
  811d7c:	e0ffff17 	ldw	r3,-4(fp)
  811d80:	18800060 	cmpeqi	r2,r3,1
  811d84:	10000a1e 	bne	r2,zero,811db0 <OSTimeTick+0xa4>
  811d88:	e0ffff17 	ldw	r3,-4(fp)
  811d8c:	188000a0 	cmpeqi	r2,r3,2
  811d90:	1000091e 	bne	r2,zero,811db8 <OSTimeTick+0xac>
  811d94:	e0ffff17 	ldw	r3,-4(fp)
  811d98:	1805003a 	cmpeq	r2,r3,zero
  811d9c:	1000011e 	bne	r2,zero,811da4 <OSTimeTick+0x98>
  811da0:	00000a06 	br	811dcc <OSTimeTick+0xc0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
  811da4:	00800044 	movi	r2,1
  811da8:	e0bffd05 	stb	r2,-12(fp)
                 break;
  811dac:	00000a06 	br	811dd8 <OSTimeTick+0xcc>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
  811db0:	e03ffd05 	stb	zero,-12(fp)
                 break;
  811db4:	00000806 	br	811dd8 <OSTimeTick+0xcc>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
  811db8:	00800044 	movi	r2,1
  811dbc:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
  811dc0:	00800044 	movi	r2,1
  811dc4:	d0a75d05 	stb	r2,-25228(gp)
                 break;
  811dc8:	00000306 	br	811dd8 <OSTimeTick+0xcc>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
  811dcc:	00800044 	movi	r2,1
  811dd0:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
  811dd4:	d0275d05 	stb	zero,-25228(gp)
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
  811dd8:	e0bffd03 	ldbu	r2,-12(fp)
  811ddc:	1005003a 	cmpeq	r2,r2,zero
  811de0:	1000551e 	bne	r2,zero,811f38 <OSTimeTick+0x22c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
  811de4:	d0a75c17 	ldw	r2,-25232(gp)
  811de8:	e0bffe15 	stw	r2,-8(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  811dec:	00004d06 	br	811f24 <OSTimeTick+0x218>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811df0:	0005303a 	rdctl	r2,status
  811df4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811df8:	e0fff917 	ldw	r3,-28(fp)
  811dfc:	00bfff84 	movi	r2,-2
  811e00:	1884703a 	and	r2,r3,r2
  811e04:	1001703a 	wrctl	status,r2
  
  return context;
  811e08:	e0bff917 	ldw	r2,-28(fp)
            OS_ENTER_CRITICAL();
  811e0c:	e0bffc15 	stw	r2,-16(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
  811e10:	e0bffe17 	ldw	r2,-8(fp)
  811e14:	10800b8b 	ldhu	r2,46(r2)
  811e18:	10bfffcc 	andi	r2,r2,65535
  811e1c:	1005003a 	cmpeq	r2,r2,zero
  811e20:	1000391e 	bne	r2,zero,811f08 <OSTimeTick+0x1fc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
  811e24:	e0bffe17 	ldw	r2,-8(fp)
  811e28:	10800b8b 	ldhu	r2,46(r2)
  811e2c:	10bfffc4 	addi	r2,r2,-1
  811e30:	1007883a 	mov	r3,r2
  811e34:	e0bffe17 	ldw	r2,-8(fp)
  811e38:	10c00b8d 	sth	r3,46(r2)
  811e3c:	e0bffe17 	ldw	r2,-8(fp)
  811e40:	10800b8b 	ldhu	r2,46(r2)
  811e44:	10bfffcc 	andi	r2,r2,65535
  811e48:	1004c03a 	cmpne	r2,r2,zero
  811e4c:	10002e1e 	bne	r2,zero,811f08 <OSTimeTick+0x1fc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  811e50:	e0bffe17 	ldw	r2,-8(fp)
  811e54:	10800c03 	ldbu	r2,48(r2)
  811e58:	10803fcc 	andi	r2,r2,255
  811e5c:	10800dcc 	andi	r2,r2,55
  811e60:	1005003a 	cmpeq	r2,r2,zero
  811e64:	10000b1e 	bne	r2,zero,811e94 <OSTimeTick+0x188>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
  811e68:	e0bffe17 	ldw	r2,-8(fp)
  811e6c:	10c00c03 	ldbu	r3,48(r2)
  811e70:	00bff204 	movi	r2,-56
  811e74:	1884703a 	and	r2,r3,r2
  811e78:	1007883a 	mov	r3,r2
  811e7c:	e0bffe17 	ldw	r2,-8(fp)
  811e80:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
  811e84:	e0fffe17 	ldw	r3,-8(fp)
  811e88:	00800044 	movi	r2,1
  811e8c:	18800c45 	stb	r2,49(r3)
  811e90:	00000206 	br	811e9c <OSTimeTick+0x190>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  811e94:	e0bffe17 	ldw	r2,-8(fp)
  811e98:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
  811e9c:	e0bffe17 	ldw	r2,-8(fp)
  811ea0:	10800c03 	ldbu	r2,48(r2)
  811ea4:	10803fcc 	andi	r2,r2,255
  811ea8:	1080020c 	andi	r2,r2,8
  811eac:	1004c03a 	cmpne	r2,r2,zero
  811eb0:	1000151e 	bne	r2,zero,811f08 <OSTimeTick+0x1fc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
  811eb4:	e0bffe17 	ldw	r2,-8(fp)
  811eb8:	10c00d83 	ldbu	r3,54(r2)
  811ebc:	d0a76503 	ldbu	r2,-25196(gp)
  811ec0:	1884b03a 	or	r2,r3,r2
  811ec4:	d0a76505 	stb	r2,-25196(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  811ec8:	e0bffe17 	ldw	r2,-8(fp)
  811ecc:	10800d03 	ldbu	r2,52(r2)
  811ed0:	11003fcc 	andi	r4,r2,255
  811ed4:	e0bffe17 	ldw	r2,-8(fp)
  811ed8:	10800d03 	ldbu	r2,52(r2)
  811edc:	10c03fcc 	andi	r3,r2,255
  811ee0:	d0a76544 	addi	r2,gp,-25195
  811ee4:	1885883a 	add	r2,r3,r2
  811ee8:	10c00003 	ldbu	r3,0(r2)
  811eec:	e0bffe17 	ldw	r2,-8(fp)
  811ef0:	10800d43 	ldbu	r2,53(r2)
  811ef4:	1884b03a 	or	r2,r3,r2
  811ef8:	1007883a 	mov	r3,r2
  811efc:	d0a76544 	addi	r2,gp,-25195
  811f00:	2085883a 	add	r2,r4,r2
  811f04:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
  811f08:	e0bffe17 	ldw	r2,-8(fp)
  811f0c:	10800517 	ldw	r2,20(r2)
  811f10:	e0bffe15 	stw	r2,-8(fp)
  811f14:	e0bffc17 	ldw	r2,-16(fp)
  811f18:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811f1c:	e0bff817 	ldw	r2,-32(fp)
  811f20:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  811f24:	e0bffe17 	ldw	r2,-8(fp)
  811f28:	10800c83 	ldbu	r2,50(r2)
  811f2c:	10803fcc 	andi	r2,r2,255
  811f30:	10800518 	cmpnei	r2,r2,20
  811f34:	103fae1e 	bne	r2,zero,811df0 <OSTimeTick+0xe4>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
  811f38:	e037883a 	mov	sp,fp
  811f3c:	dfc00117 	ldw	ra,4(sp)
  811f40:	df000017 	ldw	fp,0(sp)
  811f44:	dec00204 	addi	sp,sp,8
  811f48:	f800283a 	ret

00811f4c <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
  811f4c:	deffff04 	addi	sp,sp,-4
  811f50:	df000015 	stw	fp,0(sp)
  811f54:	d839883a 	mov	fp,sp
    return (OS_VERSION);
  811f58:	00804784 	movi	r2,286
}
  811f5c:	e037883a 	mov	sp,fp
  811f60:	df000017 	ldw	fp,0(sp)
  811f64:	dec00104 	addi	sp,sp,4
  811f68:	f800283a 	ret

00811f6c <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
  811f6c:	deffff04 	addi	sp,sp,-4
  811f70:	df000015 	stw	fp,0(sp)
  811f74:	d839883a 	mov	fp,sp
}
  811f78:	e037883a 	mov	sp,fp
  811f7c:	df000017 	ldw	fp,0(sp)
  811f80:	dec00104 	addi	sp,sp,4
  811f84:	f800283a 	ret

00811f88 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
  811f88:	defff804 	addi	sp,sp,-32
  811f8c:	dfc00715 	stw	ra,28(sp)
  811f90:	df000615 	stw	fp,24(sp)
  811f94:	df000604 	addi	fp,sp,24
  811f98:	e13ffc15 	stw	r4,-16(fp)
  811f9c:	e17ffd15 	stw	r5,-12(fp)
  811fa0:	e1bffe05 	stb	r6,-8(fp)
  811fa4:	e1ffff05 	stb	r7,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
  811fa8:	e0bffc17 	ldw	r2,-16(fp)
  811fac:	10800283 	ldbu	r2,10(r2)
  811fb0:	10c03fcc 	andi	r3,r2,255
  811fb4:	008020b4 	movhi	r2,130
  811fb8:	10b36004 	addi	r2,r2,-12928
  811fbc:	10c5883a 	add	r2,r2,r3
  811fc0:	10800003 	ldbu	r2,0(r2)
  811fc4:	e0bffa85 	stb	r2,-22(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
  811fc8:	e0fffa83 	ldbu	r3,-22(fp)
  811fcc:	e0bffc17 	ldw	r2,-16(fp)
  811fd0:	1885883a 	add	r2,r3,r2
  811fd4:	10800204 	addi	r2,r2,8
  811fd8:	108000c3 	ldbu	r2,3(r2)
  811fdc:	10c03fcc 	andi	r3,r2,255
  811fe0:	008020b4 	movhi	r2,130
  811fe4:	10b36004 	addi	r2,r2,-12928
  811fe8:	10c5883a 	add	r2,r2,r3
  811fec:	10800003 	ldbu	r2,0(r2)
  811ff0:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
  811ff4:	e0bffa83 	ldbu	r2,-22(fp)
  811ff8:	100490fa 	slli	r2,r2,3
  811ffc:	1007883a 	mov	r3,r2
  812000:	e0bffa43 	ldbu	r2,-23(fp)
  812004:	1885883a 	add	r2,r3,r2
  812008:	e0bffa05 	stb	r2,-24(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
  81200c:	e0bffa03 	ldbu	r2,-24(fp)
  812010:	00c020f4 	movhi	r3,131
  812014:	18e0e704 	addi	r3,r3,-31844
  812018:	1085883a 	add	r2,r2,r2
  81201c:	1085883a 	add	r2,r2,r2
  812020:	10c5883a 	add	r2,r2,r3
  812024:	10800017 	ldw	r2,0(r2)
  812028:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
  81202c:	e0bffb17 	ldw	r2,-20(fp)
  812030:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
  812034:	e0fffb17 	ldw	r3,-20(fp)
  812038:	e0bffd17 	ldw	r2,-12(fp)
  81203c:	18800915 	stw	r2,36(r3)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
  812040:	e0bffb17 	ldw	r2,-20(fp)
  812044:	10800c03 	ldbu	r2,48(r2)
  812048:	1007883a 	mov	r3,r2
  81204c:	e0bffe03 	ldbu	r2,-8(fp)
  812050:	0084303a 	nor	r2,zero,r2
  812054:	1884703a 	and	r2,r3,r2
  812058:	1007883a 	mov	r3,r2
  81205c:	e0bffb17 	ldw	r2,-20(fp)
  812060:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
  812064:	e0fffb17 	ldw	r3,-20(fp)
  812068:	e0bfff03 	ldbu	r2,-4(fp)
  81206c:	18800c45 	stb	r2,49(r3)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
  812070:	e0bffb17 	ldw	r2,-20(fp)
  812074:	10800c03 	ldbu	r2,48(r2)
  812078:	10803fcc 	andi	r2,r2,255
  81207c:	1080020c 	andi	r2,r2,8
  812080:	1004c03a 	cmpne	r2,r2,zero
  812084:	1000111e 	bne	r2,zero,8120cc <OS_EventTaskRdy+0x144>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
  812088:	e0bffb17 	ldw	r2,-20(fp)
  81208c:	10c00d83 	ldbu	r3,54(r2)
  812090:	d0a76503 	ldbu	r2,-25196(gp)
  812094:	1884b03a 	or	r2,r3,r2
  812098:	d0a76505 	stb	r2,-25196(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
  81209c:	e13ffa83 	ldbu	r4,-22(fp)
  8120a0:	e0fffa83 	ldbu	r3,-22(fp)
  8120a4:	d0a76544 	addi	r2,gp,-25195
  8120a8:	1885883a 	add	r2,r3,r2
  8120ac:	10c00003 	ldbu	r3,0(r2)
  8120b0:	e0bffb17 	ldw	r2,-20(fp)
  8120b4:	10800d43 	ldbu	r2,53(r2)
  8120b8:	1884b03a 	or	r2,r3,r2
  8120bc:	1007883a 	mov	r3,r2
  8120c0:	d0a76544 	addi	r2,gp,-25195
  8120c4:	2085883a 	add	r2,r4,r2
  8120c8:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
  8120cc:	e13ffb17 	ldw	r4,-20(fp)
  8120d0:	e17ffc17 	ldw	r5,-16(fp)
  8120d4:	08123800 	call	812380 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
  8120d8:	e0bffb17 	ldw	r2,-20(fp)
  8120dc:	10800817 	ldw	r2,32(r2)
  8120e0:	1005003a 	cmpeq	r2,r2,zero
  8120e4:	1000071e 	bne	r2,zero,812104 <OS_EventTaskRdy+0x17c>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  8120e8:	e0bffb17 	ldw	r2,-20(fp)
  8120ec:	11400817 	ldw	r5,32(r2)
  8120f0:	e13ffb17 	ldw	r4,-20(fp)
  8120f4:	08124380 	call	812438 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
  8120f8:	e0fffb17 	ldw	r3,-20(fp)
  8120fc:	e0bffc17 	ldw	r2,-16(fp)
  812100:	18800715 	stw	r2,28(r3)
    }
#endif

    return (prio);
  812104:	e0bffa03 	ldbu	r2,-24(fp)
}
  812108:	e037883a 	mov	sp,fp
  81210c:	dfc00117 	ldw	ra,4(sp)
  812110:	df000017 	ldw	fp,0(sp)
  812114:	dec00204 	addi	sp,sp,8
  812118:	f800283a 	ret

0081211c <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
  81211c:	defffd04 	addi	sp,sp,-12
  812120:	df000215 	stw	fp,8(sp)
  812124:	df000204 	addi	fp,sp,8
  812128:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
  81212c:	d0e76817 	ldw	r3,-25184(gp)
  812130:	e0bfff17 	ldw	r2,-4(fp)
  812134:	18800715 	stw	r2,28(r3)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
  812138:	d0a76817 	ldw	r2,-25184(gp)
  81213c:	10800d03 	ldbu	r2,52(r2)
  812140:	11003fcc 	andi	r4,r2,255
  812144:	d0a76817 	ldw	r2,-25184(gp)
  812148:	10800d03 	ldbu	r2,52(r2)
  81214c:	10c03fcc 	andi	r3,r2,255
  812150:	e0bfff17 	ldw	r2,-4(fp)
  812154:	1885883a 	add	r2,r3,r2
  812158:	10800204 	addi	r2,r2,8
  81215c:	10c000c3 	ldbu	r3,3(r2)
  812160:	d0a76817 	ldw	r2,-25184(gp)
  812164:	10800d43 	ldbu	r2,53(r2)
  812168:	1884b03a 	or	r2,r3,r2
  81216c:	1007883a 	mov	r3,r2
  812170:	e0bfff17 	ldw	r2,-4(fp)
  812174:	2085883a 	add	r2,r4,r2
  812178:	10800204 	addi	r2,r2,8
  81217c:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  812180:	e0bfff17 	ldw	r2,-4(fp)
  812184:	10c00283 	ldbu	r3,10(r2)
  812188:	d0a76817 	ldw	r2,-25184(gp)
  81218c:	10800d83 	ldbu	r2,54(r2)
  812190:	1884b03a 	or	r2,r3,r2
  812194:	1007883a 	mov	r3,r2
  812198:	e0bfff17 	ldw	r2,-4(fp)
  81219c:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  8121a0:	d0a76817 	ldw	r2,-25184(gp)
  8121a4:	10800d03 	ldbu	r2,52(r2)
  8121a8:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  8121ac:	e13ffe03 	ldbu	r4,-8(fp)
  8121b0:	e0fffe03 	ldbu	r3,-8(fp)
  8121b4:	d0a76544 	addi	r2,gp,-25195
  8121b8:	1885883a 	add	r2,r3,r2
  8121bc:	10800003 	ldbu	r2,0(r2)
  8121c0:	1007883a 	mov	r3,r2
  8121c4:	d0a76817 	ldw	r2,-25184(gp)
  8121c8:	10800d43 	ldbu	r2,53(r2)
  8121cc:	0084303a 	nor	r2,zero,r2
  8121d0:	1884703a 	and	r2,r3,r2
  8121d4:	1007883a 	mov	r3,r2
  8121d8:	d0a76544 	addi	r2,gp,-25195
  8121dc:	2085883a 	add	r2,r4,r2
  8121e0:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  8121e4:	e0fffe03 	ldbu	r3,-8(fp)
  8121e8:	d0a76544 	addi	r2,gp,-25195
  8121ec:	1885883a 	add	r2,r3,r2
  8121f0:	10800003 	ldbu	r2,0(r2)
  8121f4:	10803fcc 	andi	r2,r2,255
  8121f8:	1004c03a 	cmpne	r2,r2,zero
  8121fc:	1000071e 	bne	r2,zero,81221c <OS_EventTaskWait+0x100>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  812200:	d0a76817 	ldw	r2,-25184(gp)
  812204:	10800d83 	ldbu	r2,54(r2)
  812208:	0084303a 	nor	r2,zero,r2
  81220c:	1007883a 	mov	r3,r2
  812210:	d0a76503 	ldbu	r2,-25196(gp)
  812214:	1884703a 	and	r2,r3,r2
  812218:	d0a76505 	stb	r2,-25196(gp)
    }
}
  81221c:	e037883a 	mov	sp,fp
  812220:	df000017 	ldw	fp,0(sp)
  812224:	dec00104 	addi	sp,sp,4
  812228:	f800283a 	ret

0081222c <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
  81222c:	defffb04 	addi	sp,sp,-20
  812230:	df000415 	stw	fp,16(sp)
  812234:	df000404 	addi	fp,sp,16
  812238:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
  81223c:	d0a76817 	ldw	r2,-25184(gp)
  812240:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
  812244:	d0e76817 	ldw	r3,-25184(gp)
  812248:	e0bfff17 	ldw	r2,-4(fp)
  81224c:	18800815 	stw	r2,32(r3)

    pevents =  pevents_wait;
  812250:	e0bfff17 	ldw	r2,-4(fp)
  812254:	e0bffe15 	stw	r2,-8(fp)
    pevent  = *pevents;
  812258:	e0bffe17 	ldw	r2,-8(fp)
  81225c:	10800017 	ldw	r2,0(r2)
  812260:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  812264:	00002006 	br	8122e8 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
  812268:	d0a76817 	ldw	r2,-25184(gp)
  81226c:	10800d03 	ldbu	r2,52(r2)
  812270:	11003fcc 	andi	r4,r2,255
  812274:	d0a76817 	ldw	r2,-25184(gp)
  812278:	10800d03 	ldbu	r2,52(r2)
  81227c:	10c03fcc 	andi	r3,r2,255
  812280:	e0bffd17 	ldw	r2,-12(fp)
  812284:	1885883a 	add	r2,r3,r2
  812288:	10800204 	addi	r2,r2,8
  81228c:	10c000c3 	ldbu	r3,3(r2)
  812290:	d0a76817 	ldw	r2,-25184(gp)
  812294:	10800d43 	ldbu	r2,53(r2)
  812298:	1884b03a 	or	r2,r3,r2
  81229c:	1007883a 	mov	r3,r2
  8122a0:	e0bffd17 	ldw	r2,-12(fp)
  8122a4:	2085883a 	add	r2,r4,r2
  8122a8:	10800204 	addi	r2,r2,8
  8122ac:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  8122b0:	e0bffd17 	ldw	r2,-12(fp)
  8122b4:	10c00283 	ldbu	r3,10(r2)
  8122b8:	d0a76817 	ldw	r2,-25184(gp)
  8122bc:	10800d83 	ldbu	r2,54(r2)
  8122c0:	1884b03a 	or	r2,r3,r2
  8122c4:	1007883a 	mov	r3,r2
  8122c8:	e0bffd17 	ldw	r2,-12(fp)
  8122cc:	10c00285 	stb	r3,10(r2)
        pevents++;
  8122d0:	e0bffe17 	ldw	r2,-8(fp)
  8122d4:	10800104 	addi	r2,r2,4
  8122d8:	e0bffe15 	stw	r2,-8(fp)
        pevent = *pevents;
  8122dc:	e0bffe17 	ldw	r2,-8(fp)
  8122e0:	10800017 	ldw	r2,0(r2)
  8122e4:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  8122e8:	e0bffd17 	ldw	r2,-12(fp)
  8122ec:	1004c03a 	cmpne	r2,r2,zero
  8122f0:	103fdd1e 	bne	r2,zero,812268 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  8122f4:	d0a76817 	ldw	r2,-25184(gp)
  8122f8:	10800d03 	ldbu	r2,52(r2)
  8122fc:	e0bffc05 	stb	r2,-16(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  812300:	e13ffc03 	ldbu	r4,-16(fp)
  812304:	e0fffc03 	ldbu	r3,-16(fp)
  812308:	d0a76544 	addi	r2,gp,-25195
  81230c:	1885883a 	add	r2,r3,r2
  812310:	10800003 	ldbu	r2,0(r2)
  812314:	1007883a 	mov	r3,r2
  812318:	d0a76817 	ldw	r2,-25184(gp)
  81231c:	10800d43 	ldbu	r2,53(r2)
  812320:	0084303a 	nor	r2,zero,r2
  812324:	1884703a 	and	r2,r3,r2
  812328:	1007883a 	mov	r3,r2
  81232c:	d0a76544 	addi	r2,gp,-25195
  812330:	2085883a 	add	r2,r4,r2
  812334:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  812338:	e0fffc03 	ldbu	r3,-16(fp)
  81233c:	d0a76544 	addi	r2,gp,-25195
  812340:	1885883a 	add	r2,r3,r2
  812344:	10800003 	ldbu	r2,0(r2)
  812348:	10803fcc 	andi	r2,r2,255
  81234c:	1004c03a 	cmpne	r2,r2,zero
  812350:	1000071e 	bne	r2,zero,812370 <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  812354:	d0a76817 	ldw	r2,-25184(gp)
  812358:	10800d83 	ldbu	r2,54(r2)
  81235c:	0084303a 	nor	r2,zero,r2
  812360:	1007883a 	mov	r3,r2
  812364:	d0a76503 	ldbu	r2,-25196(gp)
  812368:	1884703a 	and	r2,r3,r2
  81236c:	d0a76505 	stb	r2,-25196(gp)
    }
}
  812370:	e037883a 	mov	sp,fp
  812374:	df000017 	ldw	fp,0(sp)
  812378:	dec00104 	addi	sp,sp,4
  81237c:	f800283a 	ret

00812380 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
  812380:	defffc04 	addi	sp,sp,-16
  812384:	df000315 	stw	fp,12(sp)
  812388:	df000304 	addi	fp,sp,12
  81238c:	e13ffe15 	stw	r4,-8(fp)
  812390:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
  812394:	e0bffe17 	ldw	r2,-8(fp)
  812398:	10800d03 	ldbu	r2,52(r2)
  81239c:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
  8123a0:	e13ffd03 	ldbu	r4,-12(fp)
  8123a4:	e0fffd03 	ldbu	r3,-12(fp)
  8123a8:	e0bfff17 	ldw	r2,-4(fp)
  8123ac:	1885883a 	add	r2,r3,r2
  8123b0:	10800204 	addi	r2,r2,8
  8123b4:	108000c3 	ldbu	r2,3(r2)
  8123b8:	1007883a 	mov	r3,r2
  8123bc:	e0bffe17 	ldw	r2,-8(fp)
  8123c0:	10800d43 	ldbu	r2,53(r2)
  8123c4:	0084303a 	nor	r2,zero,r2
  8123c8:	1884703a 	and	r2,r3,r2
  8123cc:	1007883a 	mov	r3,r2
  8123d0:	e0bfff17 	ldw	r2,-4(fp)
  8123d4:	2085883a 	add	r2,r4,r2
  8123d8:	10800204 	addi	r2,r2,8
  8123dc:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
  8123e0:	e0fffd03 	ldbu	r3,-12(fp)
  8123e4:	e0bfff17 	ldw	r2,-4(fp)
  8123e8:	1885883a 	add	r2,r3,r2
  8123ec:	10800204 	addi	r2,r2,8
  8123f0:	108000c3 	ldbu	r2,3(r2)
  8123f4:	10803fcc 	andi	r2,r2,255
  8123f8:	1004c03a 	cmpne	r2,r2,zero
  8123fc:	10000a1e 	bne	r2,zero,812428 <OS_EventTaskRemove+0xa8>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
  812400:	e0bfff17 	ldw	r2,-4(fp)
  812404:	10800283 	ldbu	r2,10(r2)
  812408:	1007883a 	mov	r3,r2
  81240c:	e0bffe17 	ldw	r2,-8(fp)
  812410:	10800d83 	ldbu	r2,54(r2)
  812414:	0084303a 	nor	r2,zero,r2
  812418:	1884703a 	and	r2,r3,r2
  81241c:	1007883a 	mov	r3,r2
  812420:	e0bfff17 	ldw	r2,-4(fp)
  812424:	10c00285 	stb	r3,10(r2)
    }
}
  812428:	e037883a 	mov	sp,fp
  81242c:	df000017 	ldw	fp,0(sp)
  812430:	dec00104 	addi	sp,sp,4
  812434:	f800283a 	ret

00812438 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
  812438:	defffa04 	addi	sp,sp,-24
  81243c:	df000515 	stw	fp,20(sp)
  812440:	df000504 	addi	fp,sp,20
  812444:	e13ffe15 	stw	r4,-8(fp)
  812448:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
  81244c:	e0bffe17 	ldw	r2,-8(fp)
  812450:	10800d03 	ldbu	r2,52(r2)
  812454:	e0bffb85 	stb	r2,-18(fp)
    bity    =  ptcb->OSTCBBitY;
  812458:	e0bffe17 	ldw	r2,-8(fp)
  81245c:	10800d83 	ldbu	r2,54(r2)
  812460:	e0bffb45 	stb	r2,-19(fp)
    bitx    =  ptcb->OSTCBBitX;
  812464:	e0bffe17 	ldw	r2,-8(fp)
  812468:	10800d43 	ldbu	r2,53(r2)
  81246c:	e0bffb05 	stb	r2,-20(fp)
    pevents =  pevents_multi;
  812470:	e0bfff17 	ldw	r2,-4(fp)
  812474:	e0bffd15 	stw	r2,-12(fp)
    pevent  = *pevents;
  812478:	e0bffd17 	ldw	r2,-12(fp)
  81247c:	10800017 	ldw	r2,0(r2)
  812480:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  812484:	00002606 	br	812520 <OS_EventTaskRemoveMulti+0xe8>
        pevent->OSEventTbl[y]  &= ~bitx;
  812488:	e13ffb83 	ldbu	r4,-18(fp)
  81248c:	e0fffb83 	ldbu	r3,-18(fp)
  812490:	e0bffc17 	ldw	r2,-16(fp)
  812494:	1885883a 	add	r2,r3,r2
  812498:	10800204 	addi	r2,r2,8
  81249c:	108000c3 	ldbu	r2,3(r2)
  8124a0:	1007883a 	mov	r3,r2
  8124a4:	e0bffb03 	ldbu	r2,-20(fp)
  8124a8:	0084303a 	nor	r2,zero,r2
  8124ac:	1884703a 	and	r2,r3,r2
  8124b0:	1007883a 	mov	r3,r2
  8124b4:	e0bffc17 	ldw	r2,-16(fp)
  8124b8:	2085883a 	add	r2,r4,r2
  8124bc:	10800204 	addi	r2,r2,8
  8124c0:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
  8124c4:	e0fffb83 	ldbu	r3,-18(fp)
  8124c8:	e0bffc17 	ldw	r2,-16(fp)
  8124cc:	1885883a 	add	r2,r3,r2
  8124d0:	10800204 	addi	r2,r2,8
  8124d4:	108000c3 	ldbu	r2,3(r2)
  8124d8:	10803fcc 	andi	r2,r2,255
  8124dc:	1004c03a 	cmpne	r2,r2,zero
  8124e0:	1000091e 	bne	r2,zero,812508 <OS_EventTaskRemoveMulti+0xd0>
            pevent->OSEventGrp &= ~bity;
  8124e4:	e0bffc17 	ldw	r2,-16(fp)
  8124e8:	10800283 	ldbu	r2,10(r2)
  8124ec:	1007883a 	mov	r3,r2
  8124f0:	e0bffb43 	ldbu	r2,-19(fp)
  8124f4:	0084303a 	nor	r2,zero,r2
  8124f8:	1884703a 	and	r2,r3,r2
  8124fc:	1007883a 	mov	r3,r2
  812500:	e0bffc17 	ldw	r2,-16(fp)
  812504:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
  812508:	e0bffd17 	ldw	r2,-12(fp)
  81250c:	10800104 	addi	r2,r2,4
  812510:	e0bffd15 	stw	r2,-12(fp)
        pevent = *pevents;
  812514:	e0bffd17 	ldw	r2,-12(fp)
  812518:	10800017 	ldw	r2,0(r2)
  81251c:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  812520:	e0bffc17 	ldw	r2,-16(fp)
  812524:	1004c03a 	cmpne	r2,r2,zero
  812528:	103fd71e 	bne	r2,zero,812488 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
  81252c:	e037883a 	mov	sp,fp
  812530:	df000017 	ldw	fp,0(sp)
  812534:	dec00104 	addi	sp,sp,4
  812538:	f800283a 	ret

0081253c <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
  81253c:	defffc04 	addi	sp,sp,-16
  812540:	df000315 	stw	fp,12(sp)
  812544:	df000304 	addi	fp,sp,12
  812548:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
  81254c:	e0bfff17 	ldw	r2,-4(fp)
  812550:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
  812554:	e0bfff17 	ldw	r2,-4(fp)
  812558:	108002c4 	addi	r2,r2,11
  81255c:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  812560:	e03ffd05 	stb	zero,-12(fp)
  812564:	00000806 	br	812588 <OS_EventWaitListInit+0x4c>
        *ptbl++ = 0;
  812568:	e0bffe17 	ldw	r2,-8(fp)
  81256c:	10000005 	stb	zero,0(r2)
  812570:	e0bffe17 	ldw	r2,-8(fp)
  812574:	10800044 	addi	r2,r2,1
  812578:	e0bffe15 	stw	r2,-8(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  81257c:	e0bffd03 	ldbu	r2,-12(fp)
  812580:	10800044 	addi	r2,r2,1
  812584:	e0bffd05 	stb	r2,-12(fp)
  812588:	e0bffd03 	ldbu	r2,-12(fp)
  81258c:	108000f0 	cmpltui	r2,r2,3
  812590:	103ff51e 	bne	r2,zero,812568 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
  812594:	e037883a 	mov	sp,fp
  812598:	df000017 	ldw	fp,0(sp)
  81259c:	dec00104 	addi	sp,sp,4
  8125a0:	f800283a 	ret

008125a4 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
  8125a4:	defffb04 	addi	sp,sp,-20
  8125a8:	dfc00415 	stw	ra,16(sp)
  8125ac:	df000315 	stw	fp,12(sp)
  8125b0:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
  8125b4:	010020b4 	movhi	r4,130
  8125b8:	211cd304 	addi	r4,r4,29516
  8125bc:	0142d004 	movi	r5,2880
  8125c0:	08129080 	call	812908 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
  8125c4:	008020b4 	movhi	r2,130
  8125c8:	109cd304 	addi	r2,r2,29516
  8125cc:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
  8125d0:	008020b4 	movhi	r2,130
  8125d4:	109cdf04 	addi	r2,r2,29564
  8125d8:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  8125dc:	e03fff0d 	sth	zero,-4(fp)
  8125e0:	00001306 	br	812630 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
  8125e4:	e0bffe17 	ldw	r2,-8(fp)
  8125e8:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
  8125ec:	e0fffe17 	ldw	r3,-8(fp)
  8125f0:	e0bffd17 	ldw	r2,-12(fp)
  8125f4:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
  8125f8:	e0fffe17 	ldw	r3,-8(fp)
  8125fc:	00800fc4 	movi	r2,63
  812600:	18800385 	stb	r2,14(r3)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
  812604:	e0bffe17 	ldw	r2,-8(fp)
  812608:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
  81260c:	e0bffe17 	ldw	r2,-8(fp)
  812610:	10800c04 	addi	r2,r2,48
  812614:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
  812618:	e0bffd17 	ldw	r2,-12(fp)
  81261c:	10800c04 	addi	r2,r2,48
  812620:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  812624:	e0bfff0b 	ldhu	r2,-4(fp)
  812628:	10800044 	addi	r2,r2,1
  81262c:	e0bfff0d 	sth	r2,-4(fp)
  812630:	e0bfff0b 	ldhu	r2,-4(fp)
  812634:	10800ef0 	cmpltui	r2,r2,59
  812638:	103fea1e 	bne	r2,zero,8125e4 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
  81263c:	e0bffe17 	ldw	r2,-8(fp)
  812640:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
  812644:	e0bffe17 	ldw	r2,-8(fp)
  812648:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
  81264c:	e0fffe17 	ldw	r3,-8(fp)
  812650:	00800fc4 	movi	r2,63
  812654:	18800385 	stb	r2,14(r3)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
  812658:	e0bffe17 	ldw	r2,-8(fp)
  81265c:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
  812660:	008020b4 	movhi	r2,130
  812664:	109cd304 	addi	r2,r2,29516
  812668:	d0a76615 	stw	r2,-25192(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
  81266c:	e037883a 	mov	sp,fp
  812670:	dfc00117 	ldw	ra,4(sp)
  812674:	df000017 	ldw	fp,0(sp)
  812678:	dec00204 	addi	sp,sp,8
  81267c:	f800283a 	ret

00812680 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
  812680:	deffff04 	addi	sp,sp,-4
  812684:	df000015 	stw	fp,0(sp)
  812688:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
  81268c:	d0276915 	stw	zero,-25180(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
  812690:	d0276705 	stb	zero,-25188(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
  812694:	d0275905 	stb	zero,-25244(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
  812698:	d0276145 	stb	zero,-25211(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
  81269c:	d0275945 	stb	zero,-25243(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
  8126a0:	d0275e15 	stw	zero,-25224(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
  8126a4:	d0275a15 	stw	zero,-25240(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
  8126a8:	d0276c15 	stw	zero,-25168(gp)
    OSIdleCtrMax  = 0L;
  8126ac:	d0275f15 	stw	zero,-25220(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
  8126b0:	d0276b05 	stb	zero,-25172(gp)
#endif
}
  8126b4:	e037883a 	mov	sp,fp
  8126b8:	df000017 	ldw	fp,0(sp)
  8126bc:	dec00104 	addi	sp,sp,4
  8126c0:	f800283a 	ret

008126c4 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
  8126c4:	defffd04 	addi	sp,sp,-12
  8126c8:	df000215 	stw	fp,8(sp)
  8126cc:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
  8126d0:	d0276505 	stb	zero,-25196(gp)
    prdytbl       = &OSRdyTbl[0];
  8126d4:	d0a76544 	addi	r2,gp,-25195
  8126d8:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  8126dc:	e03fff05 	stb	zero,-4(fp)
  8126e0:	00000806 	br	812704 <OS_InitRdyList+0x40>
        *prdytbl++ = 0;
  8126e4:	e0bffe17 	ldw	r2,-8(fp)
  8126e8:	10000005 	stb	zero,0(r2)
  8126ec:	e0bffe17 	ldw	r2,-8(fp)
  8126f0:	10800044 	addi	r2,r2,1
  8126f4:	e0bffe15 	stw	r2,-8(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  8126f8:	e0bfff03 	ldbu	r2,-4(fp)
  8126fc:	10800044 	addi	r2,r2,1
  812700:	e0bfff05 	stb	r2,-4(fp)
  812704:	e0bfff03 	ldbu	r2,-4(fp)
  812708:	108000f0 	cmpltui	r2,r2,3
  81270c:	103ff51e 	bne	r2,zero,8126e4 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
  812710:	d0275b45 	stb	zero,-25235(gp)
    OSPrioHighRdy = 0;
  812714:	d0275b05 	stb	zero,-25236(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
  812718:	d0276315 	stw	zero,-25204(gp)
    OSTCBCur      = (OS_TCB *)0;
  81271c:	d0276815 	stw	zero,-25184(gp)
}
  812720:	e037883a 	mov	sp,fp
  812724:	df000017 	ldw	fp,0(sp)
  812728:	dec00104 	addi	sp,sp,4
  81272c:	f800283a 	ret

00812730 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
  812730:	defff804 	addi	sp,sp,-32
  812734:	dfc00715 	stw	ra,28(sp)
  812738:	df000615 	stw	fp,24(sp)
  81273c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
  812740:	018020b4 	movhi	r6,130
  812744:	319cd204 	addi	r6,r6,29512
  812748:	00bfffd4 	movui	r2,65535
  81274c:	d8800015 	stw	r2,0(sp)
  812750:	008020b4 	movhi	r2,130
  812754:	109ad304 	addi	r2,r2,27468
  812758:	d8800115 	stw	r2,4(sp)
  81275c:	00808004 	movi	r2,512
  812760:	d8800215 	stw	r2,8(sp)
  812764:	d8000315 	stw	zero,12(sp)
  812768:	008000c4 	movi	r2,3
  81276c:	d8800415 	stw	r2,16(sp)
  812770:	01002074 	movhi	r4,129
  812774:	210af904 	addi	r4,r4,11236
  812778:	000b883a 	mov	r5,zero
  81277c:	01c00504 	movi	r7,20
  812780:	08179c40 	call	8179c4 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
  812784:	014020b4 	movhi	r5,130
  812788:	2973a004 	addi	r5,r5,-12672
  81278c:	01000504 	movi	r4,20
  812790:	e1bfff04 	addi	r6,fp,-4
  812794:	08182f80 	call	8182f8 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
  812798:	e037883a 	mov	sp,fp
  81279c:	dfc00117 	ldw	ra,4(sp)
  8127a0:	df000017 	ldw	fp,0(sp)
  8127a4:	dec00204 	addi	sp,sp,8
  8127a8:	f800283a 	ret

008127ac <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
  8127ac:	defff804 	addi	sp,sp,-32
  8127b0:	dfc00715 	stw	ra,28(sp)
  8127b4:	df000615 	stw	fp,24(sp)
  8127b8:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
  8127bc:	018020b4 	movhi	r6,130
  8127c0:	319a5a04 	addi	r6,r6,26984
  8127c4:	00bfff94 	movui	r2,65534
  8127c8:	d8800015 	stw	r2,0(sp)
  8127cc:	008020b4 	movhi	r2,130
  8127d0:	10985b04 	addi	r2,r2,24940
  8127d4:	d8800115 	stw	r2,4(sp)
  8127d8:	00808004 	movi	r2,512
  8127dc:	d8800215 	stw	r2,8(sp)
  8127e0:	d8000315 	stw	zero,12(sp)
  8127e4:	008000c4 	movi	r2,3
  8127e8:	d8800415 	stw	r2,16(sp)
  8127ec:	01002074 	movhi	r4,129
  8127f0:	210b1004 	addi	r4,r4,11328
  8127f4:	000b883a 	mov	r5,zero
  8127f8:	01c004c4 	movi	r7,19
  8127fc:	08179c40 	call	8179c4 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
  812800:	014020b4 	movhi	r5,130
  812804:	2973a404 	addi	r5,r5,-12656
  812808:	010004c4 	movi	r4,19
  81280c:	e1bfff04 	addi	r6,fp,-4
  812810:	08182f80 	call	8182f8 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
  812814:	e037883a 	mov	sp,fp
  812818:	dfc00117 	ldw	ra,4(sp)
  81281c:	df000017 	ldw	fp,0(sp)
  812820:	dec00204 	addi	sp,sp,8
  812824:	f800283a 	ret

00812828 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
  812828:	defffb04 	addi	sp,sp,-20
  81282c:	dfc00415 	stw	ra,16(sp)
  812830:	df000315 	stw	fp,12(sp)
  812834:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
  812838:	010020b4 	movhi	r4,130
  81283c:	211fa304 	addi	r4,r4,32396
  812840:	01414404 	movi	r5,1296
  812844:	08129080 	call	812908 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
  812848:	010020f4 	movhi	r4,131
  81284c:	2120e704 	addi	r4,r4,-31844
  812850:	01401504 	movi	r5,84
  812854:	08129080 	call	812908 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
  812858:	008020b4 	movhi	r2,130
  81285c:	109fa304 	addi	r2,r2,32396
  812860:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
  812864:	008020b4 	movhi	r2,130
  812868:	109fbe04 	addi	r2,r2,32504
  81286c:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  812870:	e03fff05 	stb	zero,-4(fp)
  812874:	00001106 	br	8128bc <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
  812878:	e0fffe17 	ldw	r3,-8(fp)
  81287c:	e0bffd17 	ldw	r2,-12(fp)
  812880:	18800515 	stw	r2,20(r3)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
  812884:	e0fffe17 	ldw	r3,-8(fp)
  812888:	00800fc4 	movi	r2,63
  81288c:	18801305 	stb	r2,76(r3)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  812890:	e0bffe17 	ldw	r2,-8(fp)
  812894:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
  812898:	e0bffe17 	ldw	r2,-8(fp)
  81289c:	10801b04 	addi	r2,r2,108
  8128a0:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
  8128a4:	e0bffd17 	ldw	r2,-12(fp)
  8128a8:	10801b04 	addi	r2,r2,108
  8128ac:	e0bffd15 	stw	r2,-12(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  8128b0:	e0bfff03 	ldbu	r2,-4(fp)
  8128b4:	10800044 	addi	r2,r2,1
  8128b8:	e0bfff05 	stb	r2,-4(fp)
  8128bc:	e0bfff03 	ldbu	r2,-4(fp)
  8128c0:	108002f0 	cmpltui	r2,r2,11
  8128c4:	103fec1e 	bne	r2,zero,812878 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
  8128c8:	e0bffe17 	ldw	r2,-8(fp)
  8128cc:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
  8128d0:	e0fffe17 	ldw	r3,-8(fp)
  8128d4:	00800fc4 	movi	r2,63
  8128d8:	18801305 	stb	r2,76(r3)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  8128dc:	e0bffe17 	ldw	r2,-8(fp)
  8128e0:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
  8128e4:	d0275c15 	stw	zero,-25232(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
  8128e8:	008020b4 	movhi	r2,130
  8128ec:	109fa304 	addi	r2,r2,32396
  8128f0:	d0a76015 	stw	r2,-25216(gp)
}
  8128f4:	e037883a 	mov	sp,fp
  8128f8:	dfc00117 	ldw	ra,4(sp)
  8128fc:	df000017 	ldw	fp,0(sp)
  812900:	dec00204 	addi	sp,sp,8
  812904:	f800283a 	ret

00812908 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
  812908:	defffd04 	addi	sp,sp,-12
  81290c:	df000215 	stw	fp,8(sp)
  812910:	df000204 	addi	fp,sp,8
  812914:	e13ffe15 	stw	r4,-8(fp)
  812918:	e17fff0d 	sth	r5,-4(fp)
    while (size > 0) {
  81291c:	00000806 	br	812940 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
  812920:	e0bffe17 	ldw	r2,-8(fp)
  812924:	10000005 	stb	zero,0(r2)
  812928:	e0bffe17 	ldw	r2,-8(fp)
  81292c:	10800044 	addi	r2,r2,1
  812930:	e0bffe15 	stw	r2,-8(fp)
        size--;
  812934:	e0bfff0b 	ldhu	r2,-4(fp)
  812938:	10bfffc4 	addi	r2,r2,-1
  81293c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
  812940:	e0bfff0b 	ldhu	r2,-4(fp)
  812944:	1004c03a 	cmpne	r2,r2,zero
  812948:	103ff51e 	bne	r2,zero,812920 <OS_MemClr+0x18>
        *pdest++ = (INT8U)0;
        size--;
    }
}
  81294c:	e037883a 	mov	sp,fp
  812950:	df000017 	ldw	fp,0(sp)
  812954:	dec00104 	addi	sp,sp,4
  812958:	f800283a 	ret

0081295c <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
  81295c:	defffc04 	addi	sp,sp,-16
  812960:	df000315 	stw	fp,12(sp)
  812964:	df000304 	addi	fp,sp,12
  812968:	e13ffd15 	stw	r4,-12(fp)
  81296c:	e17ffe15 	stw	r5,-8(fp)
  812970:	e1bfff0d 	sth	r6,-4(fp)
    while (size > 0) {
  812974:	00000d06 	br	8129ac <OS_MemCopy+0x50>
        *pdest++ = *psrc++;
  812978:	e0bffe17 	ldw	r2,-8(fp)
  81297c:	10c00003 	ldbu	r3,0(r2)
  812980:	e0bffd17 	ldw	r2,-12(fp)
  812984:	10c00005 	stb	r3,0(r2)
  812988:	e0bffd17 	ldw	r2,-12(fp)
  81298c:	10800044 	addi	r2,r2,1
  812990:	e0bffd15 	stw	r2,-12(fp)
  812994:	e0bffe17 	ldw	r2,-8(fp)
  812998:	10800044 	addi	r2,r2,1
  81299c:	e0bffe15 	stw	r2,-8(fp)
        size--;
  8129a0:	e0bfff0b 	ldhu	r2,-4(fp)
  8129a4:	10bfffc4 	addi	r2,r2,-1
  8129a8:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
  8129ac:	e0bfff0b 	ldhu	r2,-4(fp)
  8129b0:	1004c03a 	cmpne	r2,r2,zero
  8129b4:	103ff01e 	bne	r2,zero,812978 <OS_MemCopy+0x1c>
        *pdest++ = *psrc++;
        size--;
    }
}
  8129b8:	e037883a 	mov	sp,fp
  8129bc:	df000017 	ldw	fp,0(sp)
  8129c0:	dec00104 	addi	sp,sp,4
  8129c4:	f800283a 	ret

008129c8 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
  8129c8:	defffb04 	addi	sp,sp,-20
  8129cc:	dfc00415 	stw	ra,16(sp)
  8129d0:	df000315 	stw	fp,12(sp)
  8129d4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  8129d8:	e03fff15 	stw	zero,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8129dc:	0005303a 	rdctl	r2,status
  8129e0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8129e4:	e0fffe17 	ldw	r3,-8(fp)
  8129e8:	00bfff84 	movi	r2,-2
  8129ec:	1884703a 	and	r2,r3,r2
  8129f0:	1001703a 	wrctl	status,r2
  
  return context;
  8129f4:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
  8129f8:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
  8129fc:	d0a76703 	ldbu	r2,-25188(gp)
  812a00:	10803fcc 	andi	r2,r2,255
  812a04:	1004c03a 	cmpne	r2,r2,zero
  812a08:	10001b1e 	bne	r2,zero,812a78 <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
  812a0c:	d0a75903 	ldbu	r2,-25244(gp)
  812a10:	10803fcc 	andi	r2,r2,255
  812a14:	1004c03a 	cmpne	r2,r2,zero
  812a18:	1000171e 	bne	r2,zero,812a78 <OS_Sched+0xb0>
            OS_SchedNew();
  812a1c:	0812a9c0 	call	812a9c <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
  812a20:	d0a75b03 	ldbu	r2,-25236(gp)
  812a24:	d0e75b43 	ldbu	r3,-25235(gp)
  812a28:	11003fcc 	andi	r4,r2,255
  812a2c:	18803fcc 	andi	r2,r3,255
  812a30:	20801126 	beq	r4,r2,812a78 <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
  812a34:	d0a75b03 	ldbu	r2,-25236(gp)
  812a38:	10803fcc 	andi	r2,r2,255
  812a3c:	00c020f4 	movhi	r3,131
  812a40:	18e0e704 	addi	r3,r3,-31844
  812a44:	1085883a 	add	r2,r2,r2
  812a48:	1085883a 	add	r2,r2,r2
  812a4c:	10c5883a 	add	r2,r2,r3
  812a50:	10800017 	ldw	r2,0(r2)
  812a54:	d0a76315 	stw	r2,-25204(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
  812a58:	d0e76317 	ldw	r3,-25204(gp)
  812a5c:	18800e17 	ldw	r2,56(r3)
  812a60:	10800044 	addi	r2,r2,1
  812a64:	18800e15 	stw	r2,56(r3)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
  812a68:	d0a75e17 	ldw	r2,-25224(gp)
  812a6c:	10800044 	addi	r2,r2,1
  812a70:	d0a75e15 	stw	r2,-25224(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
  812a74:	081bcbc0 	call	81bcbc <OSCtxSw>
  812a78:	e0bfff17 	ldw	r2,-4(fp)
  812a7c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812a80:	e0bffd17 	ldw	r2,-12(fp)
  812a84:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
  812a88:	e037883a 	mov	sp,fp
  812a8c:	dfc00117 	ldw	ra,4(sp)
  812a90:	df000017 	ldw	fp,0(sp)
  812a94:	dec00204 	addi	sp,sp,8
  812a98:	f800283a 	ret

00812a9c <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
  812a9c:	defffe04 	addi	sp,sp,-8
  812aa0:	df000115 	stw	fp,4(sp)
  812aa4:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
  812aa8:	d0a76503 	ldbu	r2,-25196(gp)
  812aac:	10c03fcc 	andi	r3,r2,255
  812ab0:	008020b4 	movhi	r2,130
  812ab4:	10b36004 	addi	r2,r2,-12928
  812ab8:	10c5883a 	add	r2,r2,r3
  812abc:	10800003 	ldbu	r2,0(r2)
  812ac0:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
  812ac4:	e0bfff03 	ldbu	r2,-4(fp)
  812ac8:	100490fa 	slli	r2,r2,3
  812acc:	1009883a 	mov	r4,r2
  812ad0:	e0ffff03 	ldbu	r3,-4(fp)
  812ad4:	d0a76544 	addi	r2,gp,-25195
  812ad8:	1885883a 	add	r2,r3,r2
  812adc:	10800003 	ldbu	r2,0(r2)
  812ae0:	10c03fcc 	andi	r3,r2,255
  812ae4:	008020b4 	movhi	r2,130
  812ae8:	10b36004 	addi	r2,r2,-12928
  812aec:	10c5883a 	add	r2,r2,r3
  812af0:	10800003 	ldbu	r2,0(r2)
  812af4:	2085883a 	add	r2,r4,r2
  812af8:	d0a75b05 	stb	r2,-25236(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
  812afc:	e037883a 	mov	sp,fp
  812b00:	df000017 	ldw	fp,0(sp)
  812b04:	dec00104 	addi	sp,sp,4
  812b08:	f800283a 	ret

00812b0c <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
  812b0c:	defffc04 	addi	sp,sp,-16
  812b10:	df000315 	stw	fp,12(sp)
  812b14:	df000304 	addi	fp,sp,12
  812b18:	e13ffe15 	stw	r4,-8(fp)
  812b1c:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
  812b20:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
  812b24:	00000d06 	br	812b5c <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
  812b28:	e0bfff17 	ldw	r2,-4(fp)
  812b2c:	10c00003 	ldbu	r3,0(r2)
  812b30:	e0bffe17 	ldw	r2,-8(fp)
  812b34:	10c00005 	stb	r3,0(r2)
  812b38:	e0bffe17 	ldw	r2,-8(fp)
  812b3c:	10800044 	addi	r2,r2,1
  812b40:	e0bffe15 	stw	r2,-8(fp)
  812b44:	e0bfff17 	ldw	r2,-4(fp)
  812b48:	10800044 	addi	r2,r2,1
  812b4c:	e0bfff15 	stw	r2,-4(fp)
        len++;
  812b50:	e0bffd03 	ldbu	r2,-12(fp)
  812b54:	10800044 	addi	r2,r2,1
  812b58:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  812b5c:	e0bfff17 	ldw	r2,-4(fp)
  812b60:	10800003 	ldbu	r2,0(r2)
  812b64:	10803fcc 	andi	r2,r2,255
  812b68:	1004c03a 	cmpne	r2,r2,zero
  812b6c:	103fee1e 	bne	r2,zero,812b28 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
  812b70:	e0bffe17 	ldw	r2,-8(fp)
  812b74:	10000005 	stb	zero,0(r2)
    return (len);
  812b78:	e0bffd03 	ldbu	r2,-12(fp)
}
  812b7c:	e037883a 	mov	sp,fp
  812b80:	df000017 	ldw	fp,0(sp)
  812b84:	dec00104 	addi	sp,sp,4
  812b88:	f800283a 	ret

00812b8c <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
  812b8c:	defffd04 	addi	sp,sp,-12
  812b90:	df000215 	stw	fp,8(sp)
  812b94:	df000204 	addi	fp,sp,8
  812b98:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
  812b9c:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
  812ba0:	00000606 	br	812bbc <OS_StrLen+0x30>
        psrc++;
  812ba4:	e0bfff17 	ldw	r2,-4(fp)
  812ba8:	10800044 	addi	r2,r2,1
  812bac:	e0bfff15 	stw	r2,-4(fp)
        len++;
  812bb0:	e0bffe03 	ldbu	r2,-8(fp)
  812bb4:	10800044 	addi	r2,r2,1
  812bb8:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  812bbc:	e0bfff17 	ldw	r2,-4(fp)
  812bc0:	10800003 	ldbu	r2,0(r2)
  812bc4:	10803fcc 	andi	r2,r2,255
  812bc8:	1004c03a 	cmpne	r2,r2,zero
  812bcc:	103ff51e 	bne	r2,zero,812ba4 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
  812bd0:	e0bffe03 	ldbu	r2,-8(fp)
}
  812bd4:	e037883a 	mov	sp,fp
  812bd8:	df000017 	ldw	fp,0(sp)
  812bdc:	dec00104 	addi	sp,sp,4
  812be0:	f800283a 	ret

00812be4 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
  812be4:	defffa04 	addi	sp,sp,-24
  812be8:	dfc00515 	stw	ra,20(sp)
  812bec:	df000415 	stw	fp,16(sp)
  812bf0:	df000404 	addi	fp,sp,16
  812bf4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  812bf8:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812bfc:	0005303a 	rdctl	r2,status
  812c00:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812c04:	e0fffd17 	ldw	r3,-12(fp)
  812c08:	00bfff84 	movi	r2,-2
  812c0c:	1884703a 	and	r2,r3,r2
  812c10:	1001703a 	wrctl	status,r2
  
  return context;
  812c14:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
  812c18:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtr++;
  812c1c:	d0a75a17 	ldw	r2,-25240(gp)
  812c20:	10800044 	addi	r2,r2,1
  812c24:	d0a75a15 	stw	r2,-25240(gp)
  812c28:	e0bffe17 	ldw	r2,-8(fp)
  812c2c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812c30:	e0bffc17 	ldw	r2,-16(fp)
  812c34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
  812c38:	081c1680 	call	81c168 <OSTaskIdleHook>
    }
  812c3c:	003fef06 	br	812bfc <OS_TaskIdle+0x18>

00812c40 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
  812c40:	defffa04 	addi	sp,sp,-24
  812c44:	dfc00515 	stw	ra,20(sp)
  812c48:	df000415 	stw	fp,16(sp)
  812c4c:	df000404 	addi	fp,sp,16
  812c50:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  812c54:	e03ffe15 	stw	zero,-8(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  812c58:	00000206 	br	812c64 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
  812c5c:	0101f404 	movi	r4,2000
  812c60:	0818cbc0 	call	818cbc <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  812c64:	d0a76b03 	ldbu	r2,-25172(gp)
  812c68:	10803fcc 	andi	r2,r2,255
  812c6c:	1005003a 	cmpeq	r2,r2,zero
  812c70:	103ffa1e 	bne	r2,zero,812c5c <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
  812c74:	d1275f17 	ldw	r4,-25220(gp)
  812c78:	01401904 	movi	r5,100
  812c7c:	08074580 	call	807458 <__udivsi3>
  812c80:	d0a75f15 	stw	r2,-25220(gp)
    if (OSIdleCtrMax == 0L) {
  812c84:	d0a75f17 	ldw	r2,-25220(gp)
  812c88:	1004c03a 	cmpne	r2,r2,zero
  812c8c:	1000031e 	bne	r2,zero,812c9c <OS_TaskStat+0x5c>
        OSCPUUsage = 0;
  812c90:	d0276105 	stb	zero,-25212(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
  812c94:	01003fc4 	movi	r4,255
  812c98:	08188d00 	call	8188d0 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812c9c:	0005303a 	rdctl	r2,status
  812ca0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812ca4:	e0fffd17 	ldw	r3,-12(fp)
  812ca8:	00bfff84 	movi	r2,-2
  812cac:	1884703a 	and	r2,r3,r2
  812cb0:	1001703a 	wrctl	status,r2
  
  return context;
  812cb4:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
  812cb8:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
  812cbc:	d0a75a17 	ldw	r2,-25240(gp)
  812cc0:	d0a76c15 	stw	r2,-25168(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
  812cc4:	d0275a15 	stw	zero,-25240(gp)
  812cc8:	e0bffe17 	ldw	r2,-8(fp)
  812ccc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812cd0:	e0bffc17 	ldw	r2,-16(fp)
  812cd4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
  812cd8:	d1276c17 	ldw	r4,-25168(gp)
  812cdc:	d1675f17 	ldw	r5,-25220(gp)
  812ce0:	08074580 	call	807458 <__udivsi3>
  812ce4:	1007883a 	mov	r3,r2
  812ce8:	00801904 	movi	r2,100
  812cec:	10c5c83a 	sub	r2,r2,r3
  812cf0:	d0a76105 	stb	r2,-25212(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
  812cf4:	081c0f80 	call	81c0f8 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
  812cf8:	0812d080 	call	812d08 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
  812cfc:	0100fa04 	movi	r4,1000
  812d00:	0818cbc0 	call	818cbc <OSTimeDly>
    }
  812d04:	003fe506 	br	812c9c <OS_TaskStat+0x5c>

00812d08 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
  812d08:	defffa04 	addi	sp,sp,-24
  812d0c:	dfc00515 	stw	ra,20(sp)
  812d10:	df000415 	stw	fp,16(sp)
  812d14:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  812d18:	e03ffc05 	stb	zero,-16(fp)
  812d1c:	00002406 	br	812db0 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
  812d20:	e13ffc03 	ldbu	r4,-16(fp)
  812d24:	e17ffe04 	addi	r5,fp,-8
  812d28:	08186d40 	call	8186d4 <OSTaskStkChk>
  812d2c:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
  812d30:	e0bffc43 	ldbu	r2,-15(fp)
  812d34:	1004c03a 	cmpne	r2,r2,zero
  812d38:	10001a1e 	bne	r2,zero,812da4 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
  812d3c:	e0bffc03 	ldbu	r2,-16(fp)
  812d40:	00c020f4 	movhi	r3,131
  812d44:	18e0e704 	addi	r3,r3,-31844
  812d48:	1085883a 	add	r2,r2,r2
  812d4c:	1085883a 	add	r2,r2,r2
  812d50:	10c5883a 	add	r2,r2,r3
  812d54:	10800017 	ldw	r2,0(r2)
  812d58:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
  812d5c:	e0bffd17 	ldw	r2,-12(fp)
  812d60:	1005003a 	cmpeq	r2,r2,zero
  812d64:	10000f1e 	bne	r2,zero,812da4 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
  812d68:	e0bffd17 	ldw	r2,-12(fp)
  812d6c:	10800060 	cmpeqi	r2,r2,1
  812d70:	10000c1e 	bne	r2,zero,812da4 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
  812d74:	e0bffd17 	ldw	r2,-12(fp)
  812d78:	10c00217 	ldw	r3,8(r2)
  812d7c:	e0bffd17 	ldw	r2,-12(fp)
  812d80:	10800317 	ldw	r2,12(r2)
  812d84:	1085883a 	add	r2,r2,r2
  812d88:	1085883a 	add	r2,r2,r2
  812d8c:	1887883a 	add	r3,r3,r2
  812d90:	e0bffd17 	ldw	r2,-12(fp)
  812d94:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
  812d98:	e0ffff17 	ldw	r3,-4(fp)
  812d9c:	e0bffd17 	ldw	r2,-12(fp)
  812da0:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  812da4:	e0bffc03 	ldbu	r2,-16(fp)
  812da8:	10800044 	addi	r2,r2,1
  812dac:	e0bffc05 	stb	r2,-16(fp)
  812db0:	e0bffc03 	ldbu	r2,-16(fp)
  812db4:	10800570 	cmpltui	r2,r2,21
  812db8:	103fd91e 	bne	r2,zero,812d20 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
  812dbc:	e037883a 	mov	sp,fp
  812dc0:	dfc00117 	ldw	ra,4(sp)
  812dc4:	df000017 	ldw	fp,0(sp)
  812dc8:	dec00204 	addi	sp,sp,8
  812dcc:	f800283a 	ret

00812dd0 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
  812dd0:	defff104 	addi	sp,sp,-60
  812dd4:	dfc00e15 	stw	ra,56(sp)
  812dd8:	df000d15 	stw	fp,52(sp)
  812ddc:	df000d04 	addi	fp,sp,52
  812de0:	e17ffb15 	stw	r5,-20(fp)
  812de4:	e1bffc15 	stw	r6,-16(fp)
  812de8:	e0800417 	ldw	r2,16(fp)
  812dec:	e13ffa05 	stb	r4,-24(fp)
  812df0:	e1fffd0d 	sth	r7,-12(fp)
  812df4:	e0bffe0d 	sth	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  812df8:	e03ff815 	stw	zero,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812dfc:	0005303a 	rdctl	r2,status
  812e00:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812e04:	e0fff717 	ldw	r3,-36(fp)
  812e08:	00bfff84 	movi	r2,-2
  812e0c:	1884703a 	and	r2,r3,r2
  812e10:	1001703a 	wrctl	status,r2
  
  return context;
  812e14:	e0bff717 	ldw	r2,-36(fp)
#endif



    OS_ENTER_CRITICAL();
  812e18:	e0bff815 	stw	r2,-32(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
  812e1c:	d0a76017 	ldw	r2,-25216(gp)
  812e20:	e0bff915 	stw	r2,-28(fp)
    if (ptcb != (OS_TCB *)0) {
  812e24:	e0bff917 	ldw	r2,-28(fp)
  812e28:	1005003a 	cmpeq	r2,r2,zero
  812e2c:	1000941e 	bne	r2,zero,813080 <OS_TCBInit+0x2b0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
  812e30:	e0bff917 	ldw	r2,-28(fp)
  812e34:	10800517 	ldw	r2,20(r2)
  812e38:	d0a76015 	stw	r2,-25216(gp)
  812e3c:	e0bff817 	ldw	r2,-32(fp)
  812e40:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812e44:	e0bff617 	ldw	r2,-40(fp)
  812e48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
  812e4c:	e0fff917 	ldw	r3,-28(fp)
  812e50:	e0bffb17 	ldw	r2,-20(fp)
  812e54:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
  812e58:	e0fff917 	ldw	r3,-28(fp)
  812e5c:	e0bffa03 	ldbu	r2,-24(fp)
  812e60:	18800c85 	stb	r2,50(r3)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
  812e64:	e0bff917 	ldw	r2,-28(fp)
  812e68:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
  812e6c:	e0bff917 	ldw	r2,-28(fp)
  812e70:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
  812e74:	e0bff917 	ldw	r2,-28(fp)
  812e78:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
  812e7c:	e0fff917 	ldw	r3,-28(fp)
  812e80:	e0800317 	ldw	r2,12(fp)
  812e84:	18800115 	stw	r2,4(r3)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
  812e88:	e0fff917 	ldw	r3,-28(fp)
  812e8c:	e0800217 	ldw	r2,8(fp)
  812e90:	18800315 	stw	r2,12(r3)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
  812e94:	e0fff917 	ldw	r3,-28(fp)
  812e98:	e0bffc17 	ldw	r2,-16(fp)
  812e9c:	18800215 	stw	r2,8(r3)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
  812ea0:	e0fff917 	ldw	r3,-28(fp)
  812ea4:	e0bffe0b 	ldhu	r2,-8(fp)
  812ea8:	1880040d 	sth	r2,16(r3)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
  812eac:	e0fff917 	ldw	r3,-28(fp)
  812eb0:	e0bffd0b 	ldhu	r2,-12(fp)
  812eb4:	1880048d 	sth	r2,18(r3)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
  812eb8:	e0bff917 	ldw	r2,-28(fp)
  812ebc:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
  812ec0:	e0bffa03 	ldbu	r2,-24(fp)
  812ec4:	1004d0fa 	srli	r2,r2,3
  812ec8:	1007883a 	mov	r3,r2
  812ecc:	e0bff917 	ldw	r2,-28(fp)
  812ed0:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
  812ed4:	e0bffa03 	ldbu	r2,-24(fp)
  812ed8:	108001cc 	andi	r2,r2,7
  812edc:	1007883a 	mov	r3,r2
  812ee0:	e0bff917 	ldw	r2,-28(fp)
  812ee4:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
  812ee8:	e0bff917 	ldw	r2,-28(fp)
  812eec:	10800d03 	ldbu	r2,52(r2)
  812ef0:	10c03fcc 	andi	r3,r2,255
  812ef4:	00800044 	movi	r2,1
  812ef8:	10c4983a 	sll	r2,r2,r3
  812efc:	1007883a 	mov	r3,r2
  812f00:	e0bff917 	ldw	r2,-28(fp)
  812f04:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
  812f08:	e0bff917 	ldw	r2,-28(fp)
  812f0c:	10800cc3 	ldbu	r2,51(r2)
  812f10:	10c03fcc 	andi	r3,r2,255
  812f14:	00800044 	movi	r2,1
  812f18:	10c4983a 	sll	r2,r2,r3
  812f1c:	1007883a 	mov	r3,r2
  812f20:	e0bff917 	ldw	r2,-28(fp)
  812f24:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
  812f28:	e0bff917 	ldw	r2,-28(fp)
  812f2c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
  812f30:	e0bff917 	ldw	r2,-28(fp)
  812f34:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
  812f38:	e0bff917 	ldw	r2,-28(fp)
  812f3c:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
  812f40:	e0bff917 	ldw	r2,-28(fp)
  812f44:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
  812f48:	e0bff917 	ldw	r2,-28(fp)
  812f4c:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
  812f50:	e0bff917 	ldw	r2,-28(fp)
  812f54:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
  812f58:	e0bff917 	ldw	r2,-28(fp)
  812f5c:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
  812f60:	e0bff917 	ldw	r2,-28(fp)
  812f64:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
  812f68:	e0bff917 	ldw	r2,-28(fp)
  812f6c:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
  812f70:	e0fff917 	ldw	r3,-28(fp)
  812f74:	00800fc4 	movi	r2,63
  812f78:	18801305 	stb	r2,76(r3)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  812f7c:	e0bff917 	ldw	r2,-28(fp)
  812f80:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
  812f84:	e13ff917 	ldw	r4,-28(fp)
  812f88:	081c1840 	call	81c184 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
  812f8c:	e13ff917 	ldw	r4,-28(fp)
  812f90:	081c09c0 	call	81c09c <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812f94:	0005303a 	rdctl	r2,status
  812f98:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812f9c:	e0fff517 	ldw	r3,-44(fp)
  812fa0:	00bfff84 	movi	r2,-2
  812fa4:	1884703a 	and	r2,r3,r2
  812fa8:	1001703a 	wrctl	status,r2
  
  return context;
  812fac:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
  812fb0:	e0bff815 	stw	r2,-32(fp)
        OSTCBPrioTbl[prio] = ptcb;
  812fb4:	e0bffa03 	ldbu	r2,-24(fp)
  812fb8:	00c020f4 	movhi	r3,131
  812fbc:	18e0e704 	addi	r3,r3,-31844
  812fc0:	1085883a 	add	r2,r2,r2
  812fc4:	1085883a 	add	r2,r2,r2
  812fc8:	10c7883a 	add	r3,r2,r3
  812fcc:	e0bff917 	ldw	r2,-28(fp)
  812fd0:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
  812fd4:	d0e75c17 	ldw	r3,-25232(gp)
  812fd8:	e0bff917 	ldw	r2,-28(fp)
  812fdc:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
  812fe0:	e0bff917 	ldw	r2,-28(fp)
  812fe4:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
  812fe8:	d0a75c17 	ldw	r2,-25232(gp)
  812fec:	1005003a 	cmpeq	r2,r2,zero
  812ff0:	1000031e 	bne	r2,zero,813000 <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
  812ff4:	d0e75c17 	ldw	r3,-25232(gp)
  812ff8:	e0bff917 	ldw	r2,-28(fp)
  812ffc:	18800615 	stw	r2,24(r3)
        }
        OSTCBList               = ptcb;
  813000:	e0bff917 	ldw	r2,-28(fp)
  813004:	d0a75c15 	stw	r2,-25232(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
  813008:	e0bff917 	ldw	r2,-28(fp)
  81300c:	10c00d83 	ldbu	r3,54(r2)
  813010:	d0a76503 	ldbu	r2,-25196(gp)
  813014:	1884b03a 	or	r2,r3,r2
  813018:	d0a76505 	stb	r2,-25196(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  81301c:	e0bff917 	ldw	r2,-28(fp)
  813020:	10800d03 	ldbu	r2,52(r2)
  813024:	11003fcc 	andi	r4,r2,255
  813028:	e0bff917 	ldw	r2,-28(fp)
  81302c:	10800d03 	ldbu	r2,52(r2)
  813030:	10c03fcc 	andi	r3,r2,255
  813034:	d0a76544 	addi	r2,gp,-25195
  813038:	1885883a 	add	r2,r3,r2
  81303c:	10c00003 	ldbu	r3,0(r2)
  813040:	e0bff917 	ldw	r2,-28(fp)
  813044:	10800d43 	ldbu	r2,53(r2)
  813048:	1884b03a 	or	r2,r3,r2
  81304c:	1007883a 	mov	r3,r2
  813050:	d0a76544 	addi	r2,gp,-25195
  813054:	2085883a 	add	r2,r4,r2
  813058:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
  81305c:	d0a76143 	ldbu	r2,-25211(gp)
  813060:	10800044 	addi	r2,r2,1
  813064:	d0a76145 	stb	r2,-25211(gp)
  813068:	e0bff817 	ldw	r2,-32(fp)
  81306c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813070:	e0bff417 	ldw	r2,-48(fp)
  813074:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  813078:	e03fff15 	stw	zero,-4(fp)
  81307c:	00000606 	br	813098 <OS_TCBInit+0x2c8>
  813080:	e0bff817 	ldw	r2,-32(fp)
  813084:	e0bff315 	stw	r2,-52(fp)
  813088:	e0bff317 	ldw	r2,-52(fp)
  81308c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
  813090:	00801084 	movi	r2,66
  813094:	e0bfff15 	stw	r2,-4(fp)
  813098:	e0bfff17 	ldw	r2,-4(fp)
}
  81309c:	e037883a 	mov	sp,fp
  8130a0:	dfc00117 	ldw	ra,4(sp)
  8130a4:	df000017 	ldw	fp,0(sp)
  8130a8:	dec00204 	addi	sp,sp,8
  8130ac:	f800283a 	ret

008130b0 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
  8130b0:	defffe04 	addi	sp,sp,-8
  8130b4:	df000115 	stw	fp,4(sp)
  8130b8:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
  8130bc:	d0a01504 	addi	r2,gp,-32684
  8130c0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
  8130c4:	d0a01604 	addi	r2,gp,-32680
  8130c8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
  8130cc:	d0a01784 	addi	r2,gp,-32674
  8130d0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
  8130d4:	d0a01804 	addi	r2,gp,-32672
  8130d8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
  8130dc:	d0a01704 	addi	r2,gp,-32676
  8130e0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
  8130e4:	d0a01884 	addi	r2,gp,-32670
  8130e8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
  8130ec:	d0a01904 	addi	r2,gp,-32668
  8130f0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
  8130f4:	d0a01984 	addi	r2,gp,-32666
  8130f8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
  8130fc:	d0a01a04 	addi	r2,gp,-32664
  813100:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
  813104:	d0a01a84 	addi	r2,gp,-32662
  813108:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
  81310c:	d0a01b04 	addi	r2,gp,-32660
  813110:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
  813114:	d0a01b84 	addi	r2,gp,-32658
  813118:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
  81311c:	d0a01c04 	addi	r2,gp,-32656
  813120:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
  813124:	d0a01c84 	addi	r2,gp,-32654
  813128:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
  81312c:	d0a01d04 	addi	r2,gp,-32652
  813130:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
  813134:	d0a01d84 	addi	r2,gp,-32650
  813138:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
  81313c:	d0a01e04 	addi	r2,gp,-32648
  813140:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
  813144:	d0a01e84 	addi	r2,gp,-32646
  813148:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
  81314c:	d0a01f04 	addi	r2,gp,-32644
  813150:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
  813154:	d0a01f84 	addi	r2,gp,-32642
  813158:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
  81315c:	d0a02004 	addi	r2,gp,-32640
  813160:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
  813164:	d0a02084 	addi	r2,gp,-32638
  813168:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
  81316c:	d0a02104 	addi	r2,gp,-32636
  813170:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
  813174:	d0a02184 	addi	r2,gp,-32634
  813178:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
  81317c:	d0a02204 	addi	r2,gp,-32632
  813180:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
  813184:	d0a02284 	addi	r2,gp,-32630
  813188:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
  81318c:	d0a02304 	addi	r2,gp,-32628
  813190:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
  813194:	d0a02384 	addi	r2,gp,-32626
  813198:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
  81319c:	d0a02404 	addi	r2,gp,-32624
  8131a0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
  8131a4:	d0a02484 	addi	r2,gp,-32622
  8131a8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
  8131ac:	d0a02504 	addi	r2,gp,-32620
  8131b0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
  8131b4:	d0a02584 	addi	r2,gp,-32618
  8131b8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
  8131bc:	d0a02604 	addi	r2,gp,-32616
  8131c0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
  8131c4:	d0a02684 	addi	r2,gp,-32614
  8131c8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
  8131cc:	d0a02704 	addi	r2,gp,-32612
  8131d0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
  8131d4:	d0a02784 	addi	r2,gp,-32610
  8131d8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
  8131dc:	d0a02804 	addi	r2,gp,-32608
  8131e0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
  8131e4:	d0a02884 	addi	r2,gp,-32606
  8131e8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
  8131ec:	d0a02904 	addi	r2,gp,-32604
  8131f0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
  8131f4:	d0a02984 	addi	r2,gp,-32602
  8131f8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
  8131fc:	d0a02a04 	addi	r2,gp,-32600
  813200:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
  813204:	d0a02a84 	addi	r2,gp,-32598
  813208:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
  81320c:	d0a02b04 	addi	r2,gp,-32596
  813210:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
  813214:	d0a02b84 	addi	r2,gp,-32594
  813218:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
  81321c:	d0a02c04 	addi	r2,gp,-32592
  813220:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
  813224:	d0a03104 	addi	r2,gp,-32572
  813228:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
  81322c:	e037883a 	mov	sp,fp
  813230:	df000017 	ldw	fp,0(sp)
  813234:	dec00104 	addi	sp,sp,4
  813238:	f800283a 	ret

0081323c <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
  81323c:	defff104 	addi	sp,sp,-60
  813240:	df000e15 	stw	fp,56(sp)
  813244:	df000e04 	addi	fp,sp,56
  813248:	e13ffa15 	stw	r4,-24(fp)
  81324c:	e1fffd15 	stw	r7,-12(fp)
  813250:	e17ffb0d 	sth	r5,-20(fp)
  813254:	e1bffc05 	stb	r6,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  813258:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  81325c:	e0bffd17 	ldw	r2,-12(fp)
  813260:	1004c03a 	cmpne	r2,r2,zero
  813264:	1000021e 	bne	r2,zero,813270 <OSFlagAccept+0x34>
        return ((OS_FLAGS)0);
  813268:	e03fff15 	stw	zero,-4(fp)
  81326c:	0000bb06 	br	81355c <OSFlagAccept+0x320>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  813270:	e0bffa17 	ldw	r2,-24(fp)
  813274:	1004c03a 	cmpne	r2,r2,zero
  813278:	1000051e 	bne	r2,zero,813290 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  81327c:	e0fffd17 	ldw	r3,-12(fp)
  813280:	00801b84 	movi	r2,110
  813284:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  813288:	e03fff15 	stw	zero,-4(fp)
  81328c:	0000b306 	br	81355c <OSFlagAccept+0x320>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  813290:	e0bffa17 	ldw	r2,-24(fp)
  813294:	10800003 	ldbu	r2,0(r2)
  813298:	10803fcc 	andi	r2,r2,255
  81329c:	10800160 	cmpeqi	r2,r2,5
  8132a0:	1000051e 	bne	r2,zero,8132b8 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  8132a4:	e0fffd17 	ldw	r3,-12(fp)
  8132a8:	00800044 	movi	r2,1
  8132ac:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  8132b0:	e03fff15 	stw	zero,-4(fp)
  8132b4:	0000a906 	br	81355c <OSFlagAccept+0x320>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  8132b8:	e0fffc03 	ldbu	r3,-16(fp)
  8132bc:	00bfe004 	movi	r2,-128
  8132c0:	1884703a 	and	r2,r3,r2
  8132c4:	e0bff945 	stb	r2,-27(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
  8132c8:	e0bff943 	ldbu	r2,-27(fp)
  8132cc:	1005003a 	cmpeq	r2,r2,zero
  8132d0:	1000061e 	bne	r2,zero,8132ec <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
  8132d4:	e0bffc03 	ldbu	r2,-16(fp)
  8132d8:	10801fcc 	andi	r2,r2,127
  8132dc:	e0bffc05 	stb	r2,-16(fp)
        consume    = OS_TRUE;
  8132e0:	00800044 	movi	r2,1
  8132e4:	e0bff905 	stb	r2,-28(fp)
  8132e8:	00000106 	br	8132f0 <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
  8132ec:	e03ff905 	stb	zero,-28(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
  8132f0:	e0bffd17 	ldw	r2,-12(fp)
  8132f4:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8132f8:	0005303a 	rdctl	r2,status
  8132fc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813300:	e0fff717 	ldw	r3,-36(fp)
  813304:	00bfff84 	movi	r2,-2
  813308:	1884703a 	and	r2,r3,r2
  81330c:	1001703a 	wrctl	status,r2
  
  return context;
  813310:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  813314:	e0bff815 	stw	r2,-32(fp)
    switch (wait_type) {
  813318:	e0bffc03 	ldbu	r2,-16(fp)
  81331c:	e0bffe15 	stw	r2,-8(fp)
  813320:	e0fffe17 	ldw	r3,-8(fp)
  813324:	18800060 	cmpeqi	r2,r3,1
  813328:	1000651e 	bne	r2,zero,8134c0 <OSFlagAccept+0x284>
  81332c:	e0fffe17 	ldw	r3,-8(fp)
  813330:	18800088 	cmpgei	r2,r3,2
  813334:	1000041e 	bne	r2,zero,813348 <OSFlagAccept+0x10c>
  813338:	e0fffe17 	ldw	r3,-8(fp)
  81333c:	1805003a 	cmpeq	r2,r3,zero
  813340:	1000421e 	bne	r2,zero,81344c <OSFlagAccept+0x210>
  813344:	00007b06 	br	813534 <OSFlagAccept+0x2f8>
  813348:	e0fffe17 	ldw	r3,-8(fp)
  81334c:	188000a0 	cmpeqi	r2,r3,2
  813350:	1000041e 	bne	r2,zero,813364 <OSFlagAccept+0x128>
  813354:	e0fffe17 	ldw	r3,-8(fp)
  813358:	188000e0 	cmpeqi	r2,r3,3
  81335c:	10001e1e 	bne	r2,zero,8133d8 <OSFlagAccept+0x19c>
  813360:	00007406 	br	813534 <OSFlagAccept+0x2f8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  813364:	e0bffa17 	ldw	r2,-24(fp)
  813368:	10c0020b 	ldhu	r3,8(r2)
  81336c:	e0bffb0b 	ldhu	r2,-20(fp)
  813370:	1884703a 	and	r2,r3,r2
  813374:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  813378:	e0fff98b 	ldhu	r3,-26(fp)
  81337c:	e0bffb0b 	ldhu	r2,-20(fp)
  813380:	18800d1e 	bne	r3,r2,8133b8 <OSFlagAccept+0x17c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  813384:	e0bff903 	ldbu	r2,-28(fp)
  813388:	10800058 	cmpnei	r2,r2,1
  81338c:	10000d1e 	bne	r2,zero,8133c4 <OSFlagAccept+0x188>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  813390:	e0bffa17 	ldw	r2,-24(fp)
  813394:	1080020b 	ldhu	r2,8(r2)
  813398:	1007883a 	mov	r3,r2
  81339c:	e0bff98b 	ldhu	r2,-26(fp)
  8133a0:	0084303a 	nor	r2,zero,r2
  8133a4:	1884703a 	and	r2,r3,r2
  8133a8:	1007883a 	mov	r3,r2
  8133ac:	e0bffa17 	ldw	r2,-24(fp)
  8133b0:	10c0020d 	sth	r3,8(r2)
  8133b4:	00000306 	br	8133c4 <OSFlagAccept+0x188>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  8133b8:	e0fffd17 	ldw	r3,-12(fp)
  8133bc:	00801c04 	movi	r2,112
  8133c0:	18800005 	stb	r2,0(r3)
  8133c4:	e0bff817 	ldw	r2,-32(fp)
  8133c8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8133cc:	e0bff617 	ldw	r2,-40(fp)
  8133d0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  8133d4:	00005f06 	br	813554 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  8133d8:	e0bffa17 	ldw	r2,-24(fp)
  8133dc:	10c0020b 	ldhu	r3,8(r2)
  8133e0:	e0bffb0b 	ldhu	r2,-20(fp)
  8133e4:	1884703a 	and	r2,r3,r2
  8133e8:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  8133ec:	e0bff98b 	ldhu	r2,-26(fp)
  8133f0:	1005003a 	cmpeq	r2,r2,zero
  8133f4:	10000d1e 	bne	r2,zero,81342c <OSFlagAccept+0x1f0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  8133f8:	e0bff903 	ldbu	r2,-28(fp)
  8133fc:	10800058 	cmpnei	r2,r2,1
  813400:	10000d1e 	bne	r2,zero,813438 <OSFlagAccept+0x1fc>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  813404:	e0bffa17 	ldw	r2,-24(fp)
  813408:	1080020b 	ldhu	r2,8(r2)
  81340c:	1007883a 	mov	r3,r2
  813410:	e0bff98b 	ldhu	r2,-26(fp)
  813414:	0084303a 	nor	r2,zero,r2
  813418:	1884703a 	and	r2,r3,r2
  81341c:	1007883a 	mov	r3,r2
  813420:	e0bffa17 	ldw	r2,-24(fp)
  813424:	10c0020d 	sth	r3,8(r2)
  813428:	00000306 	br	813438 <OSFlagAccept+0x1fc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  81342c:	e0fffd17 	ldw	r3,-12(fp)
  813430:	00801c04 	movi	r2,112
  813434:	18800005 	stb	r2,0(r3)
  813438:	e0bff817 	ldw	r2,-32(fp)
  81343c:	e0bff515 	stw	r2,-44(fp)
  813440:	e0bff517 	ldw	r2,-44(fp)
  813444:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  813448:	00004206 	br	813554 <OSFlagAccept+0x318>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  81344c:	e0bffa17 	ldw	r2,-24(fp)
  813450:	1080020b 	ldhu	r2,8(r2)
  813454:	0084303a 	nor	r2,zero,r2
  813458:	1007883a 	mov	r3,r2
  81345c:	e0bffb0b 	ldhu	r2,-20(fp)
  813460:	1884703a 	and	r2,r3,r2
  813464:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  813468:	e0fff98b 	ldhu	r3,-26(fp)
  81346c:	e0bffb0b 	ldhu	r2,-20(fp)
  813470:	18800b1e 	bne	r3,r2,8134a0 <OSFlagAccept+0x264>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  813474:	e0bff903 	ldbu	r2,-28(fp)
  813478:	10800058 	cmpnei	r2,r2,1
  81347c:	10000b1e 	bne	r2,zero,8134ac <OSFlagAccept+0x270>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  813480:	e0bffa17 	ldw	r2,-24(fp)
  813484:	10c0020b 	ldhu	r3,8(r2)
  813488:	e0bff98b 	ldhu	r2,-26(fp)
  81348c:	1884b03a 	or	r2,r3,r2
  813490:	1007883a 	mov	r3,r2
  813494:	e0bffa17 	ldw	r2,-24(fp)
  813498:	10c0020d 	sth	r3,8(r2)
  81349c:	00000306 	br	8134ac <OSFlagAccept+0x270>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  8134a0:	e0fffd17 	ldw	r3,-12(fp)
  8134a4:	00801c04 	movi	r2,112
  8134a8:	18800005 	stb	r2,0(r3)
  8134ac:	e0bff817 	ldw	r2,-32(fp)
  8134b0:	e0bff415 	stw	r2,-48(fp)
  8134b4:	e0bff417 	ldw	r2,-48(fp)
  8134b8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  8134bc:	00002506 	br	813554 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  8134c0:	e0bffa17 	ldw	r2,-24(fp)
  8134c4:	1080020b 	ldhu	r2,8(r2)
  8134c8:	0084303a 	nor	r2,zero,r2
  8134cc:	1007883a 	mov	r3,r2
  8134d0:	e0bffb0b 	ldhu	r2,-20(fp)
  8134d4:	1884703a 	and	r2,r3,r2
  8134d8:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  8134dc:	e0bff98b 	ldhu	r2,-26(fp)
  8134e0:	1005003a 	cmpeq	r2,r2,zero
  8134e4:	10000b1e 	bne	r2,zero,813514 <OSFlagAccept+0x2d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  8134e8:	e0bff903 	ldbu	r2,-28(fp)
  8134ec:	10800058 	cmpnei	r2,r2,1
  8134f0:	10000b1e 	bne	r2,zero,813520 <OSFlagAccept+0x2e4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  8134f4:	e0bffa17 	ldw	r2,-24(fp)
  8134f8:	10c0020b 	ldhu	r3,8(r2)
  8134fc:	e0bff98b 	ldhu	r2,-26(fp)
  813500:	1884b03a 	or	r2,r3,r2
  813504:	1007883a 	mov	r3,r2
  813508:	e0bffa17 	ldw	r2,-24(fp)
  81350c:	10c0020d 	sth	r3,8(r2)
  813510:	00000306 	br	813520 <OSFlagAccept+0x2e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  813514:	e0fffd17 	ldw	r3,-12(fp)
  813518:	00801c04 	movi	r2,112
  81351c:	18800005 	stb	r2,0(r3)
  813520:	e0bff817 	ldw	r2,-32(fp)
  813524:	e0bff315 	stw	r2,-52(fp)
  813528:	e0bff317 	ldw	r2,-52(fp)
  81352c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  813530:	00000806 	br	813554 <OSFlagAccept+0x318>
  813534:	e0bff817 	ldw	r2,-32(fp)
  813538:	e0bff215 	stw	r2,-56(fp)
  81353c:	e0bff217 	ldw	r2,-56(fp)
  813540:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  813544:	e03ff98d 	sth	zero,-26(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
  813548:	e0fffd17 	ldw	r3,-12(fp)
  81354c:	00801bc4 	movi	r2,111
  813550:	18800005 	stb	r2,0(r3)
             break;
    }
    return (flags_rdy);
  813554:	e0bff98b 	ldhu	r2,-26(fp)
  813558:	e0bfff15 	stw	r2,-4(fp)
  81355c:	e0bfff17 	ldw	r2,-4(fp)
}
  813560:	e037883a 	mov	sp,fp
  813564:	df000017 	ldw	fp,0(sp)
  813568:	dec00104 	addi	sp,sp,4
  81356c:	f800283a 	ret

00813570 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
  813570:	defff704 	addi	sp,sp,-36
  813574:	df000815 	stw	fp,32(sp)
  813578:	df000804 	addi	fp,sp,32
  81357c:	e17ffe15 	stw	r5,-8(fp)
  813580:	e13ffd0d 	sth	r4,-12(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
  813584:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
  813588:	e0bffe17 	ldw	r2,-8(fp)
  81358c:	1004c03a 	cmpne	r2,r2,zero
  813590:	1000021e 	bne	r2,zero,81359c <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
  813594:	e03fff15 	stw	zero,-4(fp)
  813598:	00003f06 	br	813698 <OSFlagCreate+0x128>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
  81359c:	008020b4 	movhi	r2,130
  8135a0:	10828a04 	addi	r2,r2,2600
  8135a4:	10800003 	ldbu	r2,0(r2)
  8135a8:	10803fcc 	andi	r2,r2,255
  8135ac:	1005003a 	cmpeq	r2,r2,zero
  8135b0:	1000051e 	bne	r2,zero,8135c8 <OSFlagCreate+0x58>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
  8135b4:	e0fffe17 	ldw	r3,-8(fp)
  8135b8:	00800404 	movi	r2,16
  8135bc:	18800005 	stb	r2,0(r3)
        return ((OS_FLAG_GRP *)0);
  8135c0:	e03fff15 	stw	zero,-4(fp)
  8135c4:	00003406 	br	813698 <OSFlagCreate+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8135c8:	0005303a 	rdctl	r2,status
  8135cc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8135d0:	e0fffa17 	ldw	r3,-24(fp)
  8135d4:	00bfff84 	movi	r2,-2
  8135d8:	1884703a 	and	r2,r3,r2
  8135dc:	1001703a 	wrctl	status,r2
  
  return context;
  8135e0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  8135e4:	e0bffb15 	stw	r2,-20(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
  8135e8:	008020b4 	movhi	r2,130
  8135ec:	10828d04 	addi	r2,r2,2612
  8135f0:	10800017 	ldw	r2,0(r2)
  8135f4:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
  8135f8:	e0bffc17 	ldw	r2,-16(fp)
  8135fc:	1005003a 	cmpeq	r2,r2,zero
  813600:	10001c1e 	bne	r2,zero,813674 <OSFlagCreate+0x104>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
  813604:	008020b4 	movhi	r2,130
  813608:	10828d04 	addi	r2,r2,2612
  81360c:	10800017 	ldw	r2,0(r2)
  813610:	10800117 	ldw	r2,4(r2)
  813614:	1007883a 	mov	r3,r2
  813618:	008020b4 	movhi	r2,130
  81361c:	10828d04 	addi	r2,r2,2612
  813620:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
  813624:	e0fffc17 	ldw	r3,-16(fp)
  813628:	00800144 	movi	r2,5
  81362c:	18800005 	stb	r2,0(r3)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
  813630:	e0fffc17 	ldw	r3,-16(fp)
  813634:	e0bffd0b 	ldhu	r2,-12(fp)
  813638:	1880020d 	sth	r2,8(r3)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
  81363c:	e0bffc17 	ldw	r2,-16(fp)
  813640:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
  813644:	e0fffc17 	ldw	r3,-16(fp)
  813648:	00800fc4 	movi	r2,63
  81364c:	18800285 	stb	r2,10(r3)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  813650:	e0bffc17 	ldw	r2,-16(fp)
  813654:	100002c5 	stb	zero,11(r2)
  813658:	e0bffb17 	ldw	r2,-20(fp)
  81365c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813660:	e0bff917 	ldw	r2,-28(fp)
  813664:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
  813668:	e0bffe17 	ldw	r2,-8(fp)
  81366c:	10000005 	stb	zero,0(r2)
  813670:	00000706 	br	813690 <OSFlagCreate+0x120>
  813674:	e0bffb17 	ldw	r2,-20(fp)
  813678:	e0bff815 	stw	r2,-32(fp)
  81367c:	e0bff817 	ldw	r2,-32(fp)
  813680:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
  813684:	e0fffe17 	ldw	r3,-8(fp)
  813688:	00801c84 	movi	r2,114
  81368c:	18800005 	stb	r2,0(r3)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
  813690:	e0bffc17 	ldw	r2,-16(fp)
  813694:	e0bfff15 	stw	r2,-4(fp)
  813698:	e0bfff17 	ldw	r2,-4(fp)
}
  81369c:	e037883a 	mov	sp,fp
  8136a0:	df000017 	ldw	fp,0(sp)
  8136a4:	dec00104 	addi	sp,sp,4
  8136a8:	f800283a 	ret

008136ac <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
  8136ac:	defff004 	addi	sp,sp,-64
  8136b0:	dfc00f15 	stw	ra,60(sp)
  8136b4:	df000e15 	stw	fp,56(sp)
  8136b8:	df000e04 	addi	fp,sp,56
  8136bc:	e13ffb15 	stw	r4,-20(fp)
  8136c0:	e1bffd15 	stw	r6,-12(fp)
  8136c4:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  8136c8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  8136cc:	e0bffd17 	ldw	r2,-12(fp)
  8136d0:	1004c03a 	cmpne	r2,r2,zero
  8136d4:	1000031e 	bne	r2,zero,8136e4 <OSFlagDel+0x38>
        return (pgrp);
  8136d8:	e0bffb17 	ldw	r2,-20(fp)
  8136dc:	e0bfff15 	stw	r2,-4(fp)
  8136e0:	00009606 	br	81393c <OSFlagDel+0x290>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  8136e4:	e0bffb17 	ldw	r2,-20(fp)
  8136e8:	1004c03a 	cmpne	r2,r2,zero
  8136ec:	1000061e 	bne	r2,zero,813708 <OSFlagDel+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  8136f0:	e0fffd17 	ldw	r3,-12(fp)
  8136f4:	00801b84 	movi	r2,110
  8136f8:	18800005 	stb	r2,0(r3)
        return (pgrp);
  8136fc:	e0fffb17 	ldw	r3,-20(fp)
  813700:	e0ffff15 	stw	r3,-4(fp)
  813704:	00008d06 	br	81393c <OSFlagDel+0x290>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  813708:	008020b4 	movhi	r2,130
  81370c:	10828a04 	addi	r2,r2,2600
  813710:	10800003 	ldbu	r2,0(r2)
  813714:	10803fcc 	andi	r2,r2,255
  813718:	1005003a 	cmpeq	r2,r2,zero
  81371c:	1000061e 	bne	r2,zero,813738 <OSFlagDel+0x8c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  813720:	e0fffd17 	ldw	r3,-12(fp)
  813724:	008003c4 	movi	r2,15
  813728:	18800005 	stb	r2,0(r3)
        return (pgrp);
  81372c:	e0bffb17 	ldw	r2,-20(fp)
  813730:	e0bfff15 	stw	r2,-4(fp)
  813734:	00008106 	br	81393c <OSFlagDel+0x290>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
  813738:	e0bffb17 	ldw	r2,-20(fp)
  81373c:	10800003 	ldbu	r2,0(r2)
  813740:	10803fcc 	andi	r2,r2,255
  813744:	10800160 	cmpeqi	r2,r2,5
  813748:	1000061e 	bne	r2,zero,813764 <OSFlagDel+0xb8>
        *perr = OS_ERR_EVENT_TYPE;
  81374c:	e0fffd17 	ldw	r3,-12(fp)
  813750:	00800044 	movi	r2,1
  813754:	18800005 	stb	r2,0(r3)
        return (pgrp);
  813758:	e0fffb17 	ldw	r3,-20(fp)
  81375c:	e0ffff15 	stw	r3,-4(fp)
  813760:	00007606 	br	81393c <OSFlagDel+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813764:	0005303a 	rdctl	r2,status
  813768:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81376c:	e0fff617 	ldw	r3,-40(fp)
  813770:	00bfff84 	movi	r2,-2
  813774:	1884703a 	and	r2,r3,r2
  813778:	1001703a 	wrctl	status,r2
  
  return context;
  81377c:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
  813780:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
  813784:	e0bffb17 	ldw	r2,-20(fp)
  813788:	10800117 	ldw	r2,4(r2)
  81378c:	1005003a 	cmpeq	r2,r2,zero
  813790:	1000031e 	bne	r2,zero,8137a0 <OSFlagDel+0xf4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  813794:	00800044 	movi	r2,1
  813798:	e0bffa05 	stb	r2,-24(fp)
  81379c:	00000106 	br	8137a4 <OSFlagDel+0xf8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  8137a0:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  8137a4:	e0bffc03 	ldbu	r2,-16(fp)
  8137a8:	e0bffe15 	stw	r2,-8(fp)
  8137ac:	e0fffe17 	ldw	r3,-8(fp)
  8137b0:	1805003a 	cmpeq	r2,r3,zero
  8137b4:	1000041e 	bne	r2,zero,8137c8 <OSFlagDel+0x11c>
  8137b8:	e0fffe17 	ldw	r3,-8(fp)
  8137bc:	18800060 	cmpeqi	r2,r3,1
  8137c0:	1000281e 	bne	r2,zero,813864 <OSFlagDel+0x1b8>
  8137c4:	00005206 	br	813910 <OSFlagDel+0x264>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
  8137c8:	e0bffa03 	ldbu	r2,-24(fp)
  8137cc:	1004c03a 	cmpne	r2,r2,zero
  8137d0:	10001a1e 	bne	r2,zero,81383c <OSFlagDel+0x190>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
  8137d4:	e0fffb17 	ldw	r3,-20(fp)
  8137d8:	00800fc4 	movi	r2,63
  8137dc:	18800285 	stb	r2,10(r3)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  8137e0:	e0bffb17 	ldw	r2,-20(fp)
  8137e4:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  8137e8:	e0bffb17 	ldw	r2,-20(fp)
  8137ec:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
  8137f0:	008020b4 	movhi	r2,130
  8137f4:	10828d04 	addi	r2,r2,2612
  8137f8:	10c00017 	ldw	r3,0(r2)
  8137fc:	e0bffb17 	ldw	r2,-20(fp)
  813800:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
  813804:	e0bffb17 	ldw	r2,-20(fp)
  813808:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
  81380c:	00c020b4 	movhi	r3,130
  813810:	18c28d04 	addi	r3,r3,2612
  813814:	e0bffb17 	ldw	r2,-20(fp)
  813818:	18800015 	stw	r2,0(r3)
  81381c:	e0bff717 	ldw	r2,-36(fp)
  813820:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813824:	e0bff517 	ldw	r2,-44(fp)
  813828:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
  81382c:	e0bffd17 	ldw	r2,-12(fp)
  813830:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
  813834:	e03ff815 	stw	zero,-32(fp)
  813838:	00003e06 	br	813934 <OSFlagDel+0x288>
  81383c:	e0bff717 	ldw	r2,-36(fp)
  813840:	e0bff415 	stw	r2,-48(fp)
  813844:	e0bff417 	ldw	r2,-48(fp)
  813848:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
  81384c:	e0fffd17 	ldw	r3,-12(fp)
  813850:	00801244 	movi	r2,73
  813854:	18800005 	stb	r2,0(r3)
                 pgrp_return          = pgrp;
  813858:	e0bffb17 	ldw	r2,-20(fp)
  81385c:	e0bff815 	stw	r2,-32(fp)
             }
             break;
  813860:	00003406 	br	813934 <OSFlagDel+0x288>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  813864:	e0bffb17 	ldw	r2,-20(fp)
  813868:	10800117 	ldw	r2,4(r2)
  81386c:	e0bff915 	stw	r2,-28(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  813870:	00000606 	br	81388c <OSFlagDel+0x1e0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
  813874:	e13ff917 	ldw	r4,-28(fp)
  813878:	000b883a 	mov	r5,zero
  81387c:	08149bc0 	call	8149bc <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  813880:	e0bff917 	ldw	r2,-28(fp)
  813884:	10800017 	ldw	r2,0(r2)
  813888:	e0bff915 	stw	r2,-28(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  81388c:	e0bff917 	ldw	r2,-28(fp)
  813890:	1004c03a 	cmpne	r2,r2,zero
  813894:	103ff71e 	bne	r2,zero,813874 <OSFlagDel+0x1c8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
  813898:	e0fffb17 	ldw	r3,-20(fp)
  81389c:	00800fc4 	movi	r2,63
  8138a0:	18800285 	stb	r2,10(r3)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  8138a4:	e0bffb17 	ldw	r2,-20(fp)
  8138a8:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  8138ac:	e0bffb17 	ldw	r2,-20(fp)
  8138b0:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
  8138b4:	008020b4 	movhi	r2,130
  8138b8:	10828d04 	addi	r2,r2,2612
  8138bc:	10c00017 	ldw	r3,0(r2)
  8138c0:	e0bffb17 	ldw	r2,-20(fp)
  8138c4:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
  8138c8:	e0bffb17 	ldw	r2,-20(fp)
  8138cc:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
  8138d0:	00c020b4 	movhi	r3,130
  8138d4:	18c28d04 	addi	r3,r3,2612
  8138d8:	e0bffb17 	ldw	r2,-20(fp)
  8138dc:	18800015 	stw	r2,0(r3)
  8138e0:	e0bff717 	ldw	r2,-36(fp)
  8138e4:	e0bff315 	stw	r2,-52(fp)
  8138e8:	e0bff317 	ldw	r2,-52(fp)
  8138ec:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  8138f0:	e0bffa03 	ldbu	r2,-24(fp)
  8138f4:	10800058 	cmpnei	r2,r2,1
  8138f8:	1000011e 	bne	r2,zero,813900 <OSFlagDel+0x254>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  8138fc:	08129c80 	call	8129c8 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
  813900:	e0bffd17 	ldw	r2,-12(fp)
  813904:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
  813908:	e03ff815 	stw	zero,-32(fp)
             break;
  81390c:	00000906 	br	813934 <OSFlagDel+0x288>
  813910:	e0bff717 	ldw	r2,-36(fp)
  813914:	e0bff215 	stw	r2,-56(fp)
  813918:	e0bff217 	ldw	r2,-56(fp)
  81391c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
  813920:	e0fffd17 	ldw	r3,-12(fp)
  813924:	008001c4 	movi	r2,7
  813928:	18800005 	stb	r2,0(r3)
             pgrp_return          = pgrp;
  81392c:	e0bffb17 	ldw	r2,-20(fp)
  813930:	e0bff815 	stw	r2,-32(fp)
             break;
    }
    return (pgrp_return);
  813934:	e0bff817 	ldw	r2,-32(fp)
  813938:	e0bfff15 	stw	r2,-4(fp)
  81393c:	e0bfff17 	ldw	r2,-4(fp)
}
  813940:	e037883a 	mov	sp,fp
  813944:	dfc00117 	ldw	ra,4(sp)
  813948:	df000017 	ldw	fp,0(sp)
  81394c:	dec00204 	addi	sp,sp,8
  813950:	f800283a 	ret

00813954 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  813954:	defff504 	addi	sp,sp,-44
  813958:	dfc00a15 	stw	ra,40(sp)
  81395c:	df000915 	stw	fp,36(sp)
  813960:	df000904 	addi	fp,sp,36
  813964:	e13ffc15 	stw	r4,-16(fp)
  813968:	e17ffd15 	stw	r5,-12(fp)
  81396c:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  813970:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  813974:	e0bffe17 	ldw	r2,-8(fp)
  813978:	1004c03a 	cmpne	r2,r2,zero
  81397c:	1000021e 	bne	r2,zero,813988 <OSFlagNameGet+0x34>
        return (0);
  813980:	e03fff15 	stw	zero,-4(fp)
  813984:	00003e06 	br	813a80 <OSFlagNameGet+0x12c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  813988:	e0bffc17 	ldw	r2,-16(fp)
  81398c:	1004c03a 	cmpne	r2,r2,zero
  813990:	1000051e 	bne	r2,zero,8139a8 <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  813994:	e0fffe17 	ldw	r3,-8(fp)
  813998:	00801b84 	movi	r2,110
  81399c:	18800005 	stb	r2,0(r3)
        return (0);
  8139a0:	e03fff15 	stw	zero,-4(fp)
  8139a4:	00003606 	br	813a80 <OSFlagNameGet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  8139a8:	e0bffd17 	ldw	r2,-12(fp)
  8139ac:	1004c03a 	cmpne	r2,r2,zero
  8139b0:	1000051e 	bne	r2,zero,8139c8 <OSFlagNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  8139b4:	e0fffe17 	ldw	r3,-8(fp)
  8139b8:	00800304 	movi	r2,12
  8139bc:	18800005 	stb	r2,0(r3)
        return (0);
  8139c0:	e03fff15 	stw	zero,-4(fp)
  8139c4:	00002e06 	br	813a80 <OSFlagNameGet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  8139c8:	008020b4 	movhi	r2,130
  8139cc:	10828a04 	addi	r2,r2,2600
  8139d0:	10800003 	ldbu	r2,0(r2)
  8139d4:	10803fcc 	andi	r2,r2,255
  8139d8:	1005003a 	cmpeq	r2,r2,zero
  8139dc:	1000051e 	bne	r2,zero,8139f4 <OSFlagNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
  8139e0:	e0fffe17 	ldw	r3,-8(fp)
  8139e4:	00800444 	movi	r2,17
  8139e8:	18800005 	stb	r2,0(r3)
        return (0);
  8139ec:	e03fff15 	stw	zero,-4(fp)
  8139f0:	00002306 	br	813a80 <OSFlagNameGet+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8139f4:	0005303a 	rdctl	r2,status
  8139f8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8139fc:	e0fff917 	ldw	r3,-28(fp)
  813a00:	00bfff84 	movi	r2,-2
  813a04:	1884703a 	and	r2,r3,r2
  813a08:	1001703a 	wrctl	status,r2
  
  return context;
  813a0c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  813a10:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  813a14:	e0bffc17 	ldw	r2,-16(fp)
  813a18:	10800003 	ldbu	r2,0(r2)
  813a1c:	10803fcc 	andi	r2,r2,255
  813a20:	10800160 	cmpeqi	r2,r2,5
  813a24:	1000091e 	bne	r2,zero,813a4c <OSFlagNameGet+0xf8>
  813a28:	e0bffa17 	ldw	r2,-24(fp)
  813a2c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813a30:	e0bff817 	ldw	r2,-32(fp)
  813a34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  813a38:	e0fffe17 	ldw	r3,-8(fp)
  813a3c:	00800044 	movi	r2,1
  813a40:	18800005 	stb	r2,0(r3)
        return (0);
  813a44:	e03fff15 	stw	zero,-4(fp)
  813a48:	00000d06 	br	813a80 <OSFlagNameGet+0x12c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
  813a4c:	e0bffc17 	ldw	r2,-16(fp)
  813a50:	11400284 	addi	r5,r2,10
  813a54:	e13ffd17 	ldw	r4,-12(fp)
  813a58:	0812b0c0 	call	812b0c <OS_StrCopy>
  813a5c:	e0bffb05 	stb	r2,-20(fp)
  813a60:	e0bffa17 	ldw	r2,-24(fp)
  813a64:	e0bff715 	stw	r2,-36(fp)
  813a68:	e0bff717 	ldw	r2,-36(fp)
  813a6c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  813a70:	e0bffe17 	ldw	r2,-8(fp)
  813a74:	10000005 	stb	zero,0(r2)
    return (len);
  813a78:	e0bffb03 	ldbu	r2,-20(fp)
  813a7c:	e0bfff15 	stw	r2,-4(fp)
  813a80:	e0bfff17 	ldw	r2,-4(fp)
}
  813a84:	e037883a 	mov	sp,fp
  813a88:	dfc00117 	ldw	ra,4(sp)
  813a8c:	df000017 	ldw	fp,0(sp)
  813a90:	dec00204 	addi	sp,sp,8
  813a94:	f800283a 	ret

00813a98 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  813a98:	defff504 	addi	sp,sp,-44
  813a9c:	dfc00a15 	stw	ra,40(sp)
  813aa0:	df000915 	stw	fp,36(sp)
  813aa4:	df000904 	addi	fp,sp,36
  813aa8:	e13ffd15 	stw	r4,-12(fp)
  813aac:	e17ffe15 	stw	r5,-8(fp)
  813ab0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  813ab4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  813ab8:	e0bfff17 	ldw	r2,-4(fp)
  813abc:	1005003a 	cmpeq	r2,r2,zero
  813ac0:	1000451e 	bne	r2,zero,813bd8 <OSFlagNameSet+0x140>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  813ac4:	e0bffd17 	ldw	r2,-12(fp)
  813ac8:	1004c03a 	cmpne	r2,r2,zero
  813acc:	1000041e 	bne	r2,zero,813ae0 <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  813ad0:	e0ffff17 	ldw	r3,-4(fp)
  813ad4:	00801b84 	movi	r2,110
  813ad8:	18800005 	stb	r2,0(r3)
        return;
  813adc:	00003e06 	br	813bd8 <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  813ae0:	e0bffe17 	ldw	r2,-8(fp)
  813ae4:	1004c03a 	cmpne	r2,r2,zero
  813ae8:	1000041e 	bne	r2,zero,813afc <OSFlagNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  813aec:	e0ffff17 	ldw	r3,-4(fp)
  813af0:	00800304 	movi	r2,12
  813af4:	18800005 	stb	r2,0(r3)
        return;
  813af8:	00003706 	br	813bd8 <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  813afc:	008020b4 	movhi	r2,130
  813b00:	10828a04 	addi	r2,r2,2600
  813b04:	10800003 	ldbu	r2,0(r2)
  813b08:	10803fcc 	andi	r2,r2,255
  813b0c:	1005003a 	cmpeq	r2,r2,zero
  813b10:	1000041e 	bne	r2,zero,813b24 <OSFlagNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
  813b14:	e0ffff17 	ldw	r3,-4(fp)
  813b18:	00800484 	movi	r2,18
  813b1c:	18800005 	stb	r2,0(r3)
        return;
  813b20:	00002d06 	br	813bd8 <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813b24:	0005303a 	rdctl	r2,status
  813b28:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813b2c:	e0fffa17 	ldw	r3,-24(fp)
  813b30:	00bfff84 	movi	r2,-2
  813b34:	1884703a 	and	r2,r3,r2
  813b38:	1001703a 	wrctl	status,r2
  
  return context;
  813b3c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  813b40:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  813b44:	e0bffd17 	ldw	r2,-12(fp)
  813b48:	10800003 	ldbu	r2,0(r2)
  813b4c:	10803fcc 	andi	r2,r2,255
  813b50:	10800160 	cmpeqi	r2,r2,5
  813b54:	1000081e 	bne	r2,zero,813b78 <OSFlagNameSet+0xe0>
  813b58:	e0bffb17 	ldw	r2,-20(fp)
  813b5c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813b60:	e0bff917 	ldw	r2,-28(fp)
  813b64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  813b68:	e0ffff17 	ldw	r3,-4(fp)
  813b6c:	00800044 	movi	r2,1
  813b70:	18800005 	stb	r2,0(r3)
        return;
  813b74:	00001806 	br	813bd8 <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  813b78:	e13ffe17 	ldw	r4,-8(fp)
  813b7c:	0812b8c0 	call	812b8c <OS_StrLen>
  813b80:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
  813b84:	e0bffc03 	ldbu	r2,-16(fp)
  813b88:	10800830 	cmpltui	r2,r2,32
  813b8c:	1000081e 	bne	r2,zero,813bb0 <OSFlagNameSet+0x118>
  813b90:	e0bffb17 	ldw	r2,-20(fp)
  813b94:	e0bff815 	stw	r2,-32(fp)
  813b98:	e0bff817 	ldw	r2,-32(fp)
  813b9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
  813ba0:	e0ffff17 	ldw	r3,-4(fp)
  813ba4:	00801cc4 	movi	r2,115
  813ba8:	18800005 	stb	r2,0(r3)
        return;
  813bac:	00000a06 	br	813bd8 <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
  813bb0:	e0bffd17 	ldw	r2,-12(fp)
  813bb4:	11000284 	addi	r4,r2,10
  813bb8:	e17ffe17 	ldw	r5,-8(fp)
  813bbc:	0812b0c0 	call	812b0c <OS_StrCopy>
  813bc0:	e0bffb17 	ldw	r2,-20(fp)
  813bc4:	e0bff715 	stw	r2,-36(fp)
  813bc8:	e0bff717 	ldw	r2,-36(fp)
  813bcc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  813bd0:	e0bfff17 	ldw	r2,-4(fp)
  813bd4:	10000005 	stb	zero,0(r2)
    return;
}
  813bd8:	e037883a 	mov	sp,fp
  813bdc:	dfc00117 	ldw	ra,4(sp)
  813be0:	df000017 	ldw	fp,0(sp)
  813be4:	dec00204 	addi	sp,sp,8
  813be8:	f800283a 	ret

00813bec <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
  813bec:	deffe004 	addi	sp,sp,-128
  813bf0:	dfc01f15 	stw	ra,124(sp)
  813bf4:	df001e15 	stw	fp,120(sp)
  813bf8:	df001e04 	addi	fp,sp,120
  813bfc:	e13ff915 	stw	r4,-28(fp)
  813c00:	e17ffa0d 	sth	r5,-24(fp)
  813c04:	e1bffb05 	stb	r6,-20(fp)
  813c08:	e1fffc0d 	sth	r7,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  813c0c:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  813c10:	e0800217 	ldw	r2,8(fp)
  813c14:	1004c03a 	cmpne	r2,r2,zero
  813c18:	1000021e 	bne	r2,zero,813c24 <OSFlagPend+0x38>
        return ((OS_FLAGS)0);
  813c1c:	e03fff15 	stw	zero,-4(fp)
  813c20:	00017d06 	br	814218 <OSFlagPend+0x62c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  813c24:	e0bff917 	ldw	r2,-28(fp)
  813c28:	1004c03a 	cmpne	r2,r2,zero
  813c2c:	1000051e 	bne	r2,zero,813c44 <OSFlagPend+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  813c30:	e0c00217 	ldw	r3,8(fp)
  813c34:	00801b84 	movi	r2,110
  813c38:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  813c3c:	e03fff15 	stw	zero,-4(fp)
  813c40:	00017506 	br	814218 <OSFlagPend+0x62c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  813c44:	008020b4 	movhi	r2,130
  813c48:	10828a04 	addi	r2,r2,2600
  813c4c:	10800003 	ldbu	r2,0(r2)
  813c50:	10803fcc 	andi	r2,r2,255
  813c54:	1005003a 	cmpeq	r2,r2,zero
  813c58:	1000051e 	bne	r2,zero,813c70 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
  813c5c:	e0c00217 	ldw	r3,8(fp)
  813c60:	00800084 	movi	r2,2
  813c64:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  813c68:	e03fff15 	stw	zero,-4(fp)
  813c6c:	00016a06 	br	814218 <OSFlagPend+0x62c>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
  813c70:	008020b4 	movhi	r2,130
  813c74:	10827c04 	addi	r2,r2,2544
  813c78:	10800003 	ldbu	r2,0(r2)
  813c7c:	10803fcc 	andi	r2,r2,255
  813c80:	1005003a 	cmpeq	r2,r2,zero
  813c84:	1000051e 	bne	r2,zero,813c9c <OSFlagPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
  813c88:	e0c00217 	ldw	r3,8(fp)
  813c8c:	00800344 	movi	r2,13
  813c90:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  813c94:	e03fff15 	stw	zero,-4(fp)
  813c98:	00015f06 	br	814218 <OSFlagPend+0x62c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  813c9c:	e0bff917 	ldw	r2,-28(fp)
  813ca0:	10800003 	ldbu	r2,0(r2)
  813ca4:	10803fcc 	andi	r2,r2,255
  813ca8:	10800160 	cmpeqi	r2,r2,5
  813cac:	1000051e 	bne	r2,zero,813cc4 <OSFlagPend+0xd8>
        *perr = OS_ERR_EVENT_TYPE;
  813cb0:	e0c00217 	ldw	r3,8(fp)
  813cb4:	00800044 	movi	r2,1
  813cb8:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  813cbc:	e03fff15 	stw	zero,-4(fp)
  813cc0:	00015506 	br	814218 <OSFlagPend+0x62c>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  813cc4:	e0fffb03 	ldbu	r3,-20(fp)
  813cc8:	00bfe004 	movi	r2,-128
  813ccc:	1884703a 	and	r2,r3,r2
  813cd0:	e0bff285 	stb	r2,-54(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
  813cd4:	e0bff283 	ldbu	r2,-54(fp)
  813cd8:	1005003a 	cmpeq	r2,r2,zero
  813cdc:	1000071e 	bne	r2,zero,813cfc <OSFlagPend+0x110>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
  813ce0:	00c01fc4 	movi	r3,127
  813ce4:	e0bffb03 	ldbu	r2,-20(fp)
  813ce8:	10c4703a 	and	r2,r2,r3
  813cec:	e0bffb05 	stb	r2,-20(fp)
        consume    = OS_TRUE;
  813cf0:	00800044 	movi	r2,1
  813cf4:	e0bff205 	stb	r2,-56(fp)
  813cf8:	00000106 	br	813d00 <OSFlagPend+0x114>
    } else {
        consume    = OS_FALSE;
  813cfc:	e03ff205 	stb	zero,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813d00:	0005303a 	rdctl	r2,status
  813d04:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813d08:	e0fff017 	ldw	r3,-64(fp)
  813d0c:	00bfff84 	movi	r2,-2
  813d10:	1884703a 	and	r2,r3,r2
  813d14:	1001703a 	wrctl	status,r2
  
  return context;
  813d18:	e0bff017 	ldw	r2,-64(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  813d1c:	e0bff115 	stw	r2,-60(fp)
    switch (wait_type) {
  813d20:	e0bffb03 	ldbu	r2,-20(fp)
  813d24:	e0bffe15 	stw	r2,-8(fp)
  813d28:	e0fffe17 	ldw	r3,-8(fp)
  813d2c:	18800060 	cmpeqi	r2,r3,1
  813d30:	1000981e 	bne	r2,zero,813f94 <OSFlagPend+0x3a8>
  813d34:	e0fffe17 	ldw	r3,-8(fp)
  813d38:	18800088 	cmpgei	r2,r3,2
  813d3c:	1000041e 	bne	r2,zero,813d50 <OSFlagPend+0x164>
  813d40:	e0fffe17 	ldw	r3,-8(fp)
  813d44:	1805003a 	cmpeq	r2,r3,zero
  813d48:	1000641e 	bne	r2,zero,813edc <OSFlagPend+0x2f0>
  813d4c:	0000bf06 	br	81404c <OSFlagPend+0x460>
  813d50:	e0fffe17 	ldw	r3,-8(fp)
  813d54:	188000a0 	cmpeqi	r2,r3,2
  813d58:	1000041e 	bne	r2,zero,813d6c <OSFlagPend+0x180>
  813d5c:	e0fffe17 	ldw	r3,-8(fp)
  813d60:	188000e0 	cmpeqi	r2,r3,3
  813d64:	10002f1e 	bne	r2,zero,813e24 <OSFlagPend+0x238>
  813d68:	0000b806 	br	81404c <OSFlagPend+0x460>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
  813d6c:	e0bff917 	ldw	r2,-28(fp)
  813d70:	10c0020b 	ldhu	r3,8(r2)
  813d74:	e0bffa0b 	ldhu	r2,-24(fp)
  813d78:	1884703a 	and	r2,r3,r2
  813d7c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  813d80:	e0fff30b 	ldhu	r3,-52(fp)
  813d84:	e0bffa0b 	ldhu	r2,-24(fp)
  813d88:	18801a1e 	bne	r3,r2,813df4 <OSFlagPend+0x208>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  813d8c:	e0bff203 	ldbu	r2,-56(fp)
  813d90:	10800058 	cmpnei	r2,r2,1
  813d94:	1000091e 	bne	r2,zero,813dbc <OSFlagPend+0x1d0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  813d98:	e0bff917 	ldw	r2,-28(fp)
  813d9c:	1080020b 	ldhu	r2,8(r2)
  813da0:	1007883a 	mov	r3,r2
  813da4:	e0bff30b 	ldhu	r2,-52(fp)
  813da8:	0084303a 	nor	r2,zero,r2
  813dac:	1884703a 	and	r2,r3,r2
  813db0:	1007883a 	mov	r3,r2
  813db4:	e0bff917 	ldw	r2,-28(fp)
  813db8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  813dbc:	008020b4 	movhi	r2,130
  813dc0:	10828b04 	addi	r2,r2,2604
  813dc4:	10c00017 	ldw	r3,0(r2)
  813dc8:	e0bff30b 	ldhu	r2,-52(fp)
  813dcc:	18800b0d 	sth	r2,44(r3)
  813dd0:	e0bff117 	ldw	r2,-60(fp)
  813dd4:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813dd8:	e0bfef17 	ldw	r2,-68(fp)
  813ddc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  813de0:	e0800217 	ldw	r2,8(fp)
  813de4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  813de8:	e0bff30b 	ldhu	r2,-52(fp)
  813dec:	e0bfff15 	stw	r2,-4(fp)
  813df0:	00010906 	br	814218 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  813df4:	e1bffa0b 	ldhu	r6,-24(fp)
  813df8:	e1fffb03 	ldbu	r7,-20(fp)
  813dfc:	e0bffc0b 	ldhu	r2,-16(fp)
  813e00:	e17ff404 	addi	r5,fp,-48
  813e04:	d8800015 	stw	r2,0(sp)
  813e08:	e13ff917 	ldw	r4,-28(fp)
  813e0c:	08147140 	call	814714 <OS_FlagBlock>
  813e10:	e0bff117 	ldw	r2,-60(fp)
  813e14:	e0bfee15 	stw	r2,-72(fp)
  813e18:	e0bfee17 	ldw	r2,-72(fp)
  813e1c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  813e20:	00009506 	br	814078 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
  813e24:	e0bff917 	ldw	r2,-28(fp)
  813e28:	10c0020b 	ldhu	r3,8(r2)
  813e2c:	e0bffa0b 	ldhu	r2,-24(fp)
  813e30:	1884703a 	and	r2,r3,r2
  813e34:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  813e38:	e0bff30b 	ldhu	r2,-52(fp)
  813e3c:	1005003a 	cmpeq	r2,r2,zero
  813e40:	10001a1e 	bne	r2,zero,813eac <OSFlagPend+0x2c0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  813e44:	e0bff203 	ldbu	r2,-56(fp)
  813e48:	10800058 	cmpnei	r2,r2,1
  813e4c:	1000091e 	bne	r2,zero,813e74 <OSFlagPend+0x288>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  813e50:	e0bff917 	ldw	r2,-28(fp)
  813e54:	1080020b 	ldhu	r2,8(r2)
  813e58:	1007883a 	mov	r3,r2
  813e5c:	e0bff30b 	ldhu	r2,-52(fp)
  813e60:	0084303a 	nor	r2,zero,r2
  813e64:	1884703a 	and	r2,r3,r2
  813e68:	1007883a 	mov	r3,r2
  813e6c:	e0bff917 	ldw	r2,-28(fp)
  813e70:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  813e74:	008020b4 	movhi	r2,130
  813e78:	10828b04 	addi	r2,r2,2604
  813e7c:	10c00017 	ldw	r3,0(r2)
  813e80:	e0bff30b 	ldhu	r2,-52(fp)
  813e84:	18800b0d 	sth	r2,44(r3)
  813e88:	e0bff117 	ldw	r2,-60(fp)
  813e8c:	e0bfed15 	stw	r2,-76(fp)
  813e90:	e0bfed17 	ldw	r2,-76(fp)
  813e94:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  813e98:	e0800217 	ldw	r2,8(fp)
  813e9c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  813ea0:	e0fff30b 	ldhu	r3,-52(fp)
  813ea4:	e0ffff15 	stw	r3,-4(fp)
  813ea8:	0000db06 	br	814218 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  813eac:	e1bffa0b 	ldhu	r6,-24(fp)
  813eb0:	e1fffb03 	ldbu	r7,-20(fp)
  813eb4:	e0bffc0b 	ldhu	r2,-16(fp)
  813eb8:	e17ff404 	addi	r5,fp,-48
  813ebc:	d8800015 	stw	r2,0(sp)
  813ec0:	e13ff917 	ldw	r4,-28(fp)
  813ec4:	08147140 	call	814714 <OS_FlagBlock>
  813ec8:	e0bff117 	ldw	r2,-60(fp)
  813ecc:	e0bfec15 	stw	r2,-80(fp)
  813ed0:	e0bfec17 	ldw	r2,-80(fp)
  813ed4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  813ed8:	00006706 	br	814078 <OSFlagPend+0x48c>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  813edc:	e0bff917 	ldw	r2,-28(fp)
  813ee0:	1080020b 	ldhu	r2,8(r2)
  813ee4:	0084303a 	nor	r2,zero,r2
  813ee8:	1007883a 	mov	r3,r2
  813eec:	e0bffa0b 	ldhu	r2,-24(fp)
  813ef0:	1884703a 	and	r2,r3,r2
  813ef4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  813ef8:	e0fff30b 	ldhu	r3,-52(fp)
  813efc:	e0bffa0b 	ldhu	r2,-24(fp)
  813f00:	1880181e 	bne	r3,r2,813f64 <OSFlagPend+0x378>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  813f04:	e0bff203 	ldbu	r2,-56(fp)
  813f08:	10800058 	cmpnei	r2,r2,1
  813f0c:	1000071e 	bne	r2,zero,813f2c <OSFlagPend+0x340>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  813f10:	e0bff917 	ldw	r2,-28(fp)
  813f14:	10c0020b 	ldhu	r3,8(r2)
  813f18:	e0bff30b 	ldhu	r2,-52(fp)
  813f1c:	1884b03a 	or	r2,r3,r2
  813f20:	1007883a 	mov	r3,r2
  813f24:	e0bff917 	ldw	r2,-28(fp)
  813f28:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  813f2c:	008020b4 	movhi	r2,130
  813f30:	10828b04 	addi	r2,r2,2604
  813f34:	10c00017 	ldw	r3,0(r2)
  813f38:	e0bff30b 	ldhu	r2,-52(fp)
  813f3c:	18800b0d 	sth	r2,44(r3)
  813f40:	e0bff117 	ldw	r2,-60(fp)
  813f44:	e0bfeb15 	stw	r2,-84(fp)
  813f48:	e0bfeb17 	ldw	r2,-84(fp)
  813f4c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  813f50:	e0800217 	ldw	r2,8(fp)
  813f54:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  813f58:	e0bff30b 	ldhu	r2,-52(fp)
  813f5c:	e0bfff15 	stw	r2,-4(fp)
  813f60:	0000ad06 	br	814218 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  813f64:	e1bffa0b 	ldhu	r6,-24(fp)
  813f68:	e1fffb03 	ldbu	r7,-20(fp)
  813f6c:	e0bffc0b 	ldhu	r2,-16(fp)
  813f70:	e17ff404 	addi	r5,fp,-48
  813f74:	d8800015 	stw	r2,0(sp)
  813f78:	e13ff917 	ldw	r4,-28(fp)
  813f7c:	08147140 	call	814714 <OS_FlagBlock>
  813f80:	e0bff117 	ldw	r2,-60(fp)
  813f84:	e0bfea15 	stw	r2,-88(fp)
  813f88:	e0bfea17 	ldw	r2,-88(fp)
  813f8c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  813f90:	00003906 	br	814078 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  813f94:	e0bff917 	ldw	r2,-28(fp)
  813f98:	1080020b 	ldhu	r2,8(r2)
  813f9c:	0084303a 	nor	r2,zero,r2
  813fa0:	1007883a 	mov	r3,r2
  813fa4:	e0bffa0b 	ldhu	r2,-24(fp)
  813fa8:	1884703a 	and	r2,r3,r2
  813fac:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  813fb0:	e0bff30b 	ldhu	r2,-52(fp)
  813fb4:	1005003a 	cmpeq	r2,r2,zero
  813fb8:	1000181e 	bne	r2,zero,81401c <OSFlagPend+0x430>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  813fbc:	e0bff203 	ldbu	r2,-56(fp)
  813fc0:	10800058 	cmpnei	r2,r2,1
  813fc4:	1000071e 	bne	r2,zero,813fe4 <OSFlagPend+0x3f8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  813fc8:	e0bff917 	ldw	r2,-28(fp)
  813fcc:	10c0020b 	ldhu	r3,8(r2)
  813fd0:	e0bff30b 	ldhu	r2,-52(fp)
  813fd4:	1884b03a 	or	r2,r3,r2
  813fd8:	1007883a 	mov	r3,r2
  813fdc:	e0bff917 	ldw	r2,-28(fp)
  813fe0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  813fe4:	008020b4 	movhi	r2,130
  813fe8:	10828b04 	addi	r2,r2,2604
  813fec:	10c00017 	ldw	r3,0(r2)
  813ff0:	e0bff30b 	ldhu	r2,-52(fp)
  813ff4:	18800b0d 	sth	r2,44(r3)
  813ff8:	e0bff117 	ldw	r2,-60(fp)
  813ffc:	e0bfe915 	stw	r2,-92(fp)
  814000:	e0bfe917 	ldw	r2,-92(fp)
  814004:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  814008:	e0800217 	ldw	r2,8(fp)
  81400c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  814010:	e0fff30b 	ldhu	r3,-52(fp)
  814014:	e0ffff15 	stw	r3,-4(fp)
  814018:	00007f06 	br	814218 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  81401c:	e1bffa0b 	ldhu	r6,-24(fp)
  814020:	e1fffb03 	ldbu	r7,-20(fp)
  814024:	e0bffc0b 	ldhu	r2,-16(fp)
  814028:	e17ff404 	addi	r5,fp,-48
  81402c:	d8800015 	stw	r2,0(sp)
  814030:	e13ff917 	ldw	r4,-28(fp)
  814034:	08147140 	call	814714 <OS_FlagBlock>
  814038:	e0bff117 	ldw	r2,-60(fp)
  81403c:	e0bfe815 	stw	r2,-96(fp)
  814040:	e0bfe817 	ldw	r2,-96(fp)
  814044:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  814048:	00000b06 	br	814078 <OSFlagPend+0x48c>
  81404c:	e0bff117 	ldw	r2,-60(fp)
  814050:	e0bfe715 	stw	r2,-100(fp)
  814054:	e0bfe717 	ldw	r2,-100(fp)
  814058:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  81405c:	e03ff30d 	sth	zero,-52(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
  814060:	e0c00217 	ldw	r3,8(fp)
  814064:	00801bc4 	movi	r2,111
  814068:	18800005 	stb	r2,0(r3)
             return (flags_rdy);
  81406c:	e0bff30b 	ldhu	r2,-52(fp)
  814070:	e0bfff15 	stw	r2,-4(fp)
  814074:	00006806 	br	814218 <OSFlagPend+0x62c>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
  814078:	08129c80 	call	8129c8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81407c:	0005303a 	rdctl	r2,status
  814080:	e0bfe615 	stw	r2,-104(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814084:	e0ffe617 	ldw	r3,-104(fp)
  814088:	00bfff84 	movi	r2,-2
  81408c:	1884703a 	and	r2,r3,r2
  814090:	1001703a 	wrctl	status,r2
  
  return context;
  814094:	e0bfe617 	ldw	r2,-104(fp)
    OS_ENTER_CRITICAL();
  814098:	e0bff115 	stw	r2,-60(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
  81409c:	008020b4 	movhi	r2,130
  8140a0:	10828b04 	addi	r2,r2,2604
  8140a4:	10800017 	ldw	r2,0(r2)
  8140a8:	10800c43 	ldbu	r2,49(r2)
  8140ac:	10803fcc 	andi	r2,r2,255
  8140b0:	1005003a 	cmpeq	r2,r2,zero
  8140b4:	1000221e 	bne	r2,zero,814140 <OSFlagPend+0x554>
        pend_stat                = OSTCBCur->OSTCBStatPend;
  8140b8:	008020b4 	movhi	r2,130
  8140bc:	10828b04 	addi	r2,r2,2604
  8140c0:	10800017 	ldw	r2,0(r2)
  8140c4:	10800c43 	ldbu	r2,49(r2)
  8140c8:	e0bff245 	stb	r2,-55(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  8140cc:	008020b4 	movhi	r2,130
  8140d0:	10828b04 	addi	r2,r2,2604
  8140d4:	10800017 	ldw	r2,0(r2)
  8140d8:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
  8140dc:	e13ff404 	addi	r4,fp,-48
  8140e0:	0814acc0 	call	814acc <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
  8140e4:	008020b4 	movhi	r2,130
  8140e8:	10828b04 	addi	r2,r2,2604
  8140ec:	10800017 	ldw	r2,0(r2)
  8140f0:	10000c05 	stb	zero,48(r2)
  8140f4:	e0bff117 	ldw	r2,-60(fp)
  8140f8:	e0bfe515 	stw	r2,-108(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8140fc:	e0bfe517 	ldw	r2,-108(fp)
  814100:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
  814104:	e03ff30d 	sth	zero,-52(fp)
        switch (pend_stat) {
  814108:	e0bff243 	ldbu	r2,-55(fp)
  81410c:	108000a0 	cmpeqi	r2,r2,2
  814110:	1000011e 	bne	r2,zero,814118 <OSFlagPend+0x52c>
  814114:	00000406 	br	814128 <OSFlagPend+0x53c>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
  814118:	e0c00217 	ldw	r3,8(fp)
  81411c:	00800384 	movi	r2,14
  814120:	18800005 	stb	r2,0(r3)
                 break;
  814124:	00000306 	br	814134 <OSFlagPend+0x548>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
  814128:	e0c00217 	ldw	r3,8(fp)
  81412c:	00800284 	movi	r2,10
  814130:	18800005 	stb	r2,0(r3)
                 break;
        }
        return (flags_rdy);
  814134:	e0fff30b 	ldhu	r3,-52(fp)
  814138:	e0ffff15 	stw	r3,-4(fp)
  81413c:	00003606 	br	814218 <OSFlagPend+0x62c>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
  814140:	008020b4 	movhi	r2,130
  814144:	10828b04 	addi	r2,r2,2604
  814148:	10800017 	ldw	r2,0(r2)
  81414c:	10800b0b 	ldhu	r2,44(r2)
  814150:	e0bff30d 	sth	r2,-52(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
  814154:	e0bff203 	ldbu	r2,-56(fp)
  814158:	10800058 	cmpnei	r2,r2,1
  81415c:	1000261e 	bne	r2,zero,8141f8 <OSFlagPend+0x60c>
        switch (wait_type) {
  814160:	e0bffb03 	ldbu	r2,-20(fp)
  814164:	e0bffd15 	stw	r2,-12(fp)
  814168:	e0fffd17 	ldw	r3,-12(fp)
  81416c:	1804803a 	cmplt	r2,r3,zero
  814170:	1000181e 	bne	r2,zero,8141d4 <OSFlagPend+0x5e8>
  814174:	e0fffd17 	ldw	r3,-12(fp)
  814178:	18800090 	cmplti	r2,r3,2
  81417c:	10000d1e 	bne	r2,zero,8141b4 <OSFlagPend+0x5c8>
  814180:	e0fffd17 	ldw	r3,-12(fp)
  814184:	18800108 	cmpgei	r2,r3,4
  814188:	1000121e 	bne	r2,zero,8141d4 <OSFlagPend+0x5e8>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
  81418c:	e0bff917 	ldw	r2,-28(fp)
  814190:	1080020b 	ldhu	r2,8(r2)
  814194:	1007883a 	mov	r3,r2
  814198:	e0bff30b 	ldhu	r2,-52(fp)
  81419c:	0084303a 	nor	r2,zero,r2
  8141a0:	1884703a 	and	r2,r3,r2
  8141a4:	1007883a 	mov	r3,r2
  8141a8:	e0bff917 	ldw	r2,-28(fp)
  8141ac:	10c0020d 	sth	r3,8(r2)
                 break;
  8141b0:	00001106 	br	8141f8 <OSFlagPend+0x60c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
  8141b4:	e0bff917 	ldw	r2,-28(fp)
  8141b8:	10c0020b 	ldhu	r3,8(r2)
  8141bc:	e0bff30b 	ldhu	r2,-52(fp)
  8141c0:	1884b03a 	or	r2,r3,r2
  8141c4:	1007883a 	mov	r3,r2
  8141c8:	e0bff917 	ldw	r2,-28(fp)
  8141cc:	10c0020d 	sth	r3,8(r2)
                 break;
  8141d0:	00000906 	br	8141f8 <OSFlagPend+0x60c>
  8141d4:	e0bff117 	ldw	r2,-60(fp)
  8141d8:	e0bfe415 	stw	r2,-112(fp)
  8141dc:	e0bfe417 	ldw	r2,-112(fp)
  8141e0:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  8141e4:	e0c00217 	ldw	r3,8(fp)
  8141e8:	00801bc4 	movi	r2,111
  8141ec:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
  8141f0:	e03fff15 	stw	zero,-4(fp)
  8141f4:	00000806 	br	814218 <OSFlagPend+0x62c>
  8141f8:	e0bff117 	ldw	r2,-60(fp)
  8141fc:	e0bfe315 	stw	r2,-116(fp)
  814200:	e0bfe317 	ldw	r2,-116(fp)
  814204:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
  814208:	e0800217 	ldw	r2,8(fp)
  81420c:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
  814210:	e0bff30b 	ldhu	r2,-52(fp)
  814214:	e0bfff15 	stw	r2,-4(fp)
  814218:	e0bfff17 	ldw	r2,-4(fp)
}
  81421c:	e037883a 	mov	sp,fp
  814220:	dfc00117 	ldw	ra,4(sp)
  814224:	df000017 	ldw	fp,0(sp)
  814228:	dec00204 	addi	sp,sp,8
  81422c:	f800283a 	ret

00814230 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
  814230:	defffb04 	addi	sp,sp,-20
  814234:	df000415 	stw	fp,16(sp)
  814238:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  81423c:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814240:	0005303a 	rdctl	r2,status
  814244:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814248:	e0fffd17 	ldw	r3,-12(fp)
  81424c:	00bfff84 	movi	r2,-2
  814250:	1884703a 	and	r2,r3,r2
  814254:	1001703a 	wrctl	status,r2
  
  return context;
  814258:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  81425c:	e0bffe15 	stw	r2,-8(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
  814260:	008020b4 	movhi	r2,130
  814264:	10828b04 	addi	r2,r2,2604
  814268:	10800017 	ldw	r2,0(r2)
  81426c:	10800b0b 	ldhu	r2,44(r2)
  814270:	e0bfff0d 	sth	r2,-4(fp)
  814274:	e0bffe17 	ldw	r2,-8(fp)
  814278:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81427c:	e0bffc17 	ldw	r2,-16(fp)
  814280:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
  814284:	e0bfff0b 	ldhu	r2,-4(fp)
}
  814288:	e037883a 	mov	sp,fp
  81428c:	df000017 	ldw	fp,0(sp)
  814290:	dec00104 	addi	sp,sp,4
  814294:	f800283a 	ret

00814298 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
  814298:	deffed04 	addi	sp,sp,-76
  81429c:	dfc01215 	stw	ra,72(sp)
  8142a0:	df001115 	stw	fp,68(sp)
  8142a4:	df001104 	addi	fp,sp,68
  8142a8:	e13ff915 	stw	r4,-28(fp)
  8142ac:	e1fffc15 	stw	r7,-16(fp)
  8142b0:	e17ffa0d 	sth	r5,-24(fp)
  8142b4:	e1bffb05 	stb	r6,-20(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
  8142b8:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  8142bc:	e0bffc17 	ldw	r2,-16(fp)
  8142c0:	1004c03a 	cmpne	r2,r2,zero
  8142c4:	1000021e 	bne	r2,zero,8142d0 <OSFlagPost+0x38>
        return ((OS_FLAGS)0);
  8142c8:	e03fff15 	stw	zero,-4(fp)
  8142cc:	0000d606 	br	814628 <OSFlagPost+0x390>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
  8142d0:	e0bff917 	ldw	r2,-28(fp)
  8142d4:	1004c03a 	cmpne	r2,r2,zero
  8142d8:	1000051e 	bne	r2,zero,8142f0 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  8142dc:	e0fffc17 	ldw	r3,-16(fp)
  8142e0:	00801b84 	movi	r2,110
  8142e4:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  8142e8:	e03fff15 	stw	zero,-4(fp)
  8142ec:	0000ce06 	br	814628 <OSFlagPost+0x390>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
  8142f0:	e0bff917 	ldw	r2,-28(fp)
  8142f4:	10800003 	ldbu	r2,0(r2)
  8142f8:	10803fcc 	andi	r2,r2,255
  8142fc:	10800160 	cmpeqi	r2,r2,5
  814300:	1000051e 	bne	r2,zero,814318 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
  814304:	e0fffc17 	ldw	r3,-16(fp)
  814308:	00800044 	movi	r2,1
  81430c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  814310:	e03fff15 	stw	zero,-4(fp)
  814314:	0000c406 	br	814628 <OSFlagPost+0x390>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814318:	0005303a 	rdctl	r2,status
  81431c:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814320:	e0fff417 	ldw	r3,-48(fp)
  814324:	00bfff84 	movi	r2,-2
  814328:	1884703a 	and	r2,r3,r2
  81432c:	1001703a 	wrctl	status,r2
  
  return context;
  814330:	e0bff417 	ldw	r2,-48(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  814334:	e0bff515 	stw	r2,-44(fp)
    switch (opt) {
  814338:	e0bffb03 	ldbu	r2,-20(fp)
  81433c:	e0bffe15 	stw	r2,-8(fp)
  814340:	e0fffe17 	ldw	r3,-8(fp)
  814344:	1805003a 	cmpeq	r2,r3,zero
  814348:	1000041e 	bne	r2,zero,81435c <OSFlagPost+0xc4>
  81434c:	e0fffe17 	ldw	r3,-8(fp)
  814350:	18800060 	cmpeqi	r2,r3,1
  814354:	10000b1e 	bne	r2,zero,814384 <OSFlagPost+0xec>
  814358:	00001206 	br	8143a4 <OSFlagPost+0x10c>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
  81435c:	e0bff917 	ldw	r2,-28(fp)
  814360:	1080020b 	ldhu	r2,8(r2)
  814364:	1007883a 	mov	r3,r2
  814368:	e0bffa0b 	ldhu	r2,-24(fp)
  81436c:	0084303a 	nor	r2,zero,r2
  814370:	1884703a 	and	r2,r3,r2
  814374:	1007883a 	mov	r3,r2
  814378:	e0bff917 	ldw	r2,-28(fp)
  81437c:	10c0020d 	sth	r3,8(r2)
             break;
  814380:	00001106 	br	8143c8 <OSFlagPost+0x130>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
  814384:	e0bff917 	ldw	r2,-28(fp)
  814388:	10c0020b 	ldhu	r3,8(r2)
  81438c:	e0bffa0b 	ldhu	r2,-24(fp)
  814390:	1884b03a 	or	r2,r3,r2
  814394:	1007883a 	mov	r3,r2
  814398:	e0bff917 	ldw	r2,-28(fp)
  81439c:	10c0020d 	sth	r3,8(r2)
             break;
  8143a0:	00000906 	br	8143c8 <OSFlagPost+0x130>
  8143a4:	e0bff517 	ldw	r2,-44(fp)
  8143a8:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8143ac:	e0bff317 	ldw	r2,-52(fp)
  8143b0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
  8143b4:	e0fffc17 	ldw	r3,-16(fp)
  8143b8:	00801c44 	movi	r2,113
  8143bc:	18800005 	stb	r2,0(r3)
             return ((OS_FLAGS)0);
  8143c0:	e03fff15 	stw	zero,-4(fp)
  8143c4:	00009806 	br	814628 <OSFlagPost+0x390>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
  8143c8:	e03ff785 	stb	zero,-34(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  8143cc:	e0bff917 	ldw	r2,-28(fp)
  8143d0:	10800117 	ldw	r2,4(r2)
  8143d4:	e0bff815 	stw	r2,-32(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  8143d8:	00007506 	br	8145b0 <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
  8143dc:	e0bff817 	ldw	r2,-32(fp)
  8143e0:	10800483 	ldbu	r2,18(r2)
  8143e4:	10803fcc 	andi	r2,r2,255
  8143e8:	e0bffd15 	stw	r2,-12(fp)
  8143ec:	e0fffd17 	ldw	r3,-12(fp)
  8143f0:	18800060 	cmpeqi	r2,r3,1
  8143f4:	10004d1e 	bne	r2,zero,81452c <OSFlagPost+0x294>
  8143f8:	e0fffd17 	ldw	r3,-12(fp)
  8143fc:	18800088 	cmpgei	r2,r3,2
  814400:	1000041e 	bne	r2,zero,814414 <OSFlagPost+0x17c>
  814404:	e0fffd17 	ldw	r3,-12(fp)
  814408:	1805003a 	cmpeq	r2,r3,zero
  81440c:	1000301e 	bne	r2,zero,8144d0 <OSFlagPost+0x238>
  814410:	00005b06 	br	814580 <OSFlagPost+0x2e8>
  814414:	e0fffd17 	ldw	r3,-12(fp)
  814418:	188000a0 	cmpeqi	r2,r3,2
  81441c:	1000041e 	bne	r2,zero,814430 <OSFlagPost+0x198>
  814420:	e0fffd17 	ldw	r3,-12(fp)
  814424:	188000e0 	cmpeqi	r2,r3,3
  814428:	1000161e 	bne	r2,zero,814484 <OSFlagPost+0x1ec>
  81442c:	00005406 	br	814580 <OSFlagPost+0x2e8>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  814430:	e0bff917 	ldw	r2,-28(fp)
  814434:	10c0020b 	ldhu	r3,8(r2)
  814438:	e0bff817 	ldw	r2,-32(fp)
  81443c:	1080040b 	ldhu	r2,16(r2)
  814440:	1884703a 	and	r2,r3,r2
  814444:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  814448:	e0bff817 	ldw	r2,-32(fp)
  81444c:	1080040b 	ldhu	r2,16(r2)
  814450:	10ffffcc 	andi	r3,r2,65535
  814454:	e0bff68b 	ldhu	r2,-38(fp)
  814458:	1880521e 	bne	r3,r2,8145a4 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  81445c:	e17ff68b 	ldhu	r5,-38(fp)
  814460:	e13ff817 	ldw	r4,-32(fp)
  814464:	08149bc0 	call	8149bc <OS_FlagTaskRdy>
  814468:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  81446c:	e0bff603 	ldbu	r2,-40(fp)
  814470:	10800058 	cmpnei	r2,r2,1
  814474:	10004b1e 	bne	r2,zero,8145a4 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  814478:	00800044 	movi	r2,1
  81447c:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  814480:	00004806 	br	8145a4 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  814484:	e0bff917 	ldw	r2,-28(fp)
  814488:	10c0020b 	ldhu	r3,8(r2)
  81448c:	e0bff817 	ldw	r2,-32(fp)
  814490:	1080040b 	ldhu	r2,16(r2)
  814494:	1884703a 	and	r2,r3,r2
  814498:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  81449c:	e0bff68b 	ldhu	r2,-38(fp)
  8144a0:	1005003a 	cmpeq	r2,r2,zero
  8144a4:	10003f1e 	bne	r2,zero,8145a4 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  8144a8:	e17ff68b 	ldhu	r5,-38(fp)
  8144ac:	e13ff817 	ldw	r4,-32(fp)
  8144b0:	08149bc0 	call	8149bc <OS_FlagTaskRdy>
  8144b4:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  8144b8:	e0bff603 	ldbu	r2,-40(fp)
  8144bc:	10800058 	cmpnei	r2,r2,1
  8144c0:	1000381e 	bne	r2,zero,8145a4 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  8144c4:	00800044 	movi	r2,1
  8144c8:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  8144cc:	00003506 	br	8145a4 <OSFlagPost+0x30c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  8144d0:	e0bff917 	ldw	r2,-28(fp)
  8144d4:	1080020b 	ldhu	r2,8(r2)
  8144d8:	0084303a 	nor	r2,zero,r2
  8144dc:	1007883a 	mov	r3,r2
  8144e0:	e0bff817 	ldw	r2,-32(fp)
  8144e4:	1080040b 	ldhu	r2,16(r2)
  8144e8:	1884703a 	and	r2,r3,r2
  8144ec:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  8144f0:	e0bff817 	ldw	r2,-32(fp)
  8144f4:	1080040b 	ldhu	r2,16(r2)
  8144f8:	10ffffcc 	andi	r3,r2,65535
  8144fc:	e0bff68b 	ldhu	r2,-38(fp)
  814500:	1880281e 	bne	r3,r2,8145a4 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  814504:	e17ff68b 	ldhu	r5,-38(fp)
  814508:	e13ff817 	ldw	r4,-32(fp)
  81450c:	08149bc0 	call	8149bc <OS_FlagTaskRdy>
  814510:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  814514:	e0bff603 	ldbu	r2,-40(fp)
  814518:	10800058 	cmpnei	r2,r2,1
  81451c:	1000211e 	bne	r2,zero,8145a4 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  814520:	00800044 	movi	r2,1
  814524:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  814528:	00001e06 	br	8145a4 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  81452c:	e0bff917 	ldw	r2,-28(fp)
  814530:	1080020b 	ldhu	r2,8(r2)
  814534:	0084303a 	nor	r2,zero,r2
  814538:	1007883a 	mov	r3,r2
  81453c:	e0bff817 	ldw	r2,-32(fp)
  814540:	1080040b 	ldhu	r2,16(r2)
  814544:	1884703a 	and	r2,r3,r2
  814548:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  81454c:	e0bff68b 	ldhu	r2,-38(fp)
  814550:	1005003a 	cmpeq	r2,r2,zero
  814554:	1000131e 	bne	r2,zero,8145a4 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  814558:	e17ff68b 	ldhu	r5,-38(fp)
  81455c:	e13ff817 	ldw	r4,-32(fp)
  814560:	08149bc0 	call	8149bc <OS_FlagTaskRdy>
  814564:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  814568:	e0bff603 	ldbu	r2,-40(fp)
  81456c:	10800058 	cmpnei	r2,r2,1
  814570:	10000c1e 	bne	r2,zero,8145a4 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  814574:	00800044 	movi	r2,1
  814578:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  81457c:	00000906 	br	8145a4 <OSFlagPost+0x30c>
  814580:	e0bff517 	ldw	r2,-44(fp)
  814584:	e0bff215 	stw	r2,-56(fp)
  814588:	e0bff217 	ldw	r2,-56(fp)
  81458c:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  814590:	e0fffc17 	ldw	r3,-16(fp)
  814594:	00801bc4 	movi	r2,111
  814598:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
  81459c:	e03fff15 	stw	zero,-4(fp)
  8145a0:	00002106 	br	814628 <OSFlagPost+0x390>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
  8145a4:	e0bff817 	ldw	r2,-32(fp)
  8145a8:	10800017 	ldw	r2,0(r2)
  8145ac:	e0bff815 	stw	r2,-32(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  8145b0:	e0bff817 	ldw	r2,-32(fp)
  8145b4:	1004c03a 	cmpne	r2,r2,zero
  8145b8:	103f881e 	bne	r2,zero,8143dc <OSFlagPost+0x144>
  8145bc:	e0bff517 	ldw	r2,-44(fp)
  8145c0:	e0bff115 	stw	r2,-60(fp)
  8145c4:	e0bff117 	ldw	r2,-60(fp)
  8145c8:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
  8145cc:	e0bff783 	ldbu	r2,-34(fp)
  8145d0:	10800058 	cmpnei	r2,r2,1
  8145d4:	1000011e 	bne	r2,zero,8145dc <OSFlagPost+0x344>
        OS_Sched();
  8145d8:	08129c80 	call	8129c8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8145dc:	0005303a 	rdctl	r2,status
  8145e0:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8145e4:	e0fff017 	ldw	r3,-64(fp)
  8145e8:	00bfff84 	movi	r2,-2
  8145ec:	1884703a 	and	r2,r3,r2
  8145f0:	1001703a 	wrctl	status,r2
  
  return context;
  8145f4:	e0bff017 	ldw	r2,-64(fp)
    }
    OS_ENTER_CRITICAL();
  8145f8:	e0bff515 	stw	r2,-44(fp)
    flags_cur = pgrp->OSFlagFlags;
  8145fc:	e0bff917 	ldw	r2,-28(fp)
  814600:	1080020b 	ldhu	r2,8(r2)
  814604:	e0bff70d 	sth	r2,-36(fp)
  814608:	e0bff517 	ldw	r2,-44(fp)
  81460c:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814610:	e0bfef17 	ldw	r2,-68(fp)
  814614:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
  814618:	e0bffc17 	ldw	r2,-16(fp)
  81461c:	10000005 	stb	zero,0(r2)
    return (flags_cur);
  814620:	e0bff70b 	ldhu	r2,-36(fp)
  814624:	e0bfff15 	stw	r2,-4(fp)
  814628:	e0bfff17 	ldw	r2,-4(fp)
}
  81462c:	e037883a 	mov	sp,fp
  814630:	dfc00117 	ldw	ra,4(sp)
  814634:	df000017 	ldw	fp,0(sp)
  814638:	dec00204 	addi	sp,sp,8
  81463c:	f800283a 	ret

00814640 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
  814640:	defff804 	addi	sp,sp,-32
  814644:	df000715 	stw	fp,28(sp)
  814648:	df000704 	addi	fp,sp,28
  81464c:	e13ffd15 	stw	r4,-12(fp)
  814650:	e17ffe15 	stw	r5,-8(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
  814654:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
  814658:	e0bffe17 	ldw	r2,-8(fp)
  81465c:	1004c03a 	cmpne	r2,r2,zero
  814660:	1000021e 	bne	r2,zero,81466c <OSFlagQuery+0x2c>
        return ((OS_FLAGS)0);
  814664:	e03fff15 	stw	zero,-4(fp)
  814668:	00002506 	br	814700 <OSFlagQuery+0xc0>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
  81466c:	e0bffd17 	ldw	r2,-12(fp)
  814670:	1004c03a 	cmpne	r2,r2,zero
  814674:	1000051e 	bne	r2,zero,81468c <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  814678:	e0fffe17 	ldw	r3,-8(fp)
  81467c:	00801b84 	movi	r2,110
  814680:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  814684:	e03fff15 	stw	zero,-4(fp)
  814688:	00001d06 	br	814700 <OSFlagQuery+0xc0>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
  81468c:	e0bffd17 	ldw	r2,-12(fp)
  814690:	10800003 	ldbu	r2,0(r2)
  814694:	10803fcc 	andi	r2,r2,255
  814698:	10800160 	cmpeqi	r2,r2,5
  81469c:	1000051e 	bne	r2,zero,8146b4 <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
  8146a0:	e0fffe17 	ldw	r3,-8(fp)
  8146a4:	00800044 	movi	r2,1
  8146a8:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  8146ac:	e03fff15 	stw	zero,-4(fp)
  8146b0:	00001306 	br	814700 <OSFlagQuery+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8146b4:	0005303a 	rdctl	r2,status
  8146b8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8146bc:	e0fffa17 	ldw	r3,-24(fp)
  8146c0:	00bfff84 	movi	r2,-2
  8146c4:	1884703a 	and	r2,r3,r2
  8146c8:	1001703a 	wrctl	status,r2
  
  return context;
  8146cc:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  8146d0:	e0bffb15 	stw	r2,-20(fp)
    flags = pgrp->OSFlagFlags;
  8146d4:	e0bffd17 	ldw	r2,-12(fp)
  8146d8:	1080020b 	ldhu	r2,8(r2)
  8146dc:	e0bffc0d 	sth	r2,-16(fp)
  8146e0:	e0bffb17 	ldw	r2,-20(fp)
  8146e4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8146e8:	e0bff917 	ldw	r2,-28(fp)
  8146ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  8146f0:	e0bffe17 	ldw	r2,-8(fp)
  8146f4:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
  8146f8:	e0bffc0b 	ldhu	r2,-16(fp)
  8146fc:	e0bfff15 	stw	r2,-4(fp)
  814700:	e0bfff17 	ldw	r2,-4(fp)
}
  814704:	e037883a 	mov	sp,fp
  814708:	df000017 	ldw	fp,0(sp)
  81470c:	dec00104 	addi	sp,sp,4
  814710:	f800283a 	ret

00814714 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
  814714:	defff804 	addi	sp,sp,-32
  814718:	df000715 	stw	fp,28(sp)
  81471c:	df000704 	addi	fp,sp,28
  814720:	e13ffb15 	stw	r4,-20(fp)
  814724:	e17ffc15 	stw	r5,-16(fp)
  814728:	e0800117 	ldw	r2,4(fp)
  81472c:	e1bffd0d 	sth	r6,-12(fp)
  814730:	e1fffe05 	stb	r7,-8(fp)
  814734:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
  814738:	008020b4 	movhi	r2,130
  81473c:	10828b04 	addi	r2,r2,2604
  814740:	10c00017 	ldw	r3,0(r2)
  814744:	008020b4 	movhi	r2,130
  814748:	10828b04 	addi	r2,r2,2604
  81474c:	10800017 	ldw	r2,0(r2)
  814750:	10800c03 	ldbu	r2,48(r2)
  814754:	10800814 	ori	r2,r2,32
  814758:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
  81475c:	008020b4 	movhi	r2,130
  814760:	10828b04 	addi	r2,r2,2604
  814764:	10800017 	ldw	r2,0(r2)
  814768:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
  81476c:	008020b4 	movhi	r2,130
  814770:	10828b04 	addi	r2,r2,2604
  814774:	10c00017 	ldw	r3,0(r2)
  814778:	e0bfff0b 	ldhu	r2,-4(fp)
  81477c:	18800b8d 	sth	r2,46(r3)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
  814780:	008020b4 	movhi	r2,130
  814784:	10828b04 	addi	r2,r2,2604
  814788:	10c00017 	ldw	r3,0(r2)
  81478c:	e0bffc17 	ldw	r2,-16(fp)
  814790:	18800a15 	stw	r2,40(r3)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
  814794:	e0fffc17 	ldw	r3,-16(fp)
  814798:	e0bffd0b 	ldhu	r2,-12(fp)
  81479c:	1880040d 	sth	r2,16(r3)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
  8147a0:	e0fffc17 	ldw	r3,-16(fp)
  8147a4:	e0bffe03 	ldbu	r2,-8(fp)
  8147a8:	18800485 	stb	r2,18(r3)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
  8147ac:	008020b4 	movhi	r2,130
  8147b0:	10828b04 	addi	r2,r2,2604
  8147b4:	10c00017 	ldw	r3,0(r2)
  8147b8:	e0bffc17 	ldw	r2,-16(fp)
  8147bc:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
  8147c0:	e0bffb17 	ldw	r2,-20(fp)
  8147c4:	10c00117 	ldw	r3,4(r2)
  8147c8:	e0bffc17 	ldw	r2,-16(fp)
  8147cc:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
  8147d0:	e0bffc17 	ldw	r2,-16(fp)
  8147d4:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
  8147d8:	e0fffc17 	ldw	r3,-16(fp)
  8147dc:	e0bffb17 	ldw	r2,-20(fp)
  8147e0:	18800315 	stw	r2,12(r3)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  8147e4:	e0bffb17 	ldw	r2,-20(fp)
  8147e8:	10800117 	ldw	r2,4(r2)
  8147ec:	e0bffa15 	stw	r2,-24(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
  8147f0:	e0bffa17 	ldw	r2,-24(fp)
  8147f4:	1005003a 	cmpeq	r2,r2,zero
  8147f8:	1000031e 	bne	r2,zero,814808 <OS_FlagBlock+0xf4>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
  8147fc:	e0fffa17 	ldw	r3,-24(fp)
  814800:	e0bffc17 	ldw	r2,-16(fp)
  814804:	18800115 	stw	r2,4(r3)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
  814808:	e0fffb17 	ldw	r3,-20(fp)
  81480c:	e0bffc17 	ldw	r2,-16(fp)
  814810:	18800115 	stw	r2,4(r3)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
  814814:	008020b4 	movhi	r2,130
  814818:	10828b04 	addi	r2,r2,2604
  81481c:	10800017 	ldw	r2,0(r2)
  814820:	10800d03 	ldbu	r2,52(r2)
  814824:	e0bff905 	stb	r2,-28(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  814828:	e13ff903 	ldbu	r4,-28(fp)
  81482c:	e0fff903 	ldbu	r3,-28(fp)
  814830:	008020b4 	movhi	r2,130
  814834:	10828844 	addi	r2,r2,2593
  814838:	10c5883a 	add	r2,r2,r3
  81483c:	10800003 	ldbu	r2,0(r2)
  814840:	1007883a 	mov	r3,r2
  814844:	008020b4 	movhi	r2,130
  814848:	10828b04 	addi	r2,r2,2604
  81484c:	10800017 	ldw	r2,0(r2)
  814850:	10800d43 	ldbu	r2,53(r2)
  814854:	0084303a 	nor	r2,zero,r2
  814858:	1884703a 	and	r2,r3,r2
  81485c:	1007883a 	mov	r3,r2
  814860:	008020b4 	movhi	r2,130
  814864:	10828844 	addi	r2,r2,2593
  814868:	1105883a 	add	r2,r2,r4
  81486c:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
  814870:	e0fff903 	ldbu	r3,-28(fp)
  814874:	008020b4 	movhi	r2,130
  814878:	10828844 	addi	r2,r2,2593
  81487c:	10c5883a 	add	r2,r2,r3
  814880:	10800003 	ldbu	r2,0(r2)
  814884:	10803fcc 	andi	r2,r2,255
  814888:	1004c03a 	cmpne	r2,r2,zero
  81488c:	10000e1e 	bne	r2,zero,8148c8 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  814890:	008020b4 	movhi	r2,130
  814894:	10828b04 	addi	r2,r2,2604
  814898:	10800017 	ldw	r2,0(r2)
  81489c:	10800d83 	ldbu	r2,54(r2)
  8148a0:	0084303a 	nor	r2,zero,r2
  8148a4:	1007883a 	mov	r3,r2
  8148a8:	008020b4 	movhi	r2,130
  8148ac:	10828804 	addi	r2,r2,2592
  8148b0:	10800003 	ldbu	r2,0(r2)
  8148b4:	1884703a 	and	r2,r3,r2
  8148b8:	1007883a 	mov	r3,r2
  8148bc:	008020b4 	movhi	r2,130
  8148c0:	10828804 	addi	r2,r2,2592
  8148c4:	10c00005 	stb	r3,0(r2)
    }
}
  8148c8:	e037883a 	mov	sp,fp
  8148cc:	df000017 	ldw	fp,0(sp)
  8148d0:	dec00104 	addi	sp,sp,4
  8148d4:	f800283a 	ret

008148d8 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
  8148d8:	defffb04 	addi	sp,sp,-20
  8148dc:	dfc00415 	stw	ra,16(sp)
  8148e0:	df000315 	stw	fp,12(sp)
  8148e4:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
  8148e8:	010020b4 	movhi	r4,130
  8148ec:	21147304 	addi	r4,r4,20940
  8148f0:	0140dc04 	movi	r5,880
  8148f4:	08129080 	call	812908 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
  8148f8:	008020b4 	movhi	r2,130
  8148fc:	10947304 	addi	r2,r2,20940
  814900:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
  814904:	008020b4 	movhi	r2,130
  814908:	10947e04 	addi	r2,r2,20984
  81490c:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  814910:	e03fff0d 	sth	zero,-4(fp)
  814914:	00001306 	br	814964 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  814918:	e0bffe17 	ldw	r2,-8(fp)
  81491c:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
  814920:	e0fffe17 	ldw	r3,-8(fp)
  814924:	e0bffd17 	ldw	r2,-12(fp)
  814928:	18800115 	stw	r2,4(r3)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
  81492c:	e0fffe17 	ldw	r3,-8(fp)
  814930:	00800fc4 	movi	r2,63
  814934:	18800285 	stb	r2,10(r3)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  814938:	e0bffe17 	ldw	r2,-8(fp)
  81493c:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
  814940:	e0bffe17 	ldw	r2,-8(fp)
  814944:	10800b04 	addi	r2,r2,44
  814948:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
  81494c:	e0bffd17 	ldw	r2,-12(fp)
  814950:	10800b04 	addi	r2,r2,44
  814954:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  814958:	e0bfff0b 	ldhu	r2,-4(fp)
  81495c:	10800044 	addi	r2,r2,1
  814960:	e0bfff0d 	sth	r2,-4(fp)
  814964:	e0bfff0b 	ldhu	r2,-4(fp)
  814968:	108004f0 	cmpltui	r2,r2,19
  81496c:	103fea1e 	bne	r2,zero,814918 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  814970:	e0bffe17 	ldw	r2,-8(fp)
  814974:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
  814978:	e0bffe17 	ldw	r2,-8(fp)
  81497c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
  814980:	e0fffe17 	ldw	r3,-8(fp)
  814984:	00800fc4 	movi	r2,63
  814988:	18800285 	stb	r2,10(r3)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  81498c:	e0bffe17 	ldw	r2,-8(fp)
  814990:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
  814994:	00c020b4 	movhi	r3,130
  814998:	18c28d04 	addi	r3,r3,2612
  81499c:	008020b4 	movhi	r2,130
  8149a0:	10947304 	addi	r2,r2,20940
  8149a4:	18800015 	stw	r2,0(r3)
#endif
}
  8149a8:	e037883a 	mov	sp,fp
  8149ac:	dfc00117 	ldw	ra,4(sp)
  8149b0:	df000017 	ldw	fp,0(sp)
  8149b4:	dec00204 	addi	sp,sp,8
  8149b8:	f800283a 	ret

008149bc <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
  8149bc:	defffa04 	addi	sp,sp,-24
  8149c0:	dfc00515 	stw	ra,20(sp)
  8149c4:	df000415 	stw	fp,16(sp)
  8149c8:	df000404 	addi	fp,sp,16
  8149cc:	e13ffe15 	stw	r4,-8(fp)
  8149d0:	e17fff0d 	sth	r5,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
  8149d4:	e0bffe17 	ldw	r2,-8(fp)
  8149d8:	10800217 	ldw	r2,8(r2)
  8149dc:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
  8149e0:	e0bffd17 	ldw	r2,-12(fp)
  8149e4:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
  8149e8:	e0fffd17 	ldw	r3,-12(fp)
  8149ec:	e0bfff0b 	ldhu	r2,-4(fp)
  8149f0:	18800b0d 	sth	r2,44(r3)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
  8149f4:	e0bffd17 	ldw	r2,-12(fp)
  8149f8:	10c00c03 	ldbu	r3,48(r2)
  8149fc:	00bff7c4 	movi	r2,-33
  814a00:	1884703a 	and	r2,r3,r2
  814a04:	1007883a 	mov	r3,r2
  814a08:	e0bffd17 	ldw	r2,-12(fp)
  814a0c:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
  814a10:	e0bffd17 	ldw	r2,-12(fp)
  814a14:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
  814a18:	e0bffd17 	ldw	r2,-12(fp)
  814a1c:	10800c03 	ldbu	r2,48(r2)
  814a20:	10803fcc 	andi	r2,r2,255
  814a24:	1004c03a 	cmpne	r2,r2,zero
  814a28:	10001f1e 	bne	r2,zero,814aa8 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
  814a2c:	e0bffd17 	ldw	r2,-12(fp)
  814a30:	10c00d83 	ldbu	r3,54(r2)
  814a34:	008020b4 	movhi	r2,130
  814a38:	10828804 	addi	r2,r2,2592
  814a3c:	10800003 	ldbu	r2,0(r2)
  814a40:	1884b03a 	or	r2,r3,r2
  814a44:	1007883a 	mov	r3,r2
  814a48:	008020b4 	movhi	r2,130
  814a4c:	10828804 	addi	r2,r2,2592
  814a50:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  814a54:	e0bffd17 	ldw	r2,-12(fp)
  814a58:	10800d03 	ldbu	r2,52(r2)
  814a5c:	11003fcc 	andi	r4,r2,255
  814a60:	e0bffd17 	ldw	r2,-12(fp)
  814a64:	10800d03 	ldbu	r2,52(r2)
  814a68:	10c03fcc 	andi	r3,r2,255
  814a6c:	008020b4 	movhi	r2,130
  814a70:	10828844 	addi	r2,r2,2593
  814a74:	10c5883a 	add	r2,r2,r3
  814a78:	10c00003 	ldbu	r3,0(r2)
  814a7c:	e0bffd17 	ldw	r2,-12(fp)
  814a80:	10800d43 	ldbu	r2,53(r2)
  814a84:	1884b03a 	or	r2,r3,r2
  814a88:	1007883a 	mov	r3,r2
  814a8c:	008020b4 	movhi	r2,130
  814a90:	10828844 	addi	r2,r2,2593
  814a94:	1105883a 	add	r2,r2,r4
  814a98:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
  814a9c:	00800044 	movi	r2,1
  814aa0:	e0bffc05 	stb	r2,-16(fp)
  814aa4:	00000106 	br	814aac <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
  814aa8:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
  814aac:	e13ffe17 	ldw	r4,-8(fp)
  814ab0:	0814acc0 	call	814acc <OS_FlagUnlink>
    return (sched);
  814ab4:	e0bffc03 	ldbu	r2,-16(fp)
}
  814ab8:	e037883a 	mov	sp,fp
  814abc:	dfc00117 	ldw	ra,4(sp)
  814ac0:	df000017 	ldw	fp,0(sp)
  814ac4:	dec00204 	addi	sp,sp,8
  814ac8:	f800283a 	ret

00814acc <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
  814acc:	defffa04 	addi	sp,sp,-24
  814ad0:	df000515 	stw	fp,20(sp)
  814ad4:	df000504 	addi	fp,sp,20
  814ad8:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
  814adc:	e0bfff17 	ldw	r2,-4(fp)
  814ae0:	10800117 	ldw	r2,4(r2)
  814ae4:	e0bffc15 	stw	r2,-16(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  814ae8:	e0bfff17 	ldw	r2,-4(fp)
  814aec:	10800017 	ldw	r2,0(r2)
  814af0:	e0bffb15 	stw	r2,-20(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
  814af4:	e0bffc17 	ldw	r2,-16(fp)
  814af8:	1004c03a 	cmpne	r2,r2,zero
  814afc:	10000c1e 	bne	r2,zero,814b30 <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
  814b00:	e0bfff17 	ldw	r2,-4(fp)
  814b04:	10800317 	ldw	r2,12(r2)
  814b08:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
  814b0c:	e0fffd17 	ldw	r3,-12(fp)
  814b10:	e0bffb17 	ldw	r2,-20(fp)
  814b14:	18800115 	stw	r2,4(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {
  814b18:	e0bffb17 	ldw	r2,-20(fp)
  814b1c:	1005003a 	cmpeq	r2,r2,zero
  814b20:	10000c1e 	bne	r2,zero,814b54 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
  814b24:	e0bffb17 	ldw	r2,-20(fp)
  814b28:	10000115 	stw	zero,4(r2)
  814b2c:	00000906 	br	814b54 <OS_FlagUnlink+0x88>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
  814b30:	e0fffc17 	ldw	r3,-16(fp)
  814b34:	e0bffb17 	ldw	r2,-20(fp)
  814b38:	18800015 	stw	r2,0(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
  814b3c:	e0bffb17 	ldw	r2,-20(fp)
  814b40:	1005003a 	cmpeq	r2,r2,zero
  814b44:	1000031e 	bne	r2,zero,814b54 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
  814b48:	e0fffb17 	ldw	r3,-20(fp)
  814b4c:	e0bffc17 	ldw	r2,-16(fp)
  814b50:	18800115 	stw	r2,4(r3)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
  814b54:	e0bfff17 	ldw	r2,-4(fp)
  814b58:	10800217 	ldw	r2,8(r2)
  814b5c:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
  814b60:	e0bffe17 	ldw	r2,-8(fp)
  814b64:	10000a15 	stw	zero,40(r2)
#endif
}
  814b68:	e037883a 	mov	sp,fp
  814b6c:	df000017 	ldw	fp,0(sp)
  814b70:	dec00104 	addi	sp,sp,4
  814b74:	f800283a 	ret

00814b78 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
  814b78:	defff304 	addi	sp,sp,-52
  814b7c:	df000c15 	stw	fp,48(sp)
  814b80:	df000c04 	addi	fp,sp,48
  814b84:	e13ffb15 	stw	r4,-20(fp)
  814b88:	e17ffc15 	stw	r5,-16(fp)
  814b8c:	e1bffd15 	stw	r6,-12(fp)
  814b90:	e1fffe15 	stw	r7,-8(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  814b94:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  814b98:	e0bffe17 	ldw	r2,-8(fp)
  814b9c:	1004c03a 	cmpne	r2,r2,zero
  814ba0:	1000021e 	bne	r2,zero,814bac <OSMemCreate+0x34>
        return ((OS_MEM *)0);
  814ba4:	e03fff15 	stw	zero,-4(fp)
  814ba8:	00007506 	br	814d80 <OSMemCreate+0x208>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
  814bac:	e0bffb17 	ldw	r2,-20(fp)
  814bb0:	1004c03a 	cmpne	r2,r2,zero
  814bb4:	1000051e 	bne	r2,zero,814bcc <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  814bb8:	e0fffe17 	ldw	r3,-8(fp)
  814bbc:	00801884 	movi	r2,98
  814bc0:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  814bc4:	e03fff15 	stw	zero,-4(fp)
  814bc8:	00006d06 	br	814d80 <OSMemCreate+0x208>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
  814bcc:	e0bffb17 	ldw	r2,-20(fp)
  814bd0:	108000cc 	andi	r2,r2,3
  814bd4:	1005003a 	cmpeq	r2,r2,zero
  814bd8:	1000051e 	bne	r2,zero,814bf0 <OSMemCreate+0x78>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  814bdc:	e0fffe17 	ldw	r3,-8(fp)
  814be0:	00801884 	movi	r2,98
  814be4:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  814be8:	e03fff15 	stw	zero,-4(fp)
  814bec:	00006406 	br	814d80 <OSMemCreate+0x208>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
  814bf0:	e0bffc17 	ldw	r2,-16(fp)
  814bf4:	108000a8 	cmpgeui	r2,r2,2
  814bf8:	1000051e 	bne	r2,zero,814c10 <OSMemCreate+0x98>
        *perr = OS_ERR_MEM_INVALID_BLKS;
  814bfc:	e0fffe17 	ldw	r3,-8(fp)
  814c00:	008016c4 	movi	r2,91
  814c04:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  814c08:	e03fff15 	stw	zero,-4(fp)
  814c0c:	00005c06 	br	814d80 <OSMemCreate+0x208>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
  814c10:	e0bffd17 	ldw	r2,-12(fp)
  814c14:	10800128 	cmpgeui	r2,r2,4
  814c18:	1000051e 	bne	r2,zero,814c30 <OSMemCreate+0xb8>
        *perr = OS_ERR_MEM_INVALID_SIZE;
  814c1c:	e0fffe17 	ldw	r3,-8(fp)
  814c20:	00801704 	movi	r2,92
  814c24:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  814c28:	e03fff15 	stw	zero,-4(fp)
  814c2c:	00005406 	br	814d80 <OSMemCreate+0x208>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814c30:	0005303a 	rdctl	r2,status
  814c34:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814c38:	e0fff517 	ldw	r3,-44(fp)
  814c3c:	00bfff84 	movi	r2,-2
  814c40:	1884703a 	and	r2,r3,r2
  814c44:	1001703a 	wrctl	status,r2
  
  return context;
  814c48:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  814c4c:	e0bff615 	stw	r2,-40(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
  814c50:	008020b4 	movhi	r2,130
  814c54:	10828504 	addi	r2,r2,2580
  814c58:	10800017 	ldw	r2,0(r2)
  814c5c:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
  814c60:	008020b4 	movhi	r2,130
  814c64:	10828504 	addi	r2,r2,2580
  814c68:	10800017 	ldw	r2,0(r2)
  814c6c:	1005003a 	cmpeq	r2,r2,zero
  814c70:	1000081e 	bne	r2,zero,814c94 <OSMemCreate+0x11c>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
  814c74:	008020b4 	movhi	r2,130
  814c78:	10828504 	addi	r2,r2,2580
  814c7c:	10800017 	ldw	r2,0(r2)
  814c80:	10800117 	ldw	r2,4(r2)
  814c84:	1007883a 	mov	r3,r2
  814c88:	008020b4 	movhi	r2,130
  814c8c:	10828504 	addi	r2,r2,2580
  814c90:	10c00015 	stw	r3,0(r2)
  814c94:	e0bff617 	ldw	r2,-40(fp)
  814c98:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814c9c:	e0bff417 	ldw	r2,-48(fp)
  814ca0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
  814ca4:	e0bffa17 	ldw	r2,-24(fp)
  814ca8:	1004c03a 	cmpne	r2,r2,zero
  814cac:	1000051e 	bne	r2,zero,814cc4 <OSMemCreate+0x14c>
        *perr = OS_ERR_MEM_INVALID_PART;
  814cb0:	e0fffe17 	ldw	r3,-8(fp)
  814cb4:	00801684 	movi	r2,90
  814cb8:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  814cbc:	e03fff15 	stw	zero,-4(fp)
  814cc0:	00002f06 	br	814d80 <OSMemCreate+0x208>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
  814cc4:	e0bffb17 	ldw	r2,-20(fp)
  814cc8:	e0bff815 	stw	r2,-32(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
  814ccc:	e0bffb17 	ldw	r2,-20(fp)
  814cd0:	1007883a 	mov	r3,r2
  814cd4:	e0bffd17 	ldw	r2,-12(fp)
  814cd8:	1885883a 	add	r2,r3,r2
  814cdc:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < (nblks - 1); i++) {
  814ce0:	e03ff715 	stw	zero,-36(fp)
  814ce4:	00000d06 	br	814d1c <OSMemCreate+0x1a4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
  814ce8:	e0fff817 	ldw	r3,-32(fp)
  814cec:	e0bff917 	ldw	r2,-28(fp)
  814cf0:	18800015 	stw	r2,0(r3)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
  814cf4:	e0bff917 	ldw	r2,-28(fp)
  814cf8:	e0bff815 	stw	r2,-32(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
  814cfc:	e0bff917 	ldw	r2,-28(fp)
  814d00:	1007883a 	mov	r3,r2
  814d04:	e0bffd17 	ldw	r2,-12(fp)
  814d08:	1885883a 	add	r2,r3,r2
  814d0c:	e0bff915 	stw	r2,-28(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
  814d10:	e0bff717 	ldw	r2,-36(fp)
  814d14:	10800044 	addi	r2,r2,1
  814d18:	e0bff715 	stw	r2,-36(fp)
  814d1c:	e0bffc17 	ldw	r2,-16(fp)
  814d20:	10ffffc4 	addi	r3,r2,-1
  814d24:	e0bff717 	ldw	r2,-36(fp)
  814d28:	10ffef36 	bltu	r2,r3,814ce8 <OSMemCreate+0x170>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
  814d2c:	e0bff817 	ldw	r2,-32(fp)
  814d30:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
  814d34:	e0fffa17 	ldw	r3,-24(fp)
  814d38:	e0bffb17 	ldw	r2,-20(fp)
  814d3c:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
  814d40:	e0fffa17 	ldw	r3,-24(fp)
  814d44:	e0bffb17 	ldw	r2,-20(fp)
  814d48:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
  814d4c:	e0fffa17 	ldw	r3,-24(fp)
  814d50:	e0bffc17 	ldw	r2,-16(fp)
  814d54:	18800415 	stw	r2,16(r3)
    pmem->OSMemNBlks    = nblks;
  814d58:	e0fffa17 	ldw	r3,-24(fp)
  814d5c:	e0bffc17 	ldw	r2,-16(fp)
  814d60:	18800315 	stw	r2,12(r3)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
  814d64:	e0fffa17 	ldw	r3,-24(fp)
  814d68:	e0bffd17 	ldw	r2,-12(fp)
  814d6c:	18800215 	stw	r2,8(r3)
    *perr               = OS_ERR_NONE;
  814d70:	e0bffe17 	ldw	r2,-8(fp)
  814d74:	10000005 	stb	zero,0(r2)
    return (pmem);
  814d78:	e0bffa17 	ldw	r2,-24(fp)
  814d7c:	e0bfff15 	stw	r2,-4(fp)
  814d80:	e0bfff17 	ldw	r2,-4(fp)
}
  814d84:	e037883a 	mov	sp,fp
  814d88:	df000017 	ldw	fp,0(sp)
  814d8c:	dec00104 	addi	sp,sp,4
  814d90:	f800283a 	ret

00814d94 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
  814d94:	defff704 	addi	sp,sp,-36
  814d98:	df000815 	stw	fp,32(sp)
  814d9c:	df000804 	addi	fp,sp,32
  814da0:	e13ffd15 	stw	r4,-12(fp)
  814da4:	e17ffe15 	stw	r5,-8(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  814da8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  814dac:	e0bffe17 	ldw	r2,-8(fp)
  814db0:	1004c03a 	cmpne	r2,r2,zero
  814db4:	1000021e 	bne	r2,zero,814dc0 <OSMemGet+0x2c>
        return ((void *)0);
  814db8:	e03fff15 	stw	zero,-4(fp)
  814dbc:	00003106 	br	814e84 <OSMemGet+0xf0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
  814dc0:	e0bffd17 	ldw	r2,-12(fp)
  814dc4:	1004c03a 	cmpne	r2,r2,zero
  814dc8:	1000051e 	bne	r2,zero,814de0 <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  814dcc:	e0fffe17 	ldw	r3,-8(fp)
  814dd0:	00801804 	movi	r2,96
  814dd4:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  814dd8:	e03fff15 	stw	zero,-4(fp)
  814ddc:	00002906 	br	814e84 <OSMemGet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814de0:	0005303a 	rdctl	r2,status
  814de4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814de8:	e0fffa17 	ldw	r3,-24(fp)
  814dec:	00bfff84 	movi	r2,-2
  814df0:	1884703a 	and	r2,r3,r2
  814df4:	1001703a 	wrctl	status,r2
  
  return context;
  814df8:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  814dfc:	e0bffb15 	stw	r2,-20(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
  814e00:	e0bffd17 	ldw	r2,-12(fp)
  814e04:	10800417 	ldw	r2,16(r2)
  814e08:	1005003a 	cmpeq	r2,r2,zero
  814e0c:	1000151e 	bne	r2,zero,814e64 <OSMemGet+0xd0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
  814e10:	e0bffd17 	ldw	r2,-12(fp)
  814e14:	10800117 	ldw	r2,4(r2)
  814e18:	e0bffc15 	stw	r2,-16(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
  814e1c:	e0bffc17 	ldw	r2,-16(fp)
  814e20:	10c00017 	ldw	r3,0(r2)
  814e24:	e0bffd17 	ldw	r2,-12(fp)
  814e28:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
  814e2c:	e0bffd17 	ldw	r2,-12(fp)
  814e30:	10800417 	ldw	r2,16(r2)
  814e34:	10ffffc4 	addi	r3,r2,-1
  814e38:	e0bffd17 	ldw	r2,-12(fp)
  814e3c:	10c00415 	stw	r3,16(r2)
  814e40:	e0bffb17 	ldw	r2,-20(fp)
  814e44:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814e48:	e0bff917 	ldw	r2,-28(fp)
  814e4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
  814e50:	e0bffe17 	ldw	r2,-8(fp)
  814e54:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
  814e58:	e0bffc17 	ldw	r2,-16(fp)
  814e5c:	e0bfff15 	stw	r2,-4(fp)
  814e60:	00000806 	br	814e84 <OSMemGet+0xf0>
  814e64:	e0bffb17 	ldw	r2,-20(fp)
  814e68:	e0bff815 	stw	r2,-32(fp)
  814e6c:	e0bff817 	ldw	r2,-32(fp)
  814e70:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
  814e74:	e0fffe17 	ldw	r3,-8(fp)
  814e78:	00801744 	movi	r2,93
  814e7c:	18800005 	stb	r2,0(r3)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
  814e80:	e03fff15 	stw	zero,-4(fp)
  814e84:	e0bfff17 	ldw	r2,-4(fp)
}
  814e88:	e037883a 	mov	sp,fp
  814e8c:	df000017 	ldw	fp,0(sp)
  814e90:	dec00104 	addi	sp,sp,4
  814e94:	f800283a 	ret

00814e98 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  814e98:	defff604 	addi	sp,sp,-40
  814e9c:	dfc00915 	stw	ra,36(sp)
  814ea0:	df000815 	stw	fp,32(sp)
  814ea4:	df000804 	addi	fp,sp,32
  814ea8:	e13ffc15 	stw	r4,-16(fp)
  814eac:	e17ffd15 	stw	r5,-12(fp)
  814eb0:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  814eb4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  814eb8:	e0bffe17 	ldw	r2,-8(fp)
  814ebc:	1004c03a 	cmpne	r2,r2,zero
  814ec0:	1000021e 	bne	r2,zero,814ecc <OSMemNameGet+0x34>
        return (0);
  814ec4:	e03fff15 	stw	zero,-4(fp)
  814ec8:	00003006 	br	814f8c <OSMemNameGet+0xf4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  814ecc:	e0bffc17 	ldw	r2,-16(fp)
  814ed0:	1004c03a 	cmpne	r2,r2,zero
  814ed4:	1000051e 	bne	r2,zero,814eec <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  814ed8:	e0fffe17 	ldw	r3,-8(fp)
  814edc:	00801804 	movi	r2,96
  814ee0:	18800005 	stb	r2,0(r3)
        return (0);
  814ee4:	e03fff15 	stw	zero,-4(fp)
  814ee8:	00002806 	br	814f8c <OSMemNameGet+0xf4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  814eec:	e0bffd17 	ldw	r2,-12(fp)
  814ef0:	1004c03a 	cmpne	r2,r2,zero
  814ef4:	1000051e 	bne	r2,zero,814f0c <OSMemNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  814ef8:	e0fffe17 	ldw	r3,-8(fp)
  814efc:	00800304 	movi	r2,12
  814f00:	18800005 	stb	r2,0(r3)
        return (0);
  814f04:	e03fff15 	stw	zero,-4(fp)
  814f08:	00002006 	br	814f8c <OSMemNameGet+0xf4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  814f0c:	008020b4 	movhi	r2,130
  814f10:	10828a04 	addi	r2,r2,2600
  814f14:	10800003 	ldbu	r2,0(r2)
  814f18:	10803fcc 	andi	r2,r2,255
  814f1c:	1005003a 	cmpeq	r2,r2,zero
  814f20:	1000051e 	bne	r2,zero,814f38 <OSMemNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
  814f24:	e0fffe17 	ldw	r3,-8(fp)
  814f28:	00800444 	movi	r2,17
  814f2c:	18800005 	stb	r2,0(r3)
        return (0);
  814f30:	e03fff15 	stw	zero,-4(fp)
  814f34:	00001506 	br	814f8c <OSMemNameGet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814f38:	0005303a 	rdctl	r2,status
  814f3c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814f40:	e0fff917 	ldw	r3,-28(fp)
  814f44:	00bfff84 	movi	r2,-2
  814f48:	1884703a 	and	r2,r3,r2
  814f4c:	1001703a 	wrctl	status,r2
  
  return context;
  814f50:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  814f54:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
  814f58:	e0bffc17 	ldw	r2,-16(fp)
  814f5c:	11400504 	addi	r5,r2,20
  814f60:	e13ffd17 	ldw	r4,-12(fp)
  814f64:	0812b0c0 	call	812b0c <OS_StrCopy>
  814f68:	e0bffb05 	stb	r2,-20(fp)
  814f6c:	e0bffa17 	ldw	r2,-24(fp)
  814f70:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814f74:	e0bff817 	ldw	r2,-32(fp)
  814f78:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  814f7c:	e0bffe17 	ldw	r2,-8(fp)
  814f80:	10000005 	stb	zero,0(r2)
    return (len);
  814f84:	e0bffb03 	ldbu	r2,-20(fp)
  814f88:	e0bfff15 	stw	r2,-4(fp)
  814f8c:	e0bfff17 	ldw	r2,-4(fp)
}
  814f90:	e037883a 	mov	sp,fp
  814f94:	dfc00117 	ldw	ra,4(sp)
  814f98:	df000017 	ldw	fp,0(sp)
  814f9c:	dec00204 	addi	sp,sp,8
  814fa0:	f800283a 	ret

00814fa4 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  814fa4:	defff604 	addi	sp,sp,-40
  814fa8:	dfc00915 	stw	ra,36(sp)
  814fac:	df000815 	stw	fp,32(sp)
  814fb0:	df000804 	addi	fp,sp,32
  814fb4:	e13ffd15 	stw	r4,-12(fp)
  814fb8:	e17ffe15 	stw	r5,-8(fp)
  814fbc:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  814fc0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  814fc4:	e0bfff17 	ldw	r2,-4(fp)
  814fc8:	1005003a 	cmpeq	r2,r2,zero
  814fcc:	1000381e 	bne	r2,zero,8150b0 <OSMemNameSet+0x10c>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  814fd0:	e0bffd17 	ldw	r2,-12(fp)
  814fd4:	1004c03a 	cmpne	r2,r2,zero
  814fd8:	1000041e 	bne	r2,zero,814fec <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  814fdc:	e0ffff17 	ldw	r3,-4(fp)
  814fe0:	00801804 	movi	r2,96
  814fe4:	18800005 	stb	r2,0(r3)
        return;
  814fe8:	00003106 	br	8150b0 <OSMemNameSet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  814fec:	e0bffe17 	ldw	r2,-8(fp)
  814ff0:	1004c03a 	cmpne	r2,r2,zero
  814ff4:	1000041e 	bne	r2,zero,815008 <OSMemNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  814ff8:	e0ffff17 	ldw	r3,-4(fp)
  814ffc:	00800304 	movi	r2,12
  815000:	18800005 	stb	r2,0(r3)
        return;
  815004:	00002a06 	br	8150b0 <OSMemNameSet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  815008:	008020b4 	movhi	r2,130
  81500c:	10828a04 	addi	r2,r2,2600
  815010:	10800003 	ldbu	r2,0(r2)
  815014:	10803fcc 	andi	r2,r2,255
  815018:	1005003a 	cmpeq	r2,r2,zero
  81501c:	1000041e 	bne	r2,zero,815030 <OSMemNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
  815020:	e0ffff17 	ldw	r3,-4(fp)
  815024:	00800484 	movi	r2,18
  815028:	18800005 	stb	r2,0(r3)
        return;
  81502c:	00002006 	br	8150b0 <OSMemNameSet+0x10c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815030:	0005303a 	rdctl	r2,status
  815034:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815038:	e0fffa17 	ldw	r3,-24(fp)
  81503c:	00bfff84 	movi	r2,-2
  815040:	1884703a 	and	r2,r3,r2
  815044:	1001703a 	wrctl	status,r2
  
  return context;
  815048:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  81504c:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  815050:	e13ffe17 	ldw	r4,-8(fp)
  815054:	0812b8c0 	call	812b8c <OS_StrLen>
  815058:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
  81505c:	e0bffc03 	ldbu	r2,-16(fp)
  815060:	10800830 	cmpltui	r2,r2,32
  815064:	1000081e 	bne	r2,zero,815088 <OSMemNameSet+0xe4>
  815068:	e0bffb17 	ldw	r2,-20(fp)
  81506c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815070:	e0bff917 	ldw	r2,-28(fp)
  815074:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
  815078:	e0ffff17 	ldw	r3,-4(fp)
  81507c:	008018c4 	movi	r2,99
  815080:	18800005 	stb	r2,0(r3)
        return;
  815084:	00000a06 	br	8150b0 <OSMemNameSet+0x10c>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
  815088:	e0bffd17 	ldw	r2,-12(fp)
  81508c:	11000504 	addi	r4,r2,20
  815090:	e17ffe17 	ldw	r5,-8(fp)
  815094:	0812b0c0 	call	812b0c <OS_StrCopy>
  815098:	e0bffb17 	ldw	r2,-20(fp)
  81509c:	e0bff815 	stw	r2,-32(fp)
  8150a0:	e0bff817 	ldw	r2,-32(fp)
  8150a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  8150a8:	e0bfff17 	ldw	r2,-4(fp)
  8150ac:	10000005 	stb	zero,0(r2)
}
  8150b0:	e037883a 	mov	sp,fp
  8150b4:	dfc00117 	ldw	ra,4(sp)
  8150b8:	df000017 	ldw	fp,0(sp)
  8150bc:	dec00204 	addi	sp,sp,8
  8150c0:	f800283a 	ret

008150c4 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
  8150c4:	defff804 	addi	sp,sp,-32
  8150c8:	df000715 	stw	fp,28(sp)
  8150cc:	df000704 	addi	fp,sp,28
  8150d0:	e13ffd15 	stw	r4,-12(fp)
  8150d4:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8150d8:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  8150dc:	e0bffd17 	ldw	r2,-12(fp)
  8150e0:	1004c03a 	cmpne	r2,r2,zero
  8150e4:	1000031e 	bne	r2,zero,8150f4 <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
  8150e8:	00801804 	movi	r2,96
  8150ec:	e0bfff15 	stw	r2,-4(fp)
  8150f0:	00002b06 	br	8151a0 <OSMemPut+0xdc>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
  8150f4:	e0bffe17 	ldw	r2,-8(fp)
  8150f8:	1004c03a 	cmpne	r2,r2,zero
  8150fc:	1000031e 	bne	r2,zero,81510c <OSMemPut+0x48>
        return (OS_ERR_MEM_INVALID_PBLK);
  815100:	008017c4 	movi	r2,95
  815104:	e0bfff15 	stw	r2,-4(fp)
  815108:	00002506 	br	8151a0 <OSMemPut+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81510c:	0005303a 	rdctl	r2,status
  815110:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815114:	e0fffb17 	ldw	r3,-20(fp)
  815118:	00bfff84 	movi	r2,-2
  81511c:	1884703a 	and	r2,r3,r2
  815120:	1001703a 	wrctl	status,r2
  
  return context;
  815124:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  815128:	e0bffc15 	stw	r2,-16(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
  81512c:	e0bffd17 	ldw	r2,-12(fp)
  815130:	10c00417 	ldw	r3,16(r2)
  815134:	e0bffd17 	ldw	r2,-12(fp)
  815138:	10800317 	ldw	r2,12(r2)
  81513c:	18800736 	bltu	r3,r2,81515c <OSMemPut+0x98>
  815140:	e0bffc17 	ldw	r2,-16(fp)
  815144:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815148:	e0bffa17 	ldw	r2,-24(fp)
  81514c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
  815150:	00801784 	movi	r2,94
  815154:	e0bfff15 	stw	r2,-4(fp)
  815158:	00001106 	br	8151a0 <OSMemPut+0xdc>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
  81515c:	e0fffe17 	ldw	r3,-8(fp)
  815160:	e0bffd17 	ldw	r2,-12(fp)
  815164:	10800117 	ldw	r2,4(r2)
  815168:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = pblk;
  81516c:	e0fffd17 	ldw	r3,-12(fp)
  815170:	e0bffe17 	ldw	r2,-8(fp)
  815174:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
  815178:	e0bffd17 	ldw	r2,-12(fp)
  81517c:	10800417 	ldw	r2,16(r2)
  815180:	10c00044 	addi	r3,r2,1
  815184:	e0bffd17 	ldw	r2,-12(fp)
  815188:	10c00415 	stw	r3,16(r2)
  81518c:	e0bffc17 	ldw	r2,-16(fp)
  815190:	e0bff915 	stw	r2,-28(fp)
  815194:	e0bff917 	ldw	r2,-28(fp)
  815198:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
  81519c:	e03fff15 	stw	zero,-4(fp)
  8151a0:	e0bfff17 	ldw	r2,-4(fp)
}
  8151a4:	e037883a 	mov	sp,fp
  8151a8:	df000017 	ldw	fp,0(sp)
  8151ac:	dec00104 	addi	sp,sp,4
  8151b0:	f800283a 	ret

008151b4 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
  8151b4:	defff904 	addi	sp,sp,-28
  8151b8:	df000615 	stw	fp,24(sp)
  8151bc:	df000604 	addi	fp,sp,24
  8151c0:	e13ffd15 	stw	r4,-12(fp)
  8151c4:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8151c8:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  8151cc:	e0bffd17 	ldw	r2,-12(fp)
  8151d0:	1004c03a 	cmpne	r2,r2,zero
  8151d4:	1000031e 	bne	r2,zero,8151e4 <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
  8151d8:	00801804 	movi	r2,96
  8151dc:	e0bfff15 	stw	r2,-4(fp)
  8151e0:	00002e06 	br	81529c <OSMemQuery+0xe8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
  8151e4:	e0bffe17 	ldw	r2,-8(fp)
  8151e8:	1004c03a 	cmpne	r2,r2,zero
  8151ec:	1000031e 	bne	r2,zero,8151fc <OSMemQuery+0x48>
        return (OS_ERR_MEM_INVALID_PDATA);
  8151f0:	00801844 	movi	r2,97
  8151f4:	e0bfff15 	stw	r2,-4(fp)
  8151f8:	00002806 	br	81529c <OSMemQuery+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8151fc:	0005303a 	rdctl	r2,status
  815200:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815204:	e0fffb17 	ldw	r3,-20(fp)
  815208:	00bfff84 	movi	r2,-2
  81520c:	1884703a 	and	r2,r3,r2
  815210:	1001703a 	wrctl	status,r2
  
  return context;
  815214:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  815218:	e0bffc15 	stw	r2,-16(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
  81521c:	e0bffd17 	ldw	r2,-12(fp)
  815220:	10c00017 	ldw	r3,0(r2)
  815224:	e0bffe17 	ldw	r2,-8(fp)
  815228:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
  81522c:	e0bffd17 	ldw	r2,-12(fp)
  815230:	10c00117 	ldw	r3,4(r2)
  815234:	e0bffe17 	ldw	r2,-8(fp)
  815238:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
  81523c:	e0bffd17 	ldw	r2,-12(fp)
  815240:	10c00217 	ldw	r3,8(r2)
  815244:	e0bffe17 	ldw	r2,-8(fp)
  815248:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
  81524c:	e0bffd17 	ldw	r2,-12(fp)
  815250:	10c00317 	ldw	r3,12(r2)
  815254:	e0bffe17 	ldw	r2,-8(fp)
  815258:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
  81525c:	e0bffd17 	ldw	r2,-12(fp)
  815260:	10c00417 	ldw	r3,16(r2)
  815264:	e0bffe17 	ldw	r2,-8(fp)
  815268:	10c00415 	stw	r3,16(r2)
  81526c:	e0bffc17 	ldw	r2,-16(fp)
  815270:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815274:	e0bffa17 	ldw	r2,-24(fp)
  815278:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
  81527c:	e0bffe17 	ldw	r2,-8(fp)
  815280:	10c00317 	ldw	r3,12(r2)
  815284:	e0bffe17 	ldw	r2,-8(fp)
  815288:	10800417 	ldw	r2,16(r2)
  81528c:	1887c83a 	sub	r3,r3,r2
  815290:	e0bffe17 	ldw	r2,-8(fp)
  815294:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
  815298:	e03fff15 	stw	zero,-4(fp)
  81529c:	e0bfff17 	ldw	r2,-4(fp)
}
  8152a0:	e037883a 	mov	sp,fp
  8152a4:	df000017 	ldw	fp,0(sp)
  8152a8:	dec00104 	addi	sp,sp,4
  8152ac:	f800283a 	ret

008152b0 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
  8152b0:	defffc04 	addi	sp,sp,-16
  8152b4:	dfc00315 	stw	ra,12(sp)
  8152b8:	df000215 	stw	fp,8(sp)
  8152bc:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
  8152c0:	010020b4 	movhi	r4,130
  8152c4:	21154f04 	addi	r4,r4,21820
  8152c8:	01430c04 	movi	r5,3120
  8152cc:	08129080 	call	812908 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
  8152d0:	008020b4 	movhi	r2,130
  8152d4:	10954f04 	addi	r2,r2,21820
  8152d8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  8152dc:	e03ffe0d 	sth	zero,-8(fp)
  8152e0:	00001306 	br	815330 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
  8152e4:	e0bffe0b 	ldhu	r2,-8(fp)
  8152e8:	10800d24 	muli	r2,r2,52
  8152ec:	1007883a 	mov	r3,r2
  8152f0:	008020b4 	movhi	r2,130
  8152f4:	10955c04 	addi	r2,r2,21872
  8152f8:	1887883a 	add	r3,r3,r2
  8152fc:	e0bfff17 	ldw	r2,-4(fp)
  815300:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
  815304:	e0ffff17 	ldw	r3,-4(fp)
  815308:	00800fc4 	movi	r2,63
  81530c:	18800505 	stb	r2,20(r3)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
  815310:	e0bfff17 	ldw	r2,-4(fp)
  815314:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
  815318:	e0bfff17 	ldw	r2,-4(fp)
  81531c:	10800d04 	addi	r2,r2,52
  815320:	e0bfff15 	stw	r2,-4(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  815324:	e0bffe0b 	ldhu	r2,-8(fp)
  815328:	10800044 	addi	r2,r2,1
  81532c:	e0bffe0d 	sth	r2,-8(fp)
  815330:	e0bffe0b 	ldhu	r2,-8(fp)
  815334:	10800ef0 	cmpltui	r2,r2,59
  815338:	103fea1e 	bne	r2,zero,8152e4 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
  81533c:	e0bfff17 	ldw	r2,-4(fp)
  815340:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
  815344:	e0ffff17 	ldw	r3,-4(fp)
  815348:	00800fc4 	movi	r2,63
  81534c:	18800505 	stb	r2,20(r3)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
  815350:	e0bfff17 	ldw	r2,-4(fp)
  815354:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
  815358:	00c020b4 	movhi	r3,130
  81535c:	18c28504 	addi	r3,r3,2580
  815360:	008020b4 	movhi	r2,130
  815364:	10954f04 	addi	r2,r2,21820
  815368:	18800015 	stw	r2,0(r3)
#endif
}
  81536c:	e037883a 	mov	sp,fp
  815370:	dfc00117 	ldw	ra,4(sp)
  815374:	df000017 	ldw	fp,0(sp)
  815378:	dec00204 	addi	sp,sp,8
  81537c:	f800283a 	ret

00815380 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
  815380:	defff704 	addi	sp,sp,-36
  815384:	df000815 	stw	fp,32(sp)
  815388:	df000804 	addi	fp,sp,32
  81538c:	e13ffd15 	stw	r4,-12(fp)
  815390:	e17ffe15 	stw	r5,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  815394:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  815398:	e0bffe17 	ldw	r2,-8(fp)
  81539c:	1004c03a 	cmpne	r2,r2,zero
  8153a0:	1000021e 	bne	r2,zero,8153ac <OSQAccept+0x2c>
        return ((void *)0);
  8153a4:	e03fff15 	stw	zero,-4(fp)
  8153a8:	00004506 	br	8154c0 <OSQAccept+0x140>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  8153ac:	e0bffd17 	ldw	r2,-12(fp)
  8153b0:	1004c03a 	cmpne	r2,r2,zero
  8153b4:	1000051e 	bne	r2,zero,8153cc <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
  8153b8:	e0fffe17 	ldw	r3,-8(fp)
  8153bc:	00800104 	movi	r2,4
  8153c0:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  8153c4:	e03fff15 	stw	zero,-4(fp)
  8153c8:	00003d06 	br	8154c0 <OSQAccept+0x140>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  8153cc:	e0bffd17 	ldw	r2,-12(fp)
  8153d0:	10800003 	ldbu	r2,0(r2)
  8153d4:	10803fcc 	andi	r2,r2,255
  8153d8:	108000a0 	cmpeqi	r2,r2,2
  8153dc:	1000051e 	bne	r2,zero,8153f4 <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
  8153e0:	e0fffe17 	ldw	r3,-8(fp)
  8153e4:	00800044 	movi	r2,1
  8153e8:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  8153ec:	e03fff15 	stw	zero,-4(fp)
  8153f0:	00003306 	br	8154c0 <OSQAccept+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8153f4:	0005303a 	rdctl	r2,status
  8153f8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8153fc:	e0fff917 	ldw	r3,-28(fp)
  815400:	00bfff84 	movi	r2,-2
  815404:	1884703a 	and	r2,r3,r2
  815408:	1001703a 	wrctl	status,r2
  
  return context;
  81540c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  815410:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  815414:	e0bffd17 	ldw	r2,-12(fp)
  815418:	10800117 	ldw	r2,4(r2)
  81541c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  815420:	e0bffb17 	ldw	r2,-20(fp)
  815424:	1080058b 	ldhu	r2,22(r2)
  815428:	10bfffcc 	andi	r2,r2,65535
  81542c:	1005003a 	cmpeq	r2,r2,zero
  815430:	1000191e 	bne	r2,zero,815498 <OSQAccept+0x118>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  815434:	e0bffb17 	ldw	r2,-20(fp)
  815438:	10c00417 	ldw	r3,16(r2)
  81543c:	18800017 	ldw	r2,0(r3)
  815440:	e0bffc15 	stw	r2,-16(fp)
  815444:	18c00104 	addi	r3,r3,4
  815448:	e0bffb17 	ldw	r2,-20(fp)
  81544c:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  815450:	e0bffb17 	ldw	r2,-20(fp)
  815454:	1080058b 	ldhu	r2,22(r2)
  815458:	10bfffc4 	addi	r2,r2,-1
  81545c:	1007883a 	mov	r3,r2
  815460:	e0bffb17 	ldw	r2,-20(fp)
  815464:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  815468:	e0bffb17 	ldw	r2,-20(fp)
  81546c:	10c00417 	ldw	r3,16(r2)
  815470:	e0bffb17 	ldw	r2,-20(fp)
  815474:	10800217 	ldw	r2,8(r2)
  815478:	1880041e 	bne	r3,r2,81548c <OSQAccept+0x10c>
            pq->OSQOut = pq->OSQStart;
  81547c:	e0bffb17 	ldw	r2,-20(fp)
  815480:	10c00117 	ldw	r3,4(r2)
  815484:	e0bffb17 	ldw	r2,-20(fp)
  815488:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
  81548c:	e0bffe17 	ldw	r2,-8(fp)
  815490:	10000005 	stb	zero,0(r2)
  815494:	00000406 	br	8154a8 <OSQAccept+0x128>
    } else {
        *perr = OS_ERR_Q_EMPTY;
  815498:	e0fffe17 	ldw	r3,-8(fp)
  81549c:	008007c4 	movi	r2,31
  8154a0:	18800005 	stb	r2,0(r3)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
  8154a4:	e03ffc15 	stw	zero,-16(fp)
  8154a8:	e0bffa17 	ldw	r2,-24(fp)
  8154ac:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8154b0:	e0bff817 	ldw	r2,-32(fp)
  8154b4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
  8154b8:	e0bffc17 	ldw	r2,-16(fp)
  8154bc:	e0bfff15 	stw	r2,-4(fp)
  8154c0:	e0bfff17 	ldw	r2,-4(fp)
}
  8154c4:	e037883a 	mov	sp,fp
  8154c8:	df000017 	ldw	fp,0(sp)
  8154cc:	dec00104 	addi	sp,sp,4
  8154d0:	f800283a 	ret

008154d4 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
  8154d4:	defff304 	addi	sp,sp,-52
  8154d8:	dfc00c15 	stw	ra,48(sp)
  8154dc:	df000b15 	stw	fp,44(sp)
  8154e0:	df000b04 	addi	fp,sp,44
  8154e4:	e13ffd15 	stw	r4,-12(fp)
  8154e8:	e17ffe0d 	sth	r5,-8(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8154ec:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  8154f0:	008020b4 	movhi	r2,130
  8154f4:	10828a04 	addi	r2,r2,2600
  8154f8:	10800003 	ldbu	r2,0(r2)
  8154fc:	10803fcc 	andi	r2,r2,255
  815500:	1005003a 	cmpeq	r2,r2,zero
  815504:	1000021e 	bne	r2,zero,815510 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
  815508:	e03fff15 	stw	zero,-4(fp)
  81550c:	00007006 	br	8156d0 <OSQCreate+0x1fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815510:	0005303a 	rdctl	r2,status
  815514:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815518:	e0fff917 	ldw	r3,-28(fp)
  81551c:	00bfff84 	movi	r2,-2
  815520:	1884703a 	and	r2,r3,r2
  815524:	1001703a 	wrctl	status,r2
  
  return context;
  815528:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  81552c:	e0bffa15 	stw	r2,-24(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
  815530:	008020b4 	movhi	r2,130
  815534:	10828904 	addi	r2,r2,2596
  815538:	10800017 	ldw	r2,0(r2)
  81553c:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
  815540:	008020b4 	movhi	r2,130
  815544:	10828904 	addi	r2,r2,2596
  815548:	10800017 	ldw	r2,0(r2)
  81554c:	1005003a 	cmpeq	r2,r2,zero
  815550:	1000081e 	bne	r2,zero,815574 <OSQCreate+0xa0>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  815554:	008020b4 	movhi	r2,130
  815558:	10828904 	addi	r2,r2,2596
  81555c:	10800017 	ldw	r2,0(r2)
  815560:	10800117 	ldw	r2,4(r2)
  815564:	1007883a 	mov	r3,r2
  815568:	008020b4 	movhi	r2,130
  81556c:	10828904 	addi	r2,r2,2596
  815570:	10c00015 	stw	r3,0(r2)
  815574:	e0bffa17 	ldw	r2,-24(fp)
  815578:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81557c:	e0bff817 	ldw	r2,-32(fp)
  815580:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
  815584:	e0bffc17 	ldw	r2,-16(fp)
  815588:	1005003a 	cmpeq	r2,r2,zero
  81558c:	10004e1e 	bne	r2,zero,8156c8 <OSQCreate+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815590:	0005303a 	rdctl	r2,status
  815594:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815598:	e0fff717 	ldw	r3,-36(fp)
  81559c:	00bfff84 	movi	r2,-2
  8155a0:	1884703a 	and	r2,r3,r2
  8155a4:	1001703a 	wrctl	status,r2
  
  return context;
  8155a8:	e0bff717 	ldw	r2,-36(fp)
        OS_ENTER_CRITICAL();
  8155ac:	e0bffa15 	stw	r2,-24(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
  8155b0:	008020b4 	movhi	r2,130
  8155b4:	10828704 	addi	r2,r2,2588
  8155b8:	10800017 	ldw	r2,0(r2)
  8155bc:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
  8155c0:	e0bffb17 	ldw	r2,-20(fp)
  8155c4:	1005003a 	cmpeq	r2,r2,zero
  8155c8:	1000311e 	bne	r2,zero,815690 <OSQCreate+0x1bc>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
  8155cc:	008020b4 	movhi	r2,130
  8155d0:	10828704 	addi	r2,r2,2588
  8155d4:	10800017 	ldw	r2,0(r2)
  8155d8:	10c00017 	ldw	r3,0(r2)
  8155dc:	008020b4 	movhi	r2,130
  8155e0:	10828704 	addi	r2,r2,2588
  8155e4:	10c00015 	stw	r3,0(r2)
  8155e8:	e0bffa17 	ldw	r2,-24(fp)
  8155ec:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8155f0:	e0bff617 	ldw	r2,-40(fp)
  8155f4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
  8155f8:	e0fffb17 	ldw	r3,-20(fp)
  8155fc:	e0bffd17 	ldw	r2,-12(fp)
  815600:	18800115 	stw	r2,4(r3)
            pq->OSQEnd             = &start[size];
  815604:	e0bffe0b 	ldhu	r2,-8(fp)
  815608:	1085883a 	add	r2,r2,r2
  81560c:	1085883a 	add	r2,r2,r2
  815610:	1007883a 	mov	r3,r2
  815614:	e0bffd17 	ldw	r2,-12(fp)
  815618:	1887883a 	add	r3,r3,r2
  81561c:	e0bffb17 	ldw	r2,-20(fp)
  815620:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
  815624:	e0fffb17 	ldw	r3,-20(fp)
  815628:	e0bffd17 	ldw	r2,-12(fp)
  81562c:	18800315 	stw	r2,12(r3)
            pq->OSQOut             = start;
  815630:	e0fffb17 	ldw	r3,-20(fp)
  815634:	e0bffd17 	ldw	r2,-12(fp)
  815638:	18800415 	stw	r2,16(r3)
            pq->OSQSize            = size;
  81563c:	e0fffb17 	ldw	r3,-20(fp)
  815640:	e0bffe0b 	ldhu	r2,-8(fp)
  815644:	1880050d 	sth	r2,20(r3)
            pq->OSQEntries         = 0;
  815648:	e0bffb17 	ldw	r2,-20(fp)
  81564c:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
  815650:	e0fffc17 	ldw	r3,-16(fp)
  815654:	00800084 	movi	r2,2
  815658:	18800005 	stb	r2,0(r3)
            pevent->OSEventCnt     = 0;
  81565c:	e0bffc17 	ldw	r2,-16(fp)
  815660:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
  815664:	e0fffc17 	ldw	r3,-16(fp)
  815668:	e0bffb17 	ldw	r2,-20(fp)
  81566c:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
  815670:	e0fffc17 	ldw	r3,-16(fp)
  815674:	00800fc4 	movi	r2,63
  815678:	18800385 	stb	r2,14(r3)
            pevent->OSEventName[1] = OS_ASCII_NUL;
  81567c:	e0bffc17 	ldw	r2,-16(fp)
  815680:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
  815684:	e13ffc17 	ldw	r4,-16(fp)
  815688:	081253c0 	call	81253c <OS_EventWaitListInit>
  81568c:	00000e06 	br	8156c8 <OSQCreate+0x1f4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
  815690:	008020b4 	movhi	r2,130
  815694:	10828904 	addi	r2,r2,2596
  815698:	10c00017 	ldw	r3,0(r2)
  81569c:	e0bffc17 	ldw	r2,-16(fp)
  8156a0:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
  8156a4:	00c020b4 	movhi	r3,130
  8156a8:	18c28904 	addi	r3,r3,2596
  8156ac:	e0bffc17 	ldw	r2,-16(fp)
  8156b0:	18800015 	stw	r2,0(r3)
  8156b4:	e0bffa17 	ldw	r2,-24(fp)
  8156b8:	e0bff515 	stw	r2,-44(fp)
  8156bc:	e0bff517 	ldw	r2,-44(fp)
  8156c0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
  8156c4:	e03ffc15 	stw	zero,-16(fp)
        }
    }
    return (pevent);
  8156c8:	e0bffc17 	ldw	r2,-16(fp)
  8156cc:	e0bfff15 	stw	r2,-4(fp)
  8156d0:	e0bfff17 	ldw	r2,-4(fp)
}
  8156d4:	e037883a 	mov	sp,fp
  8156d8:	dfc00117 	ldw	ra,4(sp)
  8156dc:	df000017 	ldw	fp,0(sp)
  8156e0:	dec00204 	addi	sp,sp,8
  8156e4:	f800283a 	ret

008156e8 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  8156e8:	defff004 	addi	sp,sp,-64
  8156ec:	dfc00f15 	stw	ra,60(sp)
  8156f0:	df000e15 	stw	fp,56(sp)
  8156f4:	df000e04 	addi	fp,sp,56
  8156f8:	e13ffb15 	stw	r4,-20(fp)
  8156fc:	e1bffd15 	stw	r6,-12(fp)
  815700:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  815704:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  815708:	e0bffd17 	ldw	r2,-12(fp)
  81570c:	1004c03a 	cmpne	r2,r2,zero
  815710:	1000031e 	bne	r2,zero,815720 <OSQDel+0x38>
        return (pevent);
  815714:	e0bffb17 	ldw	r2,-20(fp)
  815718:	e0bfff15 	stw	r2,-4(fp)
  81571c:	0000ac06 	br	8159d0 <OSQDel+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  815720:	e0bffb17 	ldw	r2,-20(fp)
  815724:	1004c03a 	cmpne	r2,r2,zero
  815728:	1000061e 	bne	r2,zero,815744 <OSQDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
  81572c:	e0fffd17 	ldw	r3,-12(fp)
  815730:	00800104 	movi	r2,4
  815734:	18800005 	stb	r2,0(r3)
        return (pevent);
  815738:	e0fffb17 	ldw	r3,-20(fp)
  81573c:	e0ffff15 	stw	r3,-4(fp)
  815740:	0000a306 	br	8159d0 <OSQDel+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  815744:	e0bffb17 	ldw	r2,-20(fp)
  815748:	10800003 	ldbu	r2,0(r2)
  81574c:	10803fcc 	andi	r2,r2,255
  815750:	108000a0 	cmpeqi	r2,r2,2
  815754:	1000061e 	bne	r2,zero,815770 <OSQDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
  815758:	e0fffd17 	ldw	r3,-12(fp)
  81575c:	00800044 	movi	r2,1
  815760:	18800005 	stb	r2,0(r3)
        return (pevent);
  815764:	e0bffb17 	ldw	r2,-20(fp)
  815768:	e0bfff15 	stw	r2,-4(fp)
  81576c:	00009806 	br	8159d0 <OSQDel+0x2e8>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  815770:	008020b4 	movhi	r2,130
  815774:	10828a04 	addi	r2,r2,2600
  815778:	10800003 	ldbu	r2,0(r2)
  81577c:	10803fcc 	andi	r2,r2,255
  815780:	1005003a 	cmpeq	r2,r2,zero
  815784:	1000061e 	bne	r2,zero,8157a0 <OSQDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  815788:	e0fffd17 	ldw	r3,-12(fp)
  81578c:	008003c4 	movi	r2,15
  815790:	18800005 	stb	r2,0(r3)
        return (pevent);
  815794:	e0fffb17 	ldw	r3,-20(fp)
  815798:	e0ffff15 	stw	r3,-4(fp)
  81579c:	00008c06 	br	8159d0 <OSQDel+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8157a0:	0005303a 	rdctl	r2,status
  8157a4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8157a8:	e0fff617 	ldw	r3,-40(fp)
  8157ac:	00bfff84 	movi	r2,-2
  8157b0:	1884703a 	and	r2,r3,r2
  8157b4:	1001703a 	wrctl	status,r2
  
  return context;
  8157b8:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
  8157bc:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
  8157c0:	e0bffb17 	ldw	r2,-20(fp)
  8157c4:	10800283 	ldbu	r2,10(r2)
  8157c8:	10803fcc 	andi	r2,r2,255
  8157cc:	1005003a 	cmpeq	r2,r2,zero
  8157d0:	1000031e 	bne	r2,zero,8157e0 <OSQDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  8157d4:	00800044 	movi	r2,1
  8157d8:	e0bffa05 	stb	r2,-24(fp)
  8157dc:	00000106 	br	8157e4 <OSQDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  8157e0:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  8157e4:	e0bffc03 	ldbu	r2,-16(fp)
  8157e8:	e0bffe15 	stw	r2,-8(fp)
  8157ec:	e0fffe17 	ldw	r3,-8(fp)
  8157f0:	1805003a 	cmpeq	r2,r3,zero
  8157f4:	1000041e 	bne	r2,zero,815808 <OSQDel+0x120>
  8157f8:	e0fffe17 	ldw	r3,-8(fp)
  8157fc:	18800060 	cmpeqi	r2,r3,1
  815800:	1000391e 	bne	r2,zero,8158e8 <OSQDel+0x200>
  815804:	00006706 	br	8159a4 <OSQDel+0x2bc>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
  815808:	e0bffa03 	ldbu	r2,-24(fp)
  81580c:	1004c03a 	cmpne	r2,r2,zero
  815810:	1000261e 	bne	r2,zero,8158ac <OSQDel+0x1c4>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  815814:	e0fffb17 	ldw	r3,-20(fp)
  815818:	00800fc4 	movi	r2,63
  81581c:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  815820:	e0bffb17 	ldw	r2,-20(fp)
  815824:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
  815828:	e0bffb17 	ldw	r2,-20(fp)
  81582c:	10800117 	ldw	r2,4(r2)
  815830:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
  815834:	008020b4 	movhi	r2,130
  815838:	10828704 	addi	r2,r2,2588
  81583c:	10c00017 	ldw	r3,0(r2)
  815840:	e0bff817 	ldw	r2,-32(fp)
  815844:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
  815848:	00c020b4 	movhi	r3,130
  81584c:	18c28704 	addi	r3,r3,2588
  815850:	e0bff817 	ldw	r2,-32(fp)
  815854:	18800015 	stw	r2,0(r3)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  815858:	e0bffb17 	ldw	r2,-20(fp)
  81585c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  815860:	008020b4 	movhi	r2,130
  815864:	10828904 	addi	r2,r2,2596
  815868:	10c00017 	ldw	r3,0(r2)
  81586c:	e0bffb17 	ldw	r2,-20(fp)
  815870:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  815874:	e0bffb17 	ldw	r2,-20(fp)
  815878:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  81587c:	00c020b4 	movhi	r3,130
  815880:	18c28904 	addi	r3,r3,2596
  815884:	e0bffb17 	ldw	r2,-20(fp)
  815888:	18800015 	stw	r2,0(r3)
  81588c:	e0bff717 	ldw	r2,-36(fp)
  815890:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815894:	e0bff517 	ldw	r2,-44(fp)
  815898:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  81589c:	e0bffd17 	ldw	r2,-12(fp)
  8158a0:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
  8158a4:	e03ff915 	stw	zero,-28(fp)
  8158a8:	00004706 	br	8159c8 <OSQDel+0x2e0>
  8158ac:	e0bff717 	ldw	r2,-36(fp)
  8158b0:	e0bff415 	stw	r2,-48(fp)
  8158b4:	e0bff417 	ldw	r2,-48(fp)
  8158b8:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  8158bc:	e0fffd17 	ldw	r3,-12(fp)
  8158c0:	00801244 	movi	r2,73
  8158c4:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
  8158c8:	e0bffb17 	ldw	r2,-20(fp)
  8158cc:	e0bff915 	stw	r2,-28(fp)
             }
             break;
  8158d0:	00003d06 	br	8159c8 <OSQDel+0x2e0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
  8158d4:	e13ffb17 	ldw	r4,-20(fp)
  8158d8:	000b883a 	mov	r5,zero
  8158dc:	01800104 	movi	r6,4
  8158e0:	000f883a 	mov	r7,zero
  8158e4:	0811f880 	call	811f88 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
  8158e8:	e0bffb17 	ldw	r2,-20(fp)
  8158ec:	10800283 	ldbu	r2,10(r2)
  8158f0:	10803fcc 	andi	r2,r2,255
  8158f4:	1004c03a 	cmpne	r2,r2,zero
  8158f8:	103ff61e 	bne	r2,zero,8158d4 <OSQDel+0x1ec>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  8158fc:	e0fffb17 	ldw	r3,-20(fp)
  815900:	00800fc4 	movi	r2,63
  815904:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  815908:	e0bffb17 	ldw	r2,-20(fp)
  81590c:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
  815910:	e0bffb17 	ldw	r2,-20(fp)
  815914:	10800117 	ldw	r2,4(r2)
  815918:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
  81591c:	008020b4 	movhi	r2,130
  815920:	10828704 	addi	r2,r2,2588
  815924:	10c00017 	ldw	r3,0(r2)
  815928:	e0bff817 	ldw	r2,-32(fp)
  81592c:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
  815930:	00c020b4 	movhi	r3,130
  815934:	18c28704 	addi	r3,r3,2588
  815938:	e0bff817 	ldw	r2,-32(fp)
  81593c:	18800015 	stw	r2,0(r3)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  815940:	e0bffb17 	ldw	r2,-20(fp)
  815944:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  815948:	008020b4 	movhi	r2,130
  81594c:	10828904 	addi	r2,r2,2596
  815950:	10c00017 	ldw	r3,0(r2)
  815954:	e0bffb17 	ldw	r2,-20(fp)
  815958:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  81595c:	e0bffb17 	ldw	r2,-20(fp)
  815960:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  815964:	00c020b4 	movhi	r3,130
  815968:	18c28904 	addi	r3,r3,2596
  81596c:	e0bffb17 	ldw	r2,-20(fp)
  815970:	18800015 	stw	r2,0(r3)
  815974:	e0bff717 	ldw	r2,-36(fp)
  815978:	e0bff315 	stw	r2,-52(fp)
  81597c:	e0bff317 	ldw	r2,-52(fp)
  815980:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  815984:	e0bffa03 	ldbu	r2,-24(fp)
  815988:	10800058 	cmpnei	r2,r2,1
  81598c:	1000011e 	bne	r2,zero,815994 <OSQDel+0x2ac>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  815990:	08129c80 	call	8129c8 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  815994:	e0bffd17 	ldw	r2,-12(fp)
  815998:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
  81599c:	e03ff915 	stw	zero,-28(fp)
             break;
  8159a0:	00000906 	br	8159c8 <OSQDel+0x2e0>
  8159a4:	e0bff717 	ldw	r2,-36(fp)
  8159a8:	e0bff215 	stw	r2,-56(fp)
  8159ac:	e0bff217 	ldw	r2,-56(fp)
  8159b0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  8159b4:	e0fffd17 	ldw	r3,-12(fp)
  8159b8:	008001c4 	movi	r2,7
  8159bc:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
  8159c0:	e0bffb17 	ldw	r2,-20(fp)
  8159c4:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
  8159c8:	e0bff917 	ldw	r2,-28(fp)
  8159cc:	e0bfff15 	stw	r2,-4(fp)
  8159d0:	e0bfff17 	ldw	r2,-4(fp)
}
  8159d4:	e037883a 	mov	sp,fp
  8159d8:	dfc00117 	ldw	ra,4(sp)
  8159dc:	df000017 	ldw	fp,0(sp)
  8159e0:	dec00204 	addi	sp,sp,8
  8159e4:	f800283a 	ret

008159e8 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
  8159e8:	defff904 	addi	sp,sp,-28
  8159ec:	df000615 	stw	fp,24(sp)
  8159f0:	df000604 	addi	fp,sp,24
  8159f4:	e13ffe15 	stw	r4,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8159f8:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  8159fc:	e0bffe17 	ldw	r2,-8(fp)
  815a00:	1004c03a 	cmpne	r2,r2,zero
  815a04:	1000031e 	bne	r2,zero,815a14 <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
  815a08:	00800104 	movi	r2,4
  815a0c:	e0bfff15 	stw	r2,-4(fp)
  815a10:	00002206 	br	815a9c <OSQFlush+0xb4>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  815a14:	e0bffe17 	ldw	r2,-8(fp)
  815a18:	10800003 	ldbu	r2,0(r2)
  815a1c:	10803fcc 	andi	r2,r2,255
  815a20:	108000a0 	cmpeqi	r2,r2,2
  815a24:	1000031e 	bne	r2,zero,815a34 <OSQFlush+0x4c>
        return (OS_ERR_EVENT_TYPE);
  815a28:	00800044 	movi	r2,1
  815a2c:	e0bfff15 	stw	r2,-4(fp)
  815a30:	00001a06 	br	815a9c <OSQFlush+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815a34:	0005303a 	rdctl	r2,status
  815a38:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815a3c:	e0fffb17 	ldw	r3,-20(fp)
  815a40:	00bfff84 	movi	r2,-2
  815a44:	1884703a 	and	r2,r3,r2
  815a48:	1001703a 	wrctl	status,r2
  
  return context;
  815a4c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  815a50:	e0bffc15 	stw	r2,-16(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
  815a54:	e0bffe17 	ldw	r2,-8(fp)
  815a58:	10800117 	ldw	r2,4(r2)
  815a5c:	e0bffd15 	stw	r2,-12(fp)
    pq->OSQIn      = pq->OSQStart;
  815a60:	e0bffd17 	ldw	r2,-12(fp)
  815a64:	10c00117 	ldw	r3,4(r2)
  815a68:	e0bffd17 	ldw	r2,-12(fp)
  815a6c:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
  815a70:	e0bffd17 	ldw	r2,-12(fp)
  815a74:	10c00117 	ldw	r3,4(r2)
  815a78:	e0bffd17 	ldw	r2,-12(fp)
  815a7c:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
  815a80:	e0bffd17 	ldw	r2,-12(fp)
  815a84:	1000058d 	sth	zero,22(r2)
  815a88:	e0bffc17 	ldw	r2,-16(fp)
  815a8c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815a90:	e0bffa17 	ldw	r2,-24(fp)
  815a94:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  815a98:	e03fff15 	stw	zero,-4(fp)
  815a9c:	e0bfff17 	ldw	r2,-4(fp)
}
  815aa0:	e037883a 	mov	sp,fp
  815aa4:	df000017 	ldw	fp,0(sp)
  815aa8:	dec00104 	addi	sp,sp,4
  815aac:	f800283a 	ret

00815ab0 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  815ab0:	defff104 	addi	sp,sp,-60
  815ab4:	dfc00e15 	stw	ra,56(sp)
  815ab8:	df000d15 	stw	fp,52(sp)
  815abc:	df000d04 	addi	fp,sp,52
  815ac0:	e13ffb15 	stw	r4,-20(fp)
  815ac4:	e1bffd15 	stw	r6,-12(fp)
  815ac8:	e17ffc0d 	sth	r5,-16(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  815acc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  815ad0:	e0bffd17 	ldw	r2,-12(fp)
  815ad4:	1004c03a 	cmpne	r2,r2,zero
  815ad8:	1000021e 	bne	r2,zero,815ae4 <OSQPend+0x34>
        return ((void *)0);
  815adc:	e03fff15 	stw	zero,-4(fp)
  815ae0:	0000b506 	br	815db8 <OSQPend+0x308>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  815ae4:	e0bffb17 	ldw	r2,-20(fp)
  815ae8:	1004c03a 	cmpne	r2,r2,zero
  815aec:	1000051e 	bne	r2,zero,815b04 <OSQPend+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  815af0:	e0fffd17 	ldw	r3,-12(fp)
  815af4:	00800104 	movi	r2,4
  815af8:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  815afc:	e03fff15 	stw	zero,-4(fp)
  815b00:	0000ad06 	br	815db8 <OSQPend+0x308>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  815b04:	e0bffb17 	ldw	r2,-20(fp)
  815b08:	10800003 	ldbu	r2,0(r2)
  815b0c:	10803fcc 	andi	r2,r2,255
  815b10:	108000a0 	cmpeqi	r2,r2,2
  815b14:	1000051e 	bne	r2,zero,815b2c <OSQPend+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  815b18:	e0fffd17 	ldw	r3,-12(fp)
  815b1c:	00800044 	movi	r2,1
  815b20:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  815b24:	e03fff15 	stw	zero,-4(fp)
  815b28:	0000a306 	br	815db8 <OSQPend+0x308>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  815b2c:	008020b4 	movhi	r2,130
  815b30:	10828a04 	addi	r2,r2,2600
  815b34:	10800003 	ldbu	r2,0(r2)
  815b38:	10803fcc 	andi	r2,r2,255
  815b3c:	1005003a 	cmpeq	r2,r2,zero
  815b40:	1000051e 	bne	r2,zero,815b58 <OSQPend+0xa8>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
  815b44:	e0fffd17 	ldw	r3,-12(fp)
  815b48:	00800084 	movi	r2,2
  815b4c:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  815b50:	e03fff15 	stw	zero,-4(fp)
  815b54:	00009806 	br	815db8 <OSQPend+0x308>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
  815b58:	008020b4 	movhi	r2,130
  815b5c:	10827c04 	addi	r2,r2,2544
  815b60:	10800003 	ldbu	r2,0(r2)
  815b64:	10803fcc 	andi	r2,r2,255
  815b68:	1005003a 	cmpeq	r2,r2,zero
  815b6c:	1000051e 	bne	r2,zero,815b84 <OSQPend+0xd4>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
  815b70:	e0fffd17 	ldw	r3,-12(fp)
  815b74:	00800344 	movi	r2,13
  815b78:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  815b7c:	e03fff15 	stw	zero,-4(fp)
  815b80:	00008d06 	br	815db8 <OSQPend+0x308>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815b84:	0005303a 	rdctl	r2,status
  815b88:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815b8c:	e0fff717 	ldw	r3,-36(fp)
  815b90:	00bfff84 	movi	r2,-2
  815b94:	1884703a 	and	r2,r3,r2
  815b98:	1001703a 	wrctl	status,r2
  
  return context;
  815b9c:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  815ba0:	e0bff815 	stw	r2,-32(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  815ba4:	e0bffb17 	ldw	r2,-20(fp)
  815ba8:	10800117 	ldw	r2,4(r2)
  815bac:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  815bb0:	e0bff917 	ldw	r2,-28(fp)
  815bb4:	1080058b 	ldhu	r2,22(r2)
  815bb8:	10bfffcc 	andi	r2,r2,65535
  815bbc:	1005003a 	cmpeq	r2,r2,zero
  815bc0:	10001f1e 	bne	r2,zero,815c40 <OSQPend+0x190>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  815bc4:	e0bff917 	ldw	r2,-28(fp)
  815bc8:	10c00417 	ldw	r3,16(r2)
  815bcc:	18800017 	ldw	r2,0(r3)
  815bd0:	e0bffa15 	stw	r2,-24(fp)
  815bd4:	18c00104 	addi	r3,r3,4
  815bd8:	e0bff917 	ldw	r2,-28(fp)
  815bdc:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  815be0:	e0bff917 	ldw	r2,-28(fp)
  815be4:	1080058b 	ldhu	r2,22(r2)
  815be8:	10bfffc4 	addi	r2,r2,-1
  815bec:	1007883a 	mov	r3,r2
  815bf0:	e0bff917 	ldw	r2,-28(fp)
  815bf4:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  815bf8:	e0bff917 	ldw	r2,-28(fp)
  815bfc:	10c00417 	ldw	r3,16(r2)
  815c00:	e0bff917 	ldw	r2,-28(fp)
  815c04:	10800217 	ldw	r2,8(r2)
  815c08:	1880041e 	bne	r3,r2,815c1c <OSQPend+0x16c>
            pq->OSQOut = pq->OSQStart;
  815c0c:	e0bff917 	ldw	r2,-28(fp)
  815c10:	10c00117 	ldw	r3,4(r2)
  815c14:	e0bff917 	ldw	r2,-28(fp)
  815c18:	10c00415 	stw	r3,16(r2)
  815c1c:	e0bff817 	ldw	r2,-32(fp)
  815c20:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815c24:	e0bff617 	ldw	r2,-40(fp)
  815c28:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  815c2c:	e0bffd17 	ldw	r2,-12(fp)
  815c30:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
  815c34:	e0bffa17 	ldw	r2,-24(fp)
  815c38:	e0bfff15 	stw	r2,-4(fp)
  815c3c:	00005e06 	br	815db8 <OSQPend+0x308>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
  815c40:	008020b4 	movhi	r2,130
  815c44:	10828b04 	addi	r2,r2,2604
  815c48:	10c00017 	ldw	r3,0(r2)
  815c4c:	008020b4 	movhi	r2,130
  815c50:	10828b04 	addi	r2,r2,2604
  815c54:	10800017 	ldw	r2,0(r2)
  815c58:	10800c03 	ldbu	r2,48(r2)
  815c5c:	10800114 	ori	r2,r2,4
  815c60:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  815c64:	008020b4 	movhi	r2,130
  815c68:	10828b04 	addi	r2,r2,2604
  815c6c:	10800017 	ldw	r2,0(r2)
  815c70:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
  815c74:	008020b4 	movhi	r2,130
  815c78:	10828b04 	addi	r2,r2,2604
  815c7c:	10c00017 	ldw	r3,0(r2)
  815c80:	e0bffc0b 	ldhu	r2,-16(fp)
  815c84:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
  815c88:	e13ffb17 	ldw	r4,-20(fp)
  815c8c:	081211c0 	call	81211c <OS_EventTaskWait>
  815c90:	e0bff817 	ldw	r2,-32(fp)
  815c94:	e0bff515 	stw	r2,-44(fp)
  815c98:	e0bff517 	ldw	r2,-44(fp)
  815c9c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
  815ca0:	08129c80 	call	8129c8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815ca4:	0005303a 	rdctl	r2,status
  815ca8:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815cac:	e0fff417 	ldw	r3,-48(fp)
  815cb0:	00bfff84 	movi	r2,-2
  815cb4:	1884703a 	and	r2,r3,r2
  815cb8:	1001703a 	wrctl	status,r2
  
  return context;
  815cbc:	e0bff417 	ldw	r2,-48(fp)
    OS_ENTER_CRITICAL();
  815cc0:	e0bff815 	stw	r2,-32(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  815cc4:	008020b4 	movhi	r2,130
  815cc8:	10828b04 	addi	r2,r2,2604
  815ccc:	10800017 	ldw	r2,0(r2)
  815cd0:	10800c43 	ldbu	r2,49(r2)
  815cd4:	10803fcc 	andi	r2,r2,255
  815cd8:	e0bffe15 	stw	r2,-8(fp)
  815cdc:	e0fffe17 	ldw	r3,-8(fp)
  815ce0:	1805003a 	cmpeq	r2,r3,zero
  815ce4:	1000041e 	bne	r2,zero,815cf8 <OSQPend+0x248>
  815ce8:	e0fffe17 	ldw	r3,-8(fp)
  815cec:	188000a0 	cmpeqi	r2,r3,2
  815cf0:	1000091e 	bne	r2,zero,815d18 <OSQPend+0x268>
  815cf4:	00000d06 	br	815d2c <OSQPend+0x27c>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
  815cf8:	008020b4 	movhi	r2,130
  815cfc:	10828b04 	addi	r2,r2,2604
  815d00:	10800017 	ldw	r2,0(r2)
  815d04:	10800917 	ldw	r2,36(r2)
  815d08:	e0bffa15 	stw	r2,-24(fp)
            *perr =  OS_ERR_NONE;
  815d0c:	e0bffd17 	ldw	r2,-12(fp)
  815d10:	10000005 	stb	zero,0(r2)
             break;
  815d14:	00000e06 	br	815d50 <OSQPend+0x2a0>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
  815d18:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  815d1c:	e0fffd17 	ldw	r3,-12(fp)
  815d20:	00800384 	movi	r2,14
  815d24:	18800005 	stb	r2,0(r3)
             break;
  815d28:	00000906 	br	815d50 <OSQPend+0x2a0>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
  815d2c:	008020b4 	movhi	r2,130
  815d30:	10828b04 	addi	r2,r2,2604
  815d34:	11000017 	ldw	r4,0(r2)
  815d38:	e17ffb17 	ldw	r5,-20(fp)
  815d3c:	08123800 	call	812380 <OS_EventTaskRemove>
             pmsg = (void *)0;
  815d40:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  815d44:	e0fffd17 	ldw	r3,-12(fp)
  815d48:	00800284 	movi	r2,10
  815d4c:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  815d50:	008020b4 	movhi	r2,130
  815d54:	10828b04 	addi	r2,r2,2604
  815d58:	10800017 	ldw	r2,0(r2)
  815d5c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  815d60:	008020b4 	movhi	r2,130
  815d64:	10828b04 	addi	r2,r2,2604
  815d68:	10800017 	ldw	r2,0(r2)
  815d6c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  815d70:	008020b4 	movhi	r2,130
  815d74:	10828b04 	addi	r2,r2,2604
  815d78:	10800017 	ldw	r2,0(r2)
  815d7c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  815d80:	008020b4 	movhi	r2,130
  815d84:	10828b04 	addi	r2,r2,2604
  815d88:	10800017 	ldw	r2,0(r2)
  815d8c:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
  815d90:	008020b4 	movhi	r2,130
  815d94:	10828b04 	addi	r2,r2,2604
  815d98:	10800017 	ldw	r2,0(r2)
  815d9c:	10000915 	stw	zero,36(r2)
  815da0:	e0bff817 	ldw	r2,-32(fp)
  815da4:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815da8:	e0bff317 	ldw	r2,-52(fp)
  815dac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
  815db0:	e0bffa17 	ldw	r2,-24(fp)
  815db4:	e0bfff15 	stw	r2,-4(fp)
  815db8:	e0bfff17 	ldw	r2,-4(fp)
}
  815dbc:	e037883a 	mov	sp,fp
  815dc0:	dfc00117 	ldw	ra,4(sp)
  815dc4:	df000017 	ldw	fp,0(sp)
  815dc8:	dec00204 	addi	sp,sp,8
  815dcc:	f800283a 	ret

00815dd0 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  815dd0:	defff504 	addi	sp,sp,-44
  815dd4:	dfc00a15 	stw	ra,40(sp)
  815dd8:	df000915 	stw	fp,36(sp)
  815ddc:	df000904 	addi	fp,sp,36
  815de0:	e13ffc15 	stw	r4,-16(fp)
  815de4:	e1bffe15 	stw	r6,-8(fp)
  815de8:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  815dec:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  815df0:	e0bffe17 	ldw	r2,-8(fp)
  815df4:	1004c03a 	cmpne	r2,r2,zero
  815df8:	1000021e 	bne	r2,zero,815e04 <OSQPendAbort+0x34>
        return (0);
  815dfc:	e03fff15 	stw	zero,-4(fp)
  815e00:	00004c06 	br	815f34 <OSQPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  815e04:	e0bffc17 	ldw	r2,-16(fp)
  815e08:	1004c03a 	cmpne	r2,r2,zero
  815e0c:	1000051e 	bne	r2,zero,815e24 <OSQPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  815e10:	e0fffe17 	ldw	r3,-8(fp)
  815e14:	00800104 	movi	r2,4
  815e18:	18800005 	stb	r2,0(r3)
        return (0);
  815e1c:	e03fff15 	stw	zero,-4(fp)
  815e20:	00004406 	br	815f34 <OSQPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  815e24:	e0bffc17 	ldw	r2,-16(fp)
  815e28:	10800003 	ldbu	r2,0(r2)
  815e2c:	10803fcc 	andi	r2,r2,255
  815e30:	108000a0 	cmpeqi	r2,r2,2
  815e34:	1000051e 	bne	r2,zero,815e4c <OSQPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  815e38:	e0fffe17 	ldw	r3,-8(fp)
  815e3c:	00800044 	movi	r2,1
  815e40:	18800005 	stb	r2,0(r3)
        return (0);
  815e44:	e03fff15 	stw	zero,-4(fp)
  815e48:	00003a06 	br	815f34 <OSQPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815e4c:	0005303a 	rdctl	r2,status
  815e50:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815e54:	e0fff917 	ldw	r3,-28(fp)
  815e58:	00bfff84 	movi	r2,-2
  815e5c:	1884703a 	and	r2,r3,r2
  815e60:	1001703a 	wrctl	status,r2
  
  return context;
  815e64:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  815e68:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
  815e6c:	e0bffc17 	ldw	r2,-16(fp)
  815e70:	10800283 	ldbu	r2,10(r2)
  815e74:	10803fcc 	andi	r2,r2,255
  815e78:	1005003a 	cmpeq	r2,r2,zero
  815e7c:	1000261e 	bne	r2,zero,815f18 <OSQPendAbort+0x148>
        nbr_tasks = 0;
  815e80:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
  815e84:	e0bffd03 	ldbu	r2,-12(fp)
  815e88:	10800060 	cmpeqi	r2,r2,1
  815e8c:	1000091e 	bne	r2,zero,815eb4 <OSQPendAbort+0xe4>
  815e90:	00000e06 	br	815ecc <OSQPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  815e94:	e13ffc17 	ldw	r4,-16(fp)
  815e98:	000b883a 	mov	r5,zero
  815e9c:	01800104 	movi	r6,4
  815ea0:	01c00084 	movi	r7,2
  815ea4:	0811f880 	call	811f88 <OS_EventTaskRdy>
                     nbr_tasks++;
  815ea8:	e0bffb03 	ldbu	r2,-20(fp)
  815eac:	10800044 	addi	r2,r2,1
  815eb0:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
  815eb4:	e0bffc17 	ldw	r2,-16(fp)
  815eb8:	10800283 	ldbu	r2,10(r2)
  815ebc:	10803fcc 	andi	r2,r2,255
  815ec0:	1004c03a 	cmpne	r2,r2,zero
  815ec4:	103ff31e 	bne	r2,zero,815e94 <OSQPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  815ec8:	00000806 	br	815eec <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  815ecc:	e13ffc17 	ldw	r4,-16(fp)
  815ed0:	000b883a 	mov	r5,zero
  815ed4:	01800104 	movi	r6,4
  815ed8:	01c00084 	movi	r7,2
  815edc:	0811f880 	call	811f88 <OS_EventTaskRdy>
                 nbr_tasks++;
  815ee0:	e0bffb03 	ldbu	r2,-20(fp)
  815ee4:	10800044 	addi	r2,r2,1
  815ee8:	e0bffb05 	stb	r2,-20(fp)
  815eec:	e0bffa17 	ldw	r2,-24(fp)
  815ef0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815ef4:	e0bff817 	ldw	r2,-32(fp)
  815ef8:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
  815efc:	08129c80 	call	8129c8 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  815f00:	e0fffe17 	ldw	r3,-8(fp)
  815f04:	00800384 	movi	r2,14
  815f08:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
  815f0c:	e0bffb03 	ldbu	r2,-20(fp)
  815f10:	e0bfff15 	stw	r2,-4(fp)
  815f14:	00000706 	br	815f34 <OSQPendAbort+0x164>
  815f18:	e0bffa17 	ldw	r2,-24(fp)
  815f1c:	e0bff715 	stw	r2,-36(fp)
  815f20:	e0bff717 	ldw	r2,-36(fp)
  815f24:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  815f28:	e0bffe17 	ldw	r2,-8(fp)
  815f2c:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
  815f30:	e03fff15 	stw	zero,-4(fp)
  815f34:	e0bfff17 	ldw	r2,-4(fp)
}
  815f38:	e037883a 	mov	sp,fp
  815f3c:	dfc00117 	ldw	ra,4(sp)
  815f40:	df000017 	ldw	fp,0(sp)
  815f44:	dec00204 	addi	sp,sp,8
  815f48:	f800283a 	ret

00815f4c <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
  815f4c:	defff504 	addi	sp,sp,-44
  815f50:	dfc00a15 	stw	ra,40(sp)
  815f54:	df000915 	stw	fp,36(sp)
  815f58:	df000904 	addi	fp,sp,36
  815f5c:	e13ffd15 	stw	r4,-12(fp)
  815f60:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  815f64:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  815f68:	e0bffd17 	ldw	r2,-12(fp)
  815f6c:	1004c03a 	cmpne	r2,r2,zero
  815f70:	1000031e 	bne	r2,zero,815f80 <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
  815f74:	00800104 	movi	r2,4
  815f78:	e0bfff15 	stw	r2,-4(fp)
  815f7c:	00004d06 	br	8160b4 <OSQPost+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  815f80:	e0bffd17 	ldw	r2,-12(fp)
  815f84:	10800003 	ldbu	r2,0(r2)
  815f88:	10803fcc 	andi	r2,r2,255
  815f8c:	108000a0 	cmpeqi	r2,r2,2
  815f90:	1000031e 	bne	r2,zero,815fa0 <OSQPost+0x54>
        return (OS_ERR_EVENT_TYPE);
  815f94:	00800044 	movi	r2,1
  815f98:	e0bfff15 	stw	r2,-4(fp)
  815f9c:	00004506 	br	8160b4 <OSQPost+0x168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815fa0:	0005303a 	rdctl	r2,status
  815fa4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815fa8:	e0fffa17 	ldw	r3,-24(fp)
  815fac:	00bfff84 	movi	r2,-2
  815fb0:	1884703a 	and	r2,r3,r2
  815fb4:	1001703a 	wrctl	status,r2
  
  return context;
  815fb8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  815fbc:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
  815fc0:	e0bffd17 	ldw	r2,-12(fp)
  815fc4:	10800283 	ldbu	r2,10(r2)
  815fc8:	10803fcc 	andi	r2,r2,255
  815fcc:	1005003a 	cmpeq	r2,r2,zero
  815fd0:	10000c1e 	bne	r2,zero,816004 <OSQPost+0xb8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  815fd4:	e13ffd17 	ldw	r4,-12(fp)
  815fd8:	e17ffe17 	ldw	r5,-8(fp)
  815fdc:	01800104 	movi	r6,4
  815fe0:	000f883a 	mov	r7,zero
  815fe4:	0811f880 	call	811f88 <OS_EventTaskRdy>
  815fe8:	e0bffb17 	ldw	r2,-20(fp)
  815fec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815ff0:	e0bff917 	ldw	r2,-28(fp)
  815ff4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
  815ff8:	08129c80 	call	8129c8 <OS_Sched>
        return (OS_ERR_NONE);
  815ffc:	e03fff15 	stw	zero,-4(fp)
  816000:	00002c06 	br	8160b4 <OSQPost+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
  816004:	e0bffd17 	ldw	r2,-12(fp)
  816008:	10800117 	ldw	r2,4(r2)
  81600c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
  816010:	e0bffc17 	ldw	r2,-16(fp)
  816014:	10c0058b 	ldhu	r3,22(r2)
  816018:	e0bffc17 	ldw	r2,-16(fp)
  81601c:	1080050b 	ldhu	r2,20(r2)
  816020:	18ffffcc 	andi	r3,r3,65535
  816024:	10bfffcc 	andi	r2,r2,65535
  816028:	18800736 	bltu	r3,r2,816048 <OSQPost+0xfc>
  81602c:	e0bffb17 	ldw	r2,-20(fp)
  816030:	e0bff815 	stw	r2,-32(fp)
  816034:	e0bff817 	ldw	r2,-32(fp)
  816038:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  81603c:	00800784 	movi	r2,30
  816040:	e0bfff15 	stw	r2,-4(fp)
  816044:	00001b06 	br	8160b4 <OSQPost+0x168>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
  816048:	e0bffc17 	ldw	r2,-16(fp)
  81604c:	10c00317 	ldw	r3,12(r2)
  816050:	e0bffe17 	ldw	r2,-8(fp)
  816054:	18800015 	stw	r2,0(r3)
  816058:	18c00104 	addi	r3,r3,4
  81605c:	e0bffc17 	ldw	r2,-16(fp)
  816060:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
  816064:	e0bffc17 	ldw	r2,-16(fp)
  816068:	1080058b 	ldhu	r2,22(r2)
  81606c:	10800044 	addi	r2,r2,1
  816070:	1007883a 	mov	r3,r2
  816074:	e0bffc17 	ldw	r2,-16(fp)
  816078:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
  81607c:	e0bffc17 	ldw	r2,-16(fp)
  816080:	10c00317 	ldw	r3,12(r2)
  816084:	e0bffc17 	ldw	r2,-16(fp)
  816088:	10800217 	ldw	r2,8(r2)
  81608c:	1880041e 	bne	r3,r2,8160a0 <OSQPost+0x154>
        pq->OSQIn = pq->OSQStart;
  816090:	e0bffc17 	ldw	r2,-16(fp)
  816094:	10c00117 	ldw	r3,4(r2)
  816098:	e0bffc17 	ldw	r2,-16(fp)
  81609c:	10c00315 	stw	r3,12(r2)
  8160a0:	e0bffb17 	ldw	r2,-20(fp)
  8160a4:	e0bff715 	stw	r2,-36(fp)
  8160a8:	e0bff717 	ldw	r2,-36(fp)
  8160ac:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  8160b0:	e03fff15 	stw	zero,-4(fp)
  8160b4:	e0bfff17 	ldw	r2,-4(fp)
}
  8160b8:	e037883a 	mov	sp,fp
  8160bc:	dfc00117 	ldw	ra,4(sp)
  8160c0:	df000017 	ldw	fp,0(sp)
  8160c4:	dec00204 	addi	sp,sp,8
  8160c8:	f800283a 	ret

008160cc <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
  8160cc:	defff504 	addi	sp,sp,-44
  8160d0:	dfc00a15 	stw	ra,40(sp)
  8160d4:	df000915 	stw	fp,36(sp)
  8160d8:	df000904 	addi	fp,sp,36
  8160dc:	e13ffd15 	stw	r4,-12(fp)
  8160e0:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8160e4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  8160e8:	e0bffd17 	ldw	r2,-12(fp)
  8160ec:	1004c03a 	cmpne	r2,r2,zero
  8160f0:	1000031e 	bne	r2,zero,816100 <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
  8160f4:	00800104 	movi	r2,4
  8160f8:	e0bfff15 	stw	r2,-4(fp)
  8160fc:	00004f06 	br	81623c <OSQPostFront+0x170>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  816100:	e0bffd17 	ldw	r2,-12(fp)
  816104:	10800003 	ldbu	r2,0(r2)
  816108:	10803fcc 	andi	r2,r2,255
  81610c:	108000a0 	cmpeqi	r2,r2,2
  816110:	1000031e 	bne	r2,zero,816120 <OSQPostFront+0x54>
        return (OS_ERR_EVENT_TYPE);
  816114:	00800044 	movi	r2,1
  816118:	e0bfff15 	stw	r2,-4(fp)
  81611c:	00004706 	br	81623c <OSQPostFront+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816120:	0005303a 	rdctl	r2,status
  816124:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816128:	e0fffa17 	ldw	r3,-24(fp)
  81612c:	00bfff84 	movi	r2,-2
  816130:	1884703a 	and	r2,r3,r2
  816134:	1001703a 	wrctl	status,r2
  
  return context;
  816138:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  81613c:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
  816140:	e0bffd17 	ldw	r2,-12(fp)
  816144:	10800283 	ldbu	r2,10(r2)
  816148:	10803fcc 	andi	r2,r2,255
  81614c:	1005003a 	cmpeq	r2,r2,zero
  816150:	10000c1e 	bne	r2,zero,816184 <OSQPostFront+0xb8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  816154:	e13ffd17 	ldw	r4,-12(fp)
  816158:	e17ffe17 	ldw	r5,-8(fp)
  81615c:	01800104 	movi	r6,4
  816160:	000f883a 	mov	r7,zero
  816164:	0811f880 	call	811f88 <OS_EventTaskRdy>
  816168:	e0bffb17 	ldw	r2,-20(fp)
  81616c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816170:	e0bff917 	ldw	r2,-28(fp)
  816174:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
  816178:	08129c80 	call	8129c8 <OS_Sched>
        return (OS_ERR_NONE);
  81617c:	e03fff15 	stw	zero,-4(fp)
  816180:	00002e06 	br	81623c <OSQPostFront+0x170>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  816184:	e0bffd17 	ldw	r2,-12(fp)
  816188:	10800117 	ldw	r2,4(r2)
  81618c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  816190:	e0bffc17 	ldw	r2,-16(fp)
  816194:	10c0058b 	ldhu	r3,22(r2)
  816198:	e0bffc17 	ldw	r2,-16(fp)
  81619c:	1080050b 	ldhu	r2,20(r2)
  8161a0:	18ffffcc 	andi	r3,r3,65535
  8161a4:	10bfffcc 	andi	r2,r2,65535
  8161a8:	18800736 	bltu	r3,r2,8161c8 <OSQPostFront+0xfc>
  8161ac:	e0bffb17 	ldw	r2,-20(fp)
  8161b0:	e0bff815 	stw	r2,-32(fp)
  8161b4:	e0bff817 	ldw	r2,-32(fp)
  8161b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  8161bc:	00800784 	movi	r2,30
  8161c0:	e0bfff15 	stw	r2,-4(fp)
  8161c4:	00001d06 	br	81623c <OSQPostFront+0x170>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
  8161c8:	e0bffc17 	ldw	r2,-16(fp)
  8161cc:	10c00417 	ldw	r3,16(r2)
  8161d0:	e0bffc17 	ldw	r2,-16(fp)
  8161d4:	10800117 	ldw	r2,4(r2)
  8161d8:	1880041e 	bne	r3,r2,8161ec <OSQPostFront+0x120>
        pq->OSQOut = pq->OSQEnd;
  8161dc:	e0bffc17 	ldw	r2,-16(fp)
  8161e0:	10c00217 	ldw	r3,8(r2)
  8161e4:	e0bffc17 	ldw	r2,-16(fp)
  8161e8:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
  8161ec:	e0bffc17 	ldw	r2,-16(fp)
  8161f0:	10800417 	ldw	r2,16(r2)
  8161f4:	10ffff04 	addi	r3,r2,-4
  8161f8:	e0bffc17 	ldw	r2,-16(fp)
  8161fc:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
  816200:	e0bffc17 	ldw	r2,-16(fp)
  816204:	10c00417 	ldw	r3,16(r2)
  816208:	e0bffe17 	ldw	r2,-8(fp)
  81620c:	18800015 	stw	r2,0(r3)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  816210:	e0bffc17 	ldw	r2,-16(fp)
  816214:	1080058b 	ldhu	r2,22(r2)
  816218:	10800044 	addi	r2,r2,1
  81621c:	1007883a 	mov	r3,r2
  816220:	e0bffc17 	ldw	r2,-16(fp)
  816224:	10c0058d 	sth	r3,22(r2)
  816228:	e0bffb17 	ldw	r2,-20(fp)
  81622c:	e0bff715 	stw	r2,-36(fp)
  816230:	e0bff717 	ldw	r2,-36(fp)
  816234:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  816238:	e03fff15 	stw	zero,-4(fp)
  81623c:	e0bfff17 	ldw	r2,-4(fp)
}
  816240:	e037883a 	mov	sp,fp
  816244:	dfc00117 	ldw	ra,4(sp)
  816248:	df000017 	ldw	fp,0(sp)
  81624c:	dec00204 	addi	sp,sp,8
  816250:	f800283a 	ret

00816254 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
  816254:	defff404 	addi	sp,sp,-48
  816258:	dfc00b15 	stw	ra,44(sp)
  81625c:	df000a15 	stw	fp,40(sp)
  816260:	df000a04 	addi	fp,sp,40
  816264:	e13ffc15 	stw	r4,-16(fp)
  816268:	e17ffd15 	stw	r5,-12(fp)
  81626c:	e1bffe05 	stb	r6,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  816270:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  816274:	e0bffc17 	ldw	r2,-16(fp)
  816278:	1004c03a 	cmpne	r2,r2,zero
  81627c:	1000031e 	bne	r2,zero,81628c <OSQPostOpt+0x38>
        return (OS_ERR_PEVENT_NULL);
  816280:	00800104 	movi	r2,4
  816284:	e0bfff15 	stw	r2,-4(fp)
  816288:	00007906 	br	816470 <OSQPostOpt+0x21c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  81628c:	e0bffc17 	ldw	r2,-16(fp)
  816290:	10800003 	ldbu	r2,0(r2)
  816294:	10803fcc 	andi	r2,r2,255
  816298:	108000a0 	cmpeqi	r2,r2,2
  81629c:	1000031e 	bne	r2,zero,8162ac <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
  8162a0:	00800044 	movi	r2,1
  8162a4:	e0bfff15 	stw	r2,-4(fp)
  8162a8:	00007106 	br	816470 <OSQPostOpt+0x21c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8162ac:	0005303a 	rdctl	r2,status
  8162b0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8162b4:	e0fff917 	ldw	r3,-28(fp)
  8162b8:	00bfff84 	movi	r2,-2
  8162bc:	1884703a 	and	r2,r3,r2
  8162c0:	1001703a 	wrctl	status,r2
  
  return context;
  8162c4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  8162c8:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
  8162cc:	e0bffc17 	ldw	r2,-16(fp)
  8162d0:	10800283 	ldbu	r2,10(r2)
  8162d4:	10803fcc 	andi	r2,r2,255
  8162d8:	1005003a 	cmpeq	r2,r2,zero
  8162dc:	1000211e 	bne	r2,zero,816364 <OSQPostOpt+0x110>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
  8162e0:	e0bffe03 	ldbu	r2,-8(fp)
  8162e4:	1080004c 	andi	r2,r2,1
  8162e8:	10803fcc 	andi	r2,r2,255
  8162ec:	1005003a 	cmpeq	r2,r2,zero
  8162f0:	10000c1e 	bne	r2,zero,816324 <OSQPostOpt+0xd0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  8162f4:	00000506 	br	81630c <OSQPostOpt+0xb8>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  8162f8:	e13ffc17 	ldw	r4,-16(fp)
  8162fc:	e17ffd17 	ldw	r5,-12(fp)
  816300:	01800104 	movi	r6,4
  816304:	000f883a 	mov	r7,zero
  816308:	0811f880 	call	811f88 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  81630c:	e0bffc17 	ldw	r2,-16(fp)
  816310:	10800283 	ldbu	r2,10(r2)
  816314:	10803fcc 	andi	r2,r2,255
  816318:	1004c03a 	cmpne	r2,r2,zero
  81631c:	103ff61e 	bne	r2,zero,8162f8 <OSQPostOpt+0xa4>
  816320:	00000506 	br	816338 <OSQPostOpt+0xe4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  816324:	e13ffc17 	ldw	r4,-16(fp)
  816328:	e17ffd17 	ldw	r5,-12(fp)
  81632c:	01800104 	movi	r6,4
  816330:	000f883a 	mov	r7,zero
  816334:	0811f880 	call	811f88 <OS_EventTaskRdy>
  816338:	e0bffa17 	ldw	r2,-24(fp)
  81633c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816340:	e0bff817 	ldw	r2,-32(fp)
  816344:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
  816348:	e0bffe03 	ldbu	r2,-8(fp)
  81634c:	1080010c 	andi	r2,r2,4
  816350:	1004c03a 	cmpne	r2,r2,zero
  816354:	1000011e 	bne	r2,zero,81635c <OSQPostOpt+0x108>
            OS_Sched();                               /* Find highest priority task ready to run       */
  816358:	08129c80 	call	8129c8 <OS_Sched>
        }
        return (OS_ERR_NONE);
  81635c:	e03fff15 	stw	zero,-4(fp)
  816360:	00004306 	br	816470 <OSQPostOpt+0x21c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  816364:	e0bffc17 	ldw	r2,-16(fp)
  816368:	10800117 	ldw	r2,4(r2)
  81636c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  816370:	e0bffb17 	ldw	r2,-20(fp)
  816374:	10c0058b 	ldhu	r3,22(r2)
  816378:	e0bffb17 	ldw	r2,-20(fp)
  81637c:	1080050b 	ldhu	r2,20(r2)
  816380:	18ffffcc 	andi	r3,r3,65535
  816384:	10bfffcc 	andi	r2,r2,65535
  816388:	18800736 	bltu	r3,r2,8163a8 <OSQPostOpt+0x154>
  81638c:	e0bffa17 	ldw	r2,-24(fp)
  816390:	e0bff715 	stw	r2,-36(fp)
  816394:	e0bff717 	ldw	r2,-36(fp)
  816398:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  81639c:	00800784 	movi	r2,30
  8163a0:	e0bfff15 	stw	r2,-4(fp)
  8163a4:	00003206 	br	816470 <OSQPostOpt+0x21c>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
  8163a8:	e0bffe03 	ldbu	r2,-8(fp)
  8163ac:	1080008c 	andi	r2,r2,2
  8163b0:	1005003a 	cmpeq	r2,r2,zero
  8163b4:	1000131e 	bne	r2,zero,816404 <OSQPostOpt+0x1b0>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
  8163b8:	e0bffb17 	ldw	r2,-20(fp)
  8163bc:	10c00417 	ldw	r3,16(r2)
  8163c0:	e0bffb17 	ldw	r2,-20(fp)
  8163c4:	10800117 	ldw	r2,4(r2)
  8163c8:	1880041e 	bne	r3,r2,8163dc <OSQPostOpt+0x188>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
  8163cc:	e0bffb17 	ldw	r2,-20(fp)
  8163d0:	10c00217 	ldw	r3,8(r2)
  8163d4:	e0bffb17 	ldw	r2,-20(fp)
  8163d8:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
  8163dc:	e0bffb17 	ldw	r2,-20(fp)
  8163e0:	10800417 	ldw	r2,16(r2)
  8163e4:	10ffff04 	addi	r3,r2,-4
  8163e8:	e0bffb17 	ldw	r2,-20(fp)
  8163ec:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
  8163f0:	e0bffb17 	ldw	r2,-20(fp)
  8163f4:	10c00417 	ldw	r3,16(r2)
  8163f8:	e0bffd17 	ldw	r2,-12(fp)
  8163fc:	18800015 	stw	r2,0(r3)
  816400:	00001006 	br	816444 <OSQPostOpt+0x1f0>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
  816404:	e0bffb17 	ldw	r2,-20(fp)
  816408:	10c00317 	ldw	r3,12(r2)
  81640c:	e0bffd17 	ldw	r2,-12(fp)
  816410:	18800015 	stw	r2,0(r3)
  816414:	18c00104 	addi	r3,r3,4
  816418:	e0bffb17 	ldw	r2,-20(fp)
  81641c:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
  816420:	e0bffb17 	ldw	r2,-20(fp)
  816424:	10c00317 	ldw	r3,12(r2)
  816428:	e0bffb17 	ldw	r2,-20(fp)
  81642c:	10800217 	ldw	r2,8(r2)
  816430:	1880041e 	bne	r3,r2,816444 <OSQPostOpt+0x1f0>
            pq->OSQIn = pq->OSQStart;
  816434:	e0bffb17 	ldw	r2,-20(fp)
  816438:	10c00117 	ldw	r3,4(r2)
  81643c:	e0bffb17 	ldw	r2,-20(fp)
  816440:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  816444:	e0bffb17 	ldw	r2,-20(fp)
  816448:	1080058b 	ldhu	r2,22(r2)
  81644c:	10800044 	addi	r2,r2,1
  816450:	1007883a 	mov	r3,r2
  816454:	e0bffb17 	ldw	r2,-20(fp)
  816458:	10c0058d 	sth	r3,22(r2)
  81645c:	e0bffa17 	ldw	r2,-24(fp)
  816460:	e0bff615 	stw	r2,-40(fp)
  816464:	e0bff617 	ldw	r2,-40(fp)
  816468:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  81646c:	e03fff15 	stw	zero,-4(fp)
  816470:	e0bfff17 	ldw	r2,-4(fp)
}
  816474:	e037883a 	mov	sp,fp
  816478:	dfc00117 	ldw	ra,4(sp)
  81647c:	df000017 	ldw	fp,0(sp)
  816480:	dec00204 	addi	sp,sp,8
  816484:	f800283a 	ret

00816488 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
  816488:	defff504 	addi	sp,sp,-44
  81648c:	df000a15 	stw	fp,40(sp)
  816490:	df000a04 	addi	fp,sp,40
  816494:	e13ffd15 	stw	r4,-12(fp)
  816498:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  81649c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  8164a0:	e0bffd17 	ldw	r2,-12(fp)
  8164a4:	1004c03a 	cmpne	r2,r2,zero
  8164a8:	1000031e 	bne	r2,zero,8164b8 <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
  8164ac:	00800104 	movi	r2,4
  8164b0:	e0bfff15 	stw	r2,-4(fp)
  8164b4:	00004f06 	br	8165f4 <OSQQuery+0x16c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
  8164b8:	e0bffe17 	ldw	r2,-8(fp)
  8164bc:	1004c03a 	cmpne	r2,r2,zero
  8164c0:	1000031e 	bne	r2,zero,8164d0 <OSQQuery+0x48>
        return (OS_ERR_PDATA_NULL);
  8164c4:	00800244 	movi	r2,9
  8164c8:	e0bfff15 	stw	r2,-4(fp)
  8164cc:	00004906 	br	8165f4 <OSQQuery+0x16c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  8164d0:	e0bffd17 	ldw	r2,-12(fp)
  8164d4:	10800003 	ldbu	r2,0(r2)
  8164d8:	10803fcc 	andi	r2,r2,255
  8164dc:	108000a0 	cmpeqi	r2,r2,2
  8164e0:	1000031e 	bne	r2,zero,8164f0 <OSQQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
  8164e4:	00800044 	movi	r2,1
  8164e8:	e0bfff15 	stw	r2,-4(fp)
  8164ec:	00004106 	br	8165f4 <OSQQuery+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8164f0:	0005303a 	rdctl	r2,status
  8164f4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8164f8:	e0fff717 	ldw	r3,-36(fp)
  8164fc:	00bfff84 	movi	r2,-2
  816500:	1884703a 	and	r2,r3,r2
  816504:	1001703a 	wrctl	status,r2
  
  return context;
  816508:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  81650c:	e0bff815 	stw	r2,-32(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
  816510:	e0bffd17 	ldw	r2,-12(fp)
  816514:	10c00283 	ldbu	r3,10(r2)
  816518:	e0bffe17 	ldw	r2,-8(fp)
  81651c:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
  816520:	e0bffd17 	ldw	r2,-12(fp)
  816524:	108002c4 	addi	r2,r2,11
  816528:	e0bffa15 	stw	r2,-24(fp)
    pdest                = &p_q_data->OSEventTbl[0];
  81652c:	e0bffe17 	ldw	r2,-8(fp)
  816530:	10800204 	addi	r2,r2,8
  816534:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  816538:	e03ffb05 	stb	zero,-20(fp)
  81653c:	00000d06 	br	816574 <OSQQuery+0xec>
        *pdest++ = *psrc++;
  816540:	e0bffa17 	ldw	r2,-24(fp)
  816544:	10c00003 	ldbu	r3,0(r2)
  816548:	e0bff917 	ldw	r2,-28(fp)
  81654c:	10c00005 	stb	r3,0(r2)
  816550:	e0bff917 	ldw	r2,-28(fp)
  816554:	10800044 	addi	r2,r2,1
  816558:	e0bff915 	stw	r2,-28(fp)
  81655c:	e0bffa17 	ldw	r2,-24(fp)
  816560:	10800044 	addi	r2,r2,1
  816564:	e0bffa15 	stw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  816568:	e0bffb03 	ldbu	r2,-20(fp)
  81656c:	10800044 	addi	r2,r2,1
  816570:	e0bffb05 	stb	r2,-20(fp)
  816574:	e0bffb03 	ldbu	r2,-20(fp)
  816578:	108000f0 	cmpltui	r2,r2,3
  81657c:	103ff01e 	bne	r2,zero,816540 <OSQQuery+0xb8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
  816580:	e0bffd17 	ldw	r2,-12(fp)
  816584:	10800117 	ldw	r2,4(r2)
  816588:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
  81658c:	e0bffc17 	ldw	r2,-16(fp)
  816590:	1080058b 	ldhu	r2,22(r2)
  816594:	10bfffcc 	andi	r2,r2,65535
  816598:	1005003a 	cmpeq	r2,r2,zero
  81659c:	1000061e 	bne	r2,zero,8165b8 <OSQQuery+0x130>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
  8165a0:	e0bffc17 	ldw	r2,-16(fp)
  8165a4:	10800417 	ldw	r2,16(r2)
  8165a8:	10c00017 	ldw	r3,0(r2)
  8165ac:	e0bffe17 	ldw	r2,-8(fp)
  8165b0:	10c00015 	stw	r3,0(r2)
  8165b4:	00000206 	br	8165c0 <OSQQuery+0x138>
    } else {
        p_q_data->OSMsg = (void *)0;
  8165b8:	e0bffe17 	ldw	r2,-8(fp)
  8165bc:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
  8165c0:	e0bffc17 	ldw	r2,-16(fp)
  8165c4:	10c0058b 	ldhu	r3,22(r2)
  8165c8:	e0bffe17 	ldw	r2,-8(fp)
  8165cc:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
  8165d0:	e0bffc17 	ldw	r2,-16(fp)
  8165d4:	10c0050b 	ldhu	r3,20(r2)
  8165d8:	e0bffe17 	ldw	r2,-8(fp)
  8165dc:	10c0018d 	sth	r3,6(r2)
  8165e0:	e0bff817 	ldw	r2,-32(fp)
  8165e4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8165e8:	e0bff617 	ldw	r2,-40(fp)
  8165ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  8165f0:	e03fff15 	stw	zero,-4(fp)
  8165f4:	e0bfff17 	ldw	r2,-4(fp)
}
  8165f8:	e037883a 	mov	sp,fp
  8165fc:	df000017 	ldw	fp,0(sp)
  816600:	dec00104 	addi	sp,sp,4
  816604:	f800283a 	ret

00816608 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
  816608:	defffb04 	addi	sp,sp,-20
  81660c:	dfc00415 	stw	ra,16(sp)
  816610:	df000315 	stw	fp,12(sp)
  816614:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
  816618:	010020b4 	movhi	r4,130
  81661c:	211a5b04 	addi	r4,r4,26988
  816620:	01407804 	movi	r5,480
  816624:	08129080 	call	812908 <OS_MemClr>
    pq1 = &OSQTbl[0];
  816628:	008020b4 	movhi	r2,130
  81662c:	109a5b04 	addi	r2,r2,26988
  816630:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
  816634:	008020b4 	movhi	r2,130
  816638:	109a6104 	addi	r2,r2,27012
  81663c:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  816640:	e03fff0d 	sth	zero,-4(fp)
  816644:	00000c06 	br	816678 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
  816648:	e0fffe17 	ldw	r3,-8(fp)
  81664c:	e0bffd17 	ldw	r2,-12(fp)
  816650:	18800015 	stw	r2,0(r3)
        pq1++;
  816654:	e0bffe17 	ldw	r2,-8(fp)
  816658:	10800604 	addi	r2,r2,24
  81665c:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
  816660:	e0bffd17 	ldw	r2,-12(fp)
  816664:	10800604 	addi	r2,r2,24
  816668:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  81666c:	e0bfff0b 	ldhu	r2,-4(fp)
  816670:	10800044 	addi	r2,r2,1
  816674:	e0bfff0d 	sth	r2,-4(fp)
  816678:	e0bfff0b 	ldhu	r2,-4(fp)
  81667c:	108004f0 	cmpltui	r2,r2,19
  816680:	103ff11e 	bne	r2,zero,816648 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
  816684:	e0bffe17 	ldw	r2,-8(fp)
  816688:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
  81668c:	00c020b4 	movhi	r3,130
  816690:	18c28704 	addi	r3,r3,2588
  816694:	008020b4 	movhi	r2,130
  816698:	109a5b04 	addi	r2,r2,26988
  81669c:	18800015 	stw	r2,0(r3)
#endif
}
  8166a0:	e037883a 	mov	sp,fp
  8166a4:	dfc00117 	ldw	ra,4(sp)
  8166a8:	df000017 	ldw	fp,0(sp)
  8166ac:	dec00204 	addi	sp,sp,8
  8166b0:	f800283a 	ret

008166b4 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
  8166b4:	defff904 	addi	sp,sp,-28
  8166b8:	df000615 	stw	fp,24(sp)
  8166bc:	df000604 	addi	fp,sp,24
  8166c0:	e13ffe15 	stw	r4,-8(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8166c4:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  8166c8:	e0bffe17 	ldw	r2,-8(fp)
  8166cc:	1004c03a 	cmpne	r2,r2,zero
  8166d0:	1000021e 	bne	r2,zero,8166dc <OSSemAccept+0x28>
        return (0);
  8166d4:	e03fff15 	stw	zero,-4(fp)
  8166d8:	00002106 	br	816760 <OSSemAccept+0xac>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  8166dc:	e0bffe17 	ldw	r2,-8(fp)
  8166e0:	10800003 	ldbu	r2,0(r2)
  8166e4:	10803fcc 	andi	r2,r2,255
  8166e8:	108000e0 	cmpeqi	r2,r2,3
  8166ec:	1000021e 	bne	r2,zero,8166f8 <OSSemAccept+0x44>
        return (0);
  8166f0:	e03fff15 	stw	zero,-4(fp)
  8166f4:	00001a06 	br	816760 <OSSemAccept+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8166f8:	0005303a 	rdctl	r2,status
  8166fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816700:	e0fffb17 	ldw	r3,-20(fp)
  816704:	00bfff84 	movi	r2,-2
  816708:	1884703a 	and	r2,r3,r2
  81670c:	1001703a 	wrctl	status,r2
  
  return context;
  816710:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  816714:	e0bffc15 	stw	r2,-16(fp)
    cnt = pevent->OSEventCnt;
  816718:	e0bffe17 	ldw	r2,-8(fp)
  81671c:	1080020b 	ldhu	r2,8(r2)
  816720:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
  816724:	e0bffd0b 	ldhu	r2,-12(fp)
  816728:	1005003a 	cmpeq	r2,r2,zero
  81672c:	1000061e 	bne	r2,zero,816748 <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
  816730:	e0bffe17 	ldw	r2,-8(fp)
  816734:	1080020b 	ldhu	r2,8(r2)
  816738:	10bfffc4 	addi	r2,r2,-1
  81673c:	1007883a 	mov	r3,r2
  816740:	e0bffe17 	ldw	r2,-8(fp)
  816744:	10c0020d 	sth	r3,8(r2)
  816748:	e0bffc17 	ldw	r2,-16(fp)
  81674c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816750:	e0bffa17 	ldw	r2,-24(fp)
  816754:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
  816758:	e0bffd0b 	ldhu	r2,-12(fp)
  81675c:	e0bfff15 	stw	r2,-4(fp)
  816760:	e0bfff17 	ldw	r2,-4(fp)
}
  816764:	e037883a 	mov	sp,fp
  816768:	df000017 	ldw	fp,0(sp)
  81676c:	dec00104 	addi	sp,sp,4
  816770:	f800283a 	ret

00816774 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
  816774:	defff804 	addi	sp,sp,-32
  816778:	dfc00715 	stw	ra,28(sp)
  81677c:	df000615 	stw	fp,24(sp)
  816780:	df000604 	addi	fp,sp,24
  816784:	e13ffe0d 	sth	r4,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  816788:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  81678c:	008020b4 	movhi	r2,130
  816790:	10828a04 	addi	r2,r2,2600
  816794:	10800003 	ldbu	r2,0(r2)
  816798:	10803fcc 	andi	r2,r2,255
  81679c:	1005003a 	cmpeq	r2,r2,zero
  8167a0:	1000021e 	bne	r2,zero,8167ac <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
  8167a4:	e03fff15 	stw	zero,-4(fp)
  8167a8:	00003106 	br	816870 <OSSemCreate+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8167ac:	0005303a 	rdctl	r2,status
  8167b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8167b4:	e0fffb17 	ldw	r3,-20(fp)
  8167b8:	00bfff84 	movi	r2,-2
  8167bc:	1884703a 	and	r2,r3,r2
  8167c0:	1001703a 	wrctl	status,r2
  
  return context;
  8167c4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  8167c8:	e0bffc15 	stw	r2,-16(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
  8167cc:	008020b4 	movhi	r2,130
  8167d0:	10828904 	addi	r2,r2,2596
  8167d4:	10800017 	ldw	r2,0(r2)
  8167d8:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
  8167dc:	008020b4 	movhi	r2,130
  8167e0:	10828904 	addi	r2,r2,2596
  8167e4:	10800017 	ldw	r2,0(r2)
  8167e8:	1005003a 	cmpeq	r2,r2,zero
  8167ec:	1000081e 	bne	r2,zero,816810 <OSSemCreate+0x9c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  8167f0:	008020b4 	movhi	r2,130
  8167f4:	10828904 	addi	r2,r2,2596
  8167f8:	10800017 	ldw	r2,0(r2)
  8167fc:	10800117 	ldw	r2,4(r2)
  816800:	1007883a 	mov	r3,r2
  816804:	008020b4 	movhi	r2,130
  816808:	10828904 	addi	r2,r2,2596
  81680c:	10c00015 	stw	r3,0(r2)
  816810:	e0bffc17 	ldw	r2,-16(fp)
  816814:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816818:	e0bffa17 	ldw	r2,-24(fp)
  81681c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
  816820:	e0bffd17 	ldw	r2,-12(fp)
  816824:	1005003a 	cmpeq	r2,r2,zero
  816828:	10000f1e 	bne	r2,zero,816868 <OSSemCreate+0xf4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
  81682c:	e0fffd17 	ldw	r3,-12(fp)
  816830:	008000c4 	movi	r2,3
  816834:	18800005 	stb	r2,0(r3)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
  816838:	e0fffd17 	ldw	r3,-12(fp)
  81683c:	e0bffe0b 	ldhu	r2,-8(fp)
  816840:	1880020d 	sth	r2,8(r3)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
  816844:	e0bffd17 	ldw	r2,-12(fp)
  816848:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
  81684c:	e0fffd17 	ldw	r3,-12(fp)
  816850:	00800fc4 	movi	r2,63
  816854:	18800385 	stb	r2,14(r3)
        pevent->OSEventName[1] = OS_ASCII_NUL;
  816858:	e0bffd17 	ldw	r2,-12(fp)
  81685c:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
  816860:	e13ffd17 	ldw	r4,-12(fp)
  816864:	081253c0 	call	81253c <OS_EventWaitListInit>
    }
    return (pevent);
  816868:	e0bffd17 	ldw	r2,-12(fp)
  81686c:	e0bfff15 	stw	r2,-4(fp)
  816870:	e0bfff17 	ldw	r2,-4(fp)
}
  816874:	e037883a 	mov	sp,fp
  816878:	dfc00117 	ldw	ra,4(sp)
  81687c:	df000017 	ldw	fp,0(sp)
  816880:	dec00204 	addi	sp,sp,8
  816884:	f800283a 	ret

00816888 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  816888:	defff104 	addi	sp,sp,-60
  81688c:	dfc00e15 	stw	ra,56(sp)
  816890:	df000d15 	stw	fp,52(sp)
  816894:	df000d04 	addi	fp,sp,52
  816898:	e13ffb15 	stw	r4,-20(fp)
  81689c:	e1bffd15 	stw	r6,-12(fp)
  8168a0:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  8168a4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  8168a8:	e0bffd17 	ldw	r2,-12(fp)
  8168ac:	1004c03a 	cmpne	r2,r2,zero
  8168b0:	1000031e 	bne	r2,zero,8168c0 <OSSemDel+0x38>
        return (pevent);
  8168b4:	e0bffb17 	ldw	r2,-20(fp)
  8168b8:	e0bfff15 	stw	r2,-4(fp)
  8168bc:	00009406 	br	816b10 <OSSemDel+0x288>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  8168c0:	e0bffb17 	ldw	r2,-20(fp)
  8168c4:	1004c03a 	cmpne	r2,r2,zero
  8168c8:	1000061e 	bne	r2,zero,8168e4 <OSSemDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
  8168cc:	e0fffd17 	ldw	r3,-12(fp)
  8168d0:	00800104 	movi	r2,4
  8168d4:	18800005 	stb	r2,0(r3)
        return (pevent);
  8168d8:	e0fffb17 	ldw	r3,-20(fp)
  8168dc:	e0ffff15 	stw	r3,-4(fp)
  8168e0:	00008b06 	br	816b10 <OSSemDel+0x288>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  8168e4:	e0bffb17 	ldw	r2,-20(fp)
  8168e8:	10800003 	ldbu	r2,0(r2)
  8168ec:	10803fcc 	andi	r2,r2,255
  8168f0:	108000e0 	cmpeqi	r2,r2,3
  8168f4:	1000061e 	bne	r2,zero,816910 <OSSemDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
  8168f8:	e0fffd17 	ldw	r3,-12(fp)
  8168fc:	00800044 	movi	r2,1
  816900:	18800005 	stb	r2,0(r3)
        return (pevent);
  816904:	e0bffb17 	ldw	r2,-20(fp)
  816908:	e0bfff15 	stw	r2,-4(fp)
  81690c:	00008006 	br	816b10 <OSSemDel+0x288>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  816910:	008020b4 	movhi	r2,130
  816914:	10828a04 	addi	r2,r2,2600
  816918:	10800003 	ldbu	r2,0(r2)
  81691c:	10803fcc 	andi	r2,r2,255
  816920:	1005003a 	cmpeq	r2,r2,zero
  816924:	1000061e 	bne	r2,zero,816940 <OSSemDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
  816928:	e0fffd17 	ldw	r3,-12(fp)
  81692c:	008003c4 	movi	r2,15
  816930:	18800005 	stb	r2,0(r3)
        return (pevent);
  816934:	e0fffb17 	ldw	r3,-20(fp)
  816938:	e0ffff15 	stw	r3,-4(fp)
  81693c:	00007406 	br	816b10 <OSSemDel+0x288>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816940:	0005303a 	rdctl	r2,status
  816944:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816948:	e0fff717 	ldw	r3,-36(fp)
  81694c:	00bfff84 	movi	r2,-2
  816950:	1884703a 	and	r2,r3,r2
  816954:	1001703a 	wrctl	status,r2
  
  return context;
  816958:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  81695c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
  816960:	e0bffb17 	ldw	r2,-20(fp)
  816964:	10800283 	ldbu	r2,10(r2)
  816968:	10803fcc 	andi	r2,r2,255
  81696c:	1005003a 	cmpeq	r2,r2,zero
  816970:	1000031e 	bne	r2,zero,816980 <OSSemDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  816974:	00800044 	movi	r2,1
  816978:	e0bffa05 	stb	r2,-24(fp)
  81697c:	00000106 	br	816984 <OSSemDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  816980:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  816984:	e0bffc03 	ldbu	r2,-16(fp)
  816988:	e0bffe15 	stw	r2,-8(fp)
  81698c:	e0fffe17 	ldw	r3,-8(fp)
  816990:	1805003a 	cmpeq	r2,r3,zero
  816994:	1000041e 	bne	r2,zero,8169a8 <OSSemDel+0x120>
  816998:	e0fffe17 	ldw	r3,-8(fp)
  81699c:	18800060 	cmpeqi	r2,r3,1
  8169a0:	10002d1e 	bne	r2,zero,816a58 <OSSemDel+0x1d0>
  8169a4:	00004f06 	br	816ae4 <OSSemDel+0x25c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
  8169a8:	e0bffa03 	ldbu	r2,-24(fp)
  8169ac:	1004c03a 	cmpne	r2,r2,zero
  8169b0:	10001a1e 	bne	r2,zero,816a1c <OSSemDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  8169b4:	e0fffb17 	ldw	r3,-20(fp)
  8169b8:	00800fc4 	movi	r2,63
  8169bc:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  8169c0:	e0bffb17 	ldw	r2,-20(fp)
  8169c4:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  8169c8:	e0bffb17 	ldw	r2,-20(fp)
  8169cc:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  8169d0:	008020b4 	movhi	r2,130
  8169d4:	10828904 	addi	r2,r2,2596
  8169d8:	10c00017 	ldw	r3,0(r2)
  8169dc:	e0bffb17 	ldw	r2,-20(fp)
  8169e0:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  8169e4:	e0bffb17 	ldw	r2,-20(fp)
  8169e8:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  8169ec:	00c020b4 	movhi	r3,130
  8169f0:	18c28904 	addi	r3,r3,2596
  8169f4:	e0bffb17 	ldw	r2,-20(fp)
  8169f8:	18800015 	stw	r2,0(r3)
  8169fc:	e0bff817 	ldw	r2,-32(fp)
  816a00:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816a04:	e0bff617 	ldw	r2,-40(fp)
  816a08:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  816a0c:	e0bffd17 	ldw	r2,-12(fp)
  816a10:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
  816a14:	e03ff915 	stw	zero,-28(fp)
  816a18:	00003b06 	br	816b08 <OSSemDel+0x280>
  816a1c:	e0bff817 	ldw	r2,-32(fp)
  816a20:	e0bff515 	stw	r2,-44(fp)
  816a24:	e0bff517 	ldw	r2,-44(fp)
  816a28:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  816a2c:	e0fffd17 	ldw	r3,-12(fp)
  816a30:	00801244 	movi	r2,73
  816a34:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
  816a38:	e0bffb17 	ldw	r2,-20(fp)
  816a3c:	e0bff915 	stw	r2,-28(fp)
             }
             break;
  816a40:	00003106 	br	816b08 <OSSemDel+0x280>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  816a44:	e13ffb17 	ldw	r4,-20(fp)
  816a48:	000b883a 	mov	r5,zero
  816a4c:	01800044 	movi	r6,1
  816a50:	000f883a 	mov	r7,zero
  816a54:	0811f880 	call	811f88 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
  816a58:	e0bffb17 	ldw	r2,-20(fp)
  816a5c:	10800283 	ldbu	r2,10(r2)
  816a60:	10803fcc 	andi	r2,r2,255
  816a64:	1004c03a 	cmpne	r2,r2,zero
  816a68:	103ff61e 	bne	r2,zero,816a44 <OSSemDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  816a6c:	e0fffb17 	ldw	r3,-20(fp)
  816a70:	00800fc4 	movi	r2,63
  816a74:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  816a78:	e0bffb17 	ldw	r2,-20(fp)
  816a7c:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  816a80:	e0bffb17 	ldw	r2,-20(fp)
  816a84:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  816a88:	008020b4 	movhi	r2,130
  816a8c:	10828904 	addi	r2,r2,2596
  816a90:	10c00017 	ldw	r3,0(r2)
  816a94:	e0bffb17 	ldw	r2,-20(fp)
  816a98:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  816a9c:	e0bffb17 	ldw	r2,-20(fp)
  816aa0:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  816aa4:	00c020b4 	movhi	r3,130
  816aa8:	18c28904 	addi	r3,r3,2596
  816aac:	e0bffb17 	ldw	r2,-20(fp)
  816ab0:	18800015 	stw	r2,0(r3)
  816ab4:	e0bff817 	ldw	r2,-32(fp)
  816ab8:	e0bff415 	stw	r2,-48(fp)
  816abc:	e0bff417 	ldw	r2,-48(fp)
  816ac0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  816ac4:	e0bffa03 	ldbu	r2,-24(fp)
  816ac8:	10800058 	cmpnei	r2,r2,1
  816acc:	1000011e 	bne	r2,zero,816ad4 <OSSemDel+0x24c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  816ad0:	08129c80 	call	8129c8 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  816ad4:	e0bffd17 	ldw	r2,-12(fp)
  816ad8:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
  816adc:	e03ff915 	stw	zero,-28(fp)
             break;
  816ae0:	00000906 	br	816b08 <OSSemDel+0x280>
  816ae4:	e0bff817 	ldw	r2,-32(fp)
  816ae8:	e0bff315 	stw	r2,-52(fp)
  816aec:	e0bff317 	ldw	r2,-52(fp)
  816af0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  816af4:	e0fffd17 	ldw	r3,-12(fp)
  816af8:	008001c4 	movi	r2,7
  816afc:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
  816b00:	e0bffb17 	ldw	r2,-20(fp)
  816b04:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
  816b08:	e0bff917 	ldw	r2,-28(fp)
  816b0c:	e0bfff15 	stw	r2,-4(fp)
  816b10:	e0bfff17 	ldw	r2,-4(fp)
}
  816b14:	e037883a 	mov	sp,fp
  816b18:	dfc00117 	ldw	ra,4(sp)
  816b1c:	df000017 	ldw	fp,0(sp)
  816b20:	dec00204 	addi	sp,sp,8
  816b24:	f800283a 	ret

00816b28 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  816b28:	defff404 	addi	sp,sp,-48
  816b2c:	dfc00b15 	stw	ra,44(sp)
  816b30:	df000a15 	stw	fp,40(sp)
  816b34:	df000a04 	addi	fp,sp,40
  816b38:	e13ffc15 	stw	r4,-16(fp)
  816b3c:	e1bffe15 	stw	r6,-8(fp)
  816b40:	e17ffd0d 	sth	r5,-12(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  816b44:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  816b48:	e0bffe17 	ldw	r2,-8(fp)
  816b4c:	1005003a 	cmpeq	r2,r2,zero
  816b50:	10008f1e 	bne	r2,zero,816d90 <OSSemPend+0x268>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  816b54:	e0bffc17 	ldw	r2,-16(fp)
  816b58:	1004c03a 	cmpne	r2,r2,zero
  816b5c:	1000041e 	bne	r2,zero,816b70 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
  816b60:	e0fffe17 	ldw	r3,-8(fp)
  816b64:	00800104 	movi	r2,4
  816b68:	18800005 	stb	r2,0(r3)
        return;
  816b6c:	00008806 	br	816d90 <OSSemPend+0x268>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  816b70:	e0bffc17 	ldw	r2,-16(fp)
  816b74:	10800003 	ldbu	r2,0(r2)
  816b78:	10803fcc 	andi	r2,r2,255
  816b7c:	108000e0 	cmpeqi	r2,r2,3
  816b80:	1000041e 	bne	r2,zero,816b94 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
  816b84:	e0fffe17 	ldw	r3,-8(fp)
  816b88:	00800044 	movi	r2,1
  816b8c:	18800005 	stb	r2,0(r3)
        return;
  816b90:	00007f06 	br	816d90 <OSSemPend+0x268>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
  816b94:	008020b4 	movhi	r2,130
  816b98:	10828a04 	addi	r2,r2,2600
  816b9c:	10800003 	ldbu	r2,0(r2)
  816ba0:	10803fcc 	andi	r2,r2,255
  816ba4:	1005003a 	cmpeq	r2,r2,zero
  816ba8:	1000041e 	bne	r2,zero,816bbc <OSSemPend+0x94>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
  816bac:	e0fffe17 	ldw	r3,-8(fp)
  816bb0:	00800084 	movi	r2,2
  816bb4:	18800005 	stb	r2,0(r3)
        return;
  816bb8:	00007506 	br	816d90 <OSSemPend+0x268>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
  816bbc:	008020b4 	movhi	r2,130
  816bc0:	10827c04 	addi	r2,r2,2544
  816bc4:	10800003 	ldbu	r2,0(r2)
  816bc8:	10803fcc 	andi	r2,r2,255
  816bcc:	1005003a 	cmpeq	r2,r2,zero
  816bd0:	1000041e 	bne	r2,zero,816be4 <OSSemPend+0xbc>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
  816bd4:	e0fffe17 	ldw	r3,-8(fp)
  816bd8:	00800344 	movi	r2,13
  816bdc:	18800005 	stb	r2,0(r3)
        return;
  816be0:	00006b06 	br	816d90 <OSSemPend+0x268>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816be4:	0005303a 	rdctl	r2,status
  816be8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816bec:	e0fffa17 	ldw	r3,-24(fp)
  816bf0:	00bfff84 	movi	r2,-2
  816bf4:	1884703a 	and	r2,r3,r2
  816bf8:	1001703a 	wrctl	status,r2
  
  return context;
  816bfc:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  816c00:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
  816c04:	e0bffc17 	ldw	r2,-16(fp)
  816c08:	1080020b 	ldhu	r2,8(r2)
  816c0c:	10bfffcc 	andi	r2,r2,65535
  816c10:	1005003a 	cmpeq	r2,r2,zero
  816c14:	10000d1e 	bne	r2,zero,816c4c <OSSemPend+0x124>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
  816c18:	e0bffc17 	ldw	r2,-16(fp)
  816c1c:	1080020b 	ldhu	r2,8(r2)
  816c20:	10bfffc4 	addi	r2,r2,-1
  816c24:	1007883a 	mov	r3,r2
  816c28:	e0bffc17 	ldw	r2,-16(fp)
  816c2c:	10c0020d 	sth	r3,8(r2)
  816c30:	e0bffb17 	ldw	r2,-20(fp)
  816c34:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816c38:	e0bff917 	ldw	r2,-28(fp)
  816c3c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  816c40:	e0bffe17 	ldw	r2,-8(fp)
  816c44:	10000005 	stb	zero,0(r2)
        return;
  816c48:	00005106 	br	816d90 <OSSemPend+0x268>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
  816c4c:	008020b4 	movhi	r2,130
  816c50:	10828b04 	addi	r2,r2,2604
  816c54:	10c00017 	ldw	r3,0(r2)
  816c58:	008020b4 	movhi	r2,130
  816c5c:	10828b04 	addi	r2,r2,2604
  816c60:	10800017 	ldw	r2,0(r2)
  816c64:	10800c03 	ldbu	r2,48(r2)
  816c68:	10800054 	ori	r2,r2,1
  816c6c:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  816c70:	008020b4 	movhi	r2,130
  816c74:	10828b04 	addi	r2,r2,2604
  816c78:	10800017 	ldw	r2,0(r2)
  816c7c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
  816c80:	008020b4 	movhi	r2,130
  816c84:	10828b04 	addi	r2,r2,2604
  816c88:	10c00017 	ldw	r3,0(r2)
  816c8c:	e0bffd0b 	ldhu	r2,-12(fp)
  816c90:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
  816c94:	e13ffc17 	ldw	r4,-16(fp)
  816c98:	081211c0 	call	81211c <OS_EventTaskWait>
  816c9c:	e0bffb17 	ldw	r2,-20(fp)
  816ca0:	e0bff815 	stw	r2,-32(fp)
  816ca4:	e0bff817 	ldw	r2,-32(fp)
  816ca8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
  816cac:	08129c80 	call	8129c8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816cb0:	0005303a 	rdctl	r2,status
  816cb4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816cb8:	e0fff717 	ldw	r3,-36(fp)
  816cbc:	00bfff84 	movi	r2,-2
  816cc0:	1884703a 	and	r2,r3,r2
  816cc4:	1001703a 	wrctl	status,r2
  
  return context;
  816cc8:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  816ccc:	e0bffb15 	stw	r2,-20(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  816cd0:	008020b4 	movhi	r2,130
  816cd4:	10828b04 	addi	r2,r2,2604
  816cd8:	10800017 	ldw	r2,0(r2)
  816cdc:	10800c43 	ldbu	r2,49(r2)
  816ce0:	10803fcc 	andi	r2,r2,255
  816ce4:	e0bfff15 	stw	r2,-4(fp)
  816ce8:	e0ffff17 	ldw	r3,-4(fp)
  816cec:	1805003a 	cmpeq	r2,r3,zero
  816cf0:	1000041e 	bne	r2,zero,816d04 <OSSemPend+0x1dc>
  816cf4:	e0ffff17 	ldw	r3,-4(fp)
  816cf8:	188000a0 	cmpeqi	r2,r3,2
  816cfc:	1000041e 	bne	r2,zero,816d10 <OSSemPend+0x1e8>
  816d00:	00000706 	br	816d20 <OSSemPend+0x1f8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
  816d04:	e0bffe17 	ldw	r2,-8(fp)
  816d08:	10000005 	stb	zero,0(r2)
             break;
  816d0c:	00000c06 	br	816d40 <OSSemPend+0x218>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  816d10:	e0fffe17 	ldw	r3,-8(fp)
  816d14:	00800384 	movi	r2,14
  816d18:	18800005 	stb	r2,0(r3)
             break;
  816d1c:	00000806 	br	816d40 <OSSemPend+0x218>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
  816d20:	008020b4 	movhi	r2,130
  816d24:	10828b04 	addi	r2,r2,2604
  816d28:	11000017 	ldw	r4,0(r2)
  816d2c:	e17ffc17 	ldw	r5,-16(fp)
  816d30:	08123800 	call	812380 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  816d34:	e0fffe17 	ldw	r3,-8(fp)
  816d38:	00800284 	movi	r2,10
  816d3c:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  816d40:	008020b4 	movhi	r2,130
  816d44:	10828b04 	addi	r2,r2,2604
  816d48:	10800017 	ldw	r2,0(r2)
  816d4c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  816d50:	008020b4 	movhi	r2,130
  816d54:	10828b04 	addi	r2,r2,2604
  816d58:	10800017 	ldw	r2,0(r2)
  816d5c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  816d60:	008020b4 	movhi	r2,130
  816d64:	10828b04 	addi	r2,r2,2604
  816d68:	10800017 	ldw	r2,0(r2)
  816d6c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  816d70:	008020b4 	movhi	r2,130
  816d74:	10828b04 	addi	r2,r2,2604
  816d78:	10800017 	ldw	r2,0(r2)
  816d7c:	10000815 	stw	zero,32(r2)
  816d80:	e0bffb17 	ldw	r2,-20(fp)
  816d84:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816d88:	e0bff617 	ldw	r2,-40(fp)
  816d8c:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
  816d90:	e037883a 	mov	sp,fp
  816d94:	dfc00117 	ldw	ra,4(sp)
  816d98:	df000017 	ldw	fp,0(sp)
  816d9c:	dec00204 	addi	sp,sp,8
  816da0:	f800283a 	ret

00816da4 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  816da4:	defff504 	addi	sp,sp,-44
  816da8:	dfc00a15 	stw	ra,40(sp)
  816dac:	df000915 	stw	fp,36(sp)
  816db0:	df000904 	addi	fp,sp,36
  816db4:	e13ffc15 	stw	r4,-16(fp)
  816db8:	e1bffe15 	stw	r6,-8(fp)
  816dbc:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  816dc0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  816dc4:	e0bffe17 	ldw	r2,-8(fp)
  816dc8:	1004c03a 	cmpne	r2,r2,zero
  816dcc:	1000021e 	bne	r2,zero,816dd8 <OSSemPendAbort+0x34>
        return (0);
  816dd0:	e03fff15 	stw	zero,-4(fp)
  816dd4:	00004c06 	br	816f08 <OSSemPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  816dd8:	e0bffc17 	ldw	r2,-16(fp)
  816ddc:	1004c03a 	cmpne	r2,r2,zero
  816de0:	1000051e 	bne	r2,zero,816df8 <OSSemPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  816de4:	e0fffe17 	ldw	r3,-8(fp)
  816de8:	00800104 	movi	r2,4
  816dec:	18800005 	stb	r2,0(r3)
        return (0);
  816df0:	e03fff15 	stw	zero,-4(fp)
  816df4:	00004406 	br	816f08 <OSSemPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  816df8:	e0bffc17 	ldw	r2,-16(fp)
  816dfc:	10800003 	ldbu	r2,0(r2)
  816e00:	10803fcc 	andi	r2,r2,255
  816e04:	108000e0 	cmpeqi	r2,r2,3
  816e08:	1000051e 	bne	r2,zero,816e20 <OSSemPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  816e0c:	e0fffe17 	ldw	r3,-8(fp)
  816e10:	00800044 	movi	r2,1
  816e14:	18800005 	stb	r2,0(r3)
        return (0);
  816e18:	e03fff15 	stw	zero,-4(fp)
  816e1c:	00003a06 	br	816f08 <OSSemPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816e20:	0005303a 	rdctl	r2,status
  816e24:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816e28:	e0fff917 	ldw	r3,-28(fp)
  816e2c:	00bfff84 	movi	r2,-2
  816e30:	1884703a 	and	r2,r3,r2
  816e34:	1001703a 	wrctl	status,r2
  
  return context;
  816e38:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  816e3c:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
  816e40:	e0bffc17 	ldw	r2,-16(fp)
  816e44:	10800283 	ldbu	r2,10(r2)
  816e48:	10803fcc 	andi	r2,r2,255
  816e4c:	1005003a 	cmpeq	r2,r2,zero
  816e50:	1000261e 	bne	r2,zero,816eec <OSSemPendAbort+0x148>
        nbr_tasks = 0;
  816e54:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
  816e58:	e0bffd03 	ldbu	r2,-12(fp)
  816e5c:	10800060 	cmpeqi	r2,r2,1
  816e60:	1000091e 	bne	r2,zero,816e88 <OSSemPendAbort+0xe4>
  816e64:	00000e06 	br	816ea0 <OSSemPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  816e68:	e13ffc17 	ldw	r4,-16(fp)
  816e6c:	000b883a 	mov	r5,zero
  816e70:	01800044 	movi	r6,1
  816e74:	01c00084 	movi	r7,2
  816e78:	0811f880 	call	811f88 <OS_EventTaskRdy>
                     nbr_tasks++;
  816e7c:	e0bffb03 	ldbu	r2,-20(fp)
  816e80:	10800044 	addi	r2,r2,1
  816e84:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
  816e88:	e0bffc17 	ldw	r2,-16(fp)
  816e8c:	10800283 	ldbu	r2,10(r2)
  816e90:	10803fcc 	andi	r2,r2,255
  816e94:	1004c03a 	cmpne	r2,r2,zero
  816e98:	103ff31e 	bne	r2,zero,816e68 <OSSemPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  816e9c:	00000806 	br	816ec0 <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  816ea0:	e13ffc17 	ldw	r4,-16(fp)
  816ea4:	000b883a 	mov	r5,zero
  816ea8:	01800044 	movi	r6,1
  816eac:	01c00084 	movi	r7,2
  816eb0:	0811f880 	call	811f88 <OS_EventTaskRdy>
                 nbr_tasks++;
  816eb4:	e0bffb03 	ldbu	r2,-20(fp)
  816eb8:	10800044 	addi	r2,r2,1
  816ebc:	e0bffb05 	stb	r2,-20(fp)
  816ec0:	e0bffa17 	ldw	r2,-24(fp)
  816ec4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816ec8:	e0bff817 	ldw	r2,-32(fp)
  816ecc:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  816ed0:	08129c80 	call	8129c8 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  816ed4:	e0fffe17 	ldw	r3,-8(fp)
  816ed8:	00800384 	movi	r2,14
  816edc:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
  816ee0:	e0bffb03 	ldbu	r2,-20(fp)
  816ee4:	e0bfff15 	stw	r2,-4(fp)
  816ee8:	00000706 	br	816f08 <OSSemPendAbort+0x164>
  816eec:	e0bffa17 	ldw	r2,-24(fp)
  816ef0:	e0bff715 	stw	r2,-36(fp)
  816ef4:	e0bff717 	ldw	r2,-36(fp)
  816ef8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  816efc:	e0bffe17 	ldw	r2,-8(fp)
  816f00:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
  816f04:	e03fff15 	stw	zero,-4(fp)
  816f08:	e0bfff17 	ldw	r2,-4(fp)
}
  816f0c:	e037883a 	mov	sp,fp
  816f10:	dfc00117 	ldw	ra,4(sp)
  816f14:	df000017 	ldw	fp,0(sp)
  816f18:	dec00204 	addi	sp,sp,8
  816f1c:	f800283a 	ret

00816f20 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
  816f20:	defff704 	addi	sp,sp,-36
  816f24:	dfc00815 	stw	ra,32(sp)
  816f28:	df000715 	stw	fp,28(sp)
  816f2c:	df000704 	addi	fp,sp,28
  816f30:	e13ffe15 	stw	r4,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  816f34:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  816f38:	e0bffe17 	ldw	r2,-8(fp)
  816f3c:	1004c03a 	cmpne	r2,r2,zero
  816f40:	1000031e 	bne	r2,zero,816f50 <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
  816f44:	00800104 	movi	r2,4
  816f48:	e0bfff15 	stw	r2,-4(fp)
  816f4c:	00003806 	br	817030 <OSSemPost+0x110>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  816f50:	e0bffe17 	ldw	r2,-8(fp)
  816f54:	10800003 	ldbu	r2,0(r2)
  816f58:	10803fcc 	andi	r2,r2,255
  816f5c:	108000e0 	cmpeqi	r2,r2,3
  816f60:	1000031e 	bne	r2,zero,816f70 <OSSemPost+0x50>
        return (OS_ERR_EVENT_TYPE);
  816f64:	00800044 	movi	r2,1
  816f68:	e0bfff15 	stw	r2,-4(fp)
  816f6c:	00003006 	br	817030 <OSSemPost+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816f70:	0005303a 	rdctl	r2,status
  816f74:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816f78:	e0fffc17 	ldw	r3,-16(fp)
  816f7c:	00bfff84 	movi	r2,-2
  816f80:	1884703a 	and	r2,r3,r2
  816f84:	1001703a 	wrctl	status,r2
  
  return context;
  816f88:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  816f8c:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
  816f90:	e0bffe17 	ldw	r2,-8(fp)
  816f94:	10800283 	ldbu	r2,10(r2)
  816f98:	10803fcc 	andi	r2,r2,255
  816f9c:	1005003a 	cmpeq	r2,r2,zero
  816fa0:	10000c1e 	bne	r2,zero,816fd4 <OSSemPost+0xb4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  816fa4:	e13ffe17 	ldw	r4,-8(fp)
  816fa8:	000b883a 	mov	r5,zero
  816fac:	01800044 	movi	r6,1
  816fb0:	000f883a 	mov	r7,zero
  816fb4:	0811f880 	call	811f88 <OS_EventTaskRdy>
  816fb8:	e0bffd17 	ldw	r2,-12(fp)
  816fbc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816fc0:	e0bffb17 	ldw	r2,-20(fp)
  816fc4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  816fc8:	08129c80 	call	8129c8 <OS_Sched>
        return (OS_ERR_NONE);
  816fcc:	e03fff15 	stw	zero,-4(fp)
  816fd0:	00001706 	br	817030 <OSSemPost+0x110>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
  816fd4:	e0bffe17 	ldw	r2,-8(fp)
  816fd8:	1080020b 	ldhu	r2,8(r2)
  816fdc:	10ffffcc 	andi	r3,r2,65535
  816fe0:	00bfffd4 	movui	r2,65535
  816fe4:	18800c26 	beq	r3,r2,817018 <OSSemPost+0xf8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
  816fe8:	e0bffe17 	ldw	r2,-8(fp)
  816fec:	1080020b 	ldhu	r2,8(r2)
  816ff0:	10800044 	addi	r2,r2,1
  816ff4:	1007883a 	mov	r3,r2
  816ff8:	e0bffe17 	ldw	r2,-8(fp)
  816ffc:	10c0020d 	sth	r3,8(r2)
  817000:	e0bffd17 	ldw	r2,-12(fp)
  817004:	e0bffa15 	stw	r2,-24(fp)
  817008:	e0bffa17 	ldw	r2,-24(fp)
  81700c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  817010:	e03fff15 	stw	zero,-4(fp)
  817014:	00000606 	br	817030 <OSSemPost+0x110>
  817018:	e0bffd17 	ldw	r2,-12(fp)
  81701c:	e0bff915 	stw	r2,-28(fp)
  817020:	e0bff917 	ldw	r2,-28(fp)
  817024:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
  817028:	00800c84 	movi	r2,50
  81702c:	e0bfff15 	stw	r2,-4(fp)
  817030:	e0bfff17 	ldw	r2,-4(fp)
}
  817034:	e037883a 	mov	sp,fp
  817038:	dfc00117 	ldw	ra,4(sp)
  81703c:	df000017 	ldw	fp,0(sp)
  817040:	dec00204 	addi	sp,sp,8
  817044:	f800283a 	ret

00817048 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
  817048:	defff604 	addi	sp,sp,-40
  81704c:	df000915 	stw	fp,36(sp)
  817050:	df000904 	addi	fp,sp,36
  817054:	e13ffd15 	stw	r4,-12(fp)
  817058:	e17ffe15 	stw	r5,-8(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  81705c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  817060:	e0bffd17 	ldw	r2,-12(fp)
  817064:	1004c03a 	cmpne	r2,r2,zero
  817068:	1000031e 	bne	r2,zero,817078 <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
  81706c:	00800104 	movi	r2,4
  817070:	e0bfff15 	stw	r2,-4(fp)
  817074:	00003b06 	br	817164 <OSSemQuery+0x11c>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
  817078:	e0bffe17 	ldw	r2,-8(fp)
  81707c:	1004c03a 	cmpne	r2,r2,zero
  817080:	1000031e 	bne	r2,zero,817090 <OSSemQuery+0x48>
        return (OS_ERR_PDATA_NULL);
  817084:	00800244 	movi	r2,9
  817088:	e0bfff15 	stw	r2,-4(fp)
  81708c:	00003506 	br	817164 <OSSemQuery+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  817090:	e0bffd17 	ldw	r2,-12(fp)
  817094:	10800003 	ldbu	r2,0(r2)
  817098:	10803fcc 	andi	r2,r2,255
  81709c:	108000e0 	cmpeqi	r2,r2,3
  8170a0:	1000031e 	bne	r2,zero,8170b0 <OSSemQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
  8170a4:	00800044 	movi	r2,1
  8170a8:	e0bfff15 	stw	r2,-4(fp)
  8170ac:	00002d06 	br	817164 <OSSemQuery+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8170b0:	0005303a 	rdctl	r2,status
  8170b4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8170b8:	e0fff817 	ldw	r3,-32(fp)
  8170bc:	00bfff84 	movi	r2,-2
  8170c0:	1884703a 	and	r2,r3,r2
  8170c4:	1001703a 	wrctl	status,r2
  
  return context;
  8170c8:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  8170cc:	e0bff915 	stw	r2,-28(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
  8170d0:	e0bffd17 	ldw	r2,-12(fp)
  8170d4:	10c00283 	ldbu	r3,10(r2)
  8170d8:	e0bffe17 	ldw	r2,-8(fp)
  8170dc:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
  8170e0:	e0bffd17 	ldw	r2,-12(fp)
  8170e4:	108002c4 	addi	r2,r2,11
  8170e8:	e0bffc15 	stw	r2,-16(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
  8170ec:	e0bffe17 	ldw	r2,-8(fp)
  8170f0:	10800084 	addi	r2,r2,2
  8170f4:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  8170f8:	e03ffa05 	stb	zero,-24(fp)
  8170fc:	00000d06 	br	817134 <OSSemQuery+0xec>
        *pdest++ = *psrc++;
  817100:	e0bffc17 	ldw	r2,-16(fp)
  817104:	10c00003 	ldbu	r3,0(r2)
  817108:	e0bffb17 	ldw	r2,-20(fp)
  81710c:	10c00005 	stb	r3,0(r2)
  817110:	e0bffb17 	ldw	r2,-20(fp)
  817114:	10800044 	addi	r2,r2,1
  817118:	e0bffb15 	stw	r2,-20(fp)
  81711c:	e0bffc17 	ldw	r2,-16(fp)
  817120:	10800044 	addi	r2,r2,1
  817124:	e0bffc15 	stw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  817128:	e0bffa03 	ldbu	r2,-24(fp)
  81712c:	10800044 	addi	r2,r2,1
  817130:	e0bffa05 	stb	r2,-24(fp)
  817134:	e0bffa03 	ldbu	r2,-24(fp)
  817138:	108000f0 	cmpltui	r2,r2,3
  81713c:	103ff01e 	bne	r2,zero,817100 <OSSemQuery+0xb8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
  817140:	e0bffd17 	ldw	r2,-12(fp)
  817144:	10c0020b 	ldhu	r3,8(r2)
  817148:	e0bffe17 	ldw	r2,-8(fp)
  81714c:	10c0000d 	sth	r3,0(r2)
  817150:	e0bff917 	ldw	r2,-28(fp)
  817154:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817158:	e0bff717 	ldw	r2,-36(fp)
  81715c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  817160:	e03fff15 	stw	zero,-4(fp)
  817164:	e0bfff17 	ldw	r2,-4(fp)
}
  817168:	e037883a 	mov	sp,fp
  81716c:	df000017 	ldw	fp,0(sp)
  817170:	dec00104 	addi	sp,sp,4
  817174:	f800283a 	ret

00817178 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
  817178:	defff904 	addi	sp,sp,-28
  81717c:	df000615 	stw	fp,24(sp)
  817180:	df000604 	addi	fp,sp,24
  817184:	e13ffd15 	stw	r4,-12(fp)
  817188:	e1bfff15 	stw	r6,-4(fp)
  81718c:	e17ffe0d 	sth	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  817190:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  817194:	e0bfff17 	ldw	r2,-4(fp)
  817198:	1005003a 	cmpeq	r2,r2,zero
  81719c:	1000331e 	bne	r2,zero,81726c <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  8171a0:	e0bffd17 	ldw	r2,-12(fp)
  8171a4:	1004c03a 	cmpne	r2,r2,zero
  8171a8:	1000041e 	bne	r2,zero,8171bc <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
  8171ac:	e0ffff17 	ldw	r3,-4(fp)
  8171b0:	00800104 	movi	r2,4
  8171b4:	18800005 	stb	r2,0(r3)
        return;
  8171b8:	00002c06 	br	81726c <OSSemSet+0xf4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  8171bc:	e0bffd17 	ldw	r2,-12(fp)
  8171c0:	10800003 	ldbu	r2,0(r2)
  8171c4:	10803fcc 	andi	r2,r2,255
  8171c8:	108000e0 	cmpeqi	r2,r2,3
  8171cc:	1000041e 	bne	r2,zero,8171e0 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
  8171d0:	e0ffff17 	ldw	r3,-4(fp)
  8171d4:	00800044 	movi	r2,1
  8171d8:	18800005 	stb	r2,0(r3)
        return;
  8171dc:	00002306 	br	81726c <OSSemSet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8171e0:	0005303a 	rdctl	r2,status
  8171e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8171e8:	e0fffb17 	ldw	r3,-20(fp)
  8171ec:	00bfff84 	movi	r2,-2
  8171f0:	1884703a 	and	r2,r3,r2
  8171f4:	1001703a 	wrctl	status,r2
  
  return context;
  8171f8:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  8171fc:	e0bffc15 	stw	r2,-16(fp)
    *perr = OS_ERR_NONE;
  817200:	e0bfff17 	ldw	r2,-4(fp)
  817204:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
  817208:	e0bffd17 	ldw	r2,-12(fp)
  81720c:	1080020b 	ldhu	r2,8(r2)
  817210:	10bfffcc 	andi	r2,r2,65535
  817214:	1005003a 	cmpeq	r2,r2,zero
  817218:	1000041e 	bne	r2,zero,81722c <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
  81721c:	e0fffd17 	ldw	r3,-12(fp)
  817220:	e0bffe0b 	ldhu	r2,-8(fp)
  817224:	1880020d 	sth	r2,8(r3)
  817228:	00000c06 	br	81725c <OSSemSet+0xe4>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
  81722c:	e0bffd17 	ldw	r2,-12(fp)
  817230:	10800283 	ldbu	r2,10(r2)
  817234:	10803fcc 	andi	r2,r2,255
  817238:	1004c03a 	cmpne	r2,r2,zero
  81723c:	1000041e 	bne	r2,zero,817250 <OSSemSet+0xd8>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
  817240:	e0fffd17 	ldw	r3,-12(fp)
  817244:	e0bffe0b 	ldhu	r2,-8(fp)
  817248:	1880020d 	sth	r2,8(r3)
  81724c:	00000306 	br	81725c <OSSemSet+0xe4>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
  817250:	e0ffff17 	ldw	r3,-4(fp)
  817254:	00801244 	movi	r2,73
  817258:	18800005 	stb	r2,0(r3)
  81725c:	e0bffc17 	ldw	r2,-16(fp)
  817260:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817264:	e0bffa17 	ldw	r2,-24(fp)
  817268:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
  81726c:	e037883a 	mov	sp,fp
  817270:	df000017 	ldw	fp,0(sp)
  817274:	dec00104 	addi	sp,sp,4
  817278:	f800283a 	ret

0081727c <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
  81727c:	defff004 	addi	sp,sp,-64
  817280:	dfc00f15 	stw	ra,60(sp)
  817284:	df000e15 	stw	fp,56(sp)
  817288:	df000e04 	addi	fp,sp,56
  81728c:	e13ffd05 	stb	r4,-12(fp)
  817290:	e17ffe05 	stb	r5,-8(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
  817294:	e03ff715 	stw	zero,-36(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
  817298:	e0bffd03 	ldbu	r2,-12(fp)
  81729c:	10800530 	cmpltui	r2,r2,20
  8172a0:	1000061e 	bne	r2,zero,8172bc <OSTaskChangePrio+0x40>
        if (oldprio != OS_PRIO_SELF) {
  8172a4:	e0bffd03 	ldbu	r2,-12(fp)
  8172a8:	10803fe0 	cmpeqi	r2,r2,255
  8172ac:	1000031e 	bne	r2,zero,8172bc <OSTaskChangePrio+0x40>
            return (OS_ERR_PRIO_INVALID);
  8172b0:	00800a84 	movi	r2,42
  8172b4:	e0bfff15 	stw	r2,-4(fp)
  8172b8:	00014706 	br	8177d8 <OSTaskChangePrio+0x55c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
  8172bc:	e0bffe03 	ldbu	r2,-8(fp)
  8172c0:	10800530 	cmpltui	r2,r2,20
  8172c4:	1000031e 	bne	r2,zero,8172d4 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
  8172c8:	00800a84 	movi	r2,42
  8172cc:	e0bfff15 	stw	r2,-4(fp)
  8172d0:	00014106 	br	8177d8 <OSTaskChangePrio+0x55c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8172d4:	0005303a 	rdctl	r2,status
  8172d8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8172dc:	e0fff617 	ldw	r3,-40(fp)
  8172e0:	00bfff84 	movi	r2,-2
  8172e4:	1884703a 	and	r2,r3,r2
  8172e8:	1001703a 	wrctl	status,r2
  
  return context;
  8172ec:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  8172f0:	e0bff715 	stw	r2,-36(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
  8172f4:	e0bffe03 	ldbu	r2,-8(fp)
  8172f8:	00c020f4 	movhi	r3,131
  8172fc:	18e0e704 	addi	r3,r3,-31844
  817300:	1085883a 	add	r2,r2,r2
  817304:	1085883a 	add	r2,r2,r2
  817308:	10c5883a 	add	r2,r2,r3
  81730c:	10800017 	ldw	r2,0(r2)
  817310:	1005003a 	cmpeq	r2,r2,zero
  817314:	1000071e 	bne	r2,zero,817334 <OSTaskChangePrio+0xb8>
  817318:	e0bff717 	ldw	r2,-36(fp)
  81731c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817320:	e0bff517 	ldw	r2,-44(fp)
  817324:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
  817328:	00800a04 	movi	r2,40
  81732c:	e0bfff15 	stw	r2,-4(fp)
  817330:	00012906 	br	8177d8 <OSTaskChangePrio+0x55c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
  817334:	e0bffd03 	ldbu	r2,-12(fp)
  817338:	10803fd8 	cmpnei	r2,r2,255
  81733c:	1000051e 	bne	r2,zero,817354 <OSTaskChangePrio+0xd8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
  817340:	008020b4 	movhi	r2,130
  817344:	10828b04 	addi	r2,r2,2604
  817348:	10800017 	ldw	r2,0(r2)
  81734c:	10800c83 	ldbu	r2,50(r2)
  817350:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
  817354:	e0bffd03 	ldbu	r2,-12(fp)
  817358:	00c020f4 	movhi	r3,131
  81735c:	18e0e704 	addi	r3,r3,-31844
  817360:	1085883a 	add	r2,r2,r2
  817364:	1085883a 	add	r2,r2,r2
  817368:	10c5883a 	add	r2,r2,r3
  81736c:	10800017 	ldw	r2,0(r2)
  817370:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
  817374:	e0bffa17 	ldw	r2,-24(fp)
  817378:	1004c03a 	cmpne	r2,r2,zero
  81737c:	1000071e 	bne	r2,zero,81739c <OSTaskChangePrio+0x120>
  817380:	e0bff717 	ldw	r2,-36(fp)
  817384:	e0bff415 	stw	r2,-48(fp)
  817388:	e0bff417 	ldw	r2,-48(fp)
  81738c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
  817390:	00800a44 	movi	r2,41
  817394:	e0bfff15 	stw	r2,-4(fp)
  817398:	00010f06 	br	8177d8 <OSTaskChangePrio+0x55c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
  81739c:	e0bffa17 	ldw	r2,-24(fp)
  8173a0:	10800058 	cmpnei	r2,r2,1
  8173a4:	1000071e 	bne	r2,zero,8173c4 <OSTaskChangePrio+0x148>
  8173a8:	e0bff717 	ldw	r2,-36(fp)
  8173ac:	e0bff315 	stw	r2,-52(fp)
  8173b0:	e0bff317 	ldw	r2,-52(fp)
  8173b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
  8173b8:	008010c4 	movi	r2,67
  8173bc:	e0bfff15 	stw	r2,-4(fp)
  8173c0:	00010506 	br	8177d8 <OSTaskChangePrio+0x55c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
  8173c4:	e0bffe03 	ldbu	r2,-8(fp)
  8173c8:	1004d0fa 	srli	r2,r2,3
  8173cc:	e0bff985 	stb	r2,-26(fp)
    x_new                 = (INT8U)(newprio & 0x07);
  8173d0:	e0bffe03 	ldbu	r2,-8(fp)
  8173d4:	108001cc 	andi	r2,r2,7
  8173d8:	e0bff945 	stb	r2,-27(fp)
    bity_new              = (INT8U)(1 << y_new);
  8173dc:	e0fff983 	ldbu	r3,-26(fp)
  8173e0:	00800044 	movi	r2,1
  8173e4:	10c4983a 	sll	r2,r2,r3
  8173e8:	e0bff8c5 	stb	r2,-29(fp)
    bitx_new              = (INT8U)(1 << x_new);
  8173ec:	e0fff943 	ldbu	r3,-27(fp)
  8173f0:	00800044 	movi	r2,1
  8173f4:	10c4983a 	sll	r2,r2,r3
  8173f8:	e0bff885 	stb	r2,-30(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
  8173fc:	e0bffd03 	ldbu	r2,-12(fp)
  817400:	00c020f4 	movhi	r3,131
  817404:	18e0e704 	addi	r3,r3,-31844
  817408:	1085883a 	add	r2,r2,r2
  81740c:	1085883a 	add	r2,r2,r2
  817410:	10c5883a 	add	r2,r2,r3
  817414:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
  817418:	e0bffe03 	ldbu	r2,-8(fp)
  81741c:	00c020f4 	movhi	r3,131
  817420:	18e0e704 	addi	r3,r3,-31844
  817424:	1085883a 	add	r2,r2,r2
  817428:	1085883a 	add	r2,r2,r2
  81742c:	10c7883a 	add	r3,r2,r3
  817430:	e0bffa17 	ldw	r2,-24(fp)
  817434:	18800015 	stw	r2,0(r3)
    y_old                 =  ptcb->OSTCBY;
  817438:	e0bffa17 	ldw	r2,-24(fp)
  81743c:	10800d03 	ldbu	r2,52(r2)
  817440:	e0bff905 	stb	r2,-28(fp)
    bity_old              =  ptcb->OSTCBBitY;
  817444:	e0bffa17 	ldw	r2,-24(fp)
  817448:	10800d83 	ldbu	r2,54(r2)
  81744c:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
  817450:	e0bffa17 	ldw	r2,-24(fp)
  817454:	10800d43 	ldbu	r2,53(r2)
  817458:	e0bff805 	stb	r2,-32(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
  81745c:	e0fff903 	ldbu	r3,-28(fp)
  817460:	008020b4 	movhi	r2,130
  817464:	10828844 	addi	r2,r2,2593
  817468:	10c5883a 	add	r2,r2,r3
  81746c:	10c00003 	ldbu	r3,0(r2)
  817470:	e0bff803 	ldbu	r2,-32(fp)
  817474:	1884703a 	and	r2,r3,r2
  817478:	10803fcc 	andi	r2,r2,255
  81747c:	1005003a 	cmpeq	r2,r2,zero
  817480:	1000381e 	bne	r2,zero,817564 <OSTaskChangePrio+0x2e8>
         OSRdyTbl[y_old] &= ~bitx_old;
  817484:	e13ff903 	ldbu	r4,-28(fp)
  817488:	e0fff903 	ldbu	r3,-28(fp)
  81748c:	008020b4 	movhi	r2,130
  817490:	10828844 	addi	r2,r2,2593
  817494:	10c5883a 	add	r2,r2,r3
  817498:	10800003 	ldbu	r2,0(r2)
  81749c:	1007883a 	mov	r3,r2
  8174a0:	e0bff803 	ldbu	r2,-32(fp)
  8174a4:	0084303a 	nor	r2,zero,r2
  8174a8:	1884703a 	and	r2,r3,r2
  8174ac:	1007883a 	mov	r3,r2
  8174b0:	008020b4 	movhi	r2,130
  8174b4:	10828844 	addi	r2,r2,2593
  8174b8:	1105883a 	add	r2,r2,r4
  8174bc:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
  8174c0:	e0fff903 	ldbu	r3,-28(fp)
  8174c4:	008020b4 	movhi	r2,130
  8174c8:	10828844 	addi	r2,r2,2593
  8174cc:	10c5883a 	add	r2,r2,r3
  8174d0:	10800003 	ldbu	r2,0(r2)
  8174d4:	10803fcc 	andi	r2,r2,255
  8174d8:	1004c03a 	cmpne	r2,r2,zero
  8174dc:	10000b1e 	bne	r2,zero,81750c <OSTaskChangePrio+0x290>
             OSRdyGrp &= ~bity_old;
  8174e0:	e0bff843 	ldbu	r2,-31(fp)
  8174e4:	0084303a 	nor	r2,zero,r2
  8174e8:	1007883a 	mov	r3,r2
  8174ec:	008020b4 	movhi	r2,130
  8174f0:	10828804 	addi	r2,r2,2592
  8174f4:	10800003 	ldbu	r2,0(r2)
  8174f8:	1884703a 	and	r2,r3,r2
  8174fc:	1007883a 	mov	r3,r2
  817500:	008020b4 	movhi	r2,130
  817504:	10828804 	addi	r2,r2,2592
  817508:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
  81750c:	008020b4 	movhi	r2,130
  817510:	10828804 	addi	r2,r2,2592
  817514:	10c00003 	ldbu	r3,0(r2)
  817518:	e0bff8c3 	ldbu	r2,-29(fp)
  81751c:	1884b03a 	or	r2,r3,r2
  817520:	1007883a 	mov	r3,r2
  817524:	008020b4 	movhi	r2,130
  817528:	10828804 	addi	r2,r2,2592
  81752c:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
  817530:	e13ff983 	ldbu	r4,-26(fp)
  817534:	e0fff983 	ldbu	r3,-26(fp)
  817538:	008020b4 	movhi	r2,130
  81753c:	10828844 	addi	r2,r2,2593
  817540:	10c5883a 	add	r2,r2,r3
  817544:	10c00003 	ldbu	r3,0(r2)
  817548:	e0bff883 	ldbu	r2,-30(fp)
  81754c:	1884b03a 	or	r2,r3,r2
  817550:	1007883a 	mov	r3,r2
  817554:	008020b4 	movhi	r2,130
  817558:	10828844 	addi	r2,r2,2593
  81755c:	1105883a 	add	r2,r2,r4
  817560:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
  817564:	e0bffa17 	ldw	r2,-24(fp)
  817568:	10800717 	ldw	r2,28(r2)
  81756c:	e0bffc15 	stw	r2,-16(fp)
    if (pevent != (OS_EVENT *)0) {
  817570:	e0bffc17 	ldw	r2,-16(fp)
  817574:	1005003a 	cmpeq	r2,r2,zero
  817578:	1000341e 	bne	r2,zero,81764c <OSTaskChangePrio+0x3d0>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
  81757c:	e13ff903 	ldbu	r4,-28(fp)
  817580:	e0fff903 	ldbu	r3,-28(fp)
  817584:	e0bffc17 	ldw	r2,-16(fp)
  817588:	1885883a 	add	r2,r3,r2
  81758c:	10800204 	addi	r2,r2,8
  817590:	108000c3 	ldbu	r2,3(r2)
  817594:	1007883a 	mov	r3,r2
  817598:	e0bff803 	ldbu	r2,-32(fp)
  81759c:	0084303a 	nor	r2,zero,r2
  8175a0:	1884703a 	and	r2,r3,r2
  8175a4:	1007883a 	mov	r3,r2
  8175a8:	e0bffc17 	ldw	r2,-16(fp)
  8175ac:	2085883a 	add	r2,r4,r2
  8175b0:	10800204 	addi	r2,r2,8
  8175b4:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
  8175b8:	e0fff903 	ldbu	r3,-28(fp)
  8175bc:	e0bffc17 	ldw	r2,-16(fp)
  8175c0:	1885883a 	add	r2,r3,r2
  8175c4:	10800204 	addi	r2,r2,8
  8175c8:	108000c3 	ldbu	r2,3(r2)
  8175cc:	10803fcc 	andi	r2,r2,255
  8175d0:	1004c03a 	cmpne	r2,r2,zero
  8175d4:	1000091e 	bne	r2,zero,8175fc <OSTaskChangePrio+0x380>
            pevent->OSEventGrp    &= ~bity_old;
  8175d8:	e0bffc17 	ldw	r2,-16(fp)
  8175dc:	10800283 	ldbu	r2,10(r2)
  8175e0:	1007883a 	mov	r3,r2
  8175e4:	e0bff843 	ldbu	r2,-31(fp)
  8175e8:	0084303a 	nor	r2,zero,r2
  8175ec:	1884703a 	and	r2,r3,r2
  8175f0:	1007883a 	mov	r3,r2
  8175f4:	e0bffc17 	ldw	r2,-16(fp)
  8175f8:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
  8175fc:	e0bffc17 	ldw	r2,-16(fp)
  817600:	10c00283 	ldbu	r3,10(r2)
  817604:	e0bff8c3 	ldbu	r2,-29(fp)
  817608:	1884b03a 	or	r2,r3,r2
  81760c:	1007883a 	mov	r3,r2
  817610:	e0bffc17 	ldw	r2,-16(fp)
  817614:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
  817618:	e13ff983 	ldbu	r4,-26(fp)
  81761c:	e0fff983 	ldbu	r3,-26(fp)
  817620:	e0bffc17 	ldw	r2,-16(fp)
  817624:	1885883a 	add	r2,r3,r2
  817628:	10800204 	addi	r2,r2,8
  81762c:	10c000c3 	ldbu	r3,3(r2)
  817630:	e0bff883 	ldbu	r2,-30(fp)
  817634:	1884b03a 	or	r2,r3,r2
  817638:	1007883a 	mov	r3,r2
  81763c:	e0bffc17 	ldw	r2,-16(fp)
  817640:	2085883a 	add	r2,r4,r2
  817644:	10800204 	addi	r2,r2,8
  817648:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
  81764c:	e0bffa17 	ldw	r2,-24(fp)
  817650:	10800817 	ldw	r2,32(r2)
  817654:	1005003a 	cmpeq	r2,r2,zero
  817658:	1000441e 	bne	r2,zero,81776c <OSTaskChangePrio+0x4f0>
        pevents =  ptcb->OSTCBEventMultiPtr;
  81765c:	e0bffa17 	ldw	r2,-24(fp)
  817660:	10800817 	ldw	r2,32(r2)
  817664:	e0bffb15 	stw	r2,-20(fp)
        pevent  = *pevents;
  817668:	e0bffb17 	ldw	r2,-20(fp)
  81766c:	10800017 	ldw	r2,0(r2)
  817670:	e0bffc15 	stw	r2,-16(fp)
        while (pevent != (OS_EVENT *)0) {
  817674:	00003a06 	br	817760 <OSTaskChangePrio+0x4e4>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
  817678:	e13ff903 	ldbu	r4,-28(fp)
  81767c:	e0fff903 	ldbu	r3,-28(fp)
  817680:	e0bffc17 	ldw	r2,-16(fp)
  817684:	1885883a 	add	r2,r3,r2
  817688:	10800204 	addi	r2,r2,8
  81768c:	108000c3 	ldbu	r2,3(r2)
  817690:	1007883a 	mov	r3,r2
  817694:	e0bff803 	ldbu	r2,-32(fp)
  817698:	0084303a 	nor	r2,zero,r2
  81769c:	1884703a 	and	r2,r3,r2
  8176a0:	1007883a 	mov	r3,r2
  8176a4:	e0bffc17 	ldw	r2,-16(fp)
  8176a8:	2085883a 	add	r2,r4,r2
  8176ac:	10800204 	addi	r2,r2,8
  8176b0:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
  8176b4:	e0fff903 	ldbu	r3,-28(fp)
  8176b8:	e0bffc17 	ldw	r2,-16(fp)
  8176bc:	1885883a 	add	r2,r3,r2
  8176c0:	10800204 	addi	r2,r2,8
  8176c4:	108000c3 	ldbu	r2,3(r2)
  8176c8:	10803fcc 	andi	r2,r2,255
  8176cc:	1004c03a 	cmpne	r2,r2,zero
  8176d0:	1000091e 	bne	r2,zero,8176f8 <OSTaskChangePrio+0x47c>
                pevent->OSEventGrp    &= ~bity_old;
  8176d4:	e0bffc17 	ldw	r2,-16(fp)
  8176d8:	10800283 	ldbu	r2,10(r2)
  8176dc:	1007883a 	mov	r3,r2
  8176e0:	e0bff843 	ldbu	r2,-31(fp)
  8176e4:	0084303a 	nor	r2,zero,r2
  8176e8:	1884703a 	and	r2,r3,r2
  8176ec:	1007883a 	mov	r3,r2
  8176f0:	e0bffc17 	ldw	r2,-16(fp)
  8176f4:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
  8176f8:	e0bffc17 	ldw	r2,-16(fp)
  8176fc:	10c00283 	ldbu	r3,10(r2)
  817700:	e0bff8c3 	ldbu	r2,-29(fp)
  817704:	1884b03a 	or	r2,r3,r2
  817708:	1007883a 	mov	r3,r2
  81770c:	e0bffc17 	ldw	r2,-16(fp)
  817710:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
  817714:	e13ff983 	ldbu	r4,-26(fp)
  817718:	e0fff983 	ldbu	r3,-26(fp)
  81771c:	e0bffc17 	ldw	r2,-16(fp)
  817720:	1885883a 	add	r2,r3,r2
  817724:	10800204 	addi	r2,r2,8
  817728:	10c000c3 	ldbu	r3,3(r2)
  81772c:	e0bff883 	ldbu	r2,-30(fp)
  817730:	1884b03a 	or	r2,r3,r2
  817734:	1007883a 	mov	r3,r2
  817738:	e0bffc17 	ldw	r2,-16(fp)
  81773c:	2085883a 	add	r2,r4,r2
  817740:	10800204 	addi	r2,r2,8
  817744:	10c000c5 	stb	r3,3(r2)
            pevents++;
  817748:	e0bffb17 	ldw	r2,-20(fp)
  81774c:	10800104 	addi	r2,r2,4
  817750:	e0bffb15 	stw	r2,-20(fp)
            pevent                     = *pevents;
  817754:	e0bffb17 	ldw	r2,-20(fp)
  817758:	10800017 	ldw	r2,0(r2)
  81775c:	e0bffc15 	stw	r2,-16(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
  817760:	e0bffc17 	ldw	r2,-16(fp)
  817764:	1004c03a 	cmpne	r2,r2,zero
  817768:	103fc31e 	bne	r2,zero,817678 <OSTaskChangePrio+0x3fc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
  81776c:	e0fffa17 	ldw	r3,-24(fp)
  817770:	e0bffe03 	ldbu	r2,-8(fp)
  817774:	18800c85 	stb	r2,50(r3)
    ptcb->OSTCBY    = y_new;
  817778:	e0fffa17 	ldw	r3,-24(fp)
  81777c:	e0bff983 	ldbu	r2,-26(fp)
  817780:	18800d05 	stb	r2,52(r3)
    ptcb->OSTCBX    = x_new;
  817784:	e0fffa17 	ldw	r3,-24(fp)
  817788:	e0bff943 	ldbu	r2,-27(fp)
  81778c:	18800cc5 	stb	r2,51(r3)
    ptcb->OSTCBBitY = bity_new;
  817790:	e0fffa17 	ldw	r3,-24(fp)
  817794:	e0bff8c3 	ldbu	r2,-29(fp)
  817798:	18800d85 	stb	r2,54(r3)
    ptcb->OSTCBBitX = bitx_new;
  81779c:	e0fffa17 	ldw	r3,-24(fp)
  8177a0:	e0bff883 	ldbu	r2,-30(fp)
  8177a4:	18800d45 	stb	r2,53(r3)
  8177a8:	e0bff717 	ldw	r2,-36(fp)
  8177ac:	e0bff215 	stw	r2,-56(fp)
  8177b0:	e0bff217 	ldw	r2,-56(fp)
  8177b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  8177b8:	008020b4 	movhi	r2,130
  8177bc:	10827c44 	addi	r2,r2,2545
  8177c0:	10800003 	ldbu	r2,0(r2)
  8177c4:	10803fcc 	andi	r2,r2,255
  8177c8:	10800058 	cmpnei	r2,r2,1
  8177cc:	1000011e 	bne	r2,zero,8177d4 <OSTaskChangePrio+0x558>
        OS_Sched();                                         /* Find new highest priority task          */
  8177d0:	08129c80 	call	8129c8 <OS_Sched>
    }
    return (OS_ERR_NONE);
  8177d4:	e03fff15 	stw	zero,-4(fp)
  8177d8:	e0bfff17 	ldw	r2,-4(fp)
}
  8177dc:	e037883a 	mov	sp,fp
  8177e0:	dfc00117 	ldw	ra,4(sp)
  8177e4:	df000017 	ldw	fp,0(sp)
  8177e8:	dec00204 	addi	sp,sp,8
  8177ec:	f800283a 	ret

008177f0 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
  8177f0:	deffed04 	addi	sp,sp,-76
  8177f4:	dfc01215 	stw	ra,72(sp)
  8177f8:	df001115 	stw	fp,68(sp)
  8177fc:	df001104 	addi	fp,sp,68
  817800:	e13ffb15 	stw	r4,-20(fp)
  817804:	e17ffc15 	stw	r5,-16(fp)
  817808:	e1bffd15 	stw	r6,-12(fp)
  81780c:	e1fffe05 	stb	r7,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  817810:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  817814:	e0bffe03 	ldbu	r2,-8(fp)
  817818:	10800570 	cmpltui	r2,r2,21
  81781c:	1000031e 	bne	r2,zero,81782c <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
  817820:	00800a84 	movi	r2,42
  817824:	e0bfff15 	stw	r2,-4(fp)
  817828:	00006006 	br	8179ac <OSTaskCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81782c:	0005303a 	rdctl	r2,status
  817830:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817834:	e0fff717 	ldw	r3,-36(fp)
  817838:	00bfff84 	movi	r2,-2
  81783c:	1884703a 	and	r2,r3,r2
  817840:	1001703a 	wrctl	status,r2
  
  return context;
  817844:	e0bff717 	ldw	r2,-36(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  817848:	e0bff815 	stw	r2,-32(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  81784c:	008020b4 	movhi	r2,130
  817850:	10828a04 	addi	r2,r2,2600
  817854:	10800003 	ldbu	r2,0(r2)
  817858:	10803fcc 	andi	r2,r2,255
  81785c:	1005003a 	cmpeq	r2,r2,zero
  817860:	1000071e 	bne	r2,zero,817880 <OSTaskCreate+0x90>
  817864:	e0bff817 	ldw	r2,-32(fp)
  817868:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81786c:	e0bff617 	ldw	r2,-40(fp)
  817870:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  817874:	00800f04 	movi	r2,60
  817878:	e0bfff15 	stw	r2,-4(fp)
  81787c:	00004b06 	br	8179ac <OSTaskCreate+0x1bc>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  817880:	e0bffe03 	ldbu	r2,-8(fp)
  817884:	00c020f4 	movhi	r3,131
  817888:	18e0e704 	addi	r3,r3,-31844
  81788c:	1085883a 	add	r2,r2,r2
  817890:	1085883a 	add	r2,r2,r2
  817894:	10c5883a 	add	r2,r2,r3
  817898:	10800017 	ldw	r2,0(r2)
  81789c:	1004c03a 	cmpne	r2,r2,zero
  8178a0:	10003c1e 	bne	r2,zero,817994 <OSTaskCreate+0x1a4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  8178a4:	e0bffe03 	ldbu	r2,-8(fp)
  8178a8:	00c020f4 	movhi	r3,131
  8178ac:	18e0e704 	addi	r3,r3,-31844
  8178b0:	1085883a 	add	r2,r2,r2
  8178b4:	1085883a 	add	r2,r2,r2
  8178b8:	10c7883a 	add	r3,r2,r3
  8178bc:	00800044 	movi	r2,1
  8178c0:	18800015 	stw	r2,0(r3)
  8178c4:	e0bff817 	ldw	r2,-32(fp)
  8178c8:	e0bff515 	stw	r2,-44(fp)
  8178cc:	e0bff517 	ldw	r2,-44(fp)
  8178d0:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
  8178d4:	e13ffb17 	ldw	r4,-20(fp)
  8178d8:	e17ffc17 	ldw	r5,-16(fp)
  8178dc:	e1bffd17 	ldw	r6,-12(fp)
  8178e0:	000f883a 	mov	r7,zero
  8178e4:	081bd8c0 	call	81bd8c <OSTaskStkInit>
  8178e8:	e0bffa15 	stw	r2,-24(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
  8178ec:	e13ffe03 	ldbu	r4,-8(fp)
  8178f0:	d8000015 	stw	zero,0(sp)
  8178f4:	d8000115 	stw	zero,4(sp)
  8178f8:	d8000215 	stw	zero,8(sp)
  8178fc:	e17ffa17 	ldw	r5,-24(fp)
  817900:	000d883a 	mov	r6,zero
  817904:	000f883a 	mov	r7,zero
  817908:	0812dd00 	call	812dd0 <OS_TCBInit>
  81790c:	e0bff905 	stb	r2,-28(fp)
        if (err == OS_ERR_NONE) {
  817910:	e0bff903 	ldbu	r2,-28(fp)
  817914:	1004c03a 	cmpne	r2,r2,zero
  817918:	1000081e 	bne	r2,zero,81793c <OSTaskCreate+0x14c>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
  81791c:	008020b4 	movhi	r2,130
  817920:	10827c44 	addi	r2,r2,2545
  817924:	10800003 	ldbu	r2,0(r2)
  817928:	10803fcc 	andi	r2,r2,255
  81792c:	10800058 	cmpnei	r2,r2,1
  817930:	1000151e 	bne	r2,zero,817988 <OSTaskCreate+0x198>
                OS_Sched();
  817934:	08129c80 	call	8129c8 <OS_Sched>
  817938:	00001306 	br	817988 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81793c:	0005303a 	rdctl	r2,status
  817940:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817944:	e0fff417 	ldw	r3,-48(fp)
  817948:	00bfff84 	movi	r2,-2
  81794c:	1884703a 	and	r2,r3,r2
  817950:	1001703a 	wrctl	status,r2
  
  return context;
  817954:	e0bff417 	ldw	r2,-48(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  817958:	e0bff815 	stw	r2,-32(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
  81795c:	e0bffe03 	ldbu	r2,-8(fp)
  817960:	00c020f4 	movhi	r3,131
  817964:	18e0e704 	addi	r3,r3,-31844
  817968:	1085883a 	add	r2,r2,r2
  81796c:	1085883a 	add	r2,r2,r2
  817970:	10c5883a 	add	r2,r2,r3
  817974:	10000015 	stw	zero,0(r2)
  817978:	e0bff817 	ldw	r2,-32(fp)
  81797c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817980:	e0bff317 	ldw	r2,-52(fp)
  817984:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  817988:	e0bff903 	ldbu	r2,-28(fp)
  81798c:	e0bfff15 	stw	r2,-4(fp)
  817990:	00000606 	br	8179ac <OSTaskCreate+0x1bc>
  817994:	e0bff817 	ldw	r2,-32(fp)
  817998:	e0bff215 	stw	r2,-56(fp)
  81799c:	e0bff217 	ldw	r2,-56(fp)
  8179a0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  8179a4:	00800a04 	movi	r2,40
  8179a8:	e0bfff15 	stw	r2,-4(fp)
  8179ac:	e0bfff17 	ldw	r2,-4(fp)
}
  8179b0:	e037883a 	mov	sp,fp
  8179b4:	dfc00117 	ldw	ra,4(sp)
  8179b8:	df000017 	ldw	fp,0(sp)
  8179bc:	dec00204 	addi	sp,sp,8
  8179c0:	f800283a 	ret

008179c4 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
  8179c4:	deffeb04 	addi	sp,sp,-84
  8179c8:	dfc01415 	stw	ra,80(sp)
  8179cc:	df001315 	stw	fp,76(sp)
  8179d0:	df001304 	addi	fp,sp,76
  8179d4:	e13ff915 	stw	r4,-28(fp)
  8179d8:	e17ffa15 	stw	r5,-24(fp)
  8179dc:	e1bffb15 	stw	r6,-20(fp)
  8179e0:	e0800217 	ldw	r2,8(fp)
  8179e4:	e0c00617 	ldw	r3,24(fp)
  8179e8:	e1fffc05 	stb	r7,-16(fp)
  8179ec:	e0bffd0d 	sth	r2,-12(fp)
  8179f0:	e0fffe0d 	sth	r3,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  8179f4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  8179f8:	e0bffc03 	ldbu	r2,-16(fp)
  8179fc:	10800570 	cmpltui	r2,r2,21
  817a00:	1000031e 	bne	r2,zero,817a10 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
  817a04:	00800a84 	movi	r2,42
  817a08:	e0bfff15 	stw	r2,-4(fp)
  817a0c:	00006706 	br	817bac <OSTaskCreateExt+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817a10:	0005303a 	rdctl	r2,status
  817a14:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817a18:	e0fff517 	ldw	r3,-44(fp)
  817a1c:	00bfff84 	movi	r2,-2
  817a20:	1884703a 	and	r2,r3,r2
  817a24:	1001703a 	wrctl	status,r2
  
  return context;
  817a28:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  817a2c:	e0bff615 	stw	r2,-40(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  817a30:	008020b4 	movhi	r2,130
  817a34:	10828a04 	addi	r2,r2,2600
  817a38:	10800003 	ldbu	r2,0(r2)
  817a3c:	10803fcc 	andi	r2,r2,255
  817a40:	1005003a 	cmpeq	r2,r2,zero
  817a44:	1000071e 	bne	r2,zero,817a64 <OSTaskCreateExt+0xa0>
  817a48:	e0bff617 	ldw	r2,-40(fp)
  817a4c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817a50:	e0bff417 	ldw	r2,-48(fp)
  817a54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  817a58:	00800f04 	movi	r2,60
  817a5c:	e0bfff15 	stw	r2,-4(fp)
  817a60:	00005206 	br	817bac <OSTaskCreateExt+0x1e8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  817a64:	e0bffc03 	ldbu	r2,-16(fp)
  817a68:	00c020f4 	movhi	r3,131
  817a6c:	18e0e704 	addi	r3,r3,-31844
  817a70:	1085883a 	add	r2,r2,r2
  817a74:	1085883a 	add	r2,r2,r2
  817a78:	10c5883a 	add	r2,r2,r3
  817a7c:	10800017 	ldw	r2,0(r2)
  817a80:	1004c03a 	cmpne	r2,r2,zero
  817a84:	1000431e 	bne	r2,zero,817b94 <OSTaskCreateExt+0x1d0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  817a88:	e0bffc03 	ldbu	r2,-16(fp)
  817a8c:	00c020f4 	movhi	r3,131
  817a90:	18e0e704 	addi	r3,r3,-31844
  817a94:	1085883a 	add	r2,r2,r2
  817a98:	1085883a 	add	r2,r2,r2
  817a9c:	10c7883a 	add	r3,r2,r3
  817aa0:	00800044 	movi	r2,1
  817aa4:	18800015 	stw	r2,0(r3)
  817aa8:	e0bff617 	ldw	r2,-40(fp)
  817aac:	e0bff315 	stw	r2,-52(fp)
  817ab0:	e0bff317 	ldw	r2,-52(fp)
  817ab4:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
  817ab8:	e1bffe0b 	ldhu	r6,-8(fp)
  817abc:	e1000317 	ldw	r4,12(fp)
  817ac0:	e1400417 	ldw	r5,16(fp)
  817ac4:	0818c400 	call	818c40 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
  817ac8:	e1fffe0b 	ldhu	r7,-8(fp)
  817acc:	e13ff917 	ldw	r4,-28(fp)
  817ad0:	e17ffa17 	ldw	r5,-24(fp)
  817ad4:	e1bffb17 	ldw	r6,-20(fp)
  817ad8:	081bd8c0 	call	81bd8c <OSTaskStkInit>
  817adc:	e0bff815 	stw	r2,-32(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
  817ae0:	e13ffc03 	ldbu	r4,-16(fp)
  817ae4:	e1fffd0b 	ldhu	r7,-12(fp)
  817ae8:	e0fffe0b 	ldhu	r3,-8(fp)
  817aec:	e0800417 	ldw	r2,16(fp)
  817af0:	d8800015 	stw	r2,0(sp)
  817af4:	e0800517 	ldw	r2,20(fp)
  817af8:	d8800115 	stw	r2,4(sp)
  817afc:	d8c00215 	stw	r3,8(sp)
  817b00:	e17ff817 	ldw	r5,-32(fp)
  817b04:	e1800317 	ldw	r6,12(fp)
  817b08:	0812dd00 	call	812dd0 <OS_TCBInit>
  817b0c:	e0bff705 	stb	r2,-36(fp)
        if (err == OS_ERR_NONE) {
  817b10:	e0bff703 	ldbu	r2,-36(fp)
  817b14:	1004c03a 	cmpne	r2,r2,zero
  817b18:	1000081e 	bne	r2,zero,817b3c <OSTaskCreateExt+0x178>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
  817b1c:	008020b4 	movhi	r2,130
  817b20:	10827c44 	addi	r2,r2,2545
  817b24:	10800003 	ldbu	r2,0(r2)
  817b28:	10803fcc 	andi	r2,r2,255
  817b2c:	10800058 	cmpnei	r2,r2,1
  817b30:	1000151e 	bne	r2,zero,817b88 <OSTaskCreateExt+0x1c4>
                OS_Sched();
  817b34:	08129c80 	call	8129c8 <OS_Sched>
  817b38:	00001306 	br	817b88 <OSTaskCreateExt+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817b3c:	0005303a 	rdctl	r2,status
  817b40:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817b44:	e0fff217 	ldw	r3,-56(fp)
  817b48:	00bfff84 	movi	r2,-2
  817b4c:	1884703a 	and	r2,r3,r2
  817b50:	1001703a 	wrctl	status,r2
  
  return context;
  817b54:	e0bff217 	ldw	r2,-56(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  817b58:	e0bff615 	stw	r2,-40(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
  817b5c:	e0bffc03 	ldbu	r2,-16(fp)
  817b60:	00c020f4 	movhi	r3,131
  817b64:	18e0e704 	addi	r3,r3,-31844
  817b68:	1085883a 	add	r2,r2,r2
  817b6c:	1085883a 	add	r2,r2,r2
  817b70:	10c5883a 	add	r2,r2,r3
  817b74:	10000015 	stw	zero,0(r2)
  817b78:	e0bff617 	ldw	r2,-40(fp)
  817b7c:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817b80:	e0bff117 	ldw	r2,-60(fp)
  817b84:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  817b88:	e0bff703 	ldbu	r2,-36(fp)
  817b8c:	e0bfff15 	stw	r2,-4(fp)
  817b90:	00000606 	br	817bac <OSTaskCreateExt+0x1e8>
  817b94:	e0bff617 	ldw	r2,-40(fp)
  817b98:	e0bff015 	stw	r2,-64(fp)
  817b9c:	e0bff017 	ldw	r2,-64(fp)
  817ba0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  817ba4:	00800a04 	movi	r2,40
  817ba8:	e0bfff15 	stw	r2,-4(fp)
  817bac:	e0bfff17 	ldw	r2,-4(fp)
}
  817bb0:	e037883a 	mov	sp,fp
  817bb4:	dfc00117 	ldw	ra,4(sp)
  817bb8:	df000017 	ldw	fp,0(sp)
  817bbc:	dec00204 	addi	sp,sp,8
  817bc0:	f800283a 	ret

00817bc4 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
  817bc4:	defff304 	addi	sp,sp,-52
  817bc8:	dfc00c15 	stw	ra,48(sp)
  817bcc:	df000b15 	stw	fp,44(sp)
  817bd0:	df000b04 	addi	fp,sp,44
  817bd4:	e13ffe05 	stb	r4,-8(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
  817bd8:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
  817bdc:	008020b4 	movhi	r2,130
  817be0:	10828a04 	addi	r2,r2,2600
  817be4:	10800003 	ldbu	r2,0(r2)
  817be8:	10803fcc 	andi	r2,r2,255
  817bec:	1005003a 	cmpeq	r2,r2,zero
  817bf0:	1000031e 	bne	r2,zero,817c00 <OSTaskDel+0x3c>
        return (OS_ERR_TASK_DEL_ISR);
  817bf4:	00801004 	movi	r2,64
  817bf8:	e0bfff15 	stw	r2,-4(fp)
  817bfc:	0000ee06 	br	817fb8 <OSTaskDel+0x3f4>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
  817c00:	e0bffe03 	ldbu	r2,-8(fp)
  817c04:	10800518 	cmpnei	r2,r2,20
  817c08:	1000031e 	bne	r2,zero,817c18 <OSTaskDel+0x54>
        return (OS_ERR_TASK_DEL_IDLE);
  817c0c:	00800f84 	movi	r2,62
  817c10:	e0bfff15 	stw	r2,-4(fp)
  817c14:	0000e806 	br	817fb8 <OSTaskDel+0x3f4>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
  817c18:	e0bffe03 	ldbu	r2,-8(fp)
  817c1c:	10800530 	cmpltui	r2,r2,20
  817c20:	1000061e 	bne	r2,zero,817c3c <OSTaskDel+0x78>
        if (prio != OS_PRIO_SELF) {
  817c24:	e0bffe03 	ldbu	r2,-8(fp)
  817c28:	10803fe0 	cmpeqi	r2,r2,255
  817c2c:	1000031e 	bne	r2,zero,817c3c <OSTaskDel+0x78>
            return (OS_ERR_PRIO_INVALID);
  817c30:	00800a84 	movi	r2,42
  817c34:	e0bfff15 	stw	r2,-4(fp)
  817c38:	0000df06 	br	817fb8 <OSTaskDel+0x3f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817c3c:	0005303a 	rdctl	r2,status
  817c40:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817c44:	e0fffa17 	ldw	r3,-24(fp)
  817c48:	00bfff84 	movi	r2,-2
  817c4c:	1884703a 	and	r2,r3,r2
  817c50:	1001703a 	wrctl	status,r2
  
  return context;
  817c54:	e0bffa17 	ldw	r2,-24(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
  817c58:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
  817c5c:	e0bffe03 	ldbu	r2,-8(fp)
  817c60:	10803fd8 	cmpnei	r2,r2,255
  817c64:	1000051e 	bne	r2,zero,817c7c <OSTaskDel+0xb8>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
  817c68:	008020b4 	movhi	r2,130
  817c6c:	10828b04 	addi	r2,r2,2604
  817c70:	10800017 	ldw	r2,0(r2)
  817c74:	10800c83 	ldbu	r2,50(r2)
  817c78:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  817c7c:	e0bffe03 	ldbu	r2,-8(fp)
  817c80:	00c020f4 	movhi	r3,131
  817c84:	18e0e704 	addi	r3,r3,-31844
  817c88:	1085883a 	add	r2,r2,r2
  817c8c:	1085883a 	add	r2,r2,r2
  817c90:	10c5883a 	add	r2,r2,r3
  817c94:	10800017 	ldw	r2,0(r2)
  817c98:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
  817c9c:	e0bffc17 	ldw	r2,-16(fp)
  817ca0:	1004c03a 	cmpne	r2,r2,zero
  817ca4:	1000071e 	bne	r2,zero,817cc4 <OSTaskDel+0x100>
  817ca8:	e0bffb17 	ldw	r2,-20(fp)
  817cac:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817cb0:	e0bff917 	ldw	r2,-28(fp)
  817cb4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  817cb8:	008010c4 	movi	r2,67
  817cbc:	e0bfff15 	stw	r2,-4(fp)
  817cc0:	0000bd06 	br	817fb8 <OSTaskDel+0x3f4>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
  817cc4:	e0bffc17 	ldw	r2,-16(fp)
  817cc8:	10800058 	cmpnei	r2,r2,1
  817ccc:	1000071e 	bne	r2,zero,817cec <OSTaskDel+0x128>
  817cd0:	e0bffb17 	ldw	r2,-20(fp)
  817cd4:	e0bff815 	stw	r2,-32(fp)
  817cd8:	e0bff817 	ldw	r2,-32(fp)
  817cdc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  817ce0:	00800f44 	movi	r2,61
  817ce4:	e0bfff15 	stw	r2,-4(fp)
  817ce8:	0000b306 	br	817fb8 <OSTaskDel+0x3f4>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
  817cec:	e0bffc17 	ldw	r2,-16(fp)
  817cf0:	10800d03 	ldbu	r2,52(r2)
  817cf4:	11003fcc 	andi	r4,r2,255
  817cf8:	e0bffc17 	ldw	r2,-16(fp)
  817cfc:	10800d03 	ldbu	r2,52(r2)
  817d00:	10c03fcc 	andi	r3,r2,255
  817d04:	008020b4 	movhi	r2,130
  817d08:	10828844 	addi	r2,r2,2593
  817d0c:	10c5883a 	add	r2,r2,r3
  817d10:	10800003 	ldbu	r2,0(r2)
  817d14:	1007883a 	mov	r3,r2
  817d18:	e0bffc17 	ldw	r2,-16(fp)
  817d1c:	10800d43 	ldbu	r2,53(r2)
  817d20:	0084303a 	nor	r2,zero,r2
  817d24:	1884703a 	and	r2,r3,r2
  817d28:	1007883a 	mov	r3,r2
  817d2c:	008020b4 	movhi	r2,130
  817d30:	10828844 	addi	r2,r2,2593
  817d34:	1105883a 	add	r2,r2,r4
  817d38:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
  817d3c:	e0bffc17 	ldw	r2,-16(fp)
  817d40:	10800d03 	ldbu	r2,52(r2)
  817d44:	10c03fcc 	andi	r3,r2,255
  817d48:	008020b4 	movhi	r2,130
  817d4c:	10828844 	addi	r2,r2,2593
  817d50:	10c5883a 	add	r2,r2,r3
  817d54:	10800003 	ldbu	r2,0(r2)
  817d58:	10803fcc 	andi	r2,r2,255
  817d5c:	1004c03a 	cmpne	r2,r2,zero
  817d60:	10000c1e 	bne	r2,zero,817d94 <OSTaskDel+0x1d0>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
  817d64:	e0bffc17 	ldw	r2,-16(fp)
  817d68:	10800d83 	ldbu	r2,54(r2)
  817d6c:	0084303a 	nor	r2,zero,r2
  817d70:	1007883a 	mov	r3,r2
  817d74:	008020b4 	movhi	r2,130
  817d78:	10828804 	addi	r2,r2,2592
  817d7c:	10800003 	ldbu	r2,0(r2)
  817d80:	1884703a 	and	r2,r3,r2
  817d84:	1007883a 	mov	r3,r2
  817d88:	008020b4 	movhi	r2,130
  817d8c:	10828804 	addi	r2,r2,2592
  817d90:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
  817d94:	e0bffc17 	ldw	r2,-16(fp)
  817d98:	10800717 	ldw	r2,28(r2)
  817d9c:	1005003a 	cmpeq	r2,r2,zero
  817da0:	1000041e 	bne	r2,zero,817db4 <OSTaskDel+0x1f0>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
  817da4:	e0bffc17 	ldw	r2,-16(fp)
  817da8:	11400717 	ldw	r5,28(r2)
  817dac:	e13ffc17 	ldw	r4,-16(fp)
  817db0:	08123800 	call	812380 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
  817db4:	e0bffc17 	ldw	r2,-16(fp)
  817db8:	10800817 	ldw	r2,32(r2)
  817dbc:	1005003a 	cmpeq	r2,r2,zero
  817dc0:	1000041e 	bne	r2,zero,817dd4 <OSTaskDel+0x210>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  817dc4:	e0bffc17 	ldw	r2,-16(fp)
  817dc8:	11400817 	ldw	r5,32(r2)
  817dcc:	e13ffc17 	ldw	r4,-16(fp)
  817dd0:	08124380 	call	812438 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
  817dd4:	e0bffc17 	ldw	r2,-16(fp)
  817dd8:	10800a17 	ldw	r2,40(r2)
  817ddc:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
  817de0:	e0bffd17 	ldw	r2,-12(fp)
  817de4:	1005003a 	cmpeq	r2,r2,zero
  817de8:	1000021e 	bne	r2,zero,817df4 <OSTaskDel+0x230>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
  817dec:	e13ffd17 	ldw	r4,-12(fp)
  817df0:	0814acc0 	call	814acc <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
  817df4:	e0bffc17 	ldw	r2,-16(fp)
  817df8:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
  817dfc:	e0bffc17 	ldw	r2,-16(fp)
  817e00:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  817e04:	e0bffc17 	ldw	r2,-16(fp)
  817e08:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
  817e0c:	008020b4 	movhi	r2,130
  817e10:	10827c04 	addi	r2,r2,2544
  817e14:	10800003 	ldbu	r2,0(r2)
  817e18:	10803fcc 	andi	r2,r2,255
  817e1c:	10803fe0 	cmpeqi	r2,r2,255
  817e20:	1000081e 	bne	r2,zero,817e44 <OSTaskDel+0x280>
        OSLockNesting++;
  817e24:	008020b4 	movhi	r2,130
  817e28:	10827c04 	addi	r2,r2,2544
  817e2c:	10800003 	ldbu	r2,0(r2)
  817e30:	10800044 	addi	r2,r2,1
  817e34:	1007883a 	mov	r3,r2
  817e38:	008020b4 	movhi	r2,130
  817e3c:	10827c04 	addi	r2,r2,2544
  817e40:	10c00005 	stb	r3,0(r2)
  817e44:	e0bffb17 	ldw	r2,-20(fp)
  817e48:	e0bff715 	stw	r2,-36(fp)
  817e4c:	e0bff717 	ldw	r2,-36(fp)
  817e50:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
  817e54:	0811f6c0 	call	811f6c <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817e58:	0005303a 	rdctl	r2,status
  817e5c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817e60:	e0fff617 	ldw	r3,-40(fp)
  817e64:	00bfff84 	movi	r2,-2
  817e68:	1884703a 	and	r2,r3,r2
  817e6c:	1001703a 	wrctl	status,r2
  
  return context;
  817e70:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
  817e74:	e0bffb15 	stw	r2,-20(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
  817e78:	008020b4 	movhi	r2,130
  817e7c:	10827c04 	addi	r2,r2,2544
  817e80:	10800003 	ldbu	r2,0(r2)
  817e84:	10803fcc 	andi	r2,r2,255
  817e88:	1005003a 	cmpeq	r2,r2,zero
  817e8c:	1000081e 	bne	r2,zero,817eb0 <OSTaskDel+0x2ec>
        OSLockNesting--;
  817e90:	008020b4 	movhi	r2,130
  817e94:	10827c04 	addi	r2,r2,2544
  817e98:	10800003 	ldbu	r2,0(r2)
  817e9c:	10bfffc4 	addi	r2,r2,-1
  817ea0:	1007883a 	mov	r3,r2
  817ea4:	008020b4 	movhi	r2,130
  817ea8:	10827c04 	addi	r2,r2,2544
  817eac:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
  817eb0:	e13ffc17 	ldw	r4,-16(fp)
  817eb4:	081c0bc0 	call	81c0bc <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
  817eb8:	008020b4 	movhi	r2,130
  817ebc:	10828444 	addi	r2,r2,2577
  817ec0:	10800003 	ldbu	r2,0(r2)
  817ec4:	10bfffc4 	addi	r2,r2,-1
  817ec8:	1007883a 	mov	r3,r2
  817ecc:	008020b4 	movhi	r2,130
  817ed0:	10828444 	addi	r2,r2,2577
  817ed4:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
  817ed8:	e0bffe03 	ldbu	r2,-8(fp)
  817edc:	00c020f4 	movhi	r3,131
  817ee0:	18e0e704 	addi	r3,r3,-31844
  817ee4:	1085883a 	add	r2,r2,r2
  817ee8:	1085883a 	add	r2,r2,r2
  817eec:	10c5883a 	add	r2,r2,r3
  817ef0:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
  817ef4:	e0bffc17 	ldw	r2,-16(fp)
  817ef8:	10800617 	ldw	r2,24(r2)
  817efc:	1004c03a 	cmpne	r2,r2,zero
  817f00:	1000091e 	bne	r2,zero,817f28 <OSTaskDel+0x364>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
  817f04:	e0bffc17 	ldw	r2,-16(fp)
  817f08:	10800517 	ldw	r2,20(r2)
  817f0c:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
  817f10:	e0bffc17 	ldw	r2,-16(fp)
  817f14:	10c00517 	ldw	r3,20(r2)
  817f18:	008020b4 	movhi	r2,130
  817f1c:	10827f04 	addi	r2,r2,2556
  817f20:	10c00015 	stw	r3,0(r2)
  817f24:	00000a06 	br	817f50 <OSTaskDel+0x38c>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
  817f28:	e0bffc17 	ldw	r2,-16(fp)
  817f2c:	10c00617 	ldw	r3,24(r2)
  817f30:	e0bffc17 	ldw	r2,-16(fp)
  817f34:	10800517 	ldw	r2,20(r2)
  817f38:	18800515 	stw	r2,20(r3)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
  817f3c:	e0bffc17 	ldw	r2,-16(fp)
  817f40:	10c00517 	ldw	r3,20(r2)
  817f44:	e0bffc17 	ldw	r2,-16(fp)
  817f48:	10800617 	ldw	r2,24(r2)
  817f4c:	18800615 	stw	r2,24(r3)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
  817f50:	008020b4 	movhi	r2,130
  817f54:	10828304 	addi	r2,r2,2572
  817f58:	10c00017 	ldw	r3,0(r2)
  817f5c:	e0bffc17 	ldw	r2,-16(fp)
  817f60:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
  817f64:	00c020b4 	movhi	r3,130
  817f68:	18c28304 	addi	r3,r3,2572
  817f6c:	e0bffc17 	ldw	r2,-16(fp)
  817f70:	18800015 	stw	r2,0(r3)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
  817f74:	e0fffc17 	ldw	r3,-16(fp)
  817f78:	00800fc4 	movi	r2,63
  817f7c:	18801305 	stb	r2,76(r3)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  817f80:	e0bffc17 	ldw	r2,-16(fp)
  817f84:	10001345 	stb	zero,77(r2)
  817f88:	e0bffb17 	ldw	r2,-20(fp)
  817f8c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817f90:	e0bff517 	ldw	r2,-44(fp)
  817f94:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  817f98:	008020b4 	movhi	r2,130
  817f9c:	10827c44 	addi	r2,r2,2545
  817fa0:	10800003 	ldbu	r2,0(r2)
  817fa4:	10803fcc 	andi	r2,r2,255
  817fa8:	10800058 	cmpnei	r2,r2,1
  817fac:	1000011e 	bne	r2,zero,817fb4 <OSTaskDel+0x3f0>
        OS_Sched();                                     /* Find new highest priority task              */
  817fb0:	08129c80 	call	8129c8 <OS_Sched>
    }
    return (OS_ERR_NONE);
  817fb4:	e03fff15 	stw	zero,-4(fp)
  817fb8:	e0bfff17 	ldw	r2,-4(fp)
}
  817fbc:	e037883a 	mov	sp,fp
  817fc0:	dfc00117 	ldw	ra,4(sp)
  817fc4:	df000017 	ldw	fp,0(sp)
  817fc8:	dec00204 	addi	sp,sp,8
  817fcc:	f800283a 	ret

00817fd0 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
  817fd0:	defff404 	addi	sp,sp,-48
  817fd4:	df000b15 	stw	fp,44(sp)
  817fd8:	df000b04 	addi	fp,sp,44
  817fdc:	e13ffe05 	stb	r4,-8(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  817fe0:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
  817fe4:	e0bffe03 	ldbu	r2,-8(fp)
  817fe8:	10800518 	cmpnei	r2,r2,20
  817fec:	1000031e 	bne	r2,zero,817ffc <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
  817ff0:	00800f84 	movi	r2,62
  817ff4:	e0bfff15 	stw	r2,-4(fp)
  817ff8:	00004c06 	br	81812c <OSTaskDelReq+0x15c>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  817ffc:	e0bffe03 	ldbu	r2,-8(fp)
  818000:	10800530 	cmpltui	r2,r2,20
  818004:	1000061e 	bne	r2,zero,818020 <OSTaskDelReq+0x50>
        if (prio != OS_PRIO_SELF) {
  818008:	e0bffe03 	ldbu	r2,-8(fp)
  81800c:	10803fe0 	cmpeqi	r2,r2,255
  818010:	1000031e 	bne	r2,zero,818020 <OSTaskDelReq+0x50>
            return (OS_ERR_PRIO_INVALID);
  818014:	00800a84 	movi	r2,42
  818018:	e0bfff15 	stw	r2,-4(fp)
  81801c:	00004306 	br	81812c <OSTaskDelReq+0x15c>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
  818020:	e0bffe03 	ldbu	r2,-8(fp)
  818024:	10803fd8 	cmpnei	r2,r2,255
  818028:	1000141e 	bne	r2,zero,81807c <OSTaskDelReq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81802c:	0005303a 	rdctl	r2,status
  818030:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818034:	e0fffa17 	ldw	r3,-24(fp)
  818038:	00bfff84 	movi	r2,-2
  81803c:	1884703a 	and	r2,r3,r2
  818040:	1001703a 	wrctl	status,r2
  
  return context;
  818044:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
  818048:	e0bffb15 	stw	r2,-20(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
  81804c:	008020b4 	movhi	r2,130
  818050:	10828b04 	addi	r2,r2,2604
  818054:	10800017 	ldw	r2,0(r2)
  818058:	10800dc3 	ldbu	r2,55(r2)
  81805c:	e0bffd05 	stb	r2,-12(fp)
  818060:	e0bffb17 	ldw	r2,-20(fp)
  818064:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  818068:	e0bff917 	ldw	r2,-28(fp)
  81806c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
  818070:	e0bffd03 	ldbu	r2,-12(fp)
  818074:	e0bfff15 	stw	r2,-4(fp)
  818078:	00002c06 	br	81812c <OSTaskDelReq+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81807c:	0005303a 	rdctl	r2,status
  818080:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818084:	e0fff817 	ldw	r3,-32(fp)
  818088:	00bfff84 	movi	r2,-2
  81808c:	1884703a 	and	r2,r3,r2
  818090:	1001703a 	wrctl	status,r2
  
  return context;
  818094:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  818098:	e0bffb15 	stw	r2,-20(fp)
    ptcb = OSTCBPrioTbl[prio];
  81809c:	e0bffe03 	ldbu	r2,-8(fp)
  8180a0:	00c020f4 	movhi	r3,131
  8180a4:	18e0e704 	addi	r3,r3,-31844
  8180a8:	1085883a 	add	r2,r2,r2
  8180ac:	1085883a 	add	r2,r2,r2
  8180b0:	10c5883a 	add	r2,r2,r3
  8180b4:	10800017 	ldw	r2,0(r2)
  8180b8:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
  8180bc:	e0bffc17 	ldw	r2,-16(fp)
  8180c0:	1004c03a 	cmpne	r2,r2,zero
  8180c4:	1000071e 	bne	r2,zero,8180e4 <OSTaskDelReq+0x114>
  8180c8:	e0bffb17 	ldw	r2,-20(fp)
  8180cc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8180d0:	e0bff717 	ldw	r2,-36(fp)
  8180d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
  8180d8:	008010c4 	movi	r2,67
  8180dc:	e0bfff15 	stw	r2,-4(fp)
  8180e0:	00001206 	br	81812c <OSTaskDelReq+0x15c>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
  8180e4:	e0bffc17 	ldw	r2,-16(fp)
  8180e8:	10800058 	cmpnei	r2,r2,1
  8180ec:	1000071e 	bne	r2,zero,81810c <OSTaskDelReq+0x13c>
  8180f0:	e0bffb17 	ldw	r2,-20(fp)
  8180f4:	e0bff615 	stw	r2,-40(fp)
  8180f8:	e0bff617 	ldw	r2,-40(fp)
  8180fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  818100:	00800f44 	movi	r2,61
  818104:	e0bfff15 	stw	r2,-4(fp)
  818108:	00000806 	br	81812c <OSTaskDelReq+0x15c>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
  81810c:	e0fffc17 	ldw	r3,-16(fp)
  818110:	00800fc4 	movi	r2,63
  818114:	18800dc5 	stb	r2,55(r3)
  818118:	e0bffb17 	ldw	r2,-20(fp)
  81811c:	e0bff515 	stw	r2,-44(fp)
  818120:	e0bff517 	ldw	r2,-44(fp)
  818124:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  818128:	e03fff15 	stw	zero,-4(fp)
  81812c:	e0bfff17 	ldw	r2,-4(fp)
}
  818130:	e037883a 	mov	sp,fp
  818134:	df000017 	ldw	fp,0(sp)
  818138:	dec00104 	addi	sp,sp,4
  81813c:	f800283a 	ret

00818140 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
  818140:	defff304 	addi	sp,sp,-52
  818144:	dfc00c15 	stw	ra,48(sp)
  818148:	df000b15 	stw	fp,44(sp)
  81814c:	df000b04 	addi	fp,sp,44
  818150:	e17ffd15 	stw	r5,-12(fp)
  818154:	e1bffe15 	stw	r6,-8(fp)
  818158:	e13ffc05 	stb	r4,-16(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
  81815c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
  818160:	e0bffe17 	ldw	r2,-8(fp)
  818164:	1004c03a 	cmpne	r2,r2,zero
  818168:	1000021e 	bne	r2,zero,818174 <OSTaskNameGet+0x34>
        return (0);
  81816c:	e03fff15 	stw	zero,-4(fp)
  818170:	00005b06 	br	8182e0 <OSTaskNameGet+0x1a0>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
  818174:	e0bffc03 	ldbu	r2,-16(fp)
  818178:	10800570 	cmpltui	r2,r2,21
  81817c:	1000081e 	bne	r2,zero,8181a0 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
  818180:	e0bffc03 	ldbu	r2,-16(fp)
  818184:	10803fe0 	cmpeqi	r2,r2,255
  818188:	1000051e 	bne	r2,zero,8181a0 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
  81818c:	e0fffe17 	ldw	r3,-8(fp)
  818190:	00800a84 	movi	r2,42
  818194:	18800005 	stb	r2,0(r3)
            return (0);
  818198:	e03fff15 	stw	zero,-4(fp)
  81819c:	00005006 	br	8182e0 <OSTaskNameGet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
  8181a0:	e0bffd17 	ldw	r2,-12(fp)
  8181a4:	1004c03a 	cmpne	r2,r2,zero
  8181a8:	1000051e 	bne	r2,zero,8181c0 <OSTaskNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
  8181ac:	e0fffe17 	ldw	r3,-8(fp)
  8181b0:	00800304 	movi	r2,12
  8181b4:	18800005 	stb	r2,0(r3)
        return (0);
  8181b8:	e03fff15 	stw	zero,-4(fp)
  8181bc:	00004806 	br	8182e0 <OSTaskNameGet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
  8181c0:	008020b4 	movhi	r2,130
  8181c4:	10828a04 	addi	r2,r2,2600
  8181c8:	10800003 	ldbu	r2,0(r2)
  8181cc:	10803fcc 	andi	r2,r2,255
  8181d0:	1005003a 	cmpeq	r2,r2,zero
  8181d4:	1000051e 	bne	r2,zero,8181ec <OSTaskNameGet+0xac>
        *perr = OS_ERR_NAME_GET_ISR;
  8181d8:	e0fffe17 	ldw	r3,-8(fp)
  8181dc:	00800444 	movi	r2,17
  8181e0:	18800005 	stb	r2,0(r3)
        return (0);
  8181e4:	e03fff15 	stw	zero,-4(fp)
  8181e8:	00003d06 	br	8182e0 <OSTaskNameGet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8181ec:	0005303a 	rdctl	r2,status
  8181f0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8181f4:	e0fff817 	ldw	r3,-32(fp)
  8181f8:	00bfff84 	movi	r2,-2
  8181fc:	1884703a 	and	r2,r3,r2
  818200:	1001703a 	wrctl	status,r2
  
  return context;
  818204:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  818208:	e0bff915 	stw	r2,-28(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
  81820c:	e0bffc03 	ldbu	r2,-16(fp)
  818210:	10803fd8 	cmpnei	r2,r2,255
  818214:	1000051e 	bne	r2,zero,81822c <OSTaskNameGet+0xec>
        prio = OSTCBCur->OSTCBPrio;
  818218:	008020b4 	movhi	r2,130
  81821c:	10828b04 	addi	r2,r2,2604
  818220:	10800017 	ldw	r2,0(r2)
  818224:	10800c83 	ldbu	r2,50(r2)
  818228:	e0bffc05 	stb	r2,-16(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  81822c:	e0bffc03 	ldbu	r2,-16(fp)
  818230:	00c020f4 	movhi	r3,131
  818234:	18e0e704 	addi	r3,r3,-31844
  818238:	1085883a 	add	r2,r2,r2
  81823c:	1085883a 	add	r2,r2,r2
  818240:	10c5883a 	add	r2,r2,r3
  818244:	10800017 	ldw	r2,0(r2)
  818248:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
  81824c:	e0bffb17 	ldw	r2,-20(fp)
  818250:	1004c03a 	cmpne	r2,r2,zero
  818254:	1000091e 	bne	r2,zero,81827c <OSTaskNameGet+0x13c>
  818258:	e0bff917 	ldw	r2,-28(fp)
  81825c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  818260:	e0bff717 	ldw	r2,-36(fp)
  818264:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
  818268:	e0fffe17 	ldw	r3,-8(fp)
  81826c:	008010c4 	movi	r2,67
  818270:	18800005 	stb	r2,0(r3)
        return (0);
  818274:	e03fff15 	stw	zero,-4(fp)
  818278:	00001906 	br	8182e0 <OSTaskNameGet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
  81827c:	e0bffb17 	ldw	r2,-20(fp)
  818280:	10800058 	cmpnei	r2,r2,1
  818284:	1000091e 	bne	r2,zero,8182ac <OSTaskNameGet+0x16c>
  818288:	e0bff917 	ldw	r2,-28(fp)
  81828c:	e0bff615 	stw	r2,-40(fp)
  818290:	e0bff617 	ldw	r2,-40(fp)
  818294:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
  818298:	e0fffe17 	ldw	r3,-8(fp)
  81829c:	008010c4 	movi	r2,67
  8182a0:	18800005 	stb	r2,0(r3)
        return (0);
  8182a4:	e03fff15 	stw	zero,-4(fp)
  8182a8:	00000d06 	br	8182e0 <OSTaskNameGet+0x1a0>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
  8182ac:	e0bffb17 	ldw	r2,-20(fp)
  8182b0:	11401304 	addi	r5,r2,76
  8182b4:	e13ffd17 	ldw	r4,-12(fp)
  8182b8:	0812b0c0 	call	812b0c <OS_StrCopy>
  8182bc:	e0bffa05 	stb	r2,-24(fp)
  8182c0:	e0bff917 	ldw	r2,-28(fp)
  8182c4:	e0bff515 	stw	r2,-44(fp)
  8182c8:	e0bff517 	ldw	r2,-44(fp)
  8182cc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  8182d0:	e0bffe17 	ldw	r2,-8(fp)
  8182d4:	10000005 	stb	zero,0(r2)
    return (len);
  8182d8:	e0bffa03 	ldbu	r2,-24(fp)
  8182dc:	e0bfff15 	stw	r2,-4(fp)
  8182e0:	e0bfff17 	ldw	r2,-4(fp)
}
  8182e4:	e037883a 	mov	sp,fp
  8182e8:	dfc00117 	ldw	ra,4(sp)
  8182ec:	df000017 	ldw	fp,0(sp)
  8182f0:	dec00204 	addi	sp,sp,8
  8182f4:	f800283a 	ret

008182f8 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
  8182f8:	defff304 	addi	sp,sp,-52
  8182fc:	dfc00c15 	stw	ra,48(sp)
  818300:	df000b15 	stw	fp,44(sp)
  818304:	df000b04 	addi	fp,sp,44
  818308:	e17ffe15 	stw	r5,-8(fp)
  81830c:	e1bfff15 	stw	r6,-4(fp)
  818310:	e13ffd05 	stb	r4,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  818314:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  818318:	e0bfff17 	ldw	r2,-4(fp)
  81831c:	1005003a 	cmpeq	r2,r2,zero
  818320:	1000611e 	bne	r2,zero,8184a8 <OSTaskNameSet+0x1b0>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
  818324:	e0bffd03 	ldbu	r2,-12(fp)
  818328:	10800570 	cmpltui	r2,r2,21
  81832c:	1000071e 	bne	r2,zero,81834c <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
  818330:	e0bffd03 	ldbu	r2,-12(fp)
  818334:	10803fe0 	cmpeqi	r2,r2,255
  818338:	1000041e 	bne	r2,zero,81834c <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
  81833c:	e0ffff17 	ldw	r3,-4(fp)
  818340:	00800a84 	movi	r2,42
  818344:	18800005 	stb	r2,0(r3)
            return;
  818348:	00005706 	br	8184a8 <OSTaskNameSet+0x1b0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
  81834c:	e0bffe17 	ldw	r2,-8(fp)
  818350:	1004c03a 	cmpne	r2,r2,zero
  818354:	1000041e 	bne	r2,zero,818368 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
  818358:	e0ffff17 	ldw	r3,-4(fp)
  81835c:	00800304 	movi	r2,12
  818360:	18800005 	stb	r2,0(r3)
        return;
  818364:	00005006 	br	8184a8 <OSTaskNameSet+0x1b0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
  818368:	008020b4 	movhi	r2,130
  81836c:	10828a04 	addi	r2,r2,2600
  818370:	10800003 	ldbu	r2,0(r2)
  818374:	10803fcc 	andi	r2,r2,255
  818378:	1005003a 	cmpeq	r2,r2,zero
  81837c:	1000041e 	bne	r2,zero,818390 <OSTaskNameSet+0x98>
        *perr = OS_ERR_NAME_SET_ISR;
  818380:	e0ffff17 	ldw	r3,-4(fp)
  818384:	00800484 	movi	r2,18
  818388:	18800005 	stb	r2,0(r3)
        return;
  81838c:	00004606 	br	8184a8 <OSTaskNameSet+0x1b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  818390:	0005303a 	rdctl	r2,status
  818394:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818398:	e0fff917 	ldw	r3,-28(fp)
  81839c:	00bfff84 	movi	r2,-2
  8183a0:	1884703a 	and	r2,r3,r2
  8183a4:	1001703a 	wrctl	status,r2
  
  return context;
  8183a8:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  8183ac:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
  8183b0:	e0bffd03 	ldbu	r2,-12(fp)
  8183b4:	10803fd8 	cmpnei	r2,r2,255
  8183b8:	1000051e 	bne	r2,zero,8183d0 <OSTaskNameSet+0xd8>
        prio = OSTCBCur->OSTCBPrio;
  8183bc:	008020b4 	movhi	r2,130
  8183c0:	10828b04 	addi	r2,r2,2604
  8183c4:	10800017 	ldw	r2,0(r2)
  8183c8:	10800c83 	ldbu	r2,50(r2)
  8183cc:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  8183d0:	e0bffd03 	ldbu	r2,-12(fp)
  8183d4:	00c020f4 	movhi	r3,131
  8183d8:	18e0e704 	addi	r3,r3,-31844
  8183dc:	1085883a 	add	r2,r2,r2
  8183e0:	1085883a 	add	r2,r2,r2
  8183e4:	10c5883a 	add	r2,r2,r3
  8183e8:	10800017 	ldw	r2,0(r2)
  8183ec:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
  8183f0:	e0bffb17 	ldw	r2,-20(fp)
  8183f4:	1004c03a 	cmpne	r2,r2,zero
  8183f8:	1000081e 	bne	r2,zero,81841c <OSTaskNameSet+0x124>
  8183fc:	e0bffa17 	ldw	r2,-24(fp)
  818400:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  818404:	e0bff817 	ldw	r2,-32(fp)
  818408:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
  81840c:	e0ffff17 	ldw	r3,-4(fp)
  818410:	008010c4 	movi	r2,67
  818414:	18800005 	stb	r2,0(r3)
        return;
  818418:	00002306 	br	8184a8 <OSTaskNameSet+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
  81841c:	e0bffb17 	ldw	r2,-20(fp)
  818420:	10800058 	cmpnei	r2,r2,1
  818424:	1000081e 	bne	r2,zero,818448 <OSTaskNameSet+0x150>
  818428:	e0bffa17 	ldw	r2,-24(fp)
  81842c:	e0bff715 	stw	r2,-36(fp)
  818430:	e0bff717 	ldw	r2,-36(fp)
  818434:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
  818438:	e0ffff17 	ldw	r3,-4(fp)
  81843c:	008010c4 	movi	r2,67
  818440:	18800005 	stb	r2,0(r3)
        return;
  818444:	00001806 	br	8184a8 <OSTaskNameSet+0x1b0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
  818448:	e13ffe17 	ldw	r4,-8(fp)
  81844c:	0812b8c0 	call	812b8c <OS_StrLen>
  818450:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
  818454:	e0bffc03 	ldbu	r2,-16(fp)
  818458:	10800830 	cmpltui	r2,r2,32
  81845c:	1000081e 	bne	r2,zero,818480 <OSTaskNameSet+0x188>
  818460:	e0bffa17 	ldw	r2,-24(fp)
  818464:	e0bff615 	stw	r2,-40(fp)
  818468:	e0bff617 	ldw	r2,-40(fp)
  81846c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
  818470:	e0ffff17 	ldw	r3,-4(fp)
  818474:	00801044 	movi	r2,65
  818478:	18800005 	stb	r2,0(r3)
        return;
  81847c:	00000a06 	br	8184a8 <OSTaskNameSet+0x1b0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
  818480:	e0bffb17 	ldw	r2,-20(fp)
  818484:	11001304 	addi	r4,r2,76
  818488:	e17ffe17 	ldw	r5,-8(fp)
  81848c:	0812b0c0 	call	812b0c <OS_StrCopy>
  818490:	e0bffa17 	ldw	r2,-24(fp)
  818494:	e0bff515 	stw	r2,-44(fp)
  818498:	e0bff517 	ldw	r2,-44(fp)
  81849c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  8184a0:	e0bfff17 	ldw	r2,-4(fp)
  8184a4:	10000005 	stb	zero,0(r2)
}
  8184a8:	e037883a 	mov	sp,fp
  8184ac:	dfc00117 	ldw	ra,4(sp)
  8184b0:	df000017 	ldw	fp,0(sp)
  8184b4:	dec00204 	addi	sp,sp,8
  8184b8:	f800283a 	ret

008184bc <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
  8184bc:	defff304 	addi	sp,sp,-52
  8184c0:	dfc00c15 	stw	ra,48(sp)
  8184c4:	df000b15 	stw	fp,44(sp)
  8184c8:	df000b04 	addi	fp,sp,44
  8184cc:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  8184d0:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
  8184d4:	e0bffe03 	ldbu	r2,-8(fp)
  8184d8:	10800530 	cmpltui	r2,r2,20
  8184dc:	1000031e 	bne	r2,zero,8184ec <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  8184e0:	00800a84 	movi	r2,42
  8184e4:	e0bfff15 	stw	r2,-4(fp)
  8184e8:	00007406 	br	8186bc <OSTaskResume+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8184ec:	0005303a 	rdctl	r2,status
  8184f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8184f4:	e0fffb17 	ldw	r3,-20(fp)
  8184f8:	00bfff84 	movi	r2,-2
  8184fc:	1884703a 	and	r2,r3,r2
  818500:	1001703a 	wrctl	status,r2
  
  return context;
  818504:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  818508:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];
  81850c:	e0bffe03 	ldbu	r2,-8(fp)
  818510:	00c020f4 	movhi	r3,131
  818514:	18e0e704 	addi	r3,r3,-31844
  818518:	1085883a 	add	r2,r2,r2
  81851c:	1085883a 	add	r2,r2,r2
  818520:	10c5883a 	add	r2,r2,r3
  818524:	10800017 	ldw	r2,0(r2)
  818528:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
  81852c:	e0bffd17 	ldw	r2,-12(fp)
  818530:	1004c03a 	cmpne	r2,r2,zero
  818534:	1000071e 	bne	r2,zero,818554 <OSTaskResume+0x98>
  818538:	e0bffc17 	ldw	r2,-16(fp)
  81853c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  818540:	e0bffa17 	ldw	r2,-24(fp)
  818544:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
  818548:	00801184 	movi	r2,70
  81854c:	e0bfff15 	stw	r2,-4(fp)
  818550:	00005a06 	br	8186bc <OSTaskResume+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
  818554:	e0bffd17 	ldw	r2,-12(fp)
  818558:	10800058 	cmpnei	r2,r2,1
  81855c:	1000071e 	bne	r2,zero,81857c <OSTaskResume+0xc0>
  818560:	e0bffc17 	ldw	r2,-16(fp)
  818564:	e0bff915 	stw	r2,-28(fp)
  818568:	e0bff917 	ldw	r2,-28(fp)
  81856c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  818570:	008010c4 	movi	r2,67
  818574:	e0bfff15 	stw	r2,-4(fp)
  818578:	00005006 	br	8186bc <OSTaskResume+0x200>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
  81857c:	e0bffd17 	ldw	r2,-12(fp)
  818580:	10800c03 	ldbu	r2,48(r2)
  818584:	10803fcc 	andi	r2,r2,255
  818588:	1080020c 	andi	r2,r2,8
  81858c:	1005003a 	cmpeq	r2,r2,zero
  818590:	1000441e 	bne	r2,zero,8186a4 <OSTaskResume+0x1e8>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
  818594:	e0bffd17 	ldw	r2,-12(fp)
  818598:	10c00c03 	ldbu	r3,48(r2)
  81859c:	00bffdc4 	movi	r2,-9
  8185a0:	1884703a 	and	r2,r3,r2
  8185a4:	1007883a 	mov	r3,r2
  8185a8:	e0bffd17 	ldw	r2,-12(fp)
  8185ac:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
  8185b0:	e0bffd17 	ldw	r2,-12(fp)
  8185b4:	10800c03 	ldbu	r2,48(r2)
  8185b8:	10803fcc 	andi	r2,r2,255
  8185bc:	1004c03a 	cmpne	r2,r2,zero
  8185c0:	1000321e 	bne	r2,zero,81868c <OSTaskResume+0x1d0>
            if (ptcb->OSTCBDly == 0) {
  8185c4:	e0bffd17 	ldw	r2,-12(fp)
  8185c8:	10800b8b 	ldhu	r2,46(r2)
  8185cc:	10bfffcc 	andi	r2,r2,65535
  8185d0:	1004c03a 	cmpne	r2,r2,zero
  8185d4:	1000281e 	bne	r2,zero,818678 <OSTaskResume+0x1bc>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
  8185d8:	e0bffd17 	ldw	r2,-12(fp)
  8185dc:	10c00d83 	ldbu	r3,54(r2)
  8185e0:	008020b4 	movhi	r2,130
  8185e4:	10828804 	addi	r2,r2,2592
  8185e8:	10800003 	ldbu	r2,0(r2)
  8185ec:	1884b03a 	or	r2,r3,r2
  8185f0:	1007883a 	mov	r3,r2
  8185f4:	008020b4 	movhi	r2,130
  8185f8:	10828804 	addi	r2,r2,2592
  8185fc:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  818600:	e0bffd17 	ldw	r2,-12(fp)
  818604:	10800d03 	ldbu	r2,52(r2)
  818608:	11003fcc 	andi	r4,r2,255
  81860c:	e0bffd17 	ldw	r2,-12(fp)
  818610:	10800d03 	ldbu	r2,52(r2)
  818614:	10c03fcc 	andi	r3,r2,255
  818618:	008020b4 	movhi	r2,130
  81861c:	10828844 	addi	r2,r2,2593
  818620:	10c5883a 	add	r2,r2,r3
  818624:	10c00003 	ldbu	r3,0(r2)
  818628:	e0bffd17 	ldw	r2,-12(fp)
  81862c:	10800d43 	ldbu	r2,53(r2)
  818630:	1884b03a 	or	r2,r3,r2
  818634:	1007883a 	mov	r3,r2
  818638:	008020b4 	movhi	r2,130
  81863c:	10828844 	addi	r2,r2,2593
  818640:	1105883a 	add	r2,r2,r4
  818644:	10c00005 	stb	r3,0(r2)
  818648:	e0bffc17 	ldw	r2,-16(fp)
  81864c:	e0bff815 	stw	r2,-32(fp)
  818650:	e0bff817 	ldw	r2,-32(fp)
  818654:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
  818658:	008020b4 	movhi	r2,130
  81865c:	10827c44 	addi	r2,r2,2545
  818660:	10800003 	ldbu	r2,0(r2)
  818664:	10803fcc 	andi	r2,r2,255
  818668:	10800058 	cmpnei	r2,r2,1
  81866c:	10000b1e 	bne	r2,zero,81869c <OSTaskResume+0x1e0>
                    OS_Sched();                               /* Find new highest priority task        */
  818670:	08129c80 	call	8129c8 <OS_Sched>
  818674:	00000906 	br	81869c <OSTaskResume+0x1e0>
  818678:	e0bffc17 	ldw	r2,-16(fp)
  81867c:	e0bff715 	stw	r2,-36(fp)
  818680:	e0bff717 	ldw	r2,-36(fp)
  818684:	1001703a 	wrctl	status,r2
  818688:	00000406 	br	81869c <OSTaskResume+0x1e0>
  81868c:	e0bffc17 	ldw	r2,-16(fp)
  818690:	e0bff615 	stw	r2,-40(fp)
  818694:	e0bff617 	ldw	r2,-40(fp)
  818698:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
  81869c:	e03fff15 	stw	zero,-4(fp)
  8186a0:	00000606 	br	8186bc <OSTaskResume+0x200>
  8186a4:	e0bffc17 	ldw	r2,-16(fp)
  8186a8:	e0bff515 	stw	r2,-44(fp)
  8186ac:	e0bff517 	ldw	r2,-44(fp)
  8186b0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
  8186b4:	00801104 	movi	r2,68
  8186b8:	e0bfff15 	stw	r2,-4(fp)
  8186bc:	e0bfff17 	ldw	r2,-4(fp)
}
  8186c0:	e037883a 	mov	sp,fp
  8186c4:	dfc00117 	ldw	ra,4(sp)
  8186c8:	df000017 	ldw	fp,0(sp)
  8186cc:	dec00204 	addi	sp,sp,8
  8186d0:	f800283a 	ret

008186d4 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
  8186d4:	defff204 	addi	sp,sp,-56
  8186d8:	df000d15 	stw	fp,52(sp)
  8186dc:	df000d04 	addi	fp,sp,52
  8186e0:	e17ffe15 	stw	r5,-8(fp)
  8186e4:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  8186e8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
  8186ec:	e0bffd03 	ldbu	r2,-12(fp)
  8186f0:	10800570 	cmpltui	r2,r2,21
  8186f4:	1000061e 	bne	r2,zero,818710 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
  8186f8:	e0bffd03 	ldbu	r2,-12(fp)
  8186fc:	10803fe0 	cmpeqi	r2,r2,255
  818700:	1000031e 	bne	r2,zero,818710 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
  818704:	00800a84 	movi	r2,42
  818708:	e0bfff15 	stw	r2,-4(fp)
  81870c:	00006b06 	br	8188bc <OSTaskStkChk+0x1e8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
  818710:	e0bffe17 	ldw	r2,-8(fp)
  818714:	1004c03a 	cmpne	r2,r2,zero
  818718:	1000031e 	bne	r2,zero,818728 <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
  81871c:	00800244 	movi	r2,9
  818720:	e0bfff15 	stw	r2,-4(fp)
  818724:	00006506 	br	8188bc <OSTaskStkChk+0x1e8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
  818728:	e0bffe17 	ldw	r2,-8(fp)
  81872c:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
  818730:	e0bffe17 	ldw	r2,-8(fp)
  818734:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  818738:	0005303a 	rdctl	r2,status
  81873c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818740:	e0fff717 	ldw	r3,-36(fp)
  818744:	00bfff84 	movi	r2,-2
  818748:	1884703a 	and	r2,r3,r2
  81874c:	1001703a 	wrctl	status,r2
  
  return context;
  818750:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  818754:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
  818758:	e0bffd03 	ldbu	r2,-12(fp)
  81875c:	10803fd8 	cmpnei	r2,r2,255
  818760:	1000051e 	bne	r2,zero,818778 <OSTaskStkChk+0xa4>
        prio = OSTCBCur->OSTCBPrio;
  818764:	008020b4 	movhi	r2,130
  818768:	10828b04 	addi	r2,r2,2604
  81876c:	10800017 	ldw	r2,0(r2)
  818770:	10800c83 	ldbu	r2,50(r2)
  818774:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  818778:	e0bffd03 	ldbu	r2,-12(fp)
  81877c:	00c020f4 	movhi	r3,131
  818780:	18e0e704 	addi	r3,r3,-31844
  818784:	1085883a 	add	r2,r2,r2
  818788:	1085883a 	add	r2,r2,r2
  81878c:	10c5883a 	add	r2,r2,r3
  818790:	10800017 	ldw	r2,0(r2)
  818794:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
  818798:	e0bffc17 	ldw	r2,-16(fp)
  81879c:	1004c03a 	cmpne	r2,r2,zero
  8187a0:	1000071e 	bne	r2,zero,8187c0 <OSTaskStkChk+0xec>
  8187a4:	e0bff817 	ldw	r2,-32(fp)
  8187a8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8187ac:	e0bff617 	ldw	r2,-40(fp)
  8187b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  8187b4:	008010c4 	movi	r2,67
  8187b8:	e0bfff15 	stw	r2,-4(fp)
  8187bc:	00003f06 	br	8188bc <OSTaskStkChk+0x1e8>
    }
    if (ptcb == OS_TCB_RESERVED) {
  8187c0:	e0bffc17 	ldw	r2,-16(fp)
  8187c4:	10800058 	cmpnei	r2,r2,1
  8187c8:	1000071e 	bne	r2,zero,8187e8 <OSTaskStkChk+0x114>
  8187cc:	e0bff817 	ldw	r2,-32(fp)
  8187d0:	e0bff515 	stw	r2,-44(fp)
  8187d4:	e0bff517 	ldw	r2,-44(fp)
  8187d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  8187dc:	008010c4 	movi	r2,67
  8187e0:	e0bfff15 	stw	r2,-4(fp)
  8187e4:	00003506 	br	8188bc <OSTaskStkChk+0x1e8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
  8187e8:	e0bffc17 	ldw	r2,-16(fp)
  8187ec:	1080040b 	ldhu	r2,16(r2)
  8187f0:	10bfffcc 	andi	r2,r2,65535
  8187f4:	1080004c 	andi	r2,r2,1
  8187f8:	1004c03a 	cmpne	r2,r2,zero
  8187fc:	1000071e 	bne	r2,zero,81881c <OSTaskStkChk+0x148>
  818800:	e0bff817 	ldw	r2,-32(fp)
  818804:	e0bff415 	stw	r2,-48(fp)
  818808:	e0bff417 	ldw	r2,-48(fp)
  81880c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
  818810:	00801144 	movi	r2,69
  818814:	e0bfff15 	stw	r2,-4(fp)
  818818:	00002806 	br	8188bc <OSTaskStkChk+0x1e8>
    }
    nfree = 0;
  81881c:	e03ffa15 	stw	zero,-24(fp)
    size  = ptcb->OSTCBStkSize;
  818820:	e0bffc17 	ldw	r2,-16(fp)
  818824:	10800317 	ldw	r2,12(r2)
  818828:	e0bff915 	stw	r2,-28(fp)
    pchk  = ptcb->OSTCBStkBottom;
  81882c:	e0bffc17 	ldw	r2,-16(fp)
  818830:	10800217 	ldw	r2,8(r2)
  818834:	e0bffb15 	stw	r2,-20(fp)
  818838:	e0bff817 	ldw	r2,-32(fp)
  81883c:	e0bff315 	stw	r2,-52(fp)
  818840:	e0bff317 	ldw	r2,-52(fp)
  818844:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  818848:	00000306 	br	818858 <OSTaskStkChk+0x184>
        nfree++;
  81884c:	e0bffa17 	ldw	r2,-24(fp)
  818850:	10800044 	addi	r2,r2,1
  818854:	e0bffa15 	stw	r2,-24(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  818858:	e0bffb17 	ldw	r2,-20(fp)
  81885c:	10800017 	ldw	r2,0(r2)
  818860:	1005003a 	cmpeq	r2,r2,zero
  818864:	1007883a 	mov	r3,r2
  818868:	e0bffb17 	ldw	r2,-20(fp)
  81886c:	10800104 	addi	r2,r2,4
  818870:	e0bffb15 	stw	r2,-20(fp)
  818874:	18803fcc 	andi	r2,r3,255
  818878:	1004c03a 	cmpne	r2,r2,zero
  81887c:	103ff31e 	bne	r2,zero,81884c <OSTaskStkChk+0x178>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
  818880:	e0bffa17 	ldw	r2,-24(fp)
  818884:	1085883a 	add	r2,r2,r2
  818888:	1085883a 	add	r2,r2,r2
  81888c:	1007883a 	mov	r3,r2
  818890:	e0bffe17 	ldw	r2,-8(fp)
  818894:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
  818898:	e0fff917 	ldw	r3,-28(fp)
  81889c:	e0bffa17 	ldw	r2,-24(fp)
  8188a0:	1885c83a 	sub	r2,r3,r2
  8188a4:	1085883a 	add	r2,r2,r2
  8188a8:	1085883a 	add	r2,r2,r2
  8188ac:	1007883a 	mov	r3,r2
  8188b0:	e0bffe17 	ldw	r2,-8(fp)
  8188b4:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
  8188b8:	e03fff15 	stw	zero,-4(fp)
  8188bc:	e0bfff17 	ldw	r2,-4(fp)
}
  8188c0:	e037883a 	mov	sp,fp
  8188c4:	df000017 	ldw	fp,0(sp)
  8188c8:	dec00104 	addi	sp,sp,4
  8188cc:	f800283a 	ret

008188d0 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
  8188d0:	defff404 	addi	sp,sp,-48
  8188d4:	dfc00b15 	stw	ra,44(sp)
  8188d8:	df000a15 	stw	fp,40(sp)
  8188dc:	df000a04 	addi	fp,sp,40
  8188e0:	e13ffe05 	stb	r4,-8(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8188e4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
  8188e8:	e0bffe03 	ldbu	r2,-8(fp)
  8188ec:	10800518 	cmpnei	r2,r2,20
  8188f0:	1000031e 	bne	r2,zero,818900 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
  8188f4:	008011c4 	movi	r2,71
  8188f8:	e0bfff15 	stw	r2,-4(fp)
  8188fc:	00007906 	br	818ae4 <OSTaskSuspend+0x214>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  818900:	e0bffe03 	ldbu	r2,-8(fp)
  818904:	10800530 	cmpltui	r2,r2,20
  818908:	1000061e 	bne	r2,zero,818924 <OSTaskSuspend+0x54>
        if (prio != OS_PRIO_SELF) {
  81890c:	e0bffe03 	ldbu	r2,-8(fp)
  818910:	10803fe0 	cmpeqi	r2,r2,255
  818914:	1000031e 	bne	r2,zero,818924 <OSTaskSuspend+0x54>
            return (OS_ERR_PRIO_INVALID);
  818918:	00800a84 	movi	r2,42
  81891c:	e0bfff15 	stw	r2,-4(fp)
  818920:	00007006 	br	818ae4 <OSTaskSuspend+0x214>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  818924:	0005303a 	rdctl	r2,status
  818928:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81892c:	e0fff917 	ldw	r3,-28(fp)
  818930:	00bfff84 	movi	r2,-2
  818934:	1884703a 	and	r2,r3,r2
  818938:	1001703a 	wrctl	status,r2
  
  return context;
  81893c:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
  818940:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
  818944:	e0bffe03 	ldbu	r2,-8(fp)
  818948:	10803fd8 	cmpnei	r2,r2,255
  81894c:	1000081e 	bne	r2,zero,818970 <OSTaskSuspend+0xa0>
        prio = OSTCBCur->OSTCBPrio;
  818950:	008020b4 	movhi	r2,130
  818954:	10828b04 	addi	r2,r2,2604
  818958:	10800017 	ldw	r2,0(r2)
  81895c:	10800c83 	ldbu	r2,50(r2)
  818960:	e0bffe05 	stb	r2,-8(fp)
        self = OS_TRUE;
  818964:	00800044 	movi	r2,1
  818968:	e0bffd05 	stb	r2,-12(fp)
  81896c:	00000b06 	br	81899c <OSTaskSuspend+0xcc>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
  818970:	008020b4 	movhi	r2,130
  818974:	10828b04 	addi	r2,r2,2604
  818978:	10800017 	ldw	r2,0(r2)
  81897c:	10800c83 	ldbu	r2,50(r2)
  818980:	10c03fcc 	andi	r3,r2,255
  818984:	e0bffe03 	ldbu	r2,-8(fp)
  818988:	1880031e 	bne	r3,r2,818998 <OSTaskSuspend+0xc8>
        self = OS_TRUE;
  81898c:	00800044 	movi	r2,1
  818990:	e0bffd05 	stb	r2,-12(fp)
  818994:	00000106 	br	81899c <OSTaskSuspend+0xcc>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
  818998:	e03ffd05 	stb	zero,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  81899c:	e0bffe03 	ldbu	r2,-8(fp)
  8189a0:	00c020f4 	movhi	r3,131
  8189a4:	18e0e704 	addi	r3,r3,-31844
  8189a8:	1085883a 	add	r2,r2,r2
  8189ac:	1085883a 	add	r2,r2,r2
  8189b0:	10c5883a 	add	r2,r2,r3
  8189b4:	10800017 	ldw	r2,0(r2)
  8189b8:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
  8189bc:	e0bffc17 	ldw	r2,-16(fp)
  8189c0:	1004c03a 	cmpne	r2,r2,zero
  8189c4:	1000071e 	bne	r2,zero,8189e4 <OSTaskSuspend+0x114>
  8189c8:	e0bffa17 	ldw	r2,-24(fp)
  8189cc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8189d0:	e0bff817 	ldw	r2,-32(fp)
  8189d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
  8189d8:	00801204 	movi	r2,72
  8189dc:	e0bfff15 	stw	r2,-4(fp)
  8189e0:	00004006 	br	818ae4 <OSTaskSuspend+0x214>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
  8189e4:	e0bffc17 	ldw	r2,-16(fp)
  8189e8:	10800058 	cmpnei	r2,r2,1
  8189ec:	1000071e 	bne	r2,zero,818a0c <OSTaskSuspend+0x13c>
  8189f0:	e0bffa17 	ldw	r2,-24(fp)
  8189f4:	e0bff715 	stw	r2,-36(fp)
  8189f8:	e0bff717 	ldw	r2,-36(fp)
  8189fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  818a00:	008010c4 	movi	r2,67
  818a04:	e0bfff15 	stw	r2,-4(fp)
  818a08:	00003606 	br	818ae4 <OSTaskSuspend+0x214>
    }
    y            = ptcb->OSTCBY;
  818a0c:	e0bffc17 	ldw	r2,-16(fp)
  818a10:	10800d03 	ldbu	r2,52(r2)
  818a14:	e0bffb05 	stb	r2,-20(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
  818a18:	e13ffb03 	ldbu	r4,-20(fp)
  818a1c:	e0fffb03 	ldbu	r3,-20(fp)
  818a20:	008020b4 	movhi	r2,130
  818a24:	10828844 	addi	r2,r2,2593
  818a28:	10c5883a 	add	r2,r2,r3
  818a2c:	10800003 	ldbu	r2,0(r2)
  818a30:	1007883a 	mov	r3,r2
  818a34:	e0bffc17 	ldw	r2,-16(fp)
  818a38:	10800d43 	ldbu	r2,53(r2)
  818a3c:	0084303a 	nor	r2,zero,r2
  818a40:	1884703a 	and	r2,r3,r2
  818a44:	1007883a 	mov	r3,r2
  818a48:	008020b4 	movhi	r2,130
  818a4c:	10828844 	addi	r2,r2,2593
  818a50:	1105883a 	add	r2,r2,r4
  818a54:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  818a58:	e0fffb03 	ldbu	r3,-20(fp)
  818a5c:	008020b4 	movhi	r2,130
  818a60:	10828844 	addi	r2,r2,2593
  818a64:	10c5883a 	add	r2,r2,r3
  818a68:	10800003 	ldbu	r2,0(r2)
  818a6c:	10803fcc 	andi	r2,r2,255
  818a70:	1004c03a 	cmpne	r2,r2,zero
  818a74:	10000c1e 	bne	r2,zero,818aa8 <OSTaskSuspend+0x1d8>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
  818a78:	e0bffc17 	ldw	r2,-16(fp)
  818a7c:	10800d83 	ldbu	r2,54(r2)
  818a80:	0084303a 	nor	r2,zero,r2
  818a84:	1007883a 	mov	r3,r2
  818a88:	008020b4 	movhi	r2,130
  818a8c:	10828804 	addi	r2,r2,2592
  818a90:	10800003 	ldbu	r2,0(r2)
  818a94:	1884703a 	and	r2,r3,r2
  818a98:	1007883a 	mov	r3,r2
  818a9c:	008020b4 	movhi	r2,130
  818aa0:	10828804 	addi	r2,r2,2592
  818aa4:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
  818aa8:	e0bffc17 	ldw	r2,-16(fp)
  818aac:	10800c03 	ldbu	r2,48(r2)
  818ab0:	10800214 	ori	r2,r2,8
  818ab4:	1007883a 	mov	r3,r2
  818ab8:	e0bffc17 	ldw	r2,-16(fp)
  818abc:	10c00c05 	stb	r3,48(r2)
  818ac0:	e0bffa17 	ldw	r2,-24(fp)
  818ac4:	e0bff615 	stw	r2,-40(fp)
  818ac8:	e0bff617 	ldw	r2,-40(fp)
  818acc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
  818ad0:	e0bffd03 	ldbu	r2,-12(fp)
  818ad4:	10800058 	cmpnei	r2,r2,1
  818ad8:	1000011e 	bne	r2,zero,818ae0 <OSTaskSuspend+0x210>
        OS_Sched();                                             /* Find new highest priority task      */
  818adc:	08129c80 	call	8129c8 <OS_Sched>
    }
    return (OS_ERR_NONE);
  818ae0:	e03fff15 	stw	zero,-4(fp)
  818ae4:	e0bfff17 	ldw	r2,-4(fp)
}
  818ae8:	e037883a 	mov	sp,fp
  818aec:	dfc00117 	ldw	ra,4(sp)
  818af0:	df000017 	ldw	fp,0(sp)
  818af4:	dec00204 	addi	sp,sp,8
  818af8:	f800283a 	ret

00818afc <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
  818afc:	defff504 	addi	sp,sp,-44
  818b00:	dfc00a15 	stw	ra,40(sp)
  818b04:	df000915 	stw	fp,36(sp)
  818b08:	df000904 	addi	fp,sp,36
  818b0c:	e17ffe15 	stw	r5,-8(fp)
  818b10:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  818b14:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
  818b18:	e0bffd03 	ldbu	r2,-12(fp)
  818b1c:	10800570 	cmpltui	r2,r2,21
  818b20:	1000061e 	bne	r2,zero,818b3c <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
  818b24:	e0bffd03 	ldbu	r2,-12(fp)
  818b28:	10803fe0 	cmpeqi	r2,r2,255
  818b2c:	1000031e 	bne	r2,zero,818b3c <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
  818b30:	00800a84 	movi	r2,42
  818b34:	e0bfff15 	stw	r2,-4(fp)
  818b38:	00003b06 	br	818c28 <OSTaskQuery+0x12c>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
  818b3c:	e0bffe17 	ldw	r2,-8(fp)
  818b40:	1004c03a 	cmpne	r2,r2,zero
  818b44:	1000031e 	bne	r2,zero,818b54 <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
  818b48:	00800244 	movi	r2,9
  818b4c:	e0bfff15 	stw	r2,-4(fp)
  818b50:	00003506 	br	818c28 <OSTaskQuery+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  818b54:	0005303a 	rdctl	r2,status
  818b58:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818b5c:	e0fffa17 	ldw	r3,-24(fp)
  818b60:	00bfff84 	movi	r2,-2
  818b64:	1884703a 	and	r2,r3,r2
  818b68:	1001703a 	wrctl	status,r2
  
  return context;
  818b6c:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  818b70:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
  818b74:	e0bffd03 	ldbu	r2,-12(fp)
  818b78:	10803fd8 	cmpnei	r2,r2,255
  818b7c:	1000051e 	bne	r2,zero,818b94 <OSTaskQuery+0x98>
        prio = OSTCBCur->OSTCBPrio;
  818b80:	008020b4 	movhi	r2,130
  818b84:	10828b04 	addi	r2,r2,2604
  818b88:	10800017 	ldw	r2,0(r2)
  818b8c:	10800c83 	ldbu	r2,50(r2)
  818b90:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  818b94:	e0bffd03 	ldbu	r2,-12(fp)
  818b98:	00c020f4 	movhi	r3,131
  818b9c:	18e0e704 	addi	r3,r3,-31844
  818ba0:	1085883a 	add	r2,r2,r2
  818ba4:	1085883a 	add	r2,r2,r2
  818ba8:	10c5883a 	add	r2,r2,r3
  818bac:	10800017 	ldw	r2,0(r2)
  818bb0:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
  818bb4:	e0bffc17 	ldw	r2,-16(fp)
  818bb8:	1004c03a 	cmpne	r2,r2,zero
  818bbc:	1000071e 	bne	r2,zero,818bdc <OSTaskQuery+0xe0>
  818bc0:	e0bffb17 	ldw	r2,-20(fp)
  818bc4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  818bc8:	e0bff917 	ldw	r2,-28(fp)
  818bcc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
  818bd0:	00800a44 	movi	r2,41
  818bd4:	e0bfff15 	stw	r2,-4(fp)
  818bd8:	00001306 	br	818c28 <OSTaskQuery+0x12c>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
  818bdc:	e0bffc17 	ldw	r2,-16(fp)
  818be0:	10800058 	cmpnei	r2,r2,1
  818be4:	1000071e 	bne	r2,zero,818c04 <OSTaskQuery+0x108>
  818be8:	e0bffb17 	ldw	r2,-20(fp)
  818bec:	e0bff815 	stw	r2,-32(fp)
  818bf0:	e0bff817 	ldw	r2,-32(fp)
  818bf4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  818bf8:	008010c4 	movi	r2,67
  818bfc:	e0bfff15 	stw	r2,-4(fp)
  818c00:	00000906 	br	818c28 <OSTaskQuery+0x12c>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
  818c04:	e13ffe17 	ldw	r4,-8(fp)
  818c08:	e17ffc17 	ldw	r5,-16(fp)
  818c0c:	01801b04 	movi	r6,108
  818c10:	081295c0 	call	81295c <OS_MemCopy>
  818c14:	e0bffb17 	ldw	r2,-20(fp)
  818c18:	e0bff715 	stw	r2,-36(fp)
  818c1c:	e0bff717 	ldw	r2,-36(fp)
  818c20:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  818c24:	e03fff15 	stw	zero,-4(fp)
  818c28:	e0bfff17 	ldw	r2,-4(fp)
}
  818c2c:	e037883a 	mov	sp,fp
  818c30:	dfc00117 	ldw	ra,4(sp)
  818c34:	df000017 	ldw	fp,0(sp)
  818c38:	dec00204 	addi	sp,sp,8
  818c3c:	f800283a 	ret

00818c40 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
  818c40:	defffc04 	addi	sp,sp,-16
  818c44:	df000315 	stw	fp,12(sp)
  818c48:	df000304 	addi	fp,sp,12
  818c4c:	e13ffd15 	stw	r4,-12(fp)
  818c50:	e17ffe15 	stw	r5,-8(fp)
  818c54:	e1bfff0d 	sth	r6,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
  818c58:	e0bfff0b 	ldhu	r2,-4(fp)
  818c5c:	1080004c 	andi	r2,r2,1
  818c60:	10803fcc 	andi	r2,r2,255
  818c64:	1005003a 	cmpeq	r2,r2,zero
  818c68:	1000101e 	bne	r2,zero,818cac <OS_TaskStkClr+0x6c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
  818c6c:	e0bfff0b 	ldhu	r2,-4(fp)
  818c70:	1080008c 	andi	r2,r2,2
  818c74:	1005003a 	cmpeq	r2,r2,zero
  818c78:	10000c1e 	bne	r2,zero,818cac <OS_TaskStkClr+0x6c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  818c7c:	00000806 	br	818ca0 <OS_TaskStkClr+0x60>
                size--;
  818c80:	e0bffe17 	ldw	r2,-8(fp)
  818c84:	10bfffc4 	addi	r2,r2,-1
  818c88:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
  818c8c:	e0bffd17 	ldw	r2,-12(fp)
  818c90:	10000015 	stw	zero,0(r2)
  818c94:	e0bffd17 	ldw	r2,-12(fp)
  818c98:	10800104 	addi	r2,r2,4
  818c9c:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  818ca0:	e0bffe17 	ldw	r2,-8(fp)
  818ca4:	1004c03a 	cmpne	r2,r2,zero
  818ca8:	103ff51e 	bne	r2,zero,818c80 <OS_TaskStkClr+0x40>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
  818cac:	e037883a 	mov	sp,fp
  818cb0:	df000017 	ldw	fp,0(sp)
  818cb4:	dec00104 	addi	sp,sp,4
  818cb8:	f800283a 	ret

00818cbc <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
  818cbc:	defff904 	addi	sp,sp,-28
  818cc0:	dfc00615 	stw	ra,24(sp)
  818cc4:	df000515 	stw	fp,20(sp)
  818cc8:	df000504 	addi	fp,sp,20
  818ccc:	e13fff0d 	sth	r4,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  818cd0:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  818cd4:	008020b4 	movhi	r2,130
  818cd8:	10828a04 	addi	r2,r2,2600
  818cdc:	10800003 	ldbu	r2,0(r2)
  818ce0:	10803fcc 	andi	r2,r2,255
  818ce4:	1004c03a 	cmpne	r2,r2,zero
  818ce8:	1000421e 	bne	r2,zero,818df4 <OSTimeDly+0x138>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
  818cec:	e0bfff0b 	ldhu	r2,-4(fp)
  818cf0:	1005003a 	cmpeq	r2,r2,zero
  818cf4:	10003f1e 	bne	r2,zero,818df4 <OSTimeDly+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  818cf8:	0005303a 	rdctl	r2,status
  818cfc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818d00:	e0fffc17 	ldw	r3,-16(fp)
  818d04:	00bfff84 	movi	r2,-2
  818d08:	1884703a 	and	r2,r3,r2
  818d0c:	1001703a 	wrctl	status,r2
  
  return context;
  818d10:	e0bffc17 	ldw	r2,-16(fp)
        OS_ENTER_CRITICAL();
  818d14:	e0bffd15 	stw	r2,-12(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
  818d18:	008020b4 	movhi	r2,130
  818d1c:	10828b04 	addi	r2,r2,2604
  818d20:	10800017 	ldw	r2,0(r2)
  818d24:	10800d03 	ldbu	r2,52(r2)
  818d28:	e0bffe05 	stb	r2,-8(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  818d2c:	e13ffe03 	ldbu	r4,-8(fp)
  818d30:	e0fffe03 	ldbu	r3,-8(fp)
  818d34:	008020b4 	movhi	r2,130
  818d38:	10828844 	addi	r2,r2,2593
  818d3c:	10c5883a 	add	r2,r2,r3
  818d40:	10800003 	ldbu	r2,0(r2)
  818d44:	1007883a 	mov	r3,r2
  818d48:	008020b4 	movhi	r2,130
  818d4c:	10828b04 	addi	r2,r2,2604
  818d50:	10800017 	ldw	r2,0(r2)
  818d54:	10800d43 	ldbu	r2,53(r2)
  818d58:	0084303a 	nor	r2,zero,r2
  818d5c:	1884703a 	and	r2,r3,r2
  818d60:	1007883a 	mov	r3,r2
  818d64:	008020b4 	movhi	r2,130
  818d68:	10828844 	addi	r2,r2,2593
  818d6c:	1105883a 	add	r2,r2,r4
  818d70:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
  818d74:	e0fffe03 	ldbu	r3,-8(fp)
  818d78:	008020b4 	movhi	r2,130
  818d7c:	10828844 	addi	r2,r2,2593
  818d80:	10c5883a 	add	r2,r2,r3
  818d84:	10800003 	ldbu	r2,0(r2)
  818d88:	10803fcc 	andi	r2,r2,255
  818d8c:	1004c03a 	cmpne	r2,r2,zero
  818d90:	10000e1e 	bne	r2,zero,818dcc <OSTimeDly+0x110>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  818d94:	008020b4 	movhi	r2,130
  818d98:	10828b04 	addi	r2,r2,2604
  818d9c:	10800017 	ldw	r2,0(r2)
  818da0:	10800d83 	ldbu	r2,54(r2)
  818da4:	0084303a 	nor	r2,zero,r2
  818da8:	1007883a 	mov	r3,r2
  818dac:	008020b4 	movhi	r2,130
  818db0:	10828804 	addi	r2,r2,2592
  818db4:	10800003 	ldbu	r2,0(r2)
  818db8:	1884703a 	and	r2,r3,r2
  818dbc:	1007883a 	mov	r3,r2
  818dc0:	008020b4 	movhi	r2,130
  818dc4:	10828804 	addi	r2,r2,2592
  818dc8:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
  818dcc:	008020b4 	movhi	r2,130
  818dd0:	10828b04 	addi	r2,r2,2604
  818dd4:	10c00017 	ldw	r3,0(r2)
  818dd8:	e0bfff0b 	ldhu	r2,-4(fp)
  818ddc:	18800b8d 	sth	r2,46(r3)
  818de0:	e0bffd17 	ldw	r2,-12(fp)
  818de4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  818de8:	e0bffb17 	ldw	r2,-20(fp)
  818dec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
  818df0:	08129c80 	call	8129c8 <OS_Sched>
    }
}
  818df4:	e037883a 	mov	sp,fp
  818df8:	dfc00117 	ldw	ra,4(sp)
  818dfc:	df000017 	ldw	fp,0(sp)
  818e00:	dec00204 	addi	sp,sp,8
  818e04:	f800283a 	ret

00818e08 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
  818e08:	defff504 	addi	sp,sp,-44
  818e0c:	dfc00a15 	stw	ra,40(sp)
  818e10:	df000915 	stw	fp,36(sp)
  818e14:	dc400815 	stw	r17,32(sp)
  818e18:	dc000715 	stw	r16,28(sp)
  818e1c:	df000704 	addi	fp,sp,28
  818e20:	e13ffb05 	stb	r4,-20(fp)
  818e24:	e17ffc05 	stb	r5,-16(fp)
  818e28:	e1bffd05 	stb	r6,-12(fp)
  818e2c:	e1fffe0d 	sth	r7,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  818e30:	008020b4 	movhi	r2,130
  818e34:	10828a04 	addi	r2,r2,2600
  818e38:	10800003 	ldbu	r2,0(r2)
  818e3c:	10803fcc 	andi	r2,r2,255
  818e40:	1005003a 	cmpeq	r2,r2,zero
  818e44:	1000031e 	bne	r2,zero,818e54 <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
  818e48:	00801544 	movi	r2,85
  818e4c:	e0bfff15 	stw	r2,-4(fp)
  818e50:	00007a06 	br	81903c <OSTimeDlyHMSM+0x234>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
  818e54:	e0bffb03 	ldbu	r2,-20(fp)
  818e58:	1004c03a 	cmpne	r2,r2,zero
  818e5c:	10000c1e 	bne	r2,zero,818e90 <OSTimeDlyHMSM+0x88>
        if (minutes == 0) {
  818e60:	e0bffc03 	ldbu	r2,-16(fp)
  818e64:	1004c03a 	cmpne	r2,r2,zero
  818e68:	1000091e 	bne	r2,zero,818e90 <OSTimeDlyHMSM+0x88>
            if (seconds == 0) {
  818e6c:	e0bffd03 	ldbu	r2,-12(fp)
  818e70:	1004c03a 	cmpne	r2,r2,zero
  818e74:	1000061e 	bne	r2,zero,818e90 <OSTimeDlyHMSM+0x88>
                if (ms == 0) {
  818e78:	e0bffe0b 	ldhu	r2,-8(fp)
  818e7c:	1004c03a 	cmpne	r2,r2,zero
  818e80:	1000031e 	bne	r2,zero,818e90 <OSTimeDlyHMSM+0x88>
                    return (OS_ERR_TIME_ZERO_DLY);
  818e84:	00801504 	movi	r2,84
  818e88:	e0bfff15 	stw	r2,-4(fp)
  818e8c:	00006b06 	br	81903c <OSTimeDlyHMSM+0x234>
                }
            }
        }
    }
    if (minutes > 59) {
  818e90:	e0bffc03 	ldbu	r2,-16(fp)
  818e94:	10800f30 	cmpltui	r2,r2,60
  818e98:	1000031e 	bne	r2,zero,818ea8 <OSTimeDlyHMSM+0xa0>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
  818e9c:	00801444 	movi	r2,81
  818ea0:	e0bfff15 	stw	r2,-4(fp)
  818ea4:	00006506 	br	81903c <OSTimeDlyHMSM+0x234>
    }
    if (seconds > 59) {
  818ea8:	e0bffd03 	ldbu	r2,-12(fp)
  818eac:	10800f30 	cmpltui	r2,r2,60
  818eb0:	1000031e 	bne	r2,zero,818ec0 <OSTimeDlyHMSM+0xb8>
        return (OS_ERR_TIME_INVALID_SECONDS);
  818eb4:	00801484 	movi	r2,82
  818eb8:	e0bfff15 	stw	r2,-4(fp)
  818ebc:	00005f06 	br	81903c <OSTimeDlyHMSM+0x234>
    }
    if (ms > 999) {
  818ec0:	e0bffe0b 	ldhu	r2,-8(fp)
  818ec4:	1080fa30 	cmpltui	r2,r2,1000
  818ec8:	1000031e 	bne	r2,zero,818ed8 <OSTimeDlyHMSM+0xd0>
        return (OS_ERR_TIME_INVALID_MS);
  818ecc:	008014c4 	movi	r2,83
  818ed0:	e0bfff15 	stw	r2,-4(fp)
  818ed4:	00005906 	br	81903c <OSTimeDlyHMSM+0x234>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
  818ed8:	e0bffb03 	ldbu	r2,-20(fp)
  818edc:	10c38424 	muli	r3,r2,3600
  818ee0:	e0bffc03 	ldbu	r2,-16(fp)
  818ee4:	10800f24 	muli	r2,r2,60
  818ee8:	1887883a 	add	r3,r3,r2
  818eec:	e0bffd03 	ldbu	r2,-12(fp)
  818ef0:	1889883a 	add	r4,r3,r2
  818ef4:	08071880 	call	807188 <__floatunsidf>
  818ef8:	100b883a 	mov	r5,r2
  818efc:	180d883a 	mov	r6,r3
  818f00:	2809883a 	mov	r4,r5
  818f04:	300b883a 	mov	r5,r6
  818f08:	000d883a 	mov	r6,zero
  818f0c:	01d03134 	movhi	r7,16580
  818f10:	39e20004 	addi	r7,r7,-30720
  818f14:	08065c00 	call	8065c0 <__muldf3>
  818f18:	1009883a 	mov	r4,r2
  818f1c:	180b883a 	mov	r5,r3
  818f20:	2021883a 	mov	r16,r4
  818f24:	2823883a 	mov	r17,r5
  818f28:	e13ffe0b 	ldhu	r4,-8(fp)
  818f2c:	08071880 	call	807188 <__floatunsidf>
  818f30:	100b883a 	mov	r5,r2
  818f34:	180d883a 	mov	r6,r3
  818f38:	2809883a 	mov	r4,r5
  818f3c:	300b883a 	mov	r5,r6
  818f40:	01a666b4 	movhi	r6,39322
  818f44:	31a66684 	addi	r6,r6,-26214
  818f48:	01cfeab4 	movhi	r7,16298
  818f4c:	39e66644 	addi	r7,r7,-26215
  818f50:	080654c0 	call	80654c <__adddf3>
  818f54:	1009883a 	mov	r4,r2
  818f58:	180b883a 	mov	r5,r3
  818f5c:	2005883a 	mov	r2,r4
  818f60:	2807883a 	mov	r3,r5
  818f64:	1009883a 	mov	r4,r2
  818f68:	180b883a 	mov	r5,r3
  818f6c:	000d883a 	mov	r6,zero
  818f70:	01d03134 	movhi	r7,16580
  818f74:	39e20004 	addi	r7,r7,-30720
  818f78:	08065c00 	call	8065c0 <__muldf3>
  818f7c:	1009883a 	mov	r4,r2
  818f80:	180b883a 	mov	r5,r3
  818f84:	2005883a 	mov	r2,r4
  818f88:	2807883a 	mov	r3,r5
  818f8c:	1009883a 	mov	r4,r2
  818f90:	180b883a 	mov	r5,r3
  818f94:	000d883a 	mov	r6,zero
  818f98:	01d023f4 	movhi	r7,16527
  818f9c:	39d00004 	addi	r7,r7,16384
  818fa0:	08069840 	call	806984 <__divdf3>
  818fa4:	1009883a 	mov	r4,r2
  818fa8:	180b883a 	mov	r5,r3
  818fac:	2005883a 	mov	r2,r4
  818fb0:	2807883a 	mov	r3,r5
  818fb4:	8009883a 	mov	r4,r16
  818fb8:	880b883a 	mov	r5,r17
  818fbc:	100d883a 	mov	r6,r2
  818fc0:	180f883a 	mov	r7,r3
  818fc4:	080654c0 	call	80654c <__adddf3>
  818fc8:	1009883a 	mov	r4,r2
  818fcc:	180b883a 	mov	r5,r3
  818fd0:	2005883a 	mov	r2,r4
  818fd4:	2807883a 	mov	r3,r5
  818fd8:	1009883a 	mov	r4,r2
  818fdc:	180b883a 	mov	r5,r3
  818fe0:	08057700 	call	805770 <__fixunsdfsi>
  818fe4:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
  818fe8:	e0bffa17 	ldw	r2,-24(fp)
  818fec:	1004d43a 	srli	r2,r2,16
  818ff0:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
  818ff4:	e0bffa17 	ldw	r2,-24(fp)
  818ff8:	10bfffcc 	andi	r2,r2,65535
  818ffc:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
  819000:	e0bffa17 	ldw	r2,-24(fp)
  819004:	113fffcc 	andi	r4,r2,65535
  819008:	0818cbc0 	call	818cbc <OSTimeDly>
    while (loops > 0) {
  81900c:	00000706 	br	81902c <OSTimeDlyHMSM+0x224>
        OSTimeDly((INT16U)32768u);
  819010:	01200014 	movui	r4,32768
  819014:	0818cbc0 	call	818cbc <OSTimeDly>
        OSTimeDly((INT16U)32768u);
  819018:	01200014 	movui	r4,32768
  81901c:	0818cbc0 	call	818cbc <OSTimeDly>
        loops--;
  819020:	e0bff90b 	ldhu	r2,-28(fp)
  819024:	10bfffc4 	addi	r2,r2,-1
  819028:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
  81902c:	e0bff90b 	ldhu	r2,-28(fp)
  819030:	1004c03a 	cmpne	r2,r2,zero
  819034:	103ff61e 	bne	r2,zero,819010 <OSTimeDlyHMSM+0x208>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
  819038:	e03fff15 	stw	zero,-4(fp)
  81903c:	e0bfff17 	ldw	r2,-4(fp)
}
  819040:	e037883a 	mov	sp,fp
  819044:	dfc00317 	ldw	ra,12(sp)
  819048:	df000217 	ldw	fp,8(sp)
  81904c:	dc400117 	ldw	r17,4(sp)
  819050:	dc000017 	ldw	r16,0(sp)
  819054:	dec00404 	addi	sp,sp,16
  819058:	f800283a 	ret

0081905c <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
  81905c:	defff404 	addi	sp,sp,-48
  819060:	dfc00b15 	stw	ra,44(sp)
  819064:	df000a15 	stw	fp,40(sp)
  819068:	df000a04 	addi	fp,sp,40
  81906c:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  819070:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
  819074:	e0bffe03 	ldbu	r2,-8(fp)
  819078:	10800530 	cmpltui	r2,r2,20
  81907c:	1000031e 	bne	r2,zero,81908c <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  819080:	00800a84 	movi	r2,42
  819084:	e0bfff15 	stw	r2,-4(fp)
  819088:	00007206 	br	819254 <OSTimeDlyResume+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81908c:	0005303a 	rdctl	r2,status
  819090:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  819094:	e0fffb17 	ldw	r3,-20(fp)
  819098:	00bfff84 	movi	r2,-2
  81909c:	1884703a 	and	r2,r3,r2
  8190a0:	1001703a 	wrctl	status,r2
  
  return context;
  8190a4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  8190a8:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
  8190ac:	e0bffe03 	ldbu	r2,-8(fp)
  8190b0:	00c020f4 	movhi	r3,131
  8190b4:	18e0e704 	addi	r3,r3,-31844
  8190b8:	1085883a 	add	r2,r2,r2
  8190bc:	1085883a 	add	r2,r2,r2
  8190c0:	10c5883a 	add	r2,r2,r3
  8190c4:	10800017 	ldw	r2,0(r2)
  8190c8:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {
  8190cc:	e0bffd17 	ldw	r2,-12(fp)
  8190d0:	1004c03a 	cmpne	r2,r2,zero
  8190d4:	1000071e 	bne	r2,zero,8190f4 <OSTimeDlyResume+0x98>
  8190d8:	e0bffc17 	ldw	r2,-16(fp)
  8190dc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8190e0:	e0bffa17 	ldw	r2,-24(fp)
  8190e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  8190e8:	008010c4 	movi	r2,67
  8190ec:	e0bfff15 	stw	r2,-4(fp)
  8190f0:	00005806 	br	819254 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb == OS_TCB_RESERVED) {
  8190f4:	e0bffd17 	ldw	r2,-12(fp)
  8190f8:	10800058 	cmpnei	r2,r2,1
  8190fc:	1000071e 	bne	r2,zero,81911c <OSTimeDlyResume+0xc0>
  819100:	e0bffc17 	ldw	r2,-16(fp)
  819104:	e0bff915 	stw	r2,-28(fp)
  819108:	e0bff917 	ldw	r2,-28(fp)
  81910c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  819110:	008010c4 	movi	r2,67
  819114:	e0bfff15 	stw	r2,-4(fp)
  819118:	00004e06 	br	819254 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
  81911c:	e0bffd17 	ldw	r2,-12(fp)
  819120:	10800b8b 	ldhu	r2,46(r2)
  819124:	10bfffcc 	andi	r2,r2,65535
  819128:	1004c03a 	cmpne	r2,r2,zero
  81912c:	1000071e 	bne	r2,zero,81914c <OSTimeDlyResume+0xf0>
  819130:	e0bffc17 	ldw	r2,-16(fp)
  819134:	e0bff815 	stw	r2,-32(fp)
  819138:	e0bff817 	ldw	r2,-32(fp)
  81913c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
  819140:	00801404 	movi	r2,80
  819144:	e0bfff15 	stw	r2,-4(fp)
  819148:	00004206 	br	819254 <OSTimeDlyResume+0x1f8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
  81914c:	e0bffd17 	ldw	r2,-12(fp)
  819150:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  819154:	e0bffd17 	ldw	r2,-12(fp)
  819158:	10800c03 	ldbu	r2,48(r2)
  81915c:	10803fcc 	andi	r2,r2,255
  819160:	10800dcc 	andi	r2,r2,55
  819164:	1005003a 	cmpeq	r2,r2,zero
  819168:	10000b1e 	bne	r2,zero,819198 <OSTimeDlyResume+0x13c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
  81916c:	e0bffd17 	ldw	r2,-12(fp)
  819170:	10c00c03 	ldbu	r3,48(r2)
  819174:	00bff204 	movi	r2,-56
  819178:	1884703a 	and	r2,r3,r2
  81917c:	1007883a 	mov	r3,r2
  819180:	e0bffd17 	ldw	r2,-12(fp)
  819184:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
  819188:	e0fffd17 	ldw	r3,-12(fp)
  81918c:	00800044 	movi	r2,1
  819190:	18800c45 	stb	r2,49(r3)
  819194:	00000206 	br	8191a0 <OSTimeDlyResume+0x144>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
  819198:	e0bffd17 	ldw	r2,-12(fp)
  81919c:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
  8191a0:	e0bffd17 	ldw	r2,-12(fp)
  8191a4:	10800c03 	ldbu	r2,48(r2)
  8191a8:	10803fcc 	andi	r2,r2,255
  8191ac:	1080020c 	andi	r2,r2,8
  8191b0:	1004c03a 	cmpne	r2,r2,zero
  8191b4:	1000221e 	bne	r2,zero,819240 <OSTimeDlyResume+0x1e4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
  8191b8:	e0bffd17 	ldw	r2,-12(fp)
  8191bc:	10c00d83 	ldbu	r3,54(r2)
  8191c0:	008020b4 	movhi	r2,130
  8191c4:	10828804 	addi	r2,r2,2592
  8191c8:	10800003 	ldbu	r2,0(r2)
  8191cc:	1884b03a 	or	r2,r3,r2
  8191d0:	1007883a 	mov	r3,r2
  8191d4:	008020b4 	movhi	r2,130
  8191d8:	10828804 	addi	r2,r2,2592
  8191dc:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  8191e0:	e0bffd17 	ldw	r2,-12(fp)
  8191e4:	10800d03 	ldbu	r2,52(r2)
  8191e8:	11003fcc 	andi	r4,r2,255
  8191ec:	e0bffd17 	ldw	r2,-12(fp)
  8191f0:	10800d03 	ldbu	r2,52(r2)
  8191f4:	10c03fcc 	andi	r3,r2,255
  8191f8:	008020b4 	movhi	r2,130
  8191fc:	10828844 	addi	r2,r2,2593
  819200:	10c5883a 	add	r2,r2,r3
  819204:	10c00003 	ldbu	r3,0(r2)
  819208:	e0bffd17 	ldw	r2,-12(fp)
  81920c:	10800d43 	ldbu	r2,53(r2)
  819210:	1884b03a 	or	r2,r3,r2
  819214:	1007883a 	mov	r3,r2
  819218:	008020b4 	movhi	r2,130
  81921c:	10828844 	addi	r2,r2,2593
  819220:	1105883a 	add	r2,r2,r4
  819224:	10c00005 	stb	r3,0(r2)
  819228:	e0bffc17 	ldw	r2,-16(fp)
  81922c:	e0bff715 	stw	r2,-36(fp)
  819230:	e0bff717 	ldw	r2,-36(fp)
  819234:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
  819238:	08129c80 	call	8129c8 <OS_Sched>
  81923c:	00000406 	br	819250 <OSTimeDlyResume+0x1f4>
  819240:	e0bffc17 	ldw	r2,-16(fp)
  819244:	e0bff615 	stw	r2,-40(fp)
  819248:	e0bff617 	ldw	r2,-40(fp)
  81924c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
  819250:	e03fff15 	stw	zero,-4(fp)
  819254:	e0bfff17 	ldw	r2,-4(fp)
}
  819258:	e037883a 	mov	sp,fp
  81925c:	dfc00117 	ldw	ra,4(sp)
  819260:	df000017 	ldw	fp,0(sp)
  819264:	dec00204 	addi	sp,sp,8
  819268:	f800283a 	ret

0081926c <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
  81926c:	defffb04 	addi	sp,sp,-20
  819270:	df000415 	stw	fp,16(sp)
  819274:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  819278:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81927c:	0005303a 	rdctl	r2,status
  819280:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  819284:	e0fffd17 	ldw	r3,-12(fp)
  819288:	00bfff84 	movi	r2,-2
  81928c:	1884703a 	and	r2,r3,r2
  819290:	1001703a 	wrctl	status,r2
  
  return context;
  819294:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  819298:	e0bffe15 	stw	r2,-8(fp)
    ticks = OSTime;
  81929c:	008020b4 	movhi	r2,130
  8192a0:	10828c04 	addi	r2,r2,2608
  8192a4:	10800017 	ldw	r2,0(r2)
  8192a8:	e0bfff15 	stw	r2,-4(fp)
  8192ac:	e0bffe17 	ldw	r2,-8(fp)
  8192b0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8192b4:	e0bffc17 	ldw	r2,-16(fp)
  8192b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
  8192bc:	e0bfff17 	ldw	r2,-4(fp)
}
  8192c0:	e037883a 	mov	sp,fp
  8192c4:	df000017 	ldw	fp,0(sp)
  8192c8:	dec00104 	addi	sp,sp,4
  8192cc:	f800283a 	ret

008192d0 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
  8192d0:	defffb04 	addi	sp,sp,-20
  8192d4:	df000415 	stw	fp,16(sp)
  8192d8:	df000404 	addi	fp,sp,16
  8192dc:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8192e0:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8192e4:	0005303a 	rdctl	r2,status
  8192e8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8192ec:	e0fffd17 	ldw	r3,-12(fp)
  8192f0:	00bfff84 	movi	r2,-2
  8192f4:	1884703a 	and	r2,r3,r2
  8192f8:	1001703a 	wrctl	status,r2
  
  return context;
  8192fc:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  819300:	e0bffe15 	stw	r2,-8(fp)
    OSTime = ticks;
  819304:	00c020b4 	movhi	r3,130
  819308:	18c28c04 	addi	r3,r3,2608
  81930c:	e0bfff17 	ldw	r2,-4(fp)
  819310:	18800015 	stw	r2,0(r3)
  819314:	e0bffe17 	ldw	r2,-8(fp)
  819318:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81931c:	e0bffc17 	ldw	r2,-16(fp)
  819320:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  819324:	e037883a 	mov	sp,fp
  819328:	df000017 	ldw	fp,0(sp)
  81932c:	dec00104 	addi	sp,sp,4
  819330:	f800283a 	ret

00819334 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  819334:	defffd04 	addi	sp,sp,-12
  819338:	dfc00215 	stw	ra,8(sp)
  81933c:	df000115 	stw	fp,4(sp)
  819340:	df000104 	addi	fp,sp,4
  819344:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
  819348:	081bc9c0 	call	81bc9c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  81934c:	00800044 	movi	r2,1
  819350:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  819354:	e037883a 	mov	sp,fp
  819358:	dfc00117 	ldw	ra,4(sp)
  81935c:	df000017 	ldw	fp,0(sp)
  819360:	dec00204 	addi	sp,sp,8
  819364:	f800283a 	ret

00819368 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  819368:	defffe04 	addi	sp,sp,-8
  81936c:	dfc00115 	stw	ra,4(sp)
  819370:	df000015 	stw	fp,0(sp)
  819374:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  819378:	01004034 	movhi	r4,256
  81937c:	21045804 	addi	r4,r4,4448
  819380:	000b883a 	mov	r5,zero
  819384:	000d883a 	mov	r6,zero
  819388:	01c9c404 	movi	r7,10000
  81938c:	081b1740 	call	81b174 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( UART, uart);
  819390:	010020b4 	movhi	r4,130
  819394:	2136c904 	addi	r4,r4,-9436
  819398:	000b883a 	mov	r5,zero
  81939c:	01800084 	movi	r6,2
  8193a0:	081955c0 	call	81955c <altera_avalon_jtag_uart_init>
  8193a4:	010020b4 	movhi	r4,130
  8193a8:	2136bf04 	addi	r4,r4,-9476
  8193ac:	08193dc0 	call	8193dc <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  8193b0:	010020b4 	movhi	r4,130
  8193b4:	213ae404 	addi	r4,r4,-5232
  8193b8:	081af480 	call	81af48 <altera_avalon_lcd_16207_init>
  8193bc:	010020b4 	movhi	r4,130
  8193c0:	213ada04 	addi	r4,r4,-5272
  8193c4:	08193dc0 	call	8193dc <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSTEM_ID, system_id);
}
  8193c8:	e037883a 	mov	sp,fp
  8193cc:	dfc00117 	ldw	ra,4(sp)
  8193d0:	df000017 	ldw	fp,0(sp)
  8193d4:	dec00204 	addi	sp,sp,8
  8193d8:	f800283a 	ret

008193dc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  8193dc:	defffd04 	addi	sp,sp,-12
  8193e0:	dfc00215 	stw	ra,8(sp)
  8193e4:	df000115 	stw	fp,4(sp)
  8193e8:	df000104 	addi	fp,sp,4
  8193ec:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  8193f0:	e13fff17 	ldw	r4,-4(fp)
  8193f4:	014020b4 	movhi	r5,130
  8193f8:	297b3004 	addi	r5,r5,-4928
  8193fc:	081b4e80 	call	81b4e8 <alt_dev_llist_insert>
}
  819400:	e037883a 	mov	sp,fp
  819404:	dfc00117 	ldw	ra,4(sp)
  819408:	df000017 	ldw	fp,0(sp)
  81940c:	dec00204 	addi	sp,sp,8
  819410:	f800283a 	ret

00819414 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  819414:	defffa04 	addi	sp,sp,-24
  819418:	dfc00515 	stw	ra,20(sp)
  81941c:	df000415 	stw	fp,16(sp)
  819420:	df000404 	addi	fp,sp,16
  819424:	e13ffd15 	stw	r4,-12(fp)
  819428:	e17ffe15 	stw	r5,-8(fp)
  81942c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  819430:	e0bffd17 	ldw	r2,-12(fp)
  819434:	10800017 	ldw	r2,0(r2)
  819438:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  81943c:	e0bffc17 	ldw	r2,-16(fp)
  819440:	11000a04 	addi	r4,r2,40
  819444:	e0bffd17 	ldw	r2,-12(fp)
  819448:	11c00217 	ldw	r7,8(r2)
  81944c:	e17ffe17 	ldw	r5,-8(fp)
  819450:	e1bfff17 	ldw	r6,-4(fp)
  819454:	0819bd40 	call	819bd4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  819458:	e037883a 	mov	sp,fp
  81945c:	dfc00117 	ldw	ra,4(sp)
  819460:	df000017 	ldw	fp,0(sp)
  819464:	dec00204 	addi	sp,sp,8
  819468:	f800283a 	ret

0081946c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  81946c:	defffa04 	addi	sp,sp,-24
  819470:	dfc00515 	stw	ra,20(sp)
  819474:	df000415 	stw	fp,16(sp)
  819478:	df000404 	addi	fp,sp,16
  81947c:	e13ffd15 	stw	r4,-12(fp)
  819480:	e17ffe15 	stw	r5,-8(fp)
  819484:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  819488:	e0bffd17 	ldw	r2,-12(fp)
  81948c:	10800017 	ldw	r2,0(r2)
  819490:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  819494:	e0bffc17 	ldw	r2,-16(fp)
  819498:	11000a04 	addi	r4,r2,40
  81949c:	e0bffd17 	ldw	r2,-12(fp)
  8194a0:	11c00217 	ldw	r7,8(r2)
  8194a4:	e17ffe17 	ldw	r5,-8(fp)
  8194a8:	e1bfff17 	ldw	r6,-4(fp)
  8194ac:	0819e940 	call	819e94 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  8194b0:	e037883a 	mov	sp,fp
  8194b4:	dfc00117 	ldw	ra,4(sp)
  8194b8:	df000017 	ldw	fp,0(sp)
  8194bc:	dec00204 	addi	sp,sp,8
  8194c0:	f800283a 	ret

008194c4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  8194c4:	defffc04 	addi	sp,sp,-16
  8194c8:	dfc00315 	stw	ra,12(sp)
  8194cc:	df000215 	stw	fp,8(sp)
  8194d0:	df000204 	addi	fp,sp,8
  8194d4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8194d8:	e0bfff17 	ldw	r2,-4(fp)
  8194dc:	10800017 	ldw	r2,0(r2)
  8194e0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  8194e4:	e0bffe17 	ldw	r2,-8(fp)
  8194e8:	11000a04 	addi	r4,r2,40
  8194ec:	e0bfff17 	ldw	r2,-4(fp)
  8194f0:	11400217 	ldw	r5,8(r2)
  8194f4:	0819a6c0 	call	819a6c <altera_avalon_jtag_uart_close>
}
  8194f8:	e037883a 	mov	sp,fp
  8194fc:	dfc00117 	ldw	ra,4(sp)
  819500:	df000017 	ldw	fp,0(sp)
  819504:	dec00204 	addi	sp,sp,8
  819508:	f800283a 	ret

0081950c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  81950c:	defffa04 	addi	sp,sp,-24
  819510:	dfc00515 	stw	ra,20(sp)
  819514:	df000415 	stw	fp,16(sp)
  819518:	df000404 	addi	fp,sp,16
  81951c:	e13ffd15 	stw	r4,-12(fp)
  819520:	e17ffe15 	stw	r5,-8(fp)
  819524:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  819528:	e0bffd17 	ldw	r2,-12(fp)
  81952c:	10800017 	ldw	r2,0(r2)
  819530:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  819534:	e0bffc17 	ldw	r2,-16(fp)
  819538:	11000a04 	addi	r4,r2,40
  81953c:	e17ffe17 	ldw	r5,-8(fp)
  819540:	e1bfff17 	ldw	r6,-4(fp)
  819544:	0819ae00 	call	819ae0 <altera_avalon_jtag_uart_ioctl>
}
  819548:	e037883a 	mov	sp,fp
  81954c:	dfc00117 	ldw	ra,4(sp)
  819550:	df000017 	ldw	fp,0(sp)
  819554:	dec00204 	addi	sp,sp,8
  819558:	f800283a 	ret

0081955c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  81955c:	defff404 	addi	sp,sp,-48
  819560:	dfc00b15 	stw	ra,44(sp)
  819564:	df000a15 	stw	fp,40(sp)
  819568:	df000a04 	addi	fp,sp,40
  81956c:	e13ffd15 	stw	r4,-12(fp)
  819570:	e17ffe15 	stw	r5,-8(fp)
  819574:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  819578:	e0bffd17 	ldw	r2,-12(fp)
  81957c:	10800c04 	addi	r2,r2,48
  819580:	e0bffb15 	stw	r2,-20(fp)
  819584:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
  819588:	e13ffc0b 	ldhu	r4,-16(fp)
  81958c:	e17ffc84 	addi	r5,fp,-14
  819590:	08135700 	call	813570 <OSFlagCreate>
  819594:	1007883a 	mov	r3,r2
  819598:	e0bffb17 	ldw	r2,-20(fp)
  81959c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
  8195a0:	e0bffd17 	ldw	r2,-12(fp)
  8195a4:	10800a04 	addi	r2,r2,40
  8195a8:	e0bff915 	stw	r2,-28(fp)
  8195ac:	00800044 	movi	r2,1
  8195b0:	e0bffa0d 	sth	r2,-24(fp)
  8195b4:	e13ffa0b 	ldhu	r4,-24(fp)
  8195b8:	08167740 	call	816774 <OSSemCreate>
  8195bc:	1007883a 	mov	r3,r2
  8195c0:	e0bff917 	ldw	r2,-28(fp)
  8195c4:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
  8195c8:	e0bffd17 	ldw	r2,-12(fp)
  8195cc:	10800b04 	addi	r2,r2,44
  8195d0:	e0bff715 	stw	r2,-36(fp)
  8195d4:	00800044 	movi	r2,1
  8195d8:	e0bff80d 	sth	r2,-32(fp)
  8195dc:	e13ff80b 	ldhu	r4,-32(fp)
  8195e0:	08167740 	call	816774 <OSSemCreate>
  8195e4:	1007883a 	mov	r3,r2
  8195e8:	e0bff717 	ldw	r2,-36(fp)
  8195ec:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8195f0:	e0fffd17 	ldw	r3,-12(fp)
  8195f4:	00800044 	movi	r2,1
  8195f8:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  8195fc:	e0bffd17 	ldw	r2,-12(fp)
  819600:	10800017 	ldw	r2,0(r2)
  819604:	11000104 	addi	r4,r2,4
  819608:	e0bffd17 	ldw	r2,-12(fp)
  81960c:	10800817 	ldw	r2,32(r2)
  819610:	1007883a 	mov	r3,r2
  819614:	2005883a 	mov	r2,r4
  819618:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  81961c:	e13ffe17 	ldw	r4,-8(fp)
  819620:	e17fff17 	ldw	r5,-4(fp)
  819624:	d8000015 	stw	zero,0(sp)
  819628:	018020b4 	movhi	r6,130
  81962c:	31a5a504 	addi	r6,r6,-26988
  819630:	e1fffd17 	ldw	r7,-12(fp)
  819634:	08100840 	call	810084 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  819638:	e0bffd17 	ldw	r2,-12(fp)
  81963c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  819640:	e0bffd17 	ldw	r2,-12(fp)
  819644:	11000204 	addi	r4,r2,8
  819648:	008020b4 	movhi	r2,130
  81964c:	10829004 	addi	r2,r2,2624
  819650:	10800017 	ldw	r2,0(r2)
  819654:	100b883a 	mov	r5,r2
  819658:	018020b4 	movhi	r6,130
  81965c:	31a65604 	addi	r6,r6,-26280
  819660:	e1fffd17 	ldw	r7,-12(fp)
  819664:	081b2040 	call	81b204 <alt_alarm_start>
  819668:	1004403a 	cmpge	r2,r2,zero
  81966c:	1000041e 	bne	r2,zero,819680 <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  819670:	e0fffd17 	ldw	r3,-12(fp)
  819674:	00a00034 	movhi	r2,32768
  819678:	10bfffc4 	addi	r2,r2,-1
  81967c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  819680:	e037883a 	mov	sp,fp
  819684:	dfc00117 	ldw	ra,4(sp)
  819688:	df000017 	ldw	fp,0(sp)
  81968c:	dec00204 	addi	sp,sp,8
  819690:	f800283a 	ret

00819694 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  819694:	defff204 	addi	sp,sp,-56
  819698:	dfc00d15 	stw	ra,52(sp)
  81969c:	df000c15 	stw	fp,48(sp)
  8196a0:	df000c04 	addi	fp,sp,48
  8196a4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  8196a8:	e0bfff17 	ldw	r2,-4(fp)
  8196ac:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
  8196b0:	e0bffd17 	ldw	r2,-12(fp)
  8196b4:	10800017 	ldw	r2,0(r2)
  8196b8:	e0bffc15 	stw	r2,-16(fp)
  8196bc:	00000006 	br	8196c0 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8196c0:	e0bffc17 	ldw	r2,-16(fp)
  8196c4:	10800104 	addi	r2,r2,4
  8196c8:	10800037 	ldwio	r2,0(r2)
  8196cc:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  8196d0:	e0bffb17 	ldw	r2,-20(fp)
  8196d4:	1080c00c 	andi	r2,r2,768
  8196d8:	1005003a 	cmpeq	r2,r2,zero
  8196dc:	1000991e 	bne	r2,zero,819944 <altera_avalon_jtag_uart_irq+0x2b0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  8196e0:	e0bffb17 	ldw	r2,-20(fp)
  8196e4:	1080400c 	andi	r2,r2,256
  8196e8:	1005003a 	cmpeq	r2,r2,zero
  8196ec:	1000481e 	bne	r2,zero,819810 <altera_avalon_jtag_uart_irq+0x17c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  8196f0:	00800074 	movhi	r2,1
  8196f4:	e0bffa15 	stw	r2,-24(fp)
  8196f8:	00000006 	br	8196fc <altera_avalon_jtag_uart_irq+0x68>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8196fc:	e0bffd17 	ldw	r2,-12(fp)
  819700:	10800d17 	ldw	r2,52(r2)
  819704:	10800044 	addi	r2,r2,1
  819708:	1081ffcc 	andi	r2,r2,2047
  81970c:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
  819710:	e0bffd17 	ldw	r2,-12(fp)
  819714:	10c00e17 	ldw	r3,56(r2)
  819718:	e0bff917 	ldw	r2,-28(fp)
  81971c:	18802826 	beq	r3,r2,8197c0 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  819720:	e0bffc17 	ldw	r2,-16(fp)
  819724:	10800037 	ldwio	r2,0(r2)
  819728:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  81972c:	e0bffa17 	ldw	r2,-24(fp)
  819730:	10a0000c 	andi	r2,r2,32768
  819734:	1005003a 	cmpeq	r2,r2,zero
  819738:	1000211e 	bne	r2,zero,8197c0 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  81973c:	e0bffd17 	ldw	r2,-12(fp)
  819740:	10c00d17 	ldw	r3,52(r2)
  819744:	e0bffa17 	ldw	r2,-24(fp)
  819748:	1009883a 	mov	r4,r2
  81974c:	e0bffd17 	ldw	r2,-12(fp)
  819750:	1885883a 	add	r2,r3,r2
  819754:	10801104 	addi	r2,r2,68
  819758:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  81975c:	e0bffd17 	ldw	r2,-12(fp)
  819760:	10800d17 	ldw	r2,52(r2)
  819764:	10800044 	addi	r2,r2,1
  819768:	10c1ffcc 	andi	r3,r2,2047
  81976c:	e0bffd17 	ldw	r2,-12(fp)
  819770:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
  819774:	e0bffd17 	ldw	r2,-12(fp)
  819778:	10800c17 	ldw	r2,48(r2)
  81977c:	e0bff615 	stw	r2,-40(fp)
  819780:	00800044 	movi	r2,1
  819784:	e0bff70d 	sth	r2,-36(fp)
  819788:	00800044 	movi	r2,1
  81978c:	e0bff785 	stb	r2,-34(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  819790:	008020b4 	movhi	r2,130
  819794:	10827c44 	addi	r2,r2,2545
  819798:	10800003 	ldbu	r2,0(r2)
  81979c:	10803fcc 	andi	r2,r2,255
  8197a0:	1005003a 	cmpeq	r2,r2,zero
  8197a4:	103fd51e 	bne	r2,zero,8196fc <altera_avalon_jtag_uart_irq+0x68>
  {
    OSFlagPost (group, flags, opt, &err);
  8197a8:	e17ff70b 	ldhu	r5,-36(fp)
  8197ac:	e1bff783 	ldbu	r6,-34(fp)
  8197b0:	e1fffe04 	addi	r7,fp,-8
  8197b4:	e13ff617 	ldw	r4,-40(fp)
  8197b8:	08142980 	call	814298 <OSFlagPost>
    return err;
  8197bc:	003fcf06 	br	8196fc <altera_avalon_jtag_uart_irq+0x68>
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  8197c0:	e0bffa17 	ldw	r2,-24(fp)
  8197c4:	10bfffec 	andhi	r2,r2,65535
  8197c8:	1005003a 	cmpeq	r2,r2,zero
  8197cc:	1000101e 	bne	r2,zero,819810 <altera_avalon_jtag_uart_irq+0x17c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8197d0:	e0bffd17 	ldw	r2,-12(fp)
  8197d4:	10c00817 	ldw	r3,32(r2)
  8197d8:	00bfff84 	movi	r2,-2
  8197dc:	1886703a 	and	r3,r3,r2
  8197e0:	e0bffd17 	ldw	r2,-12(fp)
  8197e4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  8197e8:	e0bffc17 	ldw	r2,-16(fp)
  8197ec:	11000104 	addi	r4,r2,4
  8197f0:	e0bffd17 	ldw	r2,-12(fp)
  8197f4:	10800817 	ldw	r2,32(r2)
  8197f8:	1007883a 	mov	r3,r2
  8197fc:	2005883a 	mov	r2,r4
  819800:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  819804:	e0bffc17 	ldw	r2,-16(fp)
  819808:	10800104 	addi	r2,r2,4
  81980c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  819810:	e0bffb17 	ldw	r2,-20(fp)
  819814:	1080800c 	andi	r2,r2,512
  819818:	1005003a 	cmpeq	r2,r2,zero
  81981c:	103fa81e 	bne	r2,zero,8196c0 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  819820:	e0bffb17 	ldw	r2,-20(fp)
  819824:	10bfffec 	andhi	r2,r2,65535
  819828:	1004d43a 	srli	r2,r2,16
  81982c:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  819830:	00002706 	br	8198d0 <altera_avalon_jtag_uart_irq+0x23c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  819834:	e13ffc17 	ldw	r4,-16(fp)
  819838:	e0bffd17 	ldw	r2,-12(fp)
  81983c:	10c01017 	ldw	r3,64(r2)
  819840:	e0bffd17 	ldw	r2,-12(fp)
  819844:	1885883a 	add	r2,r3,r2
  819848:	10821104 	addi	r2,r2,2116
  81984c:	10800003 	ldbu	r2,0(r2)
  819850:	10c03fcc 	andi	r3,r2,255
  819854:	18c0201c 	xori	r3,r3,128
  819858:	18ffe004 	addi	r3,r3,-128
  81985c:	2005883a 	mov	r2,r4
  819860:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  819864:	e0bffd17 	ldw	r2,-12(fp)
  819868:	10801017 	ldw	r2,64(r2)
  81986c:	10800044 	addi	r2,r2,1
  819870:	10c1ffcc 	andi	r3,r2,2047
  819874:	e0bffd17 	ldw	r2,-12(fp)
  819878:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
  81987c:	e0bffd17 	ldw	r2,-12(fp)
  819880:	10800c17 	ldw	r2,48(r2)
  819884:	e0bff415 	stw	r2,-48(fp)
  819888:	00800084 	movi	r2,2
  81988c:	e0bff50d 	sth	r2,-44(fp)
  819890:	00800044 	movi	r2,1
  819894:	e0bff585 	stb	r2,-42(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  819898:	008020b4 	movhi	r2,130
  81989c:	10827c44 	addi	r2,r2,2545
  8198a0:	10800003 	ldbu	r2,0(r2)
  8198a4:	10803fcc 	andi	r2,r2,255
  8198a8:	1005003a 	cmpeq	r2,r2,zero
  8198ac:	1000051e 	bne	r2,zero,8198c4 <altera_avalon_jtag_uart_irq+0x230>
  {
    OSFlagPost (group, flags, opt, &err);
  8198b0:	e17ff50b 	ldhu	r5,-44(fp)
  8198b4:	e1bff583 	ldbu	r6,-42(fp)
  8198b8:	e1fffe44 	addi	r7,fp,-7
  8198bc:	e13ff417 	ldw	r4,-48(fp)
  8198c0:	08142980 	call	814298 <OSFlagPost>

        space--;
  8198c4:	e0bff817 	ldw	r2,-32(fp)
  8198c8:	10bfffc4 	addi	r2,r2,-1
  8198cc:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  8198d0:	e0bff817 	ldw	r2,-32(fp)
  8198d4:	1005003a 	cmpeq	r2,r2,zero
  8198d8:	1000051e 	bne	r2,zero,8198f0 <altera_avalon_jtag_uart_irq+0x25c>
  8198dc:	e0bffd17 	ldw	r2,-12(fp)
  8198e0:	10c01017 	ldw	r3,64(r2)
  8198e4:	e0bffd17 	ldw	r2,-12(fp)
  8198e8:	10800f17 	ldw	r2,60(r2)
  8198ec:	18bfd11e 	bne	r3,r2,819834 <altera_avalon_jtag_uart_irq+0x1a0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  8198f0:	e0bff817 	ldw	r2,-32(fp)
  8198f4:	1005003a 	cmpeq	r2,r2,zero
  8198f8:	103f711e 	bne	r2,zero,8196c0 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8198fc:	e0bffd17 	ldw	r2,-12(fp)
  819900:	10c00817 	ldw	r3,32(r2)
  819904:	00bfff44 	movi	r2,-3
  819908:	1886703a 	and	r3,r3,r2
  81990c:	e0bffd17 	ldw	r2,-12(fp)
  819910:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  819914:	e0bffd17 	ldw	r2,-12(fp)
  819918:	10800017 	ldw	r2,0(r2)
  81991c:	11000104 	addi	r4,r2,4
  819920:	e0bffd17 	ldw	r2,-12(fp)
  819924:	10800817 	ldw	r2,32(r2)
  819928:	1007883a 	mov	r3,r2
  81992c:	2005883a 	mov	r2,r4
  819930:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  819934:	e0bffc17 	ldw	r2,-16(fp)
  819938:	10800104 	addi	r2,r2,4
  81993c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  819940:	003f5f06 	br	8196c0 <altera_avalon_jtag_uart_irq+0x2c>
}
  819944:	e037883a 	mov	sp,fp
  819948:	dfc00117 	ldw	ra,4(sp)
  81994c:	df000017 	ldw	fp,0(sp)
  819950:	dec00204 	addi	sp,sp,8
  819954:	f800283a 	ret

00819958 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  819958:	defff804 	addi	sp,sp,-32
  81995c:	dfc00715 	stw	ra,28(sp)
  819960:	df000615 	stw	fp,24(sp)
  819964:	df000604 	addi	fp,sp,24
  819968:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  81996c:	e0bfff17 	ldw	r2,-4(fp)
  819970:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  819974:	e0bffd17 	ldw	r2,-12(fp)
  819978:	10800017 	ldw	r2,0(r2)
  81997c:	10800104 	addi	r2,r2,4
  819980:	10800037 	ldwio	r2,0(r2)
  819984:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  819988:	e0bffc17 	ldw	r2,-16(fp)
  81998c:	1081000c 	andi	r2,r2,1024
  819990:	1005003a 	cmpeq	r2,r2,zero
  819994:	10000c1e 	bne	r2,zero,8199c8 <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  819998:	e0bffd17 	ldw	r2,-12(fp)
  81999c:	10800017 	ldw	r2,0(r2)
  8199a0:	11000104 	addi	r4,r2,4
  8199a4:	e0bffd17 	ldw	r2,-12(fp)
  8199a8:	10800817 	ldw	r2,32(r2)
  8199ac:	10810014 	ori	r2,r2,1024
  8199b0:	1007883a 	mov	r3,r2
  8199b4:	2005883a 	mov	r2,r4
  8199b8:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  8199bc:	e0bffd17 	ldw	r2,-12(fp)
  8199c0:	10000915 	stw	zero,36(r2)
  8199c4:	00002106 	br	819a4c <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  8199c8:	e0bffd17 	ldw	r2,-12(fp)
  8199cc:	10c00917 	ldw	r3,36(r2)
  8199d0:	00a00034 	movhi	r2,32768
  8199d4:	10bfff04 	addi	r2,r2,-4
  8199d8:	10c01c36 	bltu	r2,r3,819a4c <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
  8199dc:	e0bffd17 	ldw	r2,-12(fp)
  8199e0:	10800917 	ldw	r2,36(r2)
  8199e4:	10c00044 	addi	r3,r2,1
  8199e8:	e0bffd17 	ldw	r2,-12(fp)
  8199ec:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
  8199f0:	e0bffd17 	ldw	r2,-12(fp)
  8199f4:	10c00917 	ldw	r3,36(r2)
  8199f8:	e0bffd17 	ldw	r2,-12(fp)
  8199fc:	10800117 	ldw	r2,4(r2)
  819a00:	18801236 	bltu	r3,r2,819a4c <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
  819a04:	e0bffd17 	ldw	r2,-12(fp)
  819a08:	10800c17 	ldw	r2,48(r2)
  819a0c:	e0bffa15 	stw	r2,-24(fp)
  819a10:	00800104 	movi	r2,4
  819a14:	e0bffb0d 	sth	r2,-20(fp)
  819a18:	00800044 	movi	r2,1
  819a1c:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  819a20:	008020b4 	movhi	r2,130
  819a24:	10827c44 	addi	r2,r2,2545
  819a28:	10800003 	ldbu	r2,0(r2)
  819a2c:	10803fcc 	andi	r2,r2,255
  819a30:	1005003a 	cmpeq	r2,r2,zero
  819a34:	1000051e 	bne	r2,zero,819a4c <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
  819a38:	e17ffb0b 	ldhu	r5,-20(fp)
  819a3c:	e1bffb83 	ldbu	r6,-18(fp)
  819a40:	e1fffe04 	addi	r7,fp,-8
  819a44:	e13ffa17 	ldw	r4,-24(fp)
  819a48:	08142980 	call	814298 <OSFlagPost>
  819a4c:	008020b4 	movhi	r2,130
  819a50:	10829004 	addi	r2,r2,2624
  819a54:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
  819a58:	e037883a 	mov	sp,fp
  819a5c:	dfc00117 	ldw	ra,4(sp)
  819a60:	df000017 	ldw	fp,0(sp)
  819a64:	dec00204 	addi	sp,sp,8
  819a68:	f800283a 	ret

00819a6c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  819a6c:	defffc04 	addi	sp,sp,-16
  819a70:	df000315 	stw	fp,12(sp)
  819a74:	df000304 	addi	fp,sp,12
  819a78:	e13ffd15 	stw	r4,-12(fp)
  819a7c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  819a80:	00000706 	br	819aa0 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  819a84:	e0bffe17 	ldw	r2,-8(fp)
  819a88:	1090000c 	andi	r2,r2,16384
  819a8c:	1005003a 	cmpeq	r2,r2,zero
  819a90:	1000031e 	bne	r2,zero,819aa0 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  819a94:	00bffd44 	movi	r2,-11
  819a98:	e0bfff15 	stw	r2,-4(fp)
  819a9c:	00000b06 	br	819acc <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  819aa0:	e0bffd17 	ldw	r2,-12(fp)
  819aa4:	10c01017 	ldw	r3,64(r2)
  819aa8:	e0bffd17 	ldw	r2,-12(fp)
  819aac:	10800f17 	ldw	r2,60(r2)
  819ab0:	18800526 	beq	r3,r2,819ac8 <altera_avalon_jtag_uart_close+0x5c>
  819ab4:	e0bffd17 	ldw	r2,-12(fp)
  819ab8:	10c00917 	ldw	r3,36(r2)
  819abc:	e0bffd17 	ldw	r2,-12(fp)
  819ac0:	10800117 	ldw	r2,4(r2)
  819ac4:	18bfef36 	bltu	r3,r2,819a84 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  819ac8:	e03fff15 	stw	zero,-4(fp)
  819acc:	e0bfff17 	ldw	r2,-4(fp)
}
  819ad0:	e037883a 	mov	sp,fp
  819ad4:	df000017 	ldw	fp,0(sp)
  819ad8:	dec00104 	addi	sp,sp,4
  819adc:	f800283a 	ret

00819ae0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  819ae0:	defff804 	addi	sp,sp,-32
  819ae4:	df000715 	stw	fp,28(sp)
  819ae8:	df000704 	addi	fp,sp,28
  819aec:	e13ffb15 	stw	r4,-20(fp)
  819af0:	e17ffc15 	stw	r5,-16(fp)
  819af4:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  819af8:	00bff9c4 	movi	r2,-25
  819afc:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  819b00:	e0bffc17 	ldw	r2,-16(fp)
  819b04:	e0bfff15 	stw	r2,-4(fp)
  819b08:	e0ffff17 	ldw	r3,-4(fp)
  819b0c:	189a8060 	cmpeqi	r2,r3,27137
  819b10:	1000041e 	bne	r2,zero,819b24 <altera_avalon_jtag_uart_ioctl+0x44>
  819b14:	e0ffff17 	ldw	r3,-4(fp)
  819b18:	189a80a0 	cmpeqi	r2,r3,27138
  819b1c:	10001b1e 	bne	r2,zero,819b8c <altera_avalon_jtag_uart_ioctl+0xac>
  819b20:	00002706 	br	819bc0 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  819b24:	e0bffb17 	ldw	r2,-20(fp)
  819b28:	10c00117 	ldw	r3,4(r2)
  819b2c:	00a00034 	movhi	r2,32768
  819b30:	10bfffc4 	addi	r2,r2,-1
  819b34:	18802226 	beq	r3,r2,819bc0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  819b38:	e0bffd17 	ldw	r2,-12(fp)
  819b3c:	10800017 	ldw	r2,0(r2)
  819b40:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  819b44:	e0bff917 	ldw	r2,-28(fp)
  819b48:	10800090 	cmplti	r2,r2,2
  819b4c:	1000071e 	bne	r2,zero,819b6c <altera_avalon_jtag_uart_ioctl+0x8c>
  819b50:	e0fff917 	ldw	r3,-28(fp)
  819b54:	00a00034 	movhi	r2,32768
  819b58:	10bfffc4 	addi	r2,r2,-1
  819b5c:	18800326 	beq	r3,r2,819b6c <altera_avalon_jtag_uart_ioctl+0x8c>
  819b60:	e0bff917 	ldw	r2,-28(fp)
  819b64:	e0bffe15 	stw	r2,-8(fp)
  819b68:	00000306 	br	819b78 <altera_avalon_jtag_uart_ioctl+0x98>
  819b6c:	00e00034 	movhi	r3,32768
  819b70:	18ffff84 	addi	r3,r3,-2
  819b74:	e0fffe15 	stw	r3,-8(fp)
  819b78:	e0bffb17 	ldw	r2,-20(fp)
  819b7c:	e0fffe17 	ldw	r3,-8(fp)
  819b80:	10c00115 	stw	r3,4(r2)
      rc = 0;
  819b84:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  819b88:	00000d06 	br	819bc0 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  819b8c:	e0bffb17 	ldw	r2,-20(fp)
  819b90:	10c00117 	ldw	r3,4(r2)
  819b94:	00a00034 	movhi	r2,32768
  819b98:	10bfffc4 	addi	r2,r2,-1
  819b9c:	18800826 	beq	r3,r2,819bc0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  819ba0:	e13ffd17 	ldw	r4,-12(fp)
  819ba4:	e0bffb17 	ldw	r2,-20(fp)
  819ba8:	10c00917 	ldw	r3,36(r2)
  819bac:	e0bffb17 	ldw	r2,-20(fp)
  819bb0:	10800117 	ldw	r2,4(r2)
  819bb4:	1885803a 	cmpltu	r2,r3,r2
  819bb8:	20800015 	stw	r2,0(r4)
      rc = 0;
  819bbc:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  819bc0:	e0bffa17 	ldw	r2,-24(fp)
}
  819bc4:	e037883a 	mov	sp,fp
  819bc8:	df000017 	ldw	fp,0(sp)
  819bcc:	dec00104 	addi	sp,sp,4
  819bd0:	f800283a 	ret

00819bd4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  819bd4:	deffeb04 	addi	sp,sp,-84
  819bd8:	dfc01415 	stw	ra,80(sp)
  819bdc:	df001315 	stw	fp,76(sp)
  819be0:	df001304 	addi	fp,sp,76
  819be4:	e13ffb15 	stw	r4,-20(fp)
  819be8:	e17ffc15 	stw	r5,-16(fp)
  819bec:	e1bffd15 	stw	r6,-12(fp)
  819bf0:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  819bf4:	e0bffc17 	ldw	r2,-16(fp)
  819bf8:	e0bff915 	stw	r2,-28(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
  819bfc:	e0bffb17 	ldw	r2,-20(fp)
  819c00:	10800a17 	ldw	r2,40(r2)
  819c04:	e0bff315 	stw	r2,-52(fp)
  819c08:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
  819c0c:	e17ff40b 	ldhu	r5,-48(fp)
  819c10:	e1bffa44 	addi	r6,fp,-23
  819c14:	e13ff317 	ldw	r4,-52(fp)
  819c18:	0816b280 	call	816b28 <OSSemPend>

  while (space > 0)
  819c1c:	00006406 	br	819db0 <altera_avalon_jtag_uart_read+0x1dc>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  819c20:	e0bffb17 	ldw	r2,-20(fp)
  819c24:	10800d17 	ldw	r2,52(r2)
  819c28:	e0bff615 	stw	r2,-40(fp)
      out = sp->rx_out;
  819c2c:	e0bffb17 	ldw	r2,-20(fp)
  819c30:	10800e17 	ldw	r2,56(r2)
  819c34:	e0bff515 	stw	r2,-44(fp)

      if (in >= out)
  819c38:	e0fff617 	ldw	r3,-40(fp)
  819c3c:	e0bff517 	ldw	r2,-44(fp)
  819c40:	18800536 	bltu	r3,r2,819c58 <altera_avalon_jtag_uart_read+0x84>
        n = in - out;
  819c44:	e0bff617 	ldw	r2,-40(fp)
  819c48:	e0fff517 	ldw	r3,-44(fp)
  819c4c:	10c5c83a 	sub	r2,r2,r3
  819c50:	e0bff715 	stw	r2,-36(fp)
  819c54:	00000406 	br	819c68 <altera_avalon_jtag_uart_read+0x94>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  819c58:	00820004 	movi	r2,2048
  819c5c:	e0fff517 	ldw	r3,-44(fp)
  819c60:	10c5c83a 	sub	r2,r2,r3
  819c64:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
  819c68:	e0bff717 	ldw	r2,-36(fp)
  819c6c:	1005003a 	cmpeq	r2,r2,zero
  819c70:	10001f1e 	bne	r2,zero,819cf0 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
  819c74:	e0fffd17 	ldw	r3,-12(fp)
  819c78:	e0bff717 	ldw	r2,-36(fp)
  819c7c:	1880022e 	bgeu	r3,r2,819c88 <altera_avalon_jtag_uart_read+0xb4>
        n = space;
  819c80:	e0bffd17 	ldw	r2,-12(fp)
  819c84:	e0bff715 	stw	r2,-36(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  819c88:	e0bffb17 	ldw	r2,-20(fp)
  819c8c:	10c01104 	addi	r3,r2,68
  819c90:	e0bff517 	ldw	r2,-44(fp)
  819c94:	1887883a 	add	r3,r3,r2
  819c98:	e0bff917 	ldw	r2,-28(fp)
  819c9c:	1009883a 	mov	r4,r2
  819ca0:	180b883a 	mov	r5,r3
  819ca4:	e1bff717 	ldw	r6,-36(fp)
  819ca8:	080d3600 	call	80d360 <memcpy>
      ptr   += n;
  819cac:	e0fff717 	ldw	r3,-36(fp)
  819cb0:	e0bff917 	ldw	r2,-28(fp)
  819cb4:	10c5883a 	add	r2,r2,r3
  819cb8:	e0bff915 	stw	r2,-28(fp)
      space -= n;
  819cbc:	e0fffd17 	ldw	r3,-12(fp)
  819cc0:	e0bff717 	ldw	r2,-36(fp)
  819cc4:	1885c83a 	sub	r2,r3,r2
  819cc8:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  819ccc:	e0fff517 	ldw	r3,-44(fp)
  819cd0:	e0bff717 	ldw	r2,-36(fp)
  819cd4:	1885883a 	add	r2,r3,r2
  819cd8:	10c1ffcc 	andi	r3,r2,2047
  819cdc:	e0bffb17 	ldw	r2,-20(fp)
  819ce0:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
  819ce4:	e0bffd17 	ldw	r2,-12(fp)
  819ce8:	10800048 	cmpgei	r2,r2,1
  819cec:	103fcc1e 	bne	r2,zero,819c20 <altera_avalon_jtag_uart_read+0x4c>

    /* If we read any data then return it */
    if (ptr != buffer)
  819cf0:	e0fff917 	ldw	r3,-28(fp)
  819cf4:	e0bffc17 	ldw	r2,-16(fp)
  819cf8:	1880301e 	bne	r3,r2,819dbc <altera_avalon_jtag_uart_read+0x1e8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  819cfc:	e0bffe17 	ldw	r2,-8(fp)
  819d00:	1090000c 	andi	r2,r2,16384
  819d04:	1004c03a 	cmpne	r2,r2,zero
  819d08:	10002c1e 	bne	r2,zero,819dbc <altera_avalon_jtag_uart_read+0x1e8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
  819d0c:	008020b4 	movhi	r2,130
  819d10:	10827c44 	addi	r2,r2,2545
  819d14:	10800003 	ldbu	r2,0(r2)
  819d18:	10803fcc 	andi	r2,r2,255
  819d1c:	10800058 	cmpnei	r2,r2,1
  819d20:	1000161e 	bne	r2,zero,819d7c <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
  819d24:	e0bffb17 	ldw	r2,-20(fp)
  819d28:	10800c17 	ldw	r2,48(r2)
  819d2c:	e0bff015 	stw	r2,-64(fp)
  819d30:	00800144 	movi	r2,5
  819d34:	e0bff10d 	sth	r2,-60(fp)
  819d38:	00bfe0c4 	movi	r2,-125
  819d3c:	e0bff185 	stb	r2,-58(fp)
  819d40:	e03ff20d 	sth	zero,-56(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  819d44:	008020b4 	movhi	r2,130
  819d48:	10827c44 	addi	r2,r2,2545
  819d4c:	10800003 	ldbu	r2,0(r2)
  819d50:	10803fcc 	andi	r2,r2,255
  819d54:	1005003a 	cmpeq	r2,r2,zero
  819d58:	1000111e 	bne	r2,zero,819da0 <altera_avalon_jtag_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  819d5c:	e17ff10b 	ldhu	r5,-60(fp)
  819d60:	e1bff183 	ldbu	r6,-58(fp)
  819d64:	e1fff20b 	ldhu	r7,-56(fp)
  819d68:	e0bffa04 	addi	r2,fp,-24
  819d6c:	d8800015 	stw	r2,0(sp)
  819d70:	e13ff017 	ldw	r4,-64(fp)
  819d74:	0813bec0 	call	813bec <OSFlagPend>
    return err;
  819d78:	00000906 	br	819da0 <altera_avalon_jtag_uart_read+0x1cc>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  819d7c:	e0bffb17 	ldw	r2,-20(fp)
  819d80:	10c00d17 	ldw	r3,52(r2)
  819d84:	e0bff617 	ldw	r2,-40(fp)
  819d88:	1880051e 	bne	r3,r2,819da0 <altera_avalon_jtag_uart_read+0x1cc>
  819d8c:	e0bffb17 	ldw	r2,-20(fp)
  819d90:	10c00917 	ldw	r3,36(r2)
  819d94:	e0bffb17 	ldw	r2,-20(fp)
  819d98:	10800117 	ldw	r2,4(r2)
  819d9c:	18bff736 	bltu	r3,r2,819d7c <altera_avalon_jtag_uart_read+0x1a8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  819da0:	e0bffb17 	ldw	r2,-20(fp)
  819da4:	10c00d17 	ldw	r3,52(r2)
  819da8:	e0bff617 	ldw	r2,-40(fp)
  819dac:	18800326 	beq	r3,r2,819dbc <altera_avalon_jtag_uart_read+0x1e8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  819db0:	e0bffd17 	ldw	r2,-12(fp)
  819db4:	10800048 	cmpgei	r2,r2,1
  819db8:	103f991e 	bne	r2,zero,819c20 <altera_avalon_jtag_uart_read+0x4c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
  819dbc:	e0bffb17 	ldw	r2,-20(fp)
  819dc0:	11000a17 	ldw	r4,40(r2)
  819dc4:	0816f200 	call	816f20 <OSSemPost>

  if (ptr != buffer)
  819dc8:	e0fff917 	ldw	r3,-28(fp)
  819dcc:	e0bffc17 	ldw	r2,-16(fp)
  819dd0:	18801926 	beq	r3,r2,819e38 <altera_avalon_jtag_uart_read+0x264>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  819dd4:	0005303a 	rdctl	r2,status
  819dd8:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  819ddc:	e0ffef17 	ldw	r3,-68(fp)
  819de0:	00bfff84 	movi	r2,-2
  819de4:	1884703a 	and	r2,r3,r2
  819de8:	1001703a 	wrctl	status,r2
  
  return context;
  819dec:	e0bfef17 	ldw	r2,-68(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  819df0:	e0bff815 	stw	r2,-32(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  819df4:	e0bffb17 	ldw	r2,-20(fp)
  819df8:	10800817 	ldw	r2,32(r2)
  819dfc:	10c00054 	ori	r3,r2,1
  819e00:	e0bffb17 	ldw	r2,-20(fp)
  819e04:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  819e08:	e0bffb17 	ldw	r2,-20(fp)
  819e0c:	10800017 	ldw	r2,0(r2)
  819e10:	11000104 	addi	r4,r2,4
  819e14:	e0bffb17 	ldw	r2,-20(fp)
  819e18:	10800817 	ldw	r2,32(r2)
  819e1c:	1007883a 	mov	r3,r2
  819e20:	2005883a 	mov	r2,r4
  819e24:	10c00035 	stwio	r3,0(r2)
  819e28:	e0bff817 	ldw	r2,-32(fp)
  819e2c:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  819e30:	e0bfee17 	ldw	r2,-72(fp)
  819e34:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  819e38:	e0fff917 	ldw	r3,-28(fp)
  819e3c:	e0bffc17 	ldw	r2,-16(fp)
  819e40:	18800526 	beq	r3,r2,819e58 <altera_avalon_jtag_uart_read+0x284>
    return ptr - buffer;
  819e44:	e0fff917 	ldw	r3,-28(fp)
  819e48:	e0bffc17 	ldw	r2,-16(fp)
  819e4c:	1887c83a 	sub	r3,r3,r2
  819e50:	e0ffff15 	stw	r3,-4(fp)
  819e54:	00000906 	br	819e7c <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
  819e58:	e0bffe17 	ldw	r2,-8(fp)
  819e5c:	1090000c 	andi	r2,r2,16384
  819e60:	1005003a 	cmpeq	r2,r2,zero
  819e64:	1000031e 	bne	r2,zero,819e74 <altera_avalon_jtag_uart_read+0x2a0>
    return -EWOULDBLOCK;
  819e68:	00bffd44 	movi	r2,-11
  819e6c:	e0bfff15 	stw	r2,-4(fp)
  819e70:	00000206 	br	819e7c <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
  819e74:	00bffec4 	movi	r2,-5
  819e78:	e0bfff15 	stw	r2,-4(fp)
  819e7c:	e0bfff17 	ldw	r2,-4(fp)
}
  819e80:	e037883a 	mov	sp,fp
  819e84:	dfc00117 	ldw	ra,4(sp)
  819e88:	df000017 	ldw	fp,0(sp)
  819e8c:	dec00204 	addi	sp,sp,8
  819e90:	f800283a 	ret

00819e94 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  819e94:	deffeb04 	addi	sp,sp,-84
  819e98:	dfc01415 	stw	ra,80(sp)
  819e9c:	df001315 	stw	fp,76(sp)
  819ea0:	df001304 	addi	fp,sp,76
  819ea4:	e13ffb15 	stw	r4,-20(fp)
  819ea8:	e17ffc15 	stw	r5,-16(fp)
  819eac:	e1bffd15 	stw	r6,-12(fp)
  819eb0:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  819eb4:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  819eb8:	e0bffc17 	ldw	r2,-16(fp)
  819ebc:	e0bff515 	stw	r2,-44(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
  819ec0:	e0bffb17 	ldw	r2,-20(fp)
  819ec4:	10800b17 	ldw	r2,44(r2)
  819ec8:	e0bff315 	stw	r2,-52(fp)
  819ecc:	e03ff40d 	sth	zero,-48(fp)
  819ed0:	e17ff40b 	ldhu	r5,-48(fp)
  819ed4:	e1bffa04 	addi	r6,fp,-24
  819ed8:	e13ff317 	ldw	r4,-52(fp)
  819edc:	0816b280 	call	816b28 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  819ee0:	00003a06 	br	819fcc <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  819ee4:	e0bffb17 	ldw	r2,-20(fp)
  819ee8:	10800f17 	ldw	r2,60(r2)
  819eec:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  819ef0:	e0bffb17 	ldw	r2,-20(fp)
  819ef4:	10801017 	ldw	r2,64(r2)
  819ef8:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
  819efc:	e0fff917 	ldw	r3,-28(fp)
  819f00:	e0bff817 	ldw	r2,-32(fp)
  819f04:	1880062e 	bgeu	r3,r2,819f20 <altera_avalon_jtag_uart_write+0x8c>
        n = out - 1 - in;
  819f08:	e0fff817 	ldw	r3,-32(fp)
  819f0c:	e0bff917 	ldw	r2,-28(fp)
  819f10:	1885c83a 	sub	r2,r3,r2
  819f14:	10bfffc4 	addi	r2,r2,-1
  819f18:	e0bff715 	stw	r2,-36(fp)
  819f1c:	00000c06 	br	819f50 <altera_avalon_jtag_uart_write+0xbc>
      else if (out > 0)
  819f20:	e0bff817 	ldw	r2,-32(fp)
  819f24:	1005003a 	cmpeq	r2,r2,zero
  819f28:	1000051e 	bne	r2,zero,819f40 <altera_avalon_jtag_uart_write+0xac>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  819f2c:	00820004 	movi	r2,2048
  819f30:	e0fff917 	ldw	r3,-28(fp)
  819f34:	10c5c83a 	sub	r2,r2,r3
  819f38:	e0bff715 	stw	r2,-36(fp)
  819f3c:	00000406 	br	819f50 <altera_avalon_jtag_uart_write+0xbc>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  819f40:	0081ffc4 	movi	r2,2047
  819f44:	e0fff917 	ldw	r3,-28(fp)
  819f48:	10c5c83a 	sub	r2,r2,r3
  819f4c:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
  819f50:	e0bff717 	ldw	r2,-36(fp)
  819f54:	1005003a 	cmpeq	r2,r2,zero
  819f58:	10001f1e 	bne	r2,zero,819fd8 <altera_avalon_jtag_uart_write+0x144>
        break;

      if (n > count)
  819f5c:	e0fffd17 	ldw	r3,-12(fp)
  819f60:	e0bff717 	ldw	r2,-36(fp)
  819f64:	1880022e 	bgeu	r3,r2,819f70 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
  819f68:	e0bffd17 	ldw	r2,-12(fp)
  819f6c:	e0bff715 	stw	r2,-36(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  819f70:	e0bffb17 	ldw	r2,-20(fp)
  819f74:	10c21104 	addi	r3,r2,2116
  819f78:	e0bff917 	ldw	r2,-28(fp)
  819f7c:	1885883a 	add	r2,r3,r2
  819f80:	e0fffc17 	ldw	r3,-16(fp)
  819f84:	1009883a 	mov	r4,r2
  819f88:	180b883a 	mov	r5,r3
  819f8c:	e1bff717 	ldw	r6,-36(fp)
  819f90:	080d3600 	call	80d360 <memcpy>
      ptr   += n;
  819f94:	e0fff717 	ldw	r3,-36(fp)
  819f98:	e0bffc17 	ldw	r2,-16(fp)
  819f9c:	10c5883a 	add	r2,r2,r3
  819fa0:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  819fa4:	e0fffd17 	ldw	r3,-12(fp)
  819fa8:	e0bff717 	ldw	r2,-36(fp)
  819fac:	1885c83a 	sub	r2,r3,r2
  819fb0:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  819fb4:	e0fff917 	ldw	r3,-28(fp)
  819fb8:	e0bff717 	ldw	r2,-36(fp)
  819fbc:	1885883a 	add	r2,r3,r2
  819fc0:	10c1ffcc 	andi	r3,r2,2047
  819fc4:	e0bffb17 	ldw	r2,-20(fp)
  819fc8:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  819fcc:	e0bffd17 	ldw	r2,-12(fp)
  819fd0:	10800048 	cmpgei	r2,r2,1
  819fd4:	103fc31e 	bne	r2,zero,819ee4 <altera_avalon_jtag_uart_write+0x50>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  819fd8:	0005303a 	rdctl	r2,status
  819fdc:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  819fe0:	e0fff217 	ldw	r3,-56(fp)
  819fe4:	00bfff84 	movi	r2,-2
  819fe8:	1884703a 	and	r2,r3,r2
  819fec:	1001703a 	wrctl	status,r2
  
  return context;
  819ff0:	e0bff217 	ldw	r2,-56(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  819ff4:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  819ff8:	e0bffb17 	ldw	r2,-20(fp)
  819ffc:	10800817 	ldw	r2,32(r2)
  81a000:	10c00094 	ori	r3,r2,2
  81a004:	e0bffb17 	ldw	r2,-20(fp)
  81a008:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  81a00c:	e0bffb17 	ldw	r2,-20(fp)
  81a010:	10800017 	ldw	r2,0(r2)
  81a014:	11000104 	addi	r4,r2,4
  81a018:	e0bffb17 	ldw	r2,-20(fp)
  81a01c:	10800817 	ldw	r2,32(r2)
  81a020:	1007883a 	mov	r3,r2
  81a024:	2005883a 	mov	r2,r4
  81a028:	10c00035 	stwio	r3,0(r2)
  81a02c:	e0bff617 	ldw	r2,-40(fp)
  81a030:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81a034:	e0bff117 	ldw	r2,-60(fp)
  81a038:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  81a03c:	e0bffd17 	ldw	r2,-12(fp)
  81a040:	10800050 	cmplti	r2,r2,1
  81a044:	10002d1e 	bne	r2,zero,81a0fc <altera_avalon_jtag_uart_write+0x268>
    {
      if (flags & O_NONBLOCK)
  81a048:	e0bffe17 	ldw	r2,-8(fp)
  81a04c:	1090000c 	andi	r2,r2,16384
  81a050:	1004c03a 	cmpne	r2,r2,zero
  81a054:	10002c1e 	bne	r2,zero,81a108 <altera_avalon_jtag_uart_write+0x274>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
  81a058:	008020b4 	movhi	r2,130
  81a05c:	10827c44 	addi	r2,r2,2545
  81a060:	10800003 	ldbu	r2,0(r2)
  81a064:	10803fcc 	andi	r2,r2,255
  81a068:	10800058 	cmpnei	r2,r2,1
  81a06c:	1000161e 	bne	r2,zero,81a0c8 <altera_avalon_jtag_uart_write+0x234>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
  81a070:	e0bffb17 	ldw	r2,-20(fp)
  81a074:	10800c17 	ldw	r2,48(r2)
  81a078:	e0bfee15 	stw	r2,-72(fp)
  81a07c:	00800184 	movi	r2,6
  81a080:	e0bfef0d 	sth	r2,-68(fp)
  81a084:	00bfe0c4 	movi	r2,-125
  81a088:	e0bfef85 	stb	r2,-66(fp)
  81a08c:	e03ff00d 	sth	zero,-64(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  81a090:	008020b4 	movhi	r2,130
  81a094:	10827c44 	addi	r2,r2,2545
  81a098:	10800003 	ldbu	r2,0(r2)
  81a09c:	10803fcc 	andi	r2,r2,255
  81a0a0:	1005003a 	cmpeq	r2,r2,zero
  81a0a4:	1000111e 	bne	r2,zero,81a0ec <altera_avalon_jtag_uart_write+0x258>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  81a0a8:	e17fef0b 	ldhu	r5,-68(fp)
  81a0ac:	e1bfef83 	ldbu	r6,-66(fp)
  81a0b0:	e1fff00b 	ldhu	r7,-64(fp)
  81a0b4:	e0bffa44 	addi	r2,fp,-23
  81a0b8:	d8800015 	stw	r2,0(sp)
  81a0bc:	e13fee17 	ldw	r4,-72(fp)
  81a0c0:	0813bec0 	call	813bec <OSFlagPend>
    return err;
  81a0c4:	00000906 	br	81a0ec <altera_avalon_jtag_uart_write+0x258>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  81a0c8:	e0bffb17 	ldw	r2,-20(fp)
  81a0cc:	10c01017 	ldw	r3,64(r2)
  81a0d0:	e0bff817 	ldw	r2,-32(fp)
  81a0d4:	1880051e 	bne	r3,r2,81a0ec <altera_avalon_jtag_uart_write+0x258>
  81a0d8:	e0bffb17 	ldw	r2,-20(fp)
  81a0dc:	10c00917 	ldw	r3,36(r2)
  81a0e0:	e0bffb17 	ldw	r2,-20(fp)
  81a0e4:	10800117 	ldw	r2,4(r2)
  81a0e8:	18bff736 	bltu	r3,r2,81a0c8 <altera_avalon_jtag_uart_write+0x234>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  81a0ec:	e0bffb17 	ldw	r2,-20(fp)
  81a0f0:	10c01017 	ldw	r3,64(r2)
  81a0f4:	e0bff817 	ldw	r2,-32(fp)
  81a0f8:	18800326 	beq	r3,r2,81a108 <altera_avalon_jtag_uart_write+0x274>
         break;
    }
  }
  while (count > 0);
  81a0fc:	e0bffd17 	ldw	r2,-12(fp)
  81a100:	10800048 	cmpgei	r2,r2,1
  81a104:	103fb11e 	bne	r2,zero,819fcc <altera_avalon_jtag_uart_write+0x138>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
  81a108:	e0bffb17 	ldw	r2,-20(fp)
  81a10c:	11000b17 	ldw	r4,44(r2)
  81a110:	0816f200 	call	816f20 <OSSemPost>

  if (ptr != start)
  81a114:	e0fffc17 	ldw	r3,-16(fp)
  81a118:	e0bff517 	ldw	r2,-44(fp)
  81a11c:	18800526 	beq	r3,r2,81a134 <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
  81a120:	e0fffc17 	ldw	r3,-16(fp)
  81a124:	e0bff517 	ldw	r2,-44(fp)
  81a128:	1887c83a 	sub	r3,r3,r2
  81a12c:	e0ffff15 	stw	r3,-4(fp)
  81a130:	00000906 	br	81a158 <altera_avalon_jtag_uart_write+0x2c4>
  else if (flags & O_NONBLOCK)
  81a134:	e0bffe17 	ldw	r2,-8(fp)
  81a138:	1090000c 	andi	r2,r2,16384
  81a13c:	1005003a 	cmpeq	r2,r2,zero
  81a140:	1000031e 	bne	r2,zero,81a150 <altera_avalon_jtag_uart_write+0x2bc>
    return -EWOULDBLOCK;
  81a144:	00bffd44 	movi	r2,-11
  81a148:	e0bfff15 	stw	r2,-4(fp)
  81a14c:	00000206 	br	81a158 <altera_avalon_jtag_uart_write+0x2c4>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  81a150:	00bffec4 	movi	r2,-5
  81a154:	e0bfff15 	stw	r2,-4(fp)
  81a158:	e0bfff17 	ldw	r2,-4(fp)
}
  81a15c:	e037883a 	mov	sp,fp
  81a160:	dfc00117 	ldw	ra,4(sp)
  81a164:	df000017 	ldw	fp,0(sp)
  81a168:	dec00204 	addi	sp,sp,8
  81a16c:	f800283a 	ret

0081a170 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  81a170:	defffa04 	addi	sp,sp,-24
  81a174:	dfc00515 	stw	ra,20(sp)
  81a178:	df000415 	stw	fp,16(sp)
  81a17c:	df000404 	addi	fp,sp,16
  81a180:	e13ffe15 	stw	r4,-8(fp)
  81a184:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
  81a188:	e0bffe17 	ldw	r2,-8(fp)
  81a18c:	10800017 	ldw	r2,0(r2)
  81a190:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  81a194:	008003f4 	movhi	r2,15
  81a198:	10909004 	addi	r2,r2,16960
  81a19c:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  81a1a0:	e0bffe17 	ldw	r2,-8(fp)
  81a1a4:	10800803 	ldbu	r2,32(r2)
  81a1a8:	10803fcc 	andi	r2,r2,255
  81a1ac:	1080201c 	xori	r2,r2,128
  81a1b0:	10bfe004 	addi	r2,r2,-128
  81a1b4:	1004c03a 	cmpne	r2,r2,zero
  81a1b8:	1000161e 	bne	r2,zero,81a214 <lcd_write_command+0xa4>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  81a1bc:	00000a06 	br	81a1e8 <lcd_write_command+0x78>
    if (--i == 0)
  81a1c0:	e0bffc17 	ldw	r2,-16(fp)
  81a1c4:	10bfffc4 	addi	r2,r2,-1
  81a1c8:	e0bffc15 	stw	r2,-16(fp)
  81a1cc:	e0bffc17 	ldw	r2,-16(fp)
  81a1d0:	1004c03a 	cmpne	r2,r2,zero
  81a1d4:	1000041e 	bne	r2,zero,81a1e8 <lcd_write_command+0x78>
    {
      sp->broken = 1;
  81a1d8:	e0fffe17 	ldw	r3,-8(fp)
  81a1dc:	00800044 	movi	r2,1
  81a1e0:	18800805 	stb	r2,32(r3)
      return;
  81a1e4:	00000b06 	br	81a214 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  81a1e8:	e0bffd17 	ldw	r2,-12(fp)
  81a1ec:	10800104 	addi	r2,r2,4
  81a1f0:	10800037 	ldwio	r2,0(r2)
  81a1f4:	1080200c 	andi	r2,r2,128
  81a1f8:	1004c03a 	cmpne	r2,r2,zero
  81a1fc:	103ff01e 	bne	r2,zero,81a1c0 <lcd_write_command+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  81a200:	01001904 	movi	r4,100
  81a204:	0810a100 	call	810a10 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  81a208:	e0bffd17 	ldw	r2,-12(fp)
  81a20c:	e0ffff03 	ldbu	r3,-4(fp)
  81a210:	10c00035 	stwio	r3,0(r2)
}
  81a214:	e037883a 	mov	sp,fp
  81a218:	dfc00117 	ldw	ra,4(sp)
  81a21c:	df000017 	ldw	fp,0(sp)
  81a220:	dec00204 	addi	sp,sp,8
  81a224:	f800283a 	ret

0081a228 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  81a228:	defffa04 	addi	sp,sp,-24
  81a22c:	dfc00515 	stw	ra,20(sp)
  81a230:	df000415 	stw	fp,16(sp)
  81a234:	df000404 	addi	fp,sp,16
  81a238:	e13ffe15 	stw	r4,-8(fp)
  81a23c:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
  81a240:	e0bffe17 	ldw	r2,-8(fp)
  81a244:	10800017 	ldw	r2,0(r2)
  81a248:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  81a24c:	008003f4 	movhi	r2,15
  81a250:	10909004 	addi	r2,r2,16960
  81a254:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  81a258:	e0bffe17 	ldw	r2,-8(fp)
  81a25c:	10800803 	ldbu	r2,32(r2)
  81a260:	10803fcc 	andi	r2,r2,255
  81a264:	1080201c 	xori	r2,r2,128
  81a268:	10bfe004 	addi	r2,r2,-128
  81a26c:	1004c03a 	cmpne	r2,r2,zero
  81a270:	10001d1e 	bne	r2,zero,81a2e8 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  81a274:	00000a06 	br	81a2a0 <lcd_write_data+0x78>
    if (--i == 0)
  81a278:	e0bffc17 	ldw	r2,-16(fp)
  81a27c:	10bfffc4 	addi	r2,r2,-1
  81a280:	e0bffc15 	stw	r2,-16(fp)
  81a284:	e0bffc17 	ldw	r2,-16(fp)
  81a288:	1004c03a 	cmpne	r2,r2,zero
  81a28c:	1000041e 	bne	r2,zero,81a2a0 <lcd_write_data+0x78>
    {
      sp->broken = 1;
  81a290:	e0fffe17 	ldw	r3,-8(fp)
  81a294:	00800044 	movi	r2,1
  81a298:	18800805 	stb	r2,32(r3)
      return;
  81a29c:	00001206 	br	81a2e8 <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  81a2a0:	e0bffd17 	ldw	r2,-12(fp)
  81a2a4:	10800104 	addi	r2,r2,4
  81a2a8:	10800037 	ldwio	r2,0(r2)
  81a2ac:	1080200c 	andi	r2,r2,128
  81a2b0:	1004c03a 	cmpne	r2,r2,zero
  81a2b4:	103ff01e 	bne	r2,zero,81a278 <lcd_write_data+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  81a2b8:	01001904 	movi	r4,100
  81a2bc:	0810a100 	call	810a10 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  81a2c0:	e0bffd17 	ldw	r2,-12(fp)
  81a2c4:	10800204 	addi	r2,r2,8
  81a2c8:	e0ffff03 	ldbu	r3,-4(fp)
  81a2cc:	10c00035 	stwio	r3,0(r2)

  sp->address++;
  81a2d0:	e0bffe17 	ldw	r2,-8(fp)
  81a2d4:	108008c3 	ldbu	r2,35(r2)
  81a2d8:	10800044 	addi	r2,r2,1
  81a2dc:	1007883a 	mov	r3,r2
  81a2e0:	e0bffe17 	ldw	r2,-8(fp)
  81a2e4:	10c008c5 	stb	r3,35(r2)
}
  81a2e8:	e037883a 	mov	sp,fp
  81a2ec:	dfc00117 	ldw	ra,4(sp)
  81a2f0:	df000017 	ldw	fp,0(sp)
  81a2f4:	dec00204 	addi	sp,sp,8
  81a2f8:	f800283a 	ret

0081a2fc <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  81a2fc:	defffc04 	addi	sp,sp,-16
  81a300:	dfc00315 	stw	ra,12(sp)
  81a304:	df000215 	stw	fp,8(sp)
  81a308:	df000204 	addi	fp,sp,8
  81a30c:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  81a310:	e13fff17 	ldw	r4,-4(fp)
  81a314:	01400044 	movi	r5,1
  81a318:	081a1700 	call	81a170 <lcd_write_command>

  sp->x = 0;
  81a31c:	e0bfff17 	ldw	r2,-4(fp)
  81a320:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  81a324:	e0bfff17 	ldw	r2,-4(fp)
  81a328:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  81a32c:	e0bfff17 	ldw	r2,-4(fp)
  81a330:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81a334:	e03ffe15 	stw	zero,-8(fp)
  81a338:	00001906 	br	81a3a0 <lcd_clear_screen+0xa4>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  81a33c:	e0bffe17 	ldw	r2,-8(fp)
  81a340:	108018e4 	muli	r2,r2,99
  81a344:	10c01004 	addi	r3,r2,64
  81a348:	e0bfff17 	ldw	r2,-4(fp)
  81a34c:	1889883a 	add	r4,r3,r2
  81a350:	01400804 	movi	r5,32
  81a354:	01801444 	movi	r6,81
  81a358:	080d4e00 	call	80d4e0 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  81a35c:	e0bffe17 	ldw	r2,-8(fp)
  81a360:	108018e4 	muli	r2,r2,99
  81a364:	10c00c04 	addi	r3,r2,48
  81a368:	e0bfff17 	ldw	r2,-4(fp)
  81a36c:	1889883a 	add	r4,r3,r2
  81a370:	01400804 	movi	r5,32
  81a374:	01800404 	movi	r6,16
  81a378:	080d4e00 	call	80d4e0 <memset>
    sp->line[y].width = 0;
  81a37c:	e0bffe17 	ldw	r2,-8(fp)
  81a380:	e0ffff17 	ldw	r3,-4(fp)
  81a384:	108018e4 	muli	r2,r2,99
  81a388:	10c5883a 	add	r2,r2,r3
  81a38c:	10802404 	addi	r2,r2,144
  81a390:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81a394:	e0bffe17 	ldw	r2,-8(fp)
  81a398:	10800044 	addi	r2,r2,1
  81a39c:	e0bffe15 	stw	r2,-8(fp)
  81a3a0:	e0bffe17 	ldw	r2,-8(fp)
  81a3a4:	10800090 	cmplti	r2,r2,2
  81a3a8:	103fe41e 	bne	r2,zero,81a33c <lcd_clear_screen+0x40>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  81a3ac:	e037883a 	mov	sp,fp
  81a3b0:	dfc00117 	ldw	ra,4(sp)
  81a3b4:	df000017 	ldw	fp,0(sp)
  81a3b8:	dec00204 	addi	sp,sp,8
  81a3bc:	f800283a 	ret

0081a3c0 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  81a3c0:	defff604 	addi	sp,sp,-40
  81a3c4:	dfc00915 	stw	ra,36(sp)
  81a3c8:	df000815 	stw	fp,32(sp)
  81a3cc:	dc000715 	stw	r16,28(sp)
  81a3d0:	df000704 	addi	fp,sp,28
  81a3d4:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  81a3d8:	e0bfff17 	ldw	r2,-4(fp)
  81a3dc:	10800943 	ldbu	r2,37(r2)
  81a3e0:	10803fcc 	andi	r2,r2,255
  81a3e4:	1080201c 	xori	r2,r2,128
  81a3e8:	10bfe004 	addi	r2,r2,-128
  81a3ec:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81a3f0:	e03ffe15 	stw	zero,-8(fp)
  81a3f4:	00006406 	br	81a588 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  81a3f8:	e0bffe17 	ldw	r2,-8(fp)
  81a3fc:	e0ffff17 	ldw	r3,-4(fp)
  81a400:	108018e4 	muli	r2,r2,99
  81a404:	10c5883a 	add	r2,r2,r3
  81a408:	10802404 	addi	r2,r2,144
  81a40c:	10800043 	ldbu	r2,1(r2)
  81a410:	10803fcc 	andi	r2,r2,255
  81a414:	1080201c 	xori	r2,r2,128
  81a418:	10bfe004 	addi	r2,r2,-128
  81a41c:	e0bffb15 	stw	r2,-20(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  81a420:	e0bffe17 	ldw	r2,-8(fp)
  81a424:	e0ffff17 	ldw	r3,-4(fp)
  81a428:	108018e4 	muli	r2,r2,99
  81a42c:	10c5883a 	add	r2,r2,r3
  81a430:	10802404 	addi	r2,r2,144
  81a434:	10800083 	ldbu	r2,2(r2)
  81a438:	10c03fcc 	andi	r3,r2,255
  81a43c:	e0bffc17 	ldw	r2,-16(fp)
  81a440:	1885383a 	mul	r2,r3,r2
  81a444:	1005d23a 	srai	r2,r2,8
  81a448:	e0bffa15 	stw	r2,-24(fp)
    if (offset >= width)
  81a44c:	e0fffa17 	ldw	r3,-24(fp)
  81a450:	e0bffb17 	ldw	r2,-20(fp)
  81a454:	18800116 	blt	r3,r2,81a45c <lcd_repaint_screen+0x9c>
      offset = 0;
  81a458:	e03ffa15 	stw	zero,-24(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  81a45c:	e03ffd15 	stw	zero,-12(fp)
  81a460:	00004306 	br	81a570 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  81a464:	e43ffe17 	ldw	r16,-8(fp)
  81a468:	e0fffd17 	ldw	r3,-12(fp)
  81a46c:	e0bffa17 	ldw	r2,-24(fp)
  81a470:	1889883a 	add	r4,r3,r2
  81a474:	e17ffb17 	ldw	r5,-20(fp)
  81a478:	08073f80 	call	8073f8 <__modsi3>
  81a47c:	1009883a 	mov	r4,r2
  81a480:	e0ffff17 	ldw	r3,-4(fp)
  81a484:	808018e4 	muli	r2,r16,99
  81a488:	10c5883a 	add	r2,r2,r3
  81a48c:	1105883a 	add	r2,r2,r4
  81a490:	10801004 	addi	r2,r2,64
  81a494:	10800003 	ldbu	r2,0(r2)
  81a498:	e0bff945 	stb	r2,-27(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  81a49c:	e0bffe17 	ldw	r2,-8(fp)
  81a4a0:	e13ffd17 	ldw	r4,-12(fp)
  81a4a4:	e0ffff17 	ldw	r3,-4(fp)
  81a4a8:	108018e4 	muli	r2,r2,99
  81a4ac:	10c5883a 	add	r2,r2,r3
  81a4b0:	1105883a 	add	r2,r2,r4
  81a4b4:	10800c04 	addi	r2,r2,48
  81a4b8:	10800003 	ldbu	r2,0(r2)
  81a4bc:	10c03fcc 	andi	r3,r2,255
  81a4c0:	18c0201c 	xori	r3,r3,128
  81a4c4:	18ffe004 	addi	r3,r3,-128
  81a4c8:	e0bff947 	ldb	r2,-27(fp)
  81a4cc:	18802526 	beq	r3,r2,81a564 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  81a4d0:	e0fffe17 	ldw	r3,-8(fp)
  81a4d4:	d0a03204 	addi	r2,gp,-32568
  81a4d8:	1885883a 	add	r2,r3,r2
  81a4dc:	10800003 	ldbu	r2,0(r2)
  81a4e0:	1007883a 	mov	r3,r2
  81a4e4:	e0bffd17 	ldw	r2,-12(fp)
  81a4e8:	1885883a 	add	r2,r3,r2
  81a4ec:	e0bff905 	stb	r2,-28(fp)

        if (address != sp->address)
  81a4f0:	e0fff903 	ldbu	r3,-28(fp)
  81a4f4:	e0bfff17 	ldw	r2,-4(fp)
  81a4f8:	108008c3 	ldbu	r2,35(r2)
  81a4fc:	10803fcc 	andi	r2,r2,255
  81a500:	1080201c 	xori	r2,r2,128
  81a504:	10bfe004 	addi	r2,r2,-128
  81a508:	18800926 	beq	r3,r2,81a530 <lcd_repaint_screen+0x170>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  81a50c:	e0fff903 	ldbu	r3,-28(fp)
  81a510:	00bfe004 	movi	r2,-128
  81a514:	1884b03a 	or	r2,r3,r2
  81a518:	11403fcc 	andi	r5,r2,255
  81a51c:	e13fff17 	ldw	r4,-4(fp)
  81a520:	081a1700 	call	81a170 <lcd_write_command>
          sp->address = address;
  81a524:	e0fff903 	ldbu	r3,-28(fp)
  81a528:	e0bfff17 	ldw	r2,-4(fp)
  81a52c:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  81a530:	e0bff943 	ldbu	r2,-27(fp)
  81a534:	11403fcc 	andi	r5,r2,255
  81a538:	e13fff17 	ldw	r4,-4(fp)
  81a53c:	081a2280 	call	81a228 <lcd_write_data>
        sp->line[y].visible[x] = c;
  81a540:	e0bffe17 	ldw	r2,-8(fp)
  81a544:	e13ffd17 	ldw	r4,-12(fp)
  81a548:	e0ffff17 	ldw	r3,-4(fp)
  81a54c:	108018e4 	muli	r2,r2,99
  81a550:	10c5883a 	add	r2,r2,r3
  81a554:	1105883a 	add	r2,r2,r4
  81a558:	10c00c04 	addi	r3,r2,48
  81a55c:	e0bff943 	ldbu	r2,-27(fp)
  81a560:	18800005 	stb	r2,0(r3)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  81a564:	e0bffd17 	ldw	r2,-12(fp)
  81a568:	10800044 	addi	r2,r2,1
  81a56c:	e0bffd15 	stw	r2,-12(fp)
  81a570:	e0bffd17 	ldw	r2,-12(fp)
  81a574:	10800410 	cmplti	r2,r2,16
  81a578:	103fba1e 	bne	r2,zero,81a464 <lcd_repaint_screen+0xa4>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81a57c:	e0bffe17 	ldw	r2,-8(fp)
  81a580:	10800044 	addi	r2,r2,1
  81a584:	e0bffe15 	stw	r2,-8(fp)
  81a588:	e0bffe17 	ldw	r2,-8(fp)
  81a58c:	10800090 	cmplti	r2,r2,2
  81a590:	103f991e 	bne	r2,zero,81a3f8 <lcd_repaint_screen+0x38>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  81a594:	e037883a 	mov	sp,fp
  81a598:	dfc00217 	ldw	ra,8(sp)
  81a59c:	df000117 	ldw	fp,4(sp)
  81a5a0:	dc000017 	ldw	r16,0(sp)
  81a5a4:	dec00304 	addi	sp,sp,12
  81a5a8:	f800283a 	ret

0081a5ac <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  81a5ac:	defffc04 	addi	sp,sp,-16
  81a5b0:	dfc00315 	stw	ra,12(sp)
  81a5b4:	df000215 	stw	fp,8(sp)
  81a5b8:	df000204 	addi	fp,sp,8
  81a5bc:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81a5c0:	e03ffe15 	stw	zero,-8(fp)
  81a5c4:	00001d06 	br	81a63c <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  81a5c8:	e0bffe17 	ldw	r2,-8(fp)
  81a5cc:	10800048 	cmpgei	r2,r2,1
  81a5d0:	10000f1e 	bne	r2,zero,81a610 <lcd_scroll_up+0x64>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  81a5d4:	e0bffe17 	ldw	r2,-8(fp)
  81a5d8:	108018e4 	muli	r2,r2,99
  81a5dc:	10c01004 	addi	r3,r2,64
  81a5e0:	e0bfff17 	ldw	r2,-4(fp)
  81a5e4:	1889883a 	add	r4,r3,r2
  81a5e8:	e0bffe17 	ldw	r2,-8(fp)
  81a5ec:	10800044 	addi	r2,r2,1
  81a5f0:	108018e4 	muli	r2,r2,99
  81a5f4:	10c01004 	addi	r3,r2,64
  81a5f8:	e0bfff17 	ldw	r2,-4(fp)
  81a5fc:	1885883a 	add	r2,r3,r2
  81a600:	100b883a 	mov	r5,r2
  81a604:	01801404 	movi	r6,80
  81a608:	080d3600 	call	80d360 <memcpy>
  81a60c:	00000806 	br	81a630 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  81a610:	e0bffe17 	ldw	r2,-8(fp)
  81a614:	108018e4 	muli	r2,r2,99
  81a618:	10c01004 	addi	r3,r2,64
  81a61c:	e0bfff17 	ldw	r2,-4(fp)
  81a620:	1889883a 	add	r4,r3,r2
  81a624:	01400804 	movi	r5,32
  81a628:	01801404 	movi	r6,80
  81a62c:	080d4e00 	call	80d4e0 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81a630:	e0bffe17 	ldw	r2,-8(fp)
  81a634:	10800044 	addi	r2,r2,1
  81a638:	e0bffe15 	stw	r2,-8(fp)
  81a63c:	e0bffe17 	ldw	r2,-8(fp)
  81a640:	10800090 	cmplti	r2,r2,2
  81a644:	103fe01e 	bne	r2,zero,81a5c8 <lcd_scroll_up+0x1c>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  81a648:	e0bfff17 	ldw	r2,-4(fp)
  81a64c:	10800883 	ldbu	r2,34(r2)
  81a650:	10bfffc4 	addi	r2,r2,-1
  81a654:	1007883a 	mov	r3,r2
  81a658:	e0bfff17 	ldw	r2,-4(fp)
  81a65c:	10c00885 	stb	r3,34(r2)
}
  81a660:	e037883a 	mov	sp,fp
  81a664:	dfc00117 	ldw	ra,4(sp)
  81a668:	df000017 	ldw	fp,0(sp)
  81a66c:	dec00204 	addi	sp,sp,8
  81a670:	f800283a 	ret

0081a674 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  81a674:	defff804 	addi	sp,sp,-32
  81a678:	dfc00715 	stw	ra,28(sp)
  81a67c:	df000615 	stw	fp,24(sp)
  81a680:	df000604 	addi	fp,sp,24
  81a684:	e13ffd15 	stw	r4,-12(fp)
  81a688:	e17ffe05 	stb	r5,-8(fp)
  int parm1 = 0, parm2 = 0;
  81a68c:	e03ffc15 	stw	zero,-16(fp)
  81a690:	e03ffb15 	stw	zero,-20(fp)

  if (sp->escape[0] == '[')
  81a694:	e0bffd17 	ldw	r2,-12(fp)
  81a698:	10800a03 	ldbu	r2,40(r2)
  81a69c:	10803fcc 	andi	r2,r2,255
  81a6a0:	1080201c 	xori	r2,r2,128
  81a6a4:	10bfe004 	addi	r2,r2,-128
  81a6a8:	108016d8 	cmpnei	r2,r2,91
  81a6ac:	1000491e 	bne	r2,zero,81a7d4 <lcd_handle_escape+0x160>
  {
    char * ptr = sp->escape+1;
  81a6b0:	e0bffd17 	ldw	r2,-12(fp)
  81a6b4:	10800a04 	addi	r2,r2,40
  81a6b8:	10800044 	addi	r2,r2,1
  81a6bc:	e0bffa15 	stw	r2,-24(fp)
    while (isdigit(*ptr))
  81a6c0:	00000d06 	br	81a6f8 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  81a6c4:	e0bffc17 	ldw	r2,-16(fp)
  81a6c8:	10c002a4 	muli	r3,r2,10
  81a6cc:	e0bffa17 	ldw	r2,-24(fp)
  81a6d0:	10800003 	ldbu	r2,0(r2)
  81a6d4:	10803fcc 	andi	r2,r2,255
  81a6d8:	1080201c 	xori	r2,r2,128
  81a6dc:	10bfe004 	addi	r2,r2,-128
  81a6e0:	1885883a 	add	r2,r3,r2
  81a6e4:	10bff404 	addi	r2,r2,-48
  81a6e8:	e0bffc15 	stw	r2,-16(fp)
  81a6ec:	e0bffa17 	ldw	r2,-24(fp)
  81a6f0:	10800044 	addi	r2,r2,1
  81a6f4:	e0bffa15 	stw	r2,-24(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  81a6f8:	e0bffa17 	ldw	r2,-24(fp)
  81a6fc:	10800003 	ldbu	r2,0(r2)
  81a700:	10803fcc 	andi	r2,r2,255
  81a704:	1080201c 	xori	r2,r2,128
  81a708:	10bfe004 	addi	r2,r2,-128
  81a70c:	1007883a 	mov	r3,r2
  81a710:	008020b4 	movhi	r2,130
  81a714:	10bb5804 	addi	r2,r2,-4768
  81a718:	10800017 	ldw	r2,0(r2)
  81a71c:	1885883a 	add	r2,r3,r2
  81a720:	10800003 	ldbu	r2,0(r2)
  81a724:	10803fcc 	andi	r2,r2,255
  81a728:	1080010c 	andi	r2,r2,4
  81a72c:	1004c03a 	cmpne	r2,r2,zero
  81a730:	103fe41e 	bne	r2,zero,81a6c4 <lcd_handle_escape+0x50>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  81a734:	e0bffa17 	ldw	r2,-24(fp)
  81a738:	10800003 	ldbu	r2,0(r2)
  81a73c:	10803fcc 	andi	r2,r2,255
  81a740:	1080201c 	xori	r2,r2,128
  81a744:	10bfe004 	addi	r2,r2,-128
  81a748:	10800ed8 	cmpnei	r2,r2,59
  81a74c:	1000231e 	bne	r2,zero,81a7dc <lcd_handle_escape+0x168>
    {
      ptr++;
  81a750:	e0bffa17 	ldw	r2,-24(fp)
  81a754:	10800044 	addi	r2,r2,1
  81a758:	e0bffa15 	stw	r2,-24(fp)
      while (isdigit(*ptr))
  81a75c:	00000d06 	br	81a794 <lcd_handle_escape+0x120>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  81a760:	e0bffb17 	ldw	r2,-20(fp)
  81a764:	10c002a4 	muli	r3,r2,10
  81a768:	e0bffa17 	ldw	r2,-24(fp)
  81a76c:	10800003 	ldbu	r2,0(r2)
  81a770:	10803fcc 	andi	r2,r2,255
  81a774:	1080201c 	xori	r2,r2,128
  81a778:	10bfe004 	addi	r2,r2,-128
  81a77c:	1885883a 	add	r2,r3,r2
  81a780:	10bff404 	addi	r2,r2,-48
  81a784:	e0bffb15 	stw	r2,-20(fp)
  81a788:	e0bffa17 	ldw	r2,-24(fp)
  81a78c:	10800044 	addi	r2,r2,1
  81a790:	e0bffa15 	stw	r2,-24(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  81a794:	e0bffa17 	ldw	r2,-24(fp)
  81a798:	10800003 	ldbu	r2,0(r2)
  81a79c:	10803fcc 	andi	r2,r2,255
  81a7a0:	1080201c 	xori	r2,r2,128
  81a7a4:	10bfe004 	addi	r2,r2,-128
  81a7a8:	1007883a 	mov	r3,r2
  81a7ac:	008020b4 	movhi	r2,130
  81a7b0:	10bb5804 	addi	r2,r2,-4768
  81a7b4:	10800017 	ldw	r2,0(r2)
  81a7b8:	1885883a 	add	r2,r3,r2
  81a7bc:	10800003 	ldbu	r2,0(r2)
  81a7c0:	10803fcc 	andi	r2,r2,255
  81a7c4:	1080010c 	andi	r2,r2,4
  81a7c8:	1004c03a 	cmpne	r2,r2,zero
  81a7cc:	103fe41e 	bne	r2,zero,81a760 <lcd_handle_escape+0xec>
  81a7d0:	00000206 	br	81a7dc <lcd_handle_escape+0x168>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  81a7d4:	00bfffc4 	movi	r2,-1
  81a7d8:	e0bffc15 	stw	r2,-16(fp)

  switch (c)
  81a7dc:	e0bffe07 	ldb	r2,-8(fp)
  81a7e0:	e0bfff15 	stw	r2,-4(fp)
  81a7e4:	e0ffff17 	ldw	r3,-4(fp)
  81a7e8:	188012a0 	cmpeqi	r2,r3,74
  81a7ec:	10002f1e 	bne	r2,zero,81a8ac <lcd_handle_escape+0x238>
  81a7f0:	e0ffff17 	ldw	r3,-4(fp)
  81a7f4:	188012c8 	cmpgei	r2,r3,75
  81a7f8:	1000041e 	bne	r2,zero,81a80c <lcd_handle_escape+0x198>
  81a7fc:	e0ffff17 	ldw	r3,-4(fp)
  81a800:	18801220 	cmpeqi	r2,r3,72
  81a804:	1000081e 	bne	r2,zero,81a828 <lcd_handle_escape+0x1b4>
  81a808:	00004906 	br	81a930 <lcd_handle_escape+0x2bc>
  81a80c:	e0ffff17 	ldw	r3,-4(fp)
  81a810:	188012e0 	cmpeqi	r2,r3,75
  81a814:	10002b1e 	bne	r2,zero,81a8c4 <lcd_handle_escape+0x250>
  81a818:	e0ffff17 	ldw	r3,-4(fp)
  81a81c:	188019a0 	cmpeqi	r2,r3,102
  81a820:	1000011e 	bne	r2,zero,81a828 <lcd_handle_escape+0x1b4>
  81a824:	00004206 	br	81a930 <lcd_handle_escape+0x2bc>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  81a828:	e0bffb17 	ldw	r2,-20(fp)
  81a82c:	10800050 	cmplti	r2,r2,1
  81a830:	1000051e 	bne	r2,zero,81a848 <lcd_handle_escape+0x1d4>
      sp->x = parm2 - 1;
  81a834:	e0bffb17 	ldw	r2,-20(fp)
  81a838:	10bfffc4 	addi	r2,r2,-1
  81a83c:	1007883a 	mov	r3,r2
  81a840:	e0bffd17 	ldw	r2,-12(fp)
  81a844:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  81a848:	e0bffc17 	ldw	r2,-16(fp)
  81a84c:	10800050 	cmplti	r2,r2,1
  81a850:	1000371e 	bne	r2,zero,81a930 <lcd_handle_escape+0x2bc>
    {
      sp->y = parm1 - 1;
  81a854:	e0bffc17 	ldw	r2,-16(fp)
  81a858:	10bfffc4 	addi	r2,r2,-1
  81a85c:	1007883a 	mov	r3,r2
  81a860:	e0bffd17 	ldw	r2,-12(fp)
  81a864:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  81a868:	e0bffd17 	ldw	r2,-12(fp)
  81a86c:	10800883 	ldbu	r2,34(r2)
  81a870:	10803fcc 	andi	r2,r2,255
  81a874:	10800170 	cmpltui	r2,r2,5
  81a878:	1000061e 	bne	r2,zero,81a894 <lcd_handle_escape+0x220>
        sp->y = ALT_LCD_HEIGHT * 2;
  81a87c:	e0fffd17 	ldw	r3,-12(fp)
  81a880:	00800104 	movi	r2,4
  81a884:	18800885 	stb	r2,34(r3)
      while (sp->y > ALT_LCD_HEIGHT)
  81a888:	00000206 	br	81a894 <lcd_handle_escape+0x220>
        lcd_scroll_up(sp);
  81a88c:	e13ffd17 	ldw	r4,-12(fp)
  81a890:	081a5ac0 	call	81a5ac <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  81a894:	e0bffd17 	ldw	r2,-12(fp)
  81a898:	10800883 	ldbu	r2,34(r2)
  81a89c:	10803fcc 	andi	r2,r2,255
  81a8a0:	108000e8 	cmpgeui	r2,r2,3
  81a8a4:	103ff91e 	bne	r2,zero,81a88c <lcd_handle_escape+0x218>
        lcd_scroll_up(sp);
    }
    break;
  81a8a8:	00002106 	br	81a930 <lcd_handle_escape+0x2bc>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  81a8ac:	e0bffc17 	ldw	r2,-16(fp)
  81a8b0:	10800098 	cmpnei	r2,r2,2
  81a8b4:	10001e1e 	bne	r2,zero,81a930 <lcd_handle_escape+0x2bc>
      lcd_clear_screen(sp);
  81a8b8:	e13ffd17 	ldw	r4,-12(fp)
  81a8bc:	081a2fc0 	call	81a2fc <lcd_clear_screen>
    break;
  81a8c0:	00001b06 	br	81a930 <lcd_handle_escape+0x2bc>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  81a8c4:	e0bffc17 	ldw	r2,-16(fp)
  81a8c8:	10800048 	cmpgei	r2,r2,1
  81a8cc:	1000181e 	bne	r2,zero,81a930 <lcd_handle_escape+0x2bc>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  81a8d0:	e0bffd17 	ldw	r2,-12(fp)
  81a8d4:	10800843 	ldbu	r2,33(r2)
  81a8d8:	10803fcc 	andi	r2,r2,255
  81a8dc:	10801428 	cmpgeui	r2,r2,80
  81a8e0:	1000131e 	bne	r2,zero,81a930 <lcd_handle_escape+0x2bc>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  81a8e4:	e0bffd17 	ldw	r2,-12(fp)
  81a8e8:	10800883 	ldbu	r2,34(r2)
  81a8ec:	10803fcc 	andi	r2,r2,255
  81a8f0:	108018e4 	muli	r2,r2,99
  81a8f4:	10c01004 	addi	r3,r2,64
  81a8f8:	e0bffd17 	ldw	r2,-12(fp)
  81a8fc:	1887883a 	add	r3,r3,r2
  81a900:	e0bffd17 	ldw	r2,-12(fp)
  81a904:	10800843 	ldbu	r2,33(r2)
  81a908:	10803fcc 	andi	r2,r2,255
  81a90c:	1889883a 	add	r4,r3,r2
  81a910:	e0bffd17 	ldw	r2,-12(fp)
  81a914:	10800843 	ldbu	r2,33(r2)
  81a918:	10c03fcc 	andi	r3,r2,255
  81a91c:	00801404 	movi	r2,80
  81a920:	10c5c83a 	sub	r2,r2,r3
  81a924:	100d883a 	mov	r6,r2
  81a928:	01400804 	movi	r5,32
  81a92c:	080d4e00 	call	80d4e0 <memset>
    }
    break;
  }
}
  81a930:	e037883a 	mov	sp,fp
  81a934:	dfc00117 	ldw	ra,4(sp)
  81a938:	df000017 	ldw	fp,0(sp)
  81a93c:	dec00204 	addi	sp,sp,8
  81a940:	f800283a 	ret

0081a944 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  81a944:	deffef04 	addi	sp,sp,-68
  81a948:	dfc01015 	stw	ra,64(sp)
  81a94c:	df000f15 	stw	fp,60(sp)
  81a950:	dc000e15 	stw	r16,56(sp)
  81a954:	df000e04 	addi	fp,sp,56
  81a958:	e13ffc15 	stw	r4,-16(fp)
  81a95c:	e17ffd15 	stw	r5,-12(fp)
  81a960:	e1bffe15 	stw	r6,-8(fp)
  81a964:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  81a968:	e0bffe17 	ldw	r2,-8(fp)
  81a96c:	1007883a 	mov	r3,r2
  81a970:	e0bffd17 	ldw	r2,-12(fp)
  81a974:	10c5883a 	add	r2,r2,r3
  81a978:	e0bffa15 	stw	r2,-24(fp)

  /* When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */

  ALT_SEM_PEND (sp->write_lock, 0);
  81a97c:	e0bffc17 	ldw	r2,-16(fp)
  81a980:	10803e17 	ldw	r2,248(r2)
  81a984:	e0bff215 	stw	r2,-56(fp)
  81a988:	e03ff30d 	sth	zero,-52(fp)
  81a98c:	e17ff30b 	ldhu	r5,-52(fp)
  81a990:	e1bffb04 	addi	r6,fp,-20
  81a994:	e13ff217 	ldw	r4,-56(fp)
  81a998:	0816b280 	call	816b28 <OSSemPend>

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  81a99c:	e0fffc17 	ldw	r3,-16(fp)
  81a9a0:	00800044 	movi	r2,1
  81a9a4:	188009c5 	stb	r2,39(r3)

  for ( ; ptr < end ; ptr++)
  81a9a8:	0000a206 	br	81ac34 <altera_avalon_lcd_16207_write+0x2f0>
  {
    char c = *ptr;
  81a9ac:	e0bffd17 	ldw	r2,-12(fp)
  81a9b0:	10800003 	ldbu	r2,0(r2)
  81a9b4:	e0bff705 	stb	r2,-36(fp)

    if (sp->esccount >= 0)
  81a9b8:	e0bffc17 	ldw	r2,-16(fp)
  81a9bc:	10800903 	ldbu	r2,36(r2)
  81a9c0:	10803fcc 	andi	r2,r2,255
  81a9c4:	1080201c 	xori	r2,r2,128
  81a9c8:	10bfe004 	addi	r2,r2,-128
  81a9cc:	1004803a 	cmplt	r2,r2,zero
  81a9d0:	10003b1e 	bne	r2,zero,81aac0 <altera_avalon_lcd_16207_write+0x17c>
    {
      unsigned int esccount = sp->esccount;
  81a9d4:	e0bffc17 	ldw	r2,-16(fp)
  81a9d8:	10800903 	ldbu	r2,36(r2)
  81a9dc:	10803fcc 	andi	r2,r2,255
  81a9e0:	1080201c 	xori	r2,r2,128
  81a9e4:	10bfe004 	addi	r2,r2,-128
  81a9e8:	e0bff615 	stw	r2,-40(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  81a9ec:	e0bff617 	ldw	r2,-40(fp)
  81a9f0:	1004c03a 	cmpne	r2,r2,zero
  81a9f4:	1000031e 	bne	r2,zero,81aa04 <altera_avalon_lcd_16207_write+0xc0>
  81a9f8:	e0bff707 	ldb	r2,-36(fp)
  81a9fc:	108016d8 	cmpnei	r2,r2,91
  81aa00:	1000111e 	bne	r2,zero,81aa48 <altera_avalon_lcd_16207_write+0x104>
  81aa04:	e0bff617 	ldw	r2,-40(fp)
  81aa08:	1005003a 	cmpeq	r2,r2,zero
  81aa0c:	10001a1e 	bne	r2,zero,81aa78 <altera_avalon_lcd_16207_write+0x134>
  81aa10:	e0bff707 	ldb	r2,-36(fp)
  81aa14:	1007883a 	mov	r3,r2
  81aa18:	008020b4 	movhi	r2,130
  81aa1c:	10bb5804 	addi	r2,r2,-4768
  81aa20:	10800017 	ldw	r2,0(r2)
  81aa24:	1885883a 	add	r2,r3,r2
  81aa28:	10800003 	ldbu	r2,0(r2)
  81aa2c:	10803fcc 	andi	r2,r2,255
  81aa30:	1080010c 	andi	r2,r2,4
  81aa34:	1004c03a 	cmpne	r2,r2,zero
  81aa38:	10000f1e 	bne	r2,zero,81aa78 <altera_avalon_lcd_16207_write+0x134>
  81aa3c:	e0bff707 	ldb	r2,-36(fp)
  81aa40:	10800ee0 	cmpeqi	r2,r2,59
  81aa44:	10000c1e 	bne	r2,zero,81aa78 <altera_avalon_lcd_16207_write+0x134>
          (esccount > 0 && !isdigit(c) && c != ';'))
      {
        sp->escape[esccount] = 0;
  81aa48:	e0fff617 	ldw	r3,-40(fp)
  81aa4c:	e0bffc17 	ldw	r2,-16(fp)
  81aa50:	1885883a 	add	r2,r3,r2
  81aa54:	10800a04 	addi	r2,r2,40
  81aa58:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  81aa5c:	e17ff707 	ldb	r5,-36(fp)
  81aa60:	e13ffc17 	ldw	r4,-16(fp)
  81aa64:	081a6740 	call	81a674 <lcd_handle_escape>

        sp->esccount = -1;
  81aa68:	e0fffc17 	ldw	r3,-16(fp)
  81aa6c:	00bfffc4 	movi	r2,-1
  81aa70:	18800905 	stb	r2,36(r3)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  81aa74:	00006c06 	br	81ac28 <altera_avalon_lcd_16207_write+0x2e4>

        lcd_handle_escape(sp, c);

        sp->esccount = -1;
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  81aa78:	e0bffc17 	ldw	r2,-16(fp)
  81aa7c:	10800903 	ldbu	r2,36(r2)
  81aa80:	10803fcc 	andi	r2,r2,255
  81aa84:	108001e8 	cmpgeui	r2,r2,7
  81aa88:	1000671e 	bne	r2,zero,81ac28 <altera_avalon_lcd_16207_write+0x2e4>
      {
        sp->escape[esccount] = c;
  81aa8c:	e0fff617 	ldw	r3,-40(fp)
  81aa90:	e0bffc17 	ldw	r2,-16(fp)
  81aa94:	1885883a 	add	r2,r3,r2
  81aa98:	10c00a04 	addi	r3,r2,40
  81aa9c:	e0bff703 	ldbu	r2,-36(fp)
  81aaa0:	18800005 	stb	r2,0(r3)
        sp->esccount++;
  81aaa4:	e0bffc17 	ldw	r2,-16(fp)
  81aaa8:	10800903 	ldbu	r2,36(r2)
  81aaac:	10800044 	addi	r2,r2,1
  81aab0:	1007883a 	mov	r3,r2
  81aab4:	e0bffc17 	ldw	r2,-16(fp)
  81aab8:	10c00905 	stb	r3,36(r2)
  81aabc:	00005a06 	br	81ac28 <altera_avalon_lcd_16207_write+0x2e4>
      }
    }
    else if (c == 27) /* ESC */
  81aac0:	e0bff707 	ldb	r2,-36(fp)
  81aac4:	108006d8 	cmpnei	r2,r2,27
  81aac8:	1000031e 	bne	r2,zero,81aad8 <altera_avalon_lcd_16207_write+0x194>
    {
      sp->esccount = 0;
  81aacc:	e0bffc17 	ldw	r2,-16(fp)
  81aad0:	10000905 	stb	zero,36(r2)
  81aad4:	00005406 	br	81ac28 <altera_avalon_lcd_16207_write+0x2e4>
    }
    else if (c == '\r')
  81aad8:	e0bff707 	ldb	r2,-36(fp)
  81aadc:	10800358 	cmpnei	r2,r2,13
  81aae0:	1000031e 	bne	r2,zero,81aaf0 <altera_avalon_lcd_16207_write+0x1ac>
    {
      sp->x = 0;
  81aae4:	e0bffc17 	ldw	r2,-16(fp)
  81aae8:	10000845 	stb	zero,33(r2)
  81aaec:	00004e06 	br	81ac28 <altera_avalon_lcd_16207_write+0x2e4>
    }
    else if (c == '\n')
  81aaf0:	e0bff707 	ldb	r2,-36(fp)
  81aaf4:	10800298 	cmpnei	r2,r2,10
  81aaf8:	1000101e 	bne	r2,zero,81ab3c <altera_avalon_lcd_16207_write+0x1f8>
    {
      sp->x = 0;
  81aafc:	e0bffc17 	ldw	r2,-16(fp)
  81ab00:	10000845 	stb	zero,33(r2)
      sp->y++;
  81ab04:	e0bffc17 	ldw	r2,-16(fp)
  81ab08:	10800883 	ldbu	r2,34(r2)
  81ab0c:	10800044 	addi	r2,r2,1
  81ab10:	1007883a 	mov	r3,r2
  81ab14:	e0bffc17 	ldw	r2,-16(fp)
  81ab18:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  81ab1c:	e0bffc17 	ldw	r2,-16(fp)
  81ab20:	10800883 	ldbu	r2,34(r2)
  81ab24:	10803fcc 	andi	r2,r2,255
  81ab28:	108000f0 	cmpltui	r2,r2,3
  81ab2c:	10003e1e 	bne	r2,zero,81ac28 <altera_avalon_lcd_16207_write+0x2e4>
        lcd_scroll_up(sp);
  81ab30:	e13ffc17 	ldw	r4,-16(fp)
  81ab34:	081a5ac0 	call	81a5ac <lcd_scroll_up>
  81ab38:	00003b06 	br	81ac28 <altera_avalon_lcd_16207_write+0x2e4>
    }
    else if (c == '\b')
  81ab3c:	e0bff707 	ldb	r2,-36(fp)
  81ab40:	10800218 	cmpnei	r2,r2,8
  81ab44:	10000c1e 	bne	r2,zero,81ab78 <altera_avalon_lcd_16207_write+0x234>
    {
      if (sp->x > 0)
  81ab48:	e0bffc17 	ldw	r2,-16(fp)
  81ab4c:	10800843 	ldbu	r2,33(r2)
  81ab50:	10803fcc 	andi	r2,r2,255
  81ab54:	1005003a 	cmpeq	r2,r2,zero
  81ab58:	1000331e 	bne	r2,zero,81ac28 <altera_avalon_lcd_16207_write+0x2e4>
        sp->x--;
  81ab5c:	e0bffc17 	ldw	r2,-16(fp)
  81ab60:	10800843 	ldbu	r2,33(r2)
  81ab64:	10bfffc4 	addi	r2,r2,-1
  81ab68:	1007883a 	mov	r3,r2
  81ab6c:	e0bffc17 	ldw	r2,-16(fp)
  81ab70:	10c00845 	stb	r3,33(r2)
  81ab74:	00002c06 	br	81ac28 <altera_avalon_lcd_16207_write+0x2e4>
    }
    else if (isprint(c))
  81ab78:	e0bff707 	ldb	r2,-36(fp)
  81ab7c:	1007883a 	mov	r3,r2
  81ab80:	008020b4 	movhi	r2,130
  81ab84:	10bb5804 	addi	r2,r2,-4768
  81ab88:	10800017 	ldw	r2,0(r2)
  81ab8c:	1885883a 	add	r2,r3,r2
  81ab90:	10800003 	ldbu	r2,0(r2)
  81ab94:	10803fcc 	andi	r2,r2,255
  81ab98:	1080201c 	xori	r2,r2,128
  81ab9c:	10bfe004 	addi	r2,r2,-128
  81aba0:	108025cc 	andi	r2,r2,151
  81aba4:	1005003a 	cmpeq	r2,r2,zero
  81aba8:	10001f1e 	bne	r2,zero,81ac28 <altera_avalon_lcd_16207_write+0x2e4>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  81abac:	e0bffc17 	ldw	r2,-16(fp)
  81abb0:	10800883 	ldbu	r2,34(r2)
  81abb4:	10803fcc 	andi	r2,r2,255
  81abb8:	108000b0 	cmpltui	r2,r2,2
  81abbc:	1000021e 	bne	r2,zero,81abc8 <altera_avalon_lcd_16207_write+0x284>
        lcd_scroll_up(sp);
  81abc0:	e13ffc17 	ldw	r4,-16(fp)
  81abc4:	081a5ac0 	call	81a5ac <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  81abc8:	e0bffc17 	ldw	r2,-16(fp)
  81abcc:	10800843 	ldbu	r2,33(r2)
  81abd0:	10803fcc 	andi	r2,r2,255
  81abd4:	10801428 	cmpgeui	r2,r2,80
  81abd8:	10000d1e 	bne	r2,zero,81ac10 <altera_avalon_lcd_16207_write+0x2cc>
        sp->line[sp->y].data[sp->x] = c;
  81abdc:	e0bffc17 	ldw	r2,-16(fp)
  81abe0:	10800883 	ldbu	r2,34(r2)
  81abe4:	11003fcc 	andi	r4,r2,255
  81abe8:	e0bffc17 	ldw	r2,-16(fp)
  81abec:	10800843 	ldbu	r2,33(r2)
  81abf0:	11403fcc 	andi	r5,r2,255
  81abf4:	e0fffc17 	ldw	r3,-16(fp)
  81abf8:	208018e4 	muli	r2,r4,99
  81abfc:	10c5883a 	add	r2,r2,r3
  81ac00:	1145883a 	add	r2,r2,r5
  81ac04:	10c01004 	addi	r3,r2,64
  81ac08:	e0bff703 	ldbu	r2,-36(fp)
  81ac0c:	18800005 	stb	r2,0(r3)

      sp->x++;
  81ac10:	e0bffc17 	ldw	r2,-16(fp)
  81ac14:	10800843 	ldbu	r2,33(r2)
  81ac18:	10800044 	addi	r2,r2,1
  81ac1c:	1007883a 	mov	r3,r2
  81ac20:	e0bffc17 	ldw	r2,-16(fp)
  81ac24:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  81ac28:	e0bffd17 	ldw	r2,-12(fp)
  81ac2c:	10800044 	addi	r2,r2,1
  81ac30:	e0bffd15 	stw	r2,-12(fp)
  81ac34:	e0fffd17 	ldw	r3,-12(fp)
  81ac38:	e0bffa17 	ldw	r2,-24(fp)
  81ac3c:	18bf5b36 	bltu	r3,r2,81a9ac <altera_avalon_lcd_16207_write+0x68>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  81ac40:	00800404 	movi	r2,16
  81ac44:	e0bff815 	stw	r2,-32(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81ac48:	e03ff915 	stw	zero,-28(fp)
  81ac4c:	00003606 	br	81ad28 <altera_avalon_lcd_16207_write+0x3e4>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  81ac50:	00801404 	movi	r2,80
  81ac54:	e0bff515 	stw	r2,-44(fp)
  81ac58:	00001106 	br	81aca0 <altera_avalon_lcd_16207_write+0x35c>
      if (sp->line[y].data[width-1] != ' ')
  81ac5c:	e13ff917 	ldw	r4,-28(fp)
  81ac60:	e0bff517 	ldw	r2,-44(fp)
  81ac64:	117fffc4 	addi	r5,r2,-1
  81ac68:	e0fffc17 	ldw	r3,-16(fp)
  81ac6c:	208018e4 	muli	r2,r4,99
  81ac70:	10c5883a 	add	r2,r2,r3
  81ac74:	1145883a 	add	r2,r2,r5
  81ac78:	10801004 	addi	r2,r2,64
  81ac7c:	10800003 	ldbu	r2,0(r2)
  81ac80:	10803fcc 	andi	r2,r2,255
  81ac84:	1080201c 	xori	r2,r2,128
  81ac88:	10bfe004 	addi	r2,r2,-128
  81ac8c:	10800818 	cmpnei	r2,r2,32
  81ac90:	1000061e 	bne	r2,zero,81acac <altera_avalon_lcd_16207_write+0x368>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  81ac94:	e0bff517 	ldw	r2,-44(fp)
  81ac98:	10bfffc4 	addi	r2,r2,-1
  81ac9c:	e0bff515 	stw	r2,-44(fp)
  81aca0:	e0bff517 	ldw	r2,-44(fp)
  81aca4:	10800048 	cmpgei	r2,r2,1
  81aca8:	103fec1e 	bne	r2,zero,81ac5c <altera_avalon_lcd_16207_write+0x318>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  81acac:	e0bff517 	ldw	r2,-44(fp)
  81acb0:	10800448 	cmpgei	r2,r2,17
  81acb4:	1000031e 	bne	r2,zero,81acc4 <altera_avalon_lcd_16207_write+0x380>
      width = ALT_LCD_WIDTH;
  81acb8:	00800404 	movi	r2,16
  81acbc:	e0bff515 	stw	r2,-44(fp)
  81acc0:	00000306 	br	81acd0 <altera_avalon_lcd_16207_write+0x38c>
    else
      width++;
  81acc4:	e0bff517 	ldw	r2,-44(fp)
  81acc8:	10800044 	addi	r2,r2,1
  81accc:	e0bff515 	stw	r2,-44(fp)

    sp->line[y].width = width;
  81acd0:	e13ff917 	ldw	r4,-28(fp)
  81acd4:	e0bff517 	ldw	r2,-44(fp)
  81acd8:	100b883a 	mov	r5,r2
  81acdc:	e0fffc17 	ldw	r3,-16(fp)
  81ace0:	208018e4 	muli	r2,r4,99
  81ace4:	10c5883a 	add	r2,r2,r3
  81ace8:	10802404 	addi	r2,r2,144
  81acec:	11400045 	stb	r5,1(r2)
    if (widthmax < width)
  81acf0:	e0fff817 	ldw	r3,-32(fp)
  81acf4:	e0bff517 	ldw	r2,-44(fp)
  81acf8:	1880020e 	bge	r3,r2,81ad04 <altera_avalon_lcd_16207_write+0x3c0>
      widthmax = width;
  81acfc:	e0bff517 	ldw	r2,-44(fp)
  81ad00:	e0bff815 	stw	r2,-32(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  81ad04:	e0bff917 	ldw	r2,-28(fp)
  81ad08:	e0fffc17 	ldw	r3,-16(fp)
  81ad0c:	108018e4 	muli	r2,r2,99
  81ad10:	10c5883a 	add	r2,r2,r3
  81ad14:	10802404 	addi	r2,r2,144
  81ad18:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81ad1c:	e0bff917 	ldw	r2,-28(fp)
  81ad20:	10800044 	addi	r2,r2,1
  81ad24:	e0bff915 	stw	r2,-28(fp)
  81ad28:	e0bff917 	ldw	r2,-28(fp)
  81ad2c:	10800090 	cmplti	r2,r2,2
  81ad30:	103fc71e 	bne	r2,zero,81ac50 <altera_avalon_lcd_16207_write+0x30c>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  81ad34:	e0bff817 	ldw	r2,-32(fp)
  81ad38:	10800448 	cmpgei	r2,r2,17
  81ad3c:	1000031e 	bne	r2,zero,81ad4c <altera_avalon_lcd_16207_write+0x408>
    sp->scrollmax = 0;
  81ad40:	e0bffc17 	ldw	r2,-16(fp)
  81ad44:	10000985 	stb	zero,38(r2)
  81ad48:	00002d06 	br	81ae00 <altera_avalon_lcd_16207_write+0x4bc>
  else
  {
    widthmax *= 2;
  81ad4c:	e0bff817 	ldw	r2,-32(fp)
  81ad50:	1085883a 	add	r2,r2,r2
  81ad54:	e0bff815 	stw	r2,-32(fp)
    sp->scrollmax = widthmax;
  81ad58:	e0bff817 	ldw	r2,-32(fp)
  81ad5c:	1007883a 	mov	r3,r2
  81ad60:	e0bffc17 	ldw	r2,-16(fp)
  81ad64:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81ad68:	e03ff915 	stw	zero,-28(fp)
  81ad6c:	00002106 	br	81adf4 <altera_avalon_lcd_16207_write+0x4b0>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  81ad70:	e0bff917 	ldw	r2,-28(fp)
  81ad74:	e0fffc17 	ldw	r3,-16(fp)
  81ad78:	108018e4 	muli	r2,r2,99
  81ad7c:	10c5883a 	add	r2,r2,r3
  81ad80:	10802404 	addi	r2,r2,144
  81ad84:	10800043 	ldbu	r2,1(r2)
  81ad88:	10803fcc 	andi	r2,r2,255
  81ad8c:	1080201c 	xori	r2,r2,128
  81ad90:	10bfe004 	addi	r2,r2,-128
  81ad94:	10800450 	cmplti	r2,r2,17
  81ad98:	1000131e 	bne	r2,zero,81ade8 <altera_avalon_lcd_16207_write+0x4a4>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  81ad9c:	e43ff917 	ldw	r16,-28(fp)
  81ada0:	e0bff917 	ldw	r2,-28(fp)
  81ada4:	e0fffc17 	ldw	r3,-16(fp)
  81ada8:	108018e4 	muli	r2,r2,99
  81adac:	10c5883a 	add	r2,r2,r3
  81adb0:	10802404 	addi	r2,r2,144
  81adb4:	10800043 	ldbu	r2,1(r2)
  81adb8:	10803fcc 	andi	r2,r2,255
  81adbc:	1080201c 	xori	r2,r2,128
  81adc0:	10bfe004 	addi	r2,r2,-128
  81adc4:	1008923a 	slli	r4,r2,8
  81adc8:	e17ff817 	ldw	r5,-32(fp)
  81adcc:	08073980 	call	807398 <__divsi3>
  81add0:	1009883a 	mov	r4,r2
  81add4:	e0fffc17 	ldw	r3,-16(fp)
  81add8:	808018e4 	muli	r2,r16,99
  81addc:	10c5883a 	add	r2,r2,r3
  81ade0:	10802404 	addi	r2,r2,144
  81ade4:	11000085 	stb	r4,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81ade8:	e0bff917 	ldw	r2,-28(fp)
  81adec:	10800044 	addi	r2,r2,1
  81adf0:	e0bff915 	stw	r2,-28(fp)
  81adf4:	e0bff917 	ldw	r2,-28(fp)
  81adf8:	10800090 	cmplti	r2,r2,2
  81adfc:	103fdc1e 	bne	r2,zero,81ad70 <altera_avalon_lcd_16207_write+0x42c>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  81ae00:	e0bffc17 	ldw	r2,-16(fp)
  81ae04:	10800943 	ldbu	r2,37(r2)
  81ae08:	10803fcc 	andi	r2,r2,255
  81ae0c:	1080201c 	xori	r2,r2,128
  81ae10:	10bfe004 	addi	r2,r2,-128
  81ae14:	e0bff415 	stw	r2,-48(fp)

    lcd_repaint_screen(sp);
  81ae18:	e13ffc17 	ldw	r4,-16(fp)
  81ae1c:	081a3c00 	call	81a3c0 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  81ae20:	e0bffc17 	ldw	r2,-16(fp)
  81ae24:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  81ae28:	e0bffc17 	ldw	r2,-16(fp)
  81ae2c:	10800943 	ldbu	r2,37(r2)
  81ae30:	10c03fcc 	andi	r3,r2,255
  81ae34:	18c0201c 	xori	r3,r3,128
  81ae38:	18ffe004 	addi	r3,r3,-128
  81ae3c:	e0bff417 	ldw	r2,-48(fp)
  81ae40:	18800426 	beq	r3,r2,81ae54 <altera_avalon_lcd_16207_write+0x510>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  81ae44:	e0fffc17 	ldw	r3,-16(fp)
  81ae48:	00800044 	movi	r2,1
  81ae4c:	188009c5 	stb	r2,39(r3)
  }
  81ae50:	003feb06 	br	81ae00 <altera_avalon_lcd_16207_write+0x4bc>

  /* Now that access to the display is complete, release the write
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);
  81ae54:	e0bffc17 	ldw	r2,-16(fp)
  81ae58:	11003e17 	ldw	r4,248(r2)
  81ae5c:	0816f200 	call	816f20 <OSSemPost>

  return len;
  81ae60:	e0bffe17 	ldw	r2,-8(fp)
}
  81ae64:	e037883a 	mov	sp,fp
  81ae68:	dfc00217 	ldw	ra,8(sp)
  81ae6c:	df000117 	ldw	fp,4(sp)
  81ae70:	dc000017 	ldw	r16,0(sp)
  81ae74:	dec00304 	addi	sp,sp,12
  81ae78:	f800283a 	ret

0081ae7c <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  81ae7c:	defffc04 	addi	sp,sp,-16
  81ae80:	dfc00315 	stw	ra,12(sp)
  81ae84:	df000215 	stw	fp,8(sp)
  81ae88:	df000204 	addi	fp,sp,8
  81ae8c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  81ae90:	e0bfff17 	ldw	r2,-4(fp)
  81ae94:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  81ae98:	e0bffe17 	ldw	r2,-8(fp)
  81ae9c:	10800943 	ldbu	r2,37(r2)
  81aea0:	10803fcc 	andi	r2,r2,255
  81aea4:	1080201c 	xori	r2,r2,128
  81aea8:	10bfe004 	addi	r2,r2,-128
  81aeac:	10c00044 	addi	r3,r2,1
  81aeb0:	e0bffe17 	ldw	r2,-8(fp)
  81aeb4:	10800983 	ldbu	r2,38(r2)
  81aeb8:	10803fcc 	andi	r2,r2,255
  81aebc:	1080201c 	xori	r2,r2,128
  81aec0:	10bfe004 	addi	r2,r2,-128
  81aec4:	18800316 	blt	r3,r2,81aed4 <alt_lcd_16207_timeout+0x58>
    sp->scrollpos = 0;
  81aec8:	e0bffe17 	ldw	r2,-8(fp)
  81aecc:	10000945 	stb	zero,37(r2)
  81aed0:	00000606 	br	81aeec <alt_lcd_16207_timeout+0x70>
  else
    sp->scrollpos = sp->scrollpos + 1;
  81aed4:	e0bffe17 	ldw	r2,-8(fp)
  81aed8:	10800943 	ldbu	r2,37(r2)
  81aedc:	10800044 	addi	r2,r2,1
  81aee0:	1007883a 	mov	r3,r2
  81aee4:	e0bffe17 	ldw	r2,-8(fp)
  81aee8:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  81aeec:	e0bffe17 	ldw	r2,-8(fp)
  81aef0:	10800983 	ldbu	r2,38(r2)
  81aef4:	10803fcc 	andi	r2,r2,255
  81aef8:	1080201c 	xori	r2,r2,128
  81aefc:	10bfe004 	addi	r2,r2,-128
  81af00:	10800050 	cmplti	r2,r2,1
  81af04:	1000091e 	bne	r2,zero,81af2c <alt_lcd_16207_timeout+0xb0>
  81af08:	e0bffe17 	ldw	r2,-8(fp)
  81af0c:	108009c3 	ldbu	r2,39(r2)
  81af10:	10803fcc 	andi	r2,r2,255
  81af14:	1080201c 	xori	r2,r2,128
  81af18:	10bfe004 	addi	r2,r2,-128
  81af1c:	1004c03a 	cmpne	r2,r2,zero
  81af20:	1000021e 	bne	r2,zero,81af2c <alt_lcd_16207_timeout+0xb0>
    lcd_repaint_screen(sp);
  81af24:	e13ffe17 	ldw	r4,-8(fp)
  81af28:	081a3c00 	call	81a3c0 <lcd_repaint_screen>

  return sp->period;
  81af2c:	e0bffe17 	ldw	r2,-8(fp)
  81af30:	10800717 	ldw	r2,28(r2)
}
  81af34:	e037883a 	mov	sp,fp
  81af38:	dfc00117 	ldw	ra,4(sp)
  81af3c:	df000017 	ldw	fp,0(sp)
  81af40:	dec00204 	addi	sp,sp,8
  81af44:	f800283a 	ret

0081af48 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  81af48:	defffa04 	addi	sp,sp,-24
  81af4c:	dfc00515 	stw	ra,20(sp)
  81af50:	df000415 	stw	fp,16(sp)
  81af54:	df000404 	addi	fp,sp,16
  81af58:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  81af5c:	e0bfff17 	ldw	r2,-4(fp)
  81af60:	10800017 	ldw	r2,0(r2)
  81af64:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  81af68:	e0bfff17 	ldw	r2,-4(fp)
  81af6c:	10000805 	stb	zero,32(r2)

  ALT_SEM_CREATE (&sp->write_lock, 1);
  81af70:	e0bfff17 	ldw	r2,-4(fp)
  81af74:	10803e04 	addi	r2,r2,248
  81af78:	e0bffc15 	stw	r2,-16(fp)
  81af7c:	00800044 	movi	r2,1
  81af80:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  81af84:	e13ffd0b 	ldhu	r4,-12(fp)
  81af88:	08167740 	call	816774 <OSSemCreate>
  81af8c:	1007883a 	mov	r3,r2
  81af90:	e0bffc17 	ldw	r2,-16(fp)
  81af94:	10c00015 	stw	r3,0(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  81af98:	010ea604 	movi	r4,15000
  81af9c:	0810a100 	call	810a10 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  81afa0:	e0bffe17 	ldw	r2,-8(fp)
  81afa4:	1007883a 	mov	r3,r2
  81afa8:	00800c04 	movi	r2,48
  81afac:	18800035 	stwio	r2,0(r3)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  81afb0:	01040104 	movi	r4,4100
  81afb4:	0810a100 	call	810a10 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  81afb8:	e0bffe17 	ldw	r2,-8(fp)
  81afbc:	1007883a 	mov	r3,r2
  81afc0:	00800c04 	movi	r2,48
  81afc4:	18800035 	stwio	r2,0(r3)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  81afc8:	0100fa04 	movi	r4,1000
  81afcc:	0810a100 	call	810a10 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  81afd0:	e0bffe17 	ldw	r2,-8(fp)
  81afd4:	1007883a 	mov	r3,r2
  81afd8:	00800c04 	movi	r2,48
  81afdc:	18800035 	stwio	r2,0(r3)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  81afe0:	e13fff17 	ldw	r4,-4(fp)
  81afe4:	01400e04 	movi	r5,56
  81afe8:	081a1700 	call	81a170 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  81afec:	e13fff17 	ldw	r4,-4(fp)
  81aff0:	01400204 	movi	r5,8
  81aff4:	081a1700 	call	81a170 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  81aff8:	e13fff17 	ldw	r4,-4(fp)
  81affc:	081a2fc0 	call	81a2fc <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  81b000:	e13fff17 	ldw	r4,-4(fp)
  81b004:	01400184 	movi	r5,6
  81b008:	081a1700 	call	81a170 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  81b00c:	e13fff17 	ldw	r4,-4(fp)
  81b010:	01400304 	movi	r5,12
  81b014:	081a1700 	call	81a170 <lcd_write_command>

  sp->esccount = -1;
  81b018:	e0ffff17 	ldw	r3,-4(fp)
  81b01c:	00bfffc4 	movi	r2,-1
  81b020:	18800905 	stb	r2,36(r3)
  memset(sp->escape, 0, sizeof(sp->escape));
  81b024:	e0bfff17 	ldw	r2,-4(fp)
  81b028:	11000a04 	addi	r4,r2,40
  81b02c:	000b883a 	mov	r5,zero
  81b030:	01800204 	movi	r6,8
  81b034:	080d4e00 	call	80d4e0 <memset>

  sp->scrollpos = 0;
  81b038:	e0bfff17 	ldw	r2,-4(fp)
  81b03c:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  81b040:	e0bfff17 	ldw	r2,-4(fp)
  81b044:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  81b048:	e0bfff17 	ldw	r2,-4(fp)
  81b04c:	100009c5 	stb	zero,39(r2)
  81b050:	008020b4 	movhi	r2,130
  81b054:	10829004 	addi	r2,r2,2624
  81b058:	10800017 	ldw	r2,0(r2)
  81b05c:	1009883a 	mov	r4,r2

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  81b060:	01400284 	movi	r5,10
  81b064:	08074580 	call	807458 <__udivsi3>
  81b068:	1007883a 	mov	r3,r2
  81b06c:	e0bfff17 	ldw	r2,-4(fp)
  81b070:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  81b074:	e0bfff17 	ldw	r2,-4(fp)
  81b078:	11000104 	addi	r4,r2,4
  81b07c:	e0bfff17 	ldw	r2,-4(fp)
  81b080:	10800717 	ldw	r2,28(r2)
  81b084:	100b883a 	mov	r5,r2
  81b088:	018020b4 	movhi	r6,130
  81b08c:	31ab9f04 	addi	r6,r6,-20868
  81b090:	e1ffff17 	ldw	r7,-4(fp)
  81b094:	081b2040 	call	81b204 <alt_alarm_start>
}
  81b098:	e037883a 	mov	sp,fp
  81b09c:	dfc00117 	ldw	ra,4(sp)
  81b0a0:	df000017 	ldw	fp,0(sp)
  81b0a4:	dec00204 	addi	sp,sp,8
  81b0a8:	f800283a 	ret

0081b0ac <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  81b0ac:	defffa04 	addi	sp,sp,-24
  81b0b0:	dfc00515 	stw	ra,20(sp)
  81b0b4:	df000415 	stw	fp,16(sp)
  81b0b8:	df000404 	addi	fp,sp,16
  81b0bc:	e13ffd15 	stw	r4,-12(fp)
  81b0c0:	e17ffe15 	stw	r5,-8(fp)
  81b0c4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  81b0c8:	e0bffd17 	ldw	r2,-12(fp)
  81b0cc:	10800017 	ldw	r2,0(r2)
  81b0d0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  81b0d4:	e0bffc17 	ldw	r2,-16(fp)
  81b0d8:	11000a04 	addi	r4,r2,40
  81b0dc:	e0bffd17 	ldw	r2,-12(fp)
  81b0e0:	11c00217 	ldw	r7,8(r2)
  81b0e4:	e17ffe17 	ldw	r5,-8(fp)
  81b0e8:	e1bfff17 	ldw	r6,-4(fp)
  81b0ec:	081a9440 	call	81a944 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  81b0f0:	e037883a 	mov	sp,fp
  81b0f4:	dfc00117 	ldw	ra,4(sp)
  81b0f8:	df000017 	ldw	fp,0(sp)
  81b0fc:	dec00204 	addi	sp,sp,8
  81b100:	f800283a 	ret

0081b104 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  81b104:	defffa04 	addi	sp,sp,-24
  81b108:	dfc00515 	stw	ra,20(sp)
  81b10c:	df000415 	stw	fp,16(sp)
  81b110:	df000404 	addi	fp,sp,16
  81b114:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  81b118:	e0bfff17 	ldw	r2,-4(fp)
  81b11c:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  81b120:	e0bfff17 	ldw	r2,-4(fp)
  81b124:	10800104 	addi	r2,r2,4
  81b128:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81b12c:	0005303a 	rdctl	r2,status
  81b130:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81b134:	e0fffd17 	ldw	r3,-12(fp)
  81b138:	00bfff84 	movi	r2,-2
  81b13c:	1884703a 	and	r2,r3,r2
  81b140:	1001703a 	wrctl	status,r2
  
  return context;
  81b144:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  81b148:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
  81b14c:	081bb8c0 	call	81bb8c <alt_tick>
  81b150:	e0bffe17 	ldw	r2,-8(fp)
  81b154:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81b158:	e0bffc17 	ldw	r2,-16(fp)
  81b15c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  81b160:	e037883a 	mov	sp,fp
  81b164:	dfc00117 	ldw	ra,4(sp)
  81b168:	df000017 	ldw	fp,0(sp)
  81b16c:	dec00204 	addi	sp,sp,8
  81b170:	f800283a 	ret

0081b174 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  81b174:	defff804 	addi	sp,sp,-32
  81b178:	dfc00715 	stw	ra,28(sp)
  81b17c:	df000615 	stw	fp,24(sp)
  81b180:	df000604 	addi	fp,sp,24
  81b184:	e13ffc15 	stw	r4,-16(fp)
  81b188:	e17ffd15 	stw	r5,-12(fp)
  81b18c:	e1bffe15 	stw	r6,-8(fp)
  81b190:	e1ffff15 	stw	r7,-4(fp)
  81b194:	e0bfff17 	ldw	r2,-4(fp)
  81b198:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  81b19c:	008020b4 	movhi	r2,130
  81b1a0:	10829004 	addi	r2,r2,2624
  81b1a4:	10800017 	ldw	r2,0(r2)
  81b1a8:	1004c03a 	cmpne	r2,r2,zero
  81b1ac:	1000041e 	bne	r2,zero,81b1c0 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  81b1b0:	00c020b4 	movhi	r3,130
  81b1b4:	18c29004 	addi	r3,r3,2624
  81b1b8:	e0bffb17 	ldw	r2,-20(fp)
  81b1bc:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  81b1c0:	e0bffc17 	ldw	r2,-16(fp)
  81b1c4:	10800104 	addi	r2,r2,4
  81b1c8:	1007883a 	mov	r3,r2
  81b1cc:	008001c4 	movi	r2,7
  81b1d0:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  81b1d4:	d8000015 	stw	zero,0(sp)
  81b1d8:	e13ffd17 	ldw	r4,-12(fp)
  81b1dc:	e17ffe17 	ldw	r5,-8(fp)
  81b1e0:	018020b4 	movhi	r6,130
  81b1e4:	31ac4104 	addi	r6,r6,-20220
  81b1e8:	e1fffc17 	ldw	r7,-16(fp)
  81b1ec:	08100840 	call	810084 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  81b1f0:	e037883a 	mov	sp,fp
  81b1f4:	dfc00117 	ldw	ra,4(sp)
  81b1f8:	df000017 	ldw	fp,0(sp)
  81b1fc:	dec00204 	addi	sp,sp,8
  81b200:	f800283a 	ret

0081b204 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  81b204:	defff404 	addi	sp,sp,-48
  81b208:	df000b15 	stw	fp,44(sp)
  81b20c:	df000b04 	addi	fp,sp,44
  81b210:	e13ffb15 	stw	r4,-20(fp)
  81b214:	e17ffc15 	stw	r5,-16(fp)
  81b218:	e1bffd15 	stw	r6,-12(fp)
  81b21c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  81b220:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  81b224:	008020b4 	movhi	r2,130
  81b228:	10829004 	addi	r2,r2,2624
  81b22c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  81b230:	1005003a 	cmpeq	r2,r2,zero
  81b234:	1000411e 	bne	r2,zero,81b33c <alt_alarm_start+0x138>
  {
    if (alarm)
  81b238:	e0bffb17 	ldw	r2,-20(fp)
  81b23c:	1005003a 	cmpeq	r2,r2,zero
  81b240:	10003b1e 	bne	r2,zero,81b330 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  81b244:	e0fffb17 	ldw	r3,-20(fp)
  81b248:	e0bffd17 	ldw	r2,-12(fp)
  81b24c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  81b250:	e0fffb17 	ldw	r3,-20(fp)
  81b254:	e0bffe17 	ldw	r2,-8(fp)
  81b258:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81b25c:	0005303a 	rdctl	r2,status
  81b260:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81b264:	e0fff817 	ldw	r3,-32(fp)
  81b268:	00bfff84 	movi	r2,-2
  81b26c:	1884703a 	and	r2,r3,r2
  81b270:	1001703a 	wrctl	status,r2
  
  return context;
  81b274:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  81b278:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  81b27c:	008020b4 	movhi	r2,130
  81b280:	10829104 	addi	r2,r2,2628
  81b284:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  81b288:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  81b28c:	e0fffc17 	ldw	r3,-16(fp)
  81b290:	e0bff917 	ldw	r2,-28(fp)
  81b294:	1885883a 	add	r2,r3,r2
  81b298:	10c00044 	addi	r3,r2,1
  81b29c:	e0bffb17 	ldw	r2,-20(fp)
  81b2a0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  81b2a4:	e0bffb17 	ldw	r2,-20(fp)
  81b2a8:	10c00217 	ldw	r3,8(r2)
  81b2ac:	e0bff917 	ldw	r2,-28(fp)
  81b2b0:	1880042e 	bgeu	r3,r2,81b2c4 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  81b2b4:	e0fffb17 	ldw	r3,-20(fp)
  81b2b8:	00800044 	movi	r2,1
  81b2bc:	18800405 	stb	r2,16(r3)
  81b2c0:	00000206 	br	81b2cc <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  81b2c4:	e0bffb17 	ldw	r2,-20(fp)
  81b2c8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  81b2cc:	e0fffb17 	ldw	r3,-20(fp)
  81b2d0:	008020b4 	movhi	r2,130
  81b2d4:	10bb5604 	addi	r2,r2,-4776
  81b2d8:	e0bff615 	stw	r2,-40(fp)
  81b2dc:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  81b2e0:	e0fff717 	ldw	r3,-36(fp)
  81b2e4:	e0bff617 	ldw	r2,-40(fp)
  81b2e8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  81b2ec:	e0bff617 	ldw	r2,-40(fp)
  81b2f0:	10c00017 	ldw	r3,0(r2)
  81b2f4:	e0bff717 	ldw	r2,-36(fp)
  81b2f8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  81b2fc:	e0bff617 	ldw	r2,-40(fp)
  81b300:	10c00017 	ldw	r3,0(r2)
  81b304:	e0bff717 	ldw	r2,-36(fp)
  81b308:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  81b30c:	e0fff617 	ldw	r3,-40(fp)
  81b310:	e0bff717 	ldw	r2,-36(fp)
  81b314:	18800015 	stw	r2,0(r3)
  81b318:	e0bffa17 	ldw	r2,-24(fp)
  81b31c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81b320:	e0bff517 	ldw	r2,-44(fp)
  81b324:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  81b328:	e03fff15 	stw	zero,-4(fp)
  81b32c:	00000506 	br	81b344 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  81b330:	00bffa84 	movi	r2,-22
  81b334:	e0bfff15 	stw	r2,-4(fp)
  81b338:	00000206 	br	81b344 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  81b33c:	00bfde84 	movi	r2,-134
  81b340:	e0bfff15 	stw	r2,-4(fp)
  81b344:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  81b348:	e037883a 	mov	sp,fp
  81b34c:	df000017 	ldw	fp,0(sp)
  81b350:	dec00104 	addi	sp,sp,4
  81b354:	f800283a 	ret

0081b358 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  81b358:	defffa04 	addi	sp,sp,-24
  81b35c:	dfc00515 	stw	ra,20(sp)
  81b360:	df000415 	stw	fp,16(sp)
  81b364:	df000404 	addi	fp,sp,16
  81b368:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  81b36c:	008000c4 	movi	r2,3
  81b370:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
  81b374:	e0fffc17 	ldw	r3,-16(fp)
  81b378:	008003f4 	movhi	r2,15
  81b37c:	10909004 	addi	r2,r2,16960
  81b380:	188b383a 	mul	r5,r3,r2
  81b384:	0100bef4 	movhi	r4,763
  81b388:	213c2004 	addi	r4,r4,-3968
  81b38c:	08074580 	call	807458 <__udivsi3>
  81b390:	100b883a 	mov	r5,r2
  81b394:	01200034 	movhi	r4,32768
  81b398:	213fffc4 	addi	r4,r4,-1
  81b39c:	08074580 	call	807458 <__udivsi3>
  81b3a0:	100b883a 	mov	r5,r2
  81b3a4:	e13fff17 	ldw	r4,-4(fp)
  81b3a8:	08074580 	call	807458 <__udivsi3>
  81b3ac:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  81b3b0:	e0bffd17 	ldw	r2,-12(fp)
  81b3b4:	1005003a 	cmpeq	r2,r2,zero
  81b3b8:	1000281e 	bne	r2,zero,81b45c <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
  81b3bc:	e03ffe15 	stw	zero,-8(fp)
  81b3c0:	00001606 	br	81b41c <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  81b3c4:	00a00034 	movhi	r2,32768
  81b3c8:	10bfffc4 	addi	r2,r2,-1
  81b3cc:	10bfffc4 	addi	r2,r2,-1
  81b3d0:	103ffe1e 	bne	r2,zero,81b3cc <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  81b3d4:	e0fffc17 	ldw	r3,-16(fp)
  81b3d8:	008003f4 	movhi	r2,15
  81b3dc:	10909004 	addi	r2,r2,16960
  81b3e0:	188b383a 	mul	r5,r3,r2
  81b3e4:	0100bef4 	movhi	r4,763
  81b3e8:	213c2004 	addi	r4,r4,-3968
  81b3ec:	08074580 	call	807458 <__udivsi3>
  81b3f0:	100b883a 	mov	r5,r2
  81b3f4:	01200034 	movhi	r4,32768
  81b3f8:	213fffc4 	addi	r4,r4,-1
  81b3fc:	08074580 	call	807458 <__udivsi3>
  81b400:	1007883a 	mov	r3,r2
  81b404:	e0bfff17 	ldw	r2,-4(fp)
  81b408:	10c5c83a 	sub	r2,r2,r3
  81b40c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  81b410:	e0bffe17 	ldw	r2,-8(fp)
  81b414:	10800044 	addi	r2,r2,1
  81b418:	e0bffe15 	stw	r2,-8(fp)
  81b41c:	e0fffe17 	ldw	r3,-8(fp)
  81b420:	e0bffd17 	ldw	r2,-12(fp)
  81b424:	18bfe716 	blt	r3,r2,81b3c4 <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  81b428:	e0fffc17 	ldw	r3,-16(fp)
  81b42c:	008003f4 	movhi	r2,15
  81b430:	10909004 	addi	r2,r2,16960
  81b434:	188b383a 	mul	r5,r3,r2
  81b438:	0100bef4 	movhi	r4,763
  81b43c:	213c2004 	addi	r4,r4,-3968
  81b440:	08074580 	call	807458 <__udivsi3>
  81b444:	1007883a 	mov	r3,r2
  81b448:	e0bfff17 	ldw	r2,-4(fp)
  81b44c:	1885383a 	mul	r2,r3,r2
  81b450:	10bfffc4 	addi	r2,r2,-1
  81b454:	103ffe1e 	bne	r2,zero,81b450 <alt_busy_sleep+0xf8>
  81b458:	00000c06 	br	81b48c <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  81b45c:	e0fffc17 	ldw	r3,-16(fp)
  81b460:	008003f4 	movhi	r2,15
  81b464:	10909004 	addi	r2,r2,16960
  81b468:	188b383a 	mul	r5,r3,r2
  81b46c:	0100bef4 	movhi	r4,763
  81b470:	213c2004 	addi	r4,r4,-3968
  81b474:	08074580 	call	807458 <__udivsi3>
  81b478:	1007883a 	mov	r3,r2
  81b47c:	e0bfff17 	ldw	r2,-4(fp)
  81b480:	1885383a 	mul	r2,r3,r2
  81b484:	10bfffc4 	addi	r2,r2,-1
  81b488:	00bffe16 	blt	zero,r2,81b484 <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  81b48c:	0005883a 	mov	r2,zero
}
  81b490:	e037883a 	mov	sp,fp
  81b494:	dfc00117 	ldw	ra,4(sp)
  81b498:	df000017 	ldw	fp,0(sp)
  81b49c:	dec00204 	addi	sp,sp,8
  81b4a0:	f800283a 	ret

0081b4a4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  81b4a4:	defffe04 	addi	sp,sp,-8
  81b4a8:	df000115 	stw	fp,4(sp)
  81b4ac:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  81b4b0:	e03fff15 	stw	zero,-4(fp)
  81b4b4:	00000506 	br	81b4cc <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  81b4b8:	e0bfff17 	ldw	r2,-4(fp)
  81b4bc:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  81b4c0:	e0bfff17 	ldw	r2,-4(fp)
  81b4c4:	10800104 	addi	r2,r2,4
  81b4c8:	e0bfff15 	stw	r2,-4(fp)
  81b4cc:	e0bfff17 	ldw	r2,-4(fp)
  81b4d0:	10820030 	cmpltui	r2,r2,2048
  81b4d4:	103ff81e 	bne	r2,zero,81b4b8 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  81b4d8:	e037883a 	mov	sp,fp
  81b4dc:	df000017 	ldw	fp,0(sp)
  81b4e0:	dec00104 	addi	sp,sp,4
  81b4e4:	f800283a 	ret

0081b4e8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  81b4e8:	defff904 	addi	sp,sp,-28
  81b4ec:	dfc00615 	stw	ra,24(sp)
  81b4f0:	df000515 	stw	fp,20(sp)
  81b4f4:	df000504 	addi	fp,sp,20
  81b4f8:	e13ffd15 	stw	r4,-12(fp)
  81b4fc:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  81b500:	e0bffd17 	ldw	r2,-12(fp)
  81b504:	1005003a 	cmpeq	r2,r2,zero
  81b508:	1000041e 	bne	r2,zero,81b51c <alt_dev_llist_insert+0x34>
  81b50c:	e0bffd17 	ldw	r2,-12(fp)
  81b510:	10800217 	ldw	r2,8(r2)
  81b514:	1004c03a 	cmpne	r2,r2,zero
  81b518:	1000071e 	bne	r2,zero,81b538 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  81b51c:	081b59c0 	call	81b59c <alt_get_errno>
  81b520:	1007883a 	mov	r3,r2
  81b524:	00800584 	movi	r2,22
  81b528:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  81b52c:	00bffa84 	movi	r2,-22
  81b530:	e0bfff15 	stw	r2,-4(fp)
  81b534:	00001306 	br	81b584 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  81b538:	e0fffd17 	ldw	r3,-12(fp)
  81b53c:	e0bffe17 	ldw	r2,-8(fp)
  81b540:	e0bffb15 	stw	r2,-20(fp)
  81b544:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  81b548:	e0fffc17 	ldw	r3,-16(fp)
  81b54c:	e0bffb17 	ldw	r2,-20(fp)
  81b550:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  81b554:	e0bffb17 	ldw	r2,-20(fp)
  81b558:	10c00017 	ldw	r3,0(r2)
  81b55c:	e0bffc17 	ldw	r2,-16(fp)
  81b560:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  81b564:	e0bffb17 	ldw	r2,-20(fp)
  81b568:	10c00017 	ldw	r3,0(r2)
  81b56c:	e0bffc17 	ldw	r2,-16(fp)
  81b570:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  81b574:	e0fffb17 	ldw	r3,-20(fp)
  81b578:	e0bffc17 	ldw	r2,-16(fp)
  81b57c:	18800015 	stw	r2,0(r3)

  return 0;  
  81b580:	e03fff15 	stw	zero,-4(fp)
  81b584:	e0bfff17 	ldw	r2,-4(fp)
}
  81b588:	e037883a 	mov	sp,fp
  81b58c:	dfc00117 	ldw	ra,4(sp)
  81b590:	df000017 	ldw	fp,0(sp)
  81b594:	dec00204 	addi	sp,sp,8
  81b598:	f800283a 	ret

0081b59c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81b59c:	defffd04 	addi	sp,sp,-12
  81b5a0:	dfc00215 	stw	ra,8(sp)
  81b5a4:	df000115 	stw	fp,4(sp)
  81b5a8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81b5ac:	008020b4 	movhi	r2,130
  81b5b0:	10bb3304 	addi	r2,r2,-4916
  81b5b4:	10800017 	ldw	r2,0(r2)
  81b5b8:	1005003a 	cmpeq	r2,r2,zero
  81b5bc:	1000061e 	bne	r2,zero,81b5d8 <alt_get_errno+0x3c>
  81b5c0:	008020b4 	movhi	r2,130
  81b5c4:	10bb3304 	addi	r2,r2,-4916
  81b5c8:	10800017 	ldw	r2,0(r2)
  81b5cc:	103ee83a 	callr	r2
  81b5d0:	e0bfff15 	stw	r2,-4(fp)
  81b5d4:	00000306 	br	81b5e4 <alt_get_errno+0x48>
  81b5d8:	008020b4 	movhi	r2,130
  81b5dc:	10826f04 	addi	r2,r2,2492
  81b5e0:	e0bfff15 	stw	r2,-4(fp)
  81b5e4:	e0bfff17 	ldw	r2,-4(fp)
}
  81b5e8:	e037883a 	mov	sp,fp
  81b5ec:	dfc00117 	ldw	ra,4(sp)
  81b5f0:	df000017 	ldw	fp,0(sp)
  81b5f4:	dec00204 	addi	sp,sp,8
  81b5f8:	f800283a 	ret

0081b5fc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  81b5fc:	defffd04 	addi	sp,sp,-12
  81b600:	dfc00215 	stw	ra,8(sp)
  81b604:	df000115 	stw	fp,4(sp)
  81b608:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  81b60c:	00bfff04 	movi	r2,-4
  81b610:	00c020b4 	movhi	r3,130
  81b614:	18f23d04 	addi	r3,r3,-14092
  81b618:	1885883a 	add	r2,r3,r2
  81b61c:	e0bfff15 	stw	r2,-4(fp)
  81b620:	00000606 	br	81b63c <_do_ctors+0x40>
        (*ctor) (); 
  81b624:	e0bfff17 	ldw	r2,-4(fp)
  81b628:	10800017 	ldw	r2,0(r2)
  81b62c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  81b630:	e0bfff17 	ldw	r2,-4(fp)
  81b634:	10bfff04 	addi	r2,r2,-4
  81b638:	e0bfff15 	stw	r2,-4(fp)
  81b63c:	e0ffff17 	ldw	r3,-4(fp)
  81b640:	008020b4 	movhi	r2,130
  81b644:	10b23c04 	addi	r2,r2,-14096
  81b648:	18bff62e 	bgeu	r3,r2,81b624 <_do_ctors+0x28>
        (*ctor) (); 
}
  81b64c:	e037883a 	mov	sp,fp
  81b650:	dfc00117 	ldw	ra,4(sp)
  81b654:	df000017 	ldw	fp,0(sp)
  81b658:	dec00204 	addi	sp,sp,8
  81b65c:	f800283a 	ret

0081b660 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  81b660:	defffd04 	addi	sp,sp,-12
  81b664:	dfc00215 	stw	ra,8(sp)
  81b668:	df000115 	stw	fp,4(sp)
  81b66c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  81b670:	00bfff04 	movi	r2,-4
  81b674:	00c020b4 	movhi	r3,130
  81b678:	18f23d04 	addi	r3,r3,-14092
  81b67c:	1885883a 	add	r2,r3,r2
  81b680:	e0bfff15 	stw	r2,-4(fp)
  81b684:	00000606 	br	81b6a0 <_do_dtors+0x40>
        (*dtor) (); 
  81b688:	e0bfff17 	ldw	r2,-4(fp)
  81b68c:	10800017 	ldw	r2,0(r2)
  81b690:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  81b694:	e0bfff17 	ldw	r2,-4(fp)
  81b698:	10bfff04 	addi	r2,r2,-4
  81b69c:	e0bfff15 	stw	r2,-4(fp)
  81b6a0:	e0ffff17 	ldw	r3,-4(fp)
  81b6a4:	008020b4 	movhi	r2,130
  81b6a8:	10b23d04 	addi	r2,r2,-14092
  81b6ac:	18bff62e 	bgeu	r3,r2,81b688 <_do_dtors+0x28>
        (*dtor) (); 
}
  81b6b0:	e037883a 	mov	sp,fp
  81b6b4:	dfc00117 	ldw	ra,4(sp)
  81b6b8:	df000017 	ldw	fp,0(sp)
  81b6bc:	dec00204 	addi	sp,sp,8
  81b6c0:	f800283a 	ret

0081b6c4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  81b6c4:	defffe04 	addi	sp,sp,-8
  81b6c8:	dfc00115 	stw	ra,4(sp)
  81b6cc:	df000015 	stw	fp,0(sp)
  81b6d0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  81b6d4:	0009883a 	mov	r4,zero
  81b6d8:	01440004 	movi	r5,4096
  81b6dc:	081c44c0 	call	81c44c <alt_icache_flush>
#endif
}
  81b6e0:	e037883a 	mov	sp,fp
  81b6e4:	dfc00117 	ldw	ra,4(sp)
  81b6e8:	df000017 	ldw	fp,0(sp)
  81b6ec:	dec00204 	addi	sp,sp,8
  81b6f0:	f800283a 	ret

0081b6f4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  81b6f4:	defff904 	addi	sp,sp,-28
  81b6f8:	dfc00615 	stw	ra,24(sp)
  81b6fc:	df000515 	stw	fp,20(sp)
  81b700:	df000504 	addi	fp,sp,20
  81b704:	e13ffc15 	stw	r4,-16(fp)
  81b708:	e17ffd15 	stw	r5,-12(fp)
  81b70c:	e1bffe15 	stw	r6,-8(fp)
  81b710:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  81b714:	e13ffd17 	ldw	r4,-12(fp)
  81b718:	e17ffe17 	ldw	r5,-8(fp)
  81b71c:	e1bfff17 	ldw	r6,-4(fp)
  81b720:	081b90c0 	call	81b90c <open>
  81b724:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  81b728:	e0bffb17 	ldw	r2,-20(fp)
  81b72c:	1004803a 	cmplt	r2,r2,zero
  81b730:	10001c1e 	bne	r2,zero,81b7a4 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  81b734:	e0bffb17 	ldw	r2,-20(fp)
  81b738:	00c020b4 	movhi	r3,130
  81b73c:	18f65f04 	addi	r3,r3,-9860
  81b740:	10800324 	muli	r2,r2,12
  81b744:	10c5883a 	add	r2,r2,r3
  81b748:	10c00017 	ldw	r3,0(r2)
  81b74c:	e0bffc17 	ldw	r2,-16(fp)
  81b750:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  81b754:	e0bffb17 	ldw	r2,-20(fp)
  81b758:	00c020b4 	movhi	r3,130
  81b75c:	18f65f04 	addi	r3,r3,-9860
  81b760:	10800324 	muli	r2,r2,12
  81b764:	10c5883a 	add	r2,r2,r3
  81b768:	10800104 	addi	r2,r2,4
  81b76c:	10c00017 	ldw	r3,0(r2)
  81b770:	e0bffc17 	ldw	r2,-16(fp)
  81b774:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  81b778:	e0bffb17 	ldw	r2,-20(fp)
  81b77c:	00c020b4 	movhi	r3,130
  81b780:	18f65f04 	addi	r3,r3,-9860
  81b784:	10800324 	muli	r2,r2,12
  81b788:	10c5883a 	add	r2,r2,r3
  81b78c:	10800204 	addi	r2,r2,8
  81b790:	10c00017 	ldw	r3,0(r2)
  81b794:	e0bffc17 	ldw	r2,-16(fp)
  81b798:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  81b79c:	e13ffb17 	ldw	r4,-20(fp)
  81b7a0:	08108f40 	call	8108f4 <alt_release_fd>
  }
} 
  81b7a4:	e037883a 	mov	sp,fp
  81b7a8:	dfc00117 	ldw	ra,4(sp)
  81b7ac:	df000017 	ldw	fp,0(sp)
  81b7b0:	dec00204 	addi	sp,sp,8
  81b7b4:	f800283a 	ret

0081b7b8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  81b7b8:	defffb04 	addi	sp,sp,-20
  81b7bc:	dfc00415 	stw	ra,16(sp)
  81b7c0:	df000315 	stw	fp,12(sp)
  81b7c4:	df000304 	addi	fp,sp,12
  81b7c8:	e13ffd15 	stw	r4,-12(fp)
  81b7cc:	e17ffe15 	stw	r5,-8(fp)
  81b7d0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  81b7d4:	010020b4 	movhi	r4,130
  81b7d8:	21366204 	addi	r4,r4,-9848
  81b7dc:	e17ffd17 	ldw	r5,-12(fp)
  81b7e0:	01800044 	movi	r6,1
  81b7e4:	01c07fc4 	movi	r7,511
  81b7e8:	081b6f40 	call	81b6f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  81b7ec:	010020b4 	movhi	r4,130
  81b7f0:	21365f04 	addi	r4,r4,-9860
  81b7f4:	e17ffe17 	ldw	r5,-8(fp)
  81b7f8:	000d883a 	mov	r6,zero
  81b7fc:	01c07fc4 	movi	r7,511
  81b800:	081b6f40 	call	81b6f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  81b804:	010020b4 	movhi	r4,130
  81b808:	21366504 	addi	r4,r4,-9836
  81b80c:	e17fff17 	ldw	r5,-4(fp)
  81b810:	01800044 	movi	r6,1
  81b814:	01c07fc4 	movi	r7,511
  81b818:	081b6f40 	call	81b6f4 <alt_open_fd>
}  
  81b81c:	e037883a 	mov	sp,fp
  81b820:	dfc00117 	ldw	ra,4(sp)
  81b824:	df000017 	ldw	fp,0(sp)
  81b828:	dec00204 	addi	sp,sp,8
  81b82c:	f800283a 	ret

0081b830 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  81b830:	defffc04 	addi	sp,sp,-16
  81b834:	df000315 	stw	fp,12(sp)
  81b838:	df000304 	addi	fp,sp,12
  81b83c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  81b840:	e0bffe17 	ldw	r2,-8(fp)
  81b844:	10800217 	ldw	r2,8(r2)
  81b848:	10d00034 	orhi	r3,r2,16384
  81b84c:	e0bffe17 	ldw	r2,-8(fp)
  81b850:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  81b854:	e03ffd15 	stw	zero,-12(fp)
  81b858:	00002006 	br	81b8dc <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  81b85c:	e0bffd17 	ldw	r2,-12(fp)
  81b860:	00c020b4 	movhi	r3,130
  81b864:	18f65f04 	addi	r3,r3,-9860
  81b868:	10800324 	muli	r2,r2,12
  81b86c:	10c5883a 	add	r2,r2,r3
  81b870:	10c00017 	ldw	r3,0(r2)
  81b874:	e0bffe17 	ldw	r2,-8(fp)
  81b878:	10800017 	ldw	r2,0(r2)
  81b87c:	1880141e 	bne	r3,r2,81b8d0 <alt_file_locked+0xa0>
  81b880:	e0bffd17 	ldw	r2,-12(fp)
  81b884:	00c020b4 	movhi	r3,130
  81b888:	18f65f04 	addi	r3,r3,-9860
  81b88c:	10800324 	muli	r2,r2,12
  81b890:	10c5883a 	add	r2,r2,r3
  81b894:	10800204 	addi	r2,r2,8
  81b898:	10800017 	ldw	r2,0(r2)
  81b89c:	1004403a 	cmpge	r2,r2,zero
  81b8a0:	10000b1e 	bne	r2,zero,81b8d0 <alt_file_locked+0xa0>
  81b8a4:	e0bffd17 	ldw	r2,-12(fp)
  81b8a8:	10800324 	muli	r2,r2,12
  81b8ac:	1007883a 	mov	r3,r2
  81b8b0:	008020b4 	movhi	r2,130
  81b8b4:	10b65f04 	addi	r2,r2,-9860
  81b8b8:	1887883a 	add	r3,r3,r2
  81b8bc:	e0bffe17 	ldw	r2,-8(fp)
  81b8c0:	18800326 	beq	r3,r2,81b8d0 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  81b8c4:	00bffcc4 	movi	r2,-13
  81b8c8:	e0bfff15 	stw	r2,-4(fp)
  81b8cc:	00000a06 	br	81b8f8 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  81b8d0:	e0bffd17 	ldw	r2,-12(fp)
  81b8d4:	10800044 	addi	r2,r2,1
  81b8d8:	e0bffd15 	stw	r2,-12(fp)
  81b8dc:	008020b4 	movhi	r2,130
  81b8e0:	10bb3204 	addi	r2,r2,-4920
  81b8e4:	10800017 	ldw	r2,0(r2)
  81b8e8:	1007883a 	mov	r3,r2
  81b8ec:	e0bffd17 	ldw	r2,-12(fp)
  81b8f0:	18bfda2e 	bgeu	r3,r2,81b85c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  81b8f4:	e03fff15 	stw	zero,-4(fp)
  81b8f8:	e0bfff17 	ldw	r2,-4(fp)
}
  81b8fc:	e037883a 	mov	sp,fp
  81b900:	df000017 	ldw	fp,0(sp)
  81b904:	dec00104 	addi	sp,sp,4
  81b908:	f800283a 	ret

0081b90c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  81b90c:	defff404 	addi	sp,sp,-48
  81b910:	dfc00b15 	stw	ra,44(sp)
  81b914:	df000a15 	stw	fp,40(sp)
  81b918:	df000a04 	addi	fp,sp,40
  81b91c:	e13ffb15 	stw	r4,-20(fp)
  81b920:	e17ffc15 	stw	r5,-16(fp)
  81b924:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  81b928:	00bfffc4 	movi	r2,-1
  81b92c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  81b930:	00bffb44 	movi	r2,-19
  81b934:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  81b938:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  81b93c:	e13ffb17 	ldw	r4,-20(fp)
  81b940:	014020b4 	movhi	r5,130
  81b944:	297b3004 	addi	r5,r5,-4928
  81b948:	081c1a40 	call	81c1a4 <alt_find_dev>
  81b94c:	e0bffa15 	stw	r2,-24(fp)
  81b950:	e0bffa17 	ldw	r2,-24(fp)
  81b954:	1004c03a 	cmpne	r2,r2,zero
  81b958:	1000051e 	bne	r2,zero,81b970 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  81b95c:	e13ffb17 	ldw	r4,-20(fp)
  81b960:	081c2380 	call	81c238 <alt_find_file>
  81b964:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  81b968:	00800044 	movi	r2,1
  81b96c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  81b970:	e0bffa17 	ldw	r2,-24(fp)
  81b974:	1005003a 	cmpeq	r2,r2,zero
  81b978:	1000301e 	bne	r2,zero,81ba3c <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  81b97c:	e13ffa17 	ldw	r4,-24(fp)
  81b980:	081c3580 	call	81c358 <alt_get_fd>
  81b984:	e0bff815 	stw	r2,-32(fp)
  81b988:	e0bff817 	ldw	r2,-32(fp)
  81b98c:	1004403a 	cmpge	r2,r2,zero
  81b990:	1000031e 	bne	r2,zero,81b9a0 <open+0x94>
    {
      status = index;
  81b994:	e0bff817 	ldw	r2,-32(fp)
  81b998:	e0bff715 	stw	r2,-36(fp)
  81b99c:	00002906 	br	81ba44 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  81b9a0:	e0bff817 	ldw	r2,-32(fp)
  81b9a4:	10800324 	muli	r2,r2,12
  81b9a8:	1007883a 	mov	r3,r2
  81b9ac:	008020b4 	movhi	r2,130
  81b9b0:	10b65f04 	addi	r2,r2,-9860
  81b9b4:	1885883a 	add	r2,r3,r2
  81b9b8:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  81b9bc:	e0fffc17 	ldw	r3,-16(fp)
  81b9c0:	00900034 	movhi	r2,16384
  81b9c4:	10bfffc4 	addi	r2,r2,-1
  81b9c8:	1886703a 	and	r3,r3,r2
  81b9cc:	e0bff917 	ldw	r2,-28(fp)
  81b9d0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  81b9d4:	e0bff617 	ldw	r2,-40(fp)
  81b9d8:	1004c03a 	cmpne	r2,r2,zero
  81b9dc:	1000061e 	bne	r2,zero,81b9f8 <open+0xec>
  81b9e0:	e13ff917 	ldw	r4,-28(fp)
  81b9e4:	081b8300 	call	81b830 <alt_file_locked>
  81b9e8:	e0bff715 	stw	r2,-36(fp)
  81b9ec:	e0bff717 	ldw	r2,-36(fp)
  81b9f0:	1004803a 	cmplt	r2,r2,zero
  81b9f4:	1000131e 	bne	r2,zero,81ba44 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  81b9f8:	e0bffa17 	ldw	r2,-24(fp)
  81b9fc:	10800317 	ldw	r2,12(r2)
  81ba00:	1005003a 	cmpeq	r2,r2,zero
  81ba04:	1000091e 	bne	r2,zero,81ba2c <open+0x120>
  81ba08:	e0bffa17 	ldw	r2,-24(fp)
  81ba0c:	10800317 	ldw	r2,12(r2)
  81ba10:	e13ff917 	ldw	r4,-28(fp)
  81ba14:	e17ffb17 	ldw	r5,-20(fp)
  81ba18:	e1bffc17 	ldw	r6,-16(fp)
  81ba1c:	e1fffd17 	ldw	r7,-12(fp)
  81ba20:	103ee83a 	callr	r2
  81ba24:	e0bfff15 	stw	r2,-4(fp)
  81ba28:	00000106 	br	81ba30 <open+0x124>
  81ba2c:	e03fff15 	stw	zero,-4(fp)
  81ba30:	e0bfff17 	ldw	r2,-4(fp)
  81ba34:	e0bff715 	stw	r2,-36(fp)
  81ba38:	00000206 	br	81ba44 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  81ba3c:	00bffb44 	movi	r2,-19
  81ba40:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  81ba44:	e0bff717 	ldw	r2,-36(fp)
  81ba48:	1004403a 	cmpge	r2,r2,zero
  81ba4c:	1000091e 	bne	r2,zero,81ba74 <open+0x168>
  {
    alt_release_fd (index);  
  81ba50:	e13ff817 	ldw	r4,-32(fp)
  81ba54:	08108f40 	call	8108f4 <alt_release_fd>
    ALT_ERRNO = -status;
  81ba58:	081ba940 	call	81ba94 <alt_get_errno>
  81ba5c:	e0fff717 	ldw	r3,-36(fp)
  81ba60:	00c7c83a 	sub	r3,zero,r3
  81ba64:	10c00015 	stw	r3,0(r2)
    return -1;
  81ba68:	00bfffc4 	movi	r2,-1
  81ba6c:	e0bffe15 	stw	r2,-8(fp)
  81ba70:	00000206 	br	81ba7c <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  81ba74:	e0bff817 	ldw	r2,-32(fp)
  81ba78:	e0bffe15 	stw	r2,-8(fp)
  81ba7c:	e0bffe17 	ldw	r2,-8(fp)
}
  81ba80:	e037883a 	mov	sp,fp
  81ba84:	dfc00117 	ldw	ra,4(sp)
  81ba88:	df000017 	ldw	fp,0(sp)
  81ba8c:	dec00204 	addi	sp,sp,8
  81ba90:	f800283a 	ret

0081ba94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81ba94:	defffd04 	addi	sp,sp,-12
  81ba98:	dfc00215 	stw	ra,8(sp)
  81ba9c:	df000115 	stw	fp,4(sp)
  81baa0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81baa4:	008020b4 	movhi	r2,130
  81baa8:	10bb3304 	addi	r2,r2,-4916
  81baac:	10800017 	ldw	r2,0(r2)
  81bab0:	1005003a 	cmpeq	r2,r2,zero
  81bab4:	1000061e 	bne	r2,zero,81bad0 <alt_get_errno+0x3c>
  81bab8:	008020b4 	movhi	r2,130
  81babc:	10bb3304 	addi	r2,r2,-4916
  81bac0:	10800017 	ldw	r2,0(r2)
  81bac4:	103ee83a 	callr	r2
  81bac8:	e0bfff15 	stw	r2,-4(fp)
  81bacc:	00000306 	br	81badc <alt_get_errno+0x48>
  81bad0:	008020b4 	movhi	r2,130
  81bad4:	10826f04 	addi	r2,r2,2492
  81bad8:	e0bfff15 	stw	r2,-4(fp)
  81badc:	e0bfff17 	ldw	r2,-4(fp)
}
  81bae0:	e037883a 	mov	sp,fp
  81bae4:	dfc00117 	ldw	ra,4(sp)
  81bae8:	df000017 	ldw	fp,0(sp)
  81baec:	dec00204 	addi	sp,sp,8
  81baf0:	f800283a 	ret

0081baf4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  81baf4:	defffa04 	addi	sp,sp,-24
  81baf8:	df000515 	stw	fp,20(sp)
  81bafc:	df000504 	addi	fp,sp,20
  81bb00:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81bb04:	0005303a 	rdctl	r2,status
  81bb08:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81bb0c:	e0fffd17 	ldw	r3,-12(fp)
  81bb10:	00bfff84 	movi	r2,-2
  81bb14:	1884703a 	and	r2,r3,r2
  81bb18:	1001703a 	wrctl	status,r2
  
  return context;
  81bb1c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  81bb20:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  81bb24:	e0bfff17 	ldw	r2,-4(fp)
  81bb28:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  81bb2c:	e0bffc17 	ldw	r2,-16(fp)
  81bb30:	10c00017 	ldw	r3,0(r2)
  81bb34:	e0bffc17 	ldw	r2,-16(fp)
  81bb38:	10800117 	ldw	r2,4(r2)
  81bb3c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  81bb40:	e0bffc17 	ldw	r2,-16(fp)
  81bb44:	10c00117 	ldw	r3,4(r2)
  81bb48:	e0bffc17 	ldw	r2,-16(fp)
  81bb4c:	10800017 	ldw	r2,0(r2)
  81bb50:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  81bb54:	e0fffc17 	ldw	r3,-16(fp)
  81bb58:	e0bffc17 	ldw	r2,-16(fp)
  81bb5c:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  81bb60:	e0fffc17 	ldw	r3,-16(fp)
  81bb64:	e0bffc17 	ldw	r2,-16(fp)
  81bb68:	18800015 	stw	r2,0(r3)
  81bb6c:	e0bffe17 	ldw	r2,-8(fp)
  81bb70:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81bb74:	e0bffb17 	ldw	r2,-20(fp)
  81bb78:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  81bb7c:	e037883a 	mov	sp,fp
  81bb80:	df000017 	ldw	fp,0(sp)
  81bb84:	dec00104 	addi	sp,sp,4
  81bb88:	f800283a 	ret

0081bb8c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  81bb8c:	defffb04 	addi	sp,sp,-20
  81bb90:	dfc00415 	stw	ra,16(sp)
  81bb94:	df000315 	stw	fp,12(sp)
  81bb98:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  81bb9c:	d0a03317 	ldw	r2,-32564(gp)
  81bba0:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  81bba4:	d0a76e17 	ldw	r2,-25160(gp)
  81bba8:	10800044 	addi	r2,r2,1
  81bbac:	d0a76e15 	stw	r2,-25160(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  81bbb0:	00003106 	br	81bc78 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  81bbb4:	e0bffe17 	ldw	r2,-8(fp)
  81bbb8:	10800017 	ldw	r2,0(r2)
  81bbbc:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  81bbc0:	e0bffe17 	ldw	r2,-8(fp)
  81bbc4:	10800403 	ldbu	r2,16(r2)
  81bbc8:	10803fcc 	andi	r2,r2,255
  81bbcc:	1005003a 	cmpeq	r2,r2,zero
  81bbd0:	1000051e 	bne	r2,zero,81bbe8 <alt_tick+0x5c>
  81bbd4:	d0a76e17 	ldw	r2,-25160(gp)
  81bbd8:	1004c03a 	cmpne	r2,r2,zero
  81bbdc:	1000021e 	bne	r2,zero,81bbe8 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  81bbe0:	e0bffe17 	ldw	r2,-8(fp)
  81bbe4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  81bbe8:	e0bffe17 	ldw	r2,-8(fp)
  81bbec:	10c00217 	ldw	r3,8(r2)
  81bbf0:	d0a76e17 	ldw	r2,-25160(gp)
  81bbf4:	10c01e36 	bltu	r2,r3,81bc70 <alt_tick+0xe4>
  81bbf8:	e0bffe17 	ldw	r2,-8(fp)
  81bbfc:	10800403 	ldbu	r2,16(r2)
  81bc00:	10803fcc 	andi	r2,r2,255
  81bc04:	1004c03a 	cmpne	r2,r2,zero
  81bc08:	1000191e 	bne	r2,zero,81bc70 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  81bc0c:	e0bffe17 	ldw	r2,-8(fp)
  81bc10:	10c00317 	ldw	r3,12(r2)
  81bc14:	e0bffe17 	ldw	r2,-8(fp)
  81bc18:	11000517 	ldw	r4,20(r2)
  81bc1c:	183ee83a 	callr	r3
  81bc20:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  81bc24:	e0bffd17 	ldw	r2,-12(fp)
  81bc28:	1004c03a 	cmpne	r2,r2,zero
  81bc2c:	1000031e 	bne	r2,zero,81bc3c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  81bc30:	e13ffe17 	ldw	r4,-8(fp)
  81bc34:	081baf40 	call	81baf4 <alt_alarm_stop>
  81bc38:	00000d06 	br	81bc70 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  81bc3c:	e0bffe17 	ldw	r2,-8(fp)
  81bc40:	10c00217 	ldw	r3,8(r2)
  81bc44:	e0bffd17 	ldw	r2,-12(fp)
  81bc48:	1887883a 	add	r3,r3,r2
  81bc4c:	e0bffe17 	ldw	r2,-8(fp)
  81bc50:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  81bc54:	e0bffe17 	ldw	r2,-8(fp)
  81bc58:	10c00217 	ldw	r3,8(r2)
  81bc5c:	d0a76e17 	ldw	r2,-25160(gp)
  81bc60:	1880032e 	bgeu	r3,r2,81bc70 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  81bc64:	e0fffe17 	ldw	r3,-8(fp)
  81bc68:	00800044 	movi	r2,1
  81bc6c:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  81bc70:	e0bfff17 	ldw	r2,-4(fp)
  81bc74:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  81bc78:	d0e03304 	addi	r3,gp,-32564
  81bc7c:	e0bffe17 	ldw	r2,-8(fp)
  81bc80:	10ffcc1e 	bne	r2,r3,81bbb4 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  81bc84:	0811d0c0 	call	811d0c <OSTimeTick>
}
  81bc88:	e037883a 	mov	sp,fp
  81bc8c:	dfc00117 	ldw	ra,4(sp)
  81bc90:	df000017 	ldw	fp,0(sp)
  81bc94:	dec00204 	addi	sp,sp,8
  81bc98:	f800283a 	ret

0081bc9c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  81bc9c:	deffff04 	addi	sp,sp,-4
  81bca0:	df000015 	stw	fp,0(sp)
  81bca4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  81bca8:	000170fa 	wrctl	ienable,zero
}
  81bcac:	e037883a 	mov	sp,fp
  81bcb0:	df000017 	ldw	fp,0(sp)
  81bcb4:	dec00104 	addi	sp,sp,4
  81bcb8:	f800283a 	ret

0081bcbc <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
  81bcbc:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
  81bcc0:	d0e00517 	ldw	r3,-32748(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
  81bcc4:	d1276817 	ldw	r4,-25184(gp)

      stw ra,  0(sp)
  81bcc8:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
  81bccc:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
  81bcd0:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
  81bcd4:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
  81bcd8:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
  81bcdc:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
  81bce0:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
  81bce4:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
  81bce8:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
  81bcec:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
  81bcf0:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
  81bcf4:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  81bcf8:	081c0dc0 	call	81c0dc <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
  81bcfc:	d1276317 	ldw	r4,-25204(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
  81bd00:	d1675b07 	ldb	r5,-25236(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
  81bd04:	d1276815 	stw	r4,-25184(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
  81bd08:	d1675b45 	stb	r5,-25235(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
  81bd0c:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
  81bd10:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
  81bd14:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
  81bd18:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
  81bd1c:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
  81bd20:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
  81bd24:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
  81bd28:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
  81bd2c:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
  81bd30:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
  81bd34:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
  81bd38:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
  81bd3c:	d0e00515 	stw	r3,-32748(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
  81bd40:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
  81bd44:	f800283a 	ret

0081bd48 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
  81bd48:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
  81bd4c:	047fff84 	movi	r17,-2
      and   r18, r18, r17
  81bd50:	9464703a 	and	r18,r18,r17
      wrctl status, r18
  81bd54:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  81bd58:	081c0dc0 	call	81c0dc <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
  81bd5c:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
  81bd60:	d4a75945 	stb	r18,-25243(gp)

      /*
       * start execution of the new task.
       */

      br 9b
  81bd64:	003fe506 	br	81bcfc <OSCtxSw+0x40>

0081bd68 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
  81bd68:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
  81bd6c:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
  81bd70:	10800054 	ori	r2,r2,1
      wrctl status, r2
  81bd74:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
  81bd78:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
  81bd7c:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
  81bd80:	dec00204 	addi	sp,sp,8

      callr r2
  81bd84:	103ee83a 	callr	r2

      nop
  81bd88:	0001883a 	nop

0081bd8c <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
  81bd8c:	defff704 	addi	sp,sp,-36
  81bd90:	dfc00815 	stw	ra,32(sp)
  81bd94:	df000715 	stw	fp,28(sp)
  81bd98:	df000704 	addi	fp,sp,28
  81bd9c:	e13ffc15 	stw	r4,-16(fp)
  81bda0:	e17ffd15 	stw	r5,-12(fp)
  81bda4:	e1bffe15 	stw	r6,-8(fp)
  81bda8:	e1ffff0d 	sth	r7,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
  81bdac:	e0bffe17 	ldw	r2,-8(fp)
  81bdb0:	1007883a 	mov	r3,r2
  81bdb4:	00bfff04 	movi	r2,-4
  81bdb8:	1884703a 	and	r2,r3,r2
  81bdbc:	10bf0004 	addi	r2,r2,-1024
  81bdc0:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
  81bdc4:	e0bff917 	ldw	r2,-28(fp)
  81bdc8:	10000015 	stw	zero,0(r2)
  81bdcc:	e0bff917 	ldw	r2,-28(fp)
  81bdd0:	10c0bb04 	addi	r3,r2,748
  81bdd4:	e0bff917 	ldw	r2,-28(fp)
  81bdd8:	10c00115 	stw	r3,4(r2)
  81bddc:	e0bff917 	ldw	r2,-28(fp)
  81bde0:	1080bb04 	addi	r2,r2,748
  81bde4:	10c01704 	addi	r3,r2,92
  81bde8:	e0bff917 	ldw	r2,-28(fp)
  81bdec:	10c00215 	stw	r3,8(r2)
  81bdf0:	e0bff917 	ldw	r2,-28(fp)
  81bdf4:	1080bb04 	addi	r2,r2,748
  81bdf8:	10c02e04 	addi	r3,r2,184
  81bdfc:	e0bff917 	ldw	r2,-28(fp)
  81be00:	10c00315 	stw	r3,12(r2)
  81be04:	e0bff917 	ldw	r2,-28(fp)
  81be08:	10000415 	stw	zero,16(r2)
  81be0c:	e0bff917 	ldw	r2,-28(fp)
  81be10:	10800504 	addi	r2,r2,20
  81be14:	1009883a 	mov	r4,r2
  81be18:	01800644 	movi	r6,25
  81be1c:	000b883a 	mov	r5,zero
  81be20:	080d4e00 	call	80d4e0 <memset>
  81be24:	e0bff917 	ldw	r2,-28(fp)
  81be28:	10000c15 	stw	zero,48(r2)
  81be2c:	e0fff917 	ldw	r3,-28(fp)
  81be30:	008020b4 	movhi	r2,130
  81be34:	10b3ae04 	addi	r2,r2,-12616
  81be38:	18800d15 	stw	r2,52(r3)
  81be3c:	e0bff917 	ldw	r2,-28(fp)
  81be40:	10000e15 	stw	zero,56(r2)
  81be44:	e0bff917 	ldw	r2,-28(fp)
  81be48:	10000f15 	stw	zero,60(r2)
  81be4c:	e0bff917 	ldw	r2,-28(fp)
  81be50:	10001015 	stw	zero,64(r2)
  81be54:	e0bff917 	ldw	r2,-28(fp)
  81be58:	10001115 	stw	zero,68(r2)
  81be5c:	e0bff917 	ldw	r2,-28(fp)
  81be60:	10001215 	stw	zero,72(r2)
  81be64:	e0bff917 	ldw	r2,-28(fp)
  81be68:	10001315 	stw	zero,76(r2)
  81be6c:	e0bff917 	ldw	r2,-28(fp)
  81be70:	10001415 	stw	zero,80(r2)
  81be74:	e0bff917 	ldw	r2,-28(fp)
  81be78:	10001515 	stw	zero,84(r2)
  81be7c:	e0bff917 	ldw	r2,-28(fp)
  81be80:	10001615 	stw	zero,88(r2)
  81be84:	e0bff917 	ldw	r2,-28(fp)
  81be88:	10001715 	stw	zero,92(r2)
  81be8c:	e0bff917 	ldw	r2,-28(fp)
  81be90:	10001805 	stb	zero,96(r2)
  81be94:	e0bff917 	ldw	r2,-28(fp)
  81be98:	10801f04 	addi	r2,r2,124
  81be9c:	10000015 	stw	zero,0(r2)
  81bea0:	10000115 	stw	zero,4(r2)
  81bea4:	10000215 	stw	zero,8(r2)
  81bea8:	10000315 	stw	zero,12(r2)
  81beac:	10000415 	stw	zero,16(r2)
  81beb0:	10000515 	stw	zero,20(r2)
  81beb4:	10000615 	stw	zero,24(r2)
  81beb8:	10000715 	stw	zero,28(r2)
  81bebc:	10000815 	stw	zero,32(r2)
  81bec0:	e0bff917 	ldw	r2,-28(fp)
  81bec4:	10002815 	stw	zero,160(r2)
  81bec8:	e0fff917 	ldw	r3,-28(fp)
  81becc:	00800044 	movi	r2,1
  81bed0:	18802915 	stw	r2,164(r3)
  81bed4:	18002a15 	stw	zero,168(r3)
  81bed8:	e0fff917 	ldw	r3,-28(fp)
  81bedc:	008cc384 	movi	r2,13070
  81bee0:	18802b0d 	sth	r2,172(r3)
  81bee4:	e0fff917 	ldw	r3,-28(fp)
  81bee8:	00aaf344 	movi	r2,-21555
  81beec:	18802b8d 	sth	r2,174(r3)
  81bef0:	e0fff917 	ldw	r3,-28(fp)
  81bef4:	00848d04 	movi	r2,4660
  81bef8:	18802c0d 	sth	r2,176(r3)
  81befc:	e0fff917 	ldw	r3,-28(fp)
  81bf00:	00b99b44 	movi	r2,-6547
  81bf04:	18802c8d 	sth	r2,178(r3)
  81bf08:	e0fff917 	ldw	r3,-28(fp)
  81bf0c:	00b7bb04 	movi	r2,-8468
  81bf10:	18802d0d 	sth	r2,180(r3)
  81bf14:	e0fff917 	ldw	r3,-28(fp)
  81bf18:	00800144 	movi	r2,5
  81bf1c:	18802d8d 	sth	r2,182(r3)
  81bf20:	e0fff917 	ldw	r3,-28(fp)
  81bf24:	008002c4 	movi	r2,11
  81bf28:	18802e0d 	sth	r2,184(r3)
  81bf2c:	e0bff917 	ldw	r2,-28(fp)
  81bf30:	10002f15 	stw	zero,188(r2)
  81bf34:	e0bff917 	ldw	r2,-28(fp)
  81bf38:	10003015 	stw	zero,192(r2)
  81bf3c:	e0bff917 	ldw	r2,-28(fp)
  81bf40:	10003115 	stw	zero,196(r2)
  81bf44:	e0bff917 	ldw	r2,-28(fp)
  81bf48:	10003215 	stw	zero,200(r2)
  81bf4c:	e0bff917 	ldw	r2,-28(fp)
  81bf50:	10003315 	stw	zero,204(r2)
  81bf54:	e0bff917 	ldw	r2,-28(fp)
  81bf58:	10003415 	stw	zero,208(r2)
  81bf5c:	e0bff917 	ldw	r2,-28(fp)
  81bf60:	10003e15 	stw	zero,248(r2)
  81bf64:	e0bff917 	ldw	r2,-28(fp)
  81bf68:	10003f15 	stw	zero,252(r2)
  81bf6c:	e0bff917 	ldw	r2,-28(fp)
  81bf70:	10004015 	stw	zero,256(r2)
  81bf74:	e0bff917 	ldw	r2,-28(fp)
  81bf78:	10004115 	stw	zero,260(r2)
  81bf7c:	e0bff917 	ldw	r2,-28(fp)
  81bf80:	10004215 	stw	zero,264(r2)
  81bf84:	e0bff917 	ldw	r2,-28(fp)
  81bf88:	10004315 	stw	zero,268(r2)
  81bf8c:	e0bff917 	ldw	r2,-28(fp)
  81bf90:	10004415 	stw	zero,272(r2)
  81bf94:	e0bff917 	ldw	r2,-28(fp)
  81bf98:	10004515 	stw	zero,276(r2)
  81bf9c:	e0bff917 	ldw	r2,-28(fp)
  81bfa0:	10004615 	stw	zero,280(r2)
  81bfa4:	e0bff917 	ldw	r2,-28(fp)
  81bfa8:	10004715 	stw	zero,284(r2)
  81bfac:	e0bff917 	ldw	r2,-28(fp)
  81bfb0:	10003505 	stb	zero,212(r2)
  81bfb4:	e0bff917 	ldw	r2,-28(fp)
  81bfb8:	10003705 	stb	zero,220(r2)
  81bfbc:	e0bff917 	ldw	r2,-28(fp)
  81bfc0:	10003d15 	stw	zero,244(r2)
  81bfc4:	e0bff917 	ldw	r2,-28(fp)
  81bfc8:	10005215 	stw	zero,328(r2)
  81bfcc:	e0bff917 	ldw	r2,-28(fp)
  81bfd0:	10005315 	stw	zero,332(r2)
  81bfd4:	e0bff917 	ldw	r2,-28(fp)
  81bfd8:	10005415 	stw	zero,336(r2)
  81bfdc:	e0bff917 	ldw	r2,-28(fp)
  81bfe0:	10005515 	stw	zero,340(r2)
  81bfe4:	e0bff917 	ldw	r2,-28(fp)
  81bfe8:	1000b515 	stw	zero,724(r2)
  81bfec:	e0bff917 	ldw	r2,-28(fp)
  81bff0:	10007515 	stw	zero,468(r2)
  81bff4:	e0bff917 	ldw	r2,-28(fp)
  81bff8:	1000b715 	stw	zero,732(r2)
  81bffc:	e0bff917 	ldw	r2,-28(fp)
  81c000:	1000b815 	stw	zero,736(r2)
  81c004:	e0bff917 	ldw	r2,-28(fp)
  81c008:	1000b915 	stw	zero,740(r2)
  81c00c:	e0bff917 	ldw	r2,-28(fp)
  81c010:	1000ba15 	stw	zero,744(r2)
  81c014:	e0bff917 	ldw	r2,-28(fp)
  81c018:	1080bb04 	addi	r2,r2,748
  81c01c:	1009883a 	mov	r4,r2
  81c020:	01804504 	movi	r6,276
  81c024:	000b883a 	mov	r5,zero
  81c028:	080d4e00 	call	80d4e0 <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
  81c02c:	e0bff917 	ldw	r2,-28(fp)
  81c030:	e0bffb15 	stw	r2,-20(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
  81c034:	e0bffb17 	ldw	r2,-20(fp)
  81c038:	10bff304 	addi	r2,r2,-52
  81c03c:	e0bffa15 	stw	r2,-24(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
  81c040:	e0bffa17 	ldw	r2,-24(fp)
  81c044:	10c00c04 	addi	r3,r2,48
  81c048:	e0bffc17 	ldw	r2,-16(fp)
  81c04c:	18800015 	stw	r2,0(r3)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
  81c050:	e0bffa17 	ldw	r2,-24(fp)
  81c054:	10c00b04 	addi	r3,r2,44
  81c058:	e0bffd17 	ldw	r2,-12(fp)
  81c05c:	18800015 	stw	r2,0(r3)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
  81c060:	e0bffa17 	ldw	r2,-24(fp)
  81c064:	10c00a04 	addi	r3,r2,40
  81c068:	e0bff917 	ldw	r2,-28(fp)
  81c06c:	18800015 	stw	r2,0(r3)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
  81c070:	008020b4 	movhi	r2,130
  81c074:	10af5a04 	addi	r2,r2,-17048
  81c078:	10c00104 	addi	r3,r2,4
  81c07c:	e0bffa17 	ldw	r2,-24(fp)
  81c080:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
  81c084:	e0bffa17 	ldw	r2,-24(fp)
}
  81c088:	e037883a 	mov	sp,fp
  81c08c:	dfc00117 	ldw	ra,4(sp)
  81c090:	df000017 	ldw	fp,0(sp)
  81c094:	dec00204 	addi	sp,sp,8
  81c098:	f800283a 	ret

0081c09c <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
  81c09c:	defffe04 	addi	sp,sp,-8
  81c0a0:	df000115 	stw	fp,4(sp)
  81c0a4:	df000104 	addi	fp,sp,4
  81c0a8:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
  81c0ac:	e037883a 	mov	sp,fp
  81c0b0:	df000017 	ldw	fp,0(sp)
  81c0b4:	dec00104 	addi	sp,sp,4
  81c0b8:	f800283a 	ret

0081c0bc <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
  81c0bc:	defffe04 	addi	sp,sp,-8
  81c0c0:	df000115 	stw	fp,4(sp)
  81c0c4:	df000104 	addi	fp,sp,4
  81c0c8:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
  81c0cc:	e037883a 	mov	sp,fp
  81c0d0:	df000017 	ldw	fp,0(sp)
  81c0d4:	dec00104 	addi	sp,sp,4
  81c0d8:	f800283a 	ret

0081c0dc <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
  81c0dc:	deffff04 	addi	sp,sp,-4
  81c0e0:	df000015 	stw	fp,0(sp)
  81c0e4:	d839883a 	mov	fp,sp
}
  81c0e8:	e037883a 	mov	sp,fp
  81c0ec:	df000017 	ldw	fp,0(sp)
  81c0f0:	dec00104 	addi	sp,sp,4
  81c0f4:	f800283a 	ret

0081c0f8 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
  81c0f8:	deffff04 	addi	sp,sp,-4
  81c0fc:	df000015 	stw	fp,0(sp)
  81c100:	d839883a 	mov	fp,sp
}
  81c104:	e037883a 	mov	sp,fp
  81c108:	df000017 	ldw	fp,0(sp)
  81c10c:	dec00104 	addi	sp,sp,4
  81c110:	f800283a 	ret

0081c114 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
  81c114:	deffff04 	addi	sp,sp,-4
  81c118:	df000015 	stw	fp,0(sp)
  81c11c:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
  81c120:	e037883a 	mov	sp,fp
  81c124:	df000017 	ldw	fp,0(sp)
  81c128:	dec00104 	addi	sp,sp,4
  81c12c:	f800283a 	ret

0081c130 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
  81c130:	deffff04 	addi	sp,sp,-4
  81c134:	df000015 	stw	fp,0(sp)
  81c138:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
  81c13c:	e037883a 	mov	sp,fp
  81c140:	df000017 	ldw	fp,0(sp)
  81c144:	dec00104 	addi	sp,sp,4
  81c148:	f800283a 	ret

0081c14c <OSInitHookEnd>:

void OSInitHookEnd(void)
{
  81c14c:	deffff04 	addi	sp,sp,-4
  81c150:	df000015 	stw	fp,0(sp)
  81c154:	d839883a 	mov	fp,sp
}
  81c158:	e037883a 	mov	sp,fp
  81c15c:	df000017 	ldw	fp,0(sp)
  81c160:	dec00104 	addi	sp,sp,4
  81c164:	f800283a 	ret

0081c168 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
  81c168:	deffff04 	addi	sp,sp,-4
  81c16c:	df000015 	stw	fp,0(sp)
  81c170:	d839883a 	mov	fp,sp
}
  81c174:	e037883a 	mov	sp,fp
  81c178:	df000017 	ldw	fp,0(sp)
  81c17c:	dec00104 	addi	sp,sp,4
  81c180:	f800283a 	ret

0081c184 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
  81c184:	defffe04 	addi	sp,sp,-8
  81c188:	df000115 	stw	fp,4(sp)
  81c18c:	df000104 	addi	fp,sp,4
  81c190:	e13fff15 	stw	r4,-4(fp)
}
  81c194:	e037883a 	mov	sp,fp
  81c198:	df000017 	ldw	fp,0(sp)
  81c19c:	dec00104 	addi	sp,sp,4
  81c1a0:	f800283a 	ret

0081c1a4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  81c1a4:	defff904 	addi	sp,sp,-28
  81c1a8:	dfc00615 	stw	ra,24(sp)
  81c1ac:	df000515 	stw	fp,20(sp)
  81c1b0:	df000504 	addi	fp,sp,20
  81c1b4:	e13ffd15 	stw	r4,-12(fp)
  81c1b8:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  81c1bc:	e0bffe17 	ldw	r2,-8(fp)
  81c1c0:	10800017 	ldw	r2,0(r2)
  81c1c4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  81c1c8:	e13ffd17 	ldw	r4,-12(fp)
  81c1cc:	08087780 	call	808778 <strlen>
  81c1d0:	10800044 	addi	r2,r2,1
  81c1d4:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  81c1d8:	00000d06 	br	81c210 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  81c1dc:	e0bffc17 	ldw	r2,-16(fp)
  81c1e0:	11000217 	ldw	r4,8(r2)
  81c1e4:	e1bffb17 	ldw	r6,-20(fp)
  81c1e8:	e17ffd17 	ldw	r5,-12(fp)
  81c1ec:	081c5280 	call	81c528 <memcmp>
  81c1f0:	1004c03a 	cmpne	r2,r2,zero
  81c1f4:	1000031e 	bne	r2,zero,81c204 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  81c1f8:	e0bffc17 	ldw	r2,-16(fp)
  81c1fc:	e0bfff15 	stw	r2,-4(fp)
  81c200:	00000706 	br	81c220 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  81c204:	e0bffc17 	ldw	r2,-16(fp)
  81c208:	10800017 	ldw	r2,0(r2)
  81c20c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  81c210:	e0fffe17 	ldw	r3,-8(fp)
  81c214:	e0bffc17 	ldw	r2,-16(fp)
  81c218:	10fff01e 	bne	r2,r3,81c1dc <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  81c21c:	e03fff15 	stw	zero,-4(fp)
  81c220:	e0bfff17 	ldw	r2,-4(fp)
}
  81c224:	e037883a 	mov	sp,fp
  81c228:	dfc00117 	ldw	ra,4(sp)
  81c22c:	df000017 	ldw	fp,0(sp)
  81c230:	dec00204 	addi	sp,sp,8
  81c234:	f800283a 	ret

0081c238 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  81c238:	defffa04 	addi	sp,sp,-24
  81c23c:	dfc00515 	stw	ra,20(sp)
  81c240:	df000415 	stw	fp,16(sp)
  81c244:	df000404 	addi	fp,sp,16
  81c248:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  81c24c:	008020b4 	movhi	r2,130
  81c250:	10bb2e04 	addi	r2,r2,-4936
  81c254:	10800017 	ldw	r2,0(r2)
  81c258:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  81c25c:	00003306 	br	81c32c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  81c260:	e0bffd17 	ldw	r2,-12(fp)
  81c264:	11000217 	ldw	r4,8(r2)
  81c268:	08087780 	call	808778 <strlen>
  81c26c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  81c270:	e0bffd17 	ldw	r2,-12(fp)
  81c274:	10c00217 	ldw	r3,8(r2)
  81c278:	e0bffc17 	ldw	r2,-16(fp)
  81c27c:	1885883a 	add	r2,r3,r2
  81c280:	10bfffc4 	addi	r2,r2,-1
  81c284:	10800003 	ldbu	r2,0(r2)
  81c288:	10803fcc 	andi	r2,r2,255
  81c28c:	1080201c 	xori	r2,r2,128
  81c290:	10bfe004 	addi	r2,r2,-128
  81c294:	10800bd8 	cmpnei	r2,r2,47
  81c298:	1000031e 	bne	r2,zero,81c2a8 <alt_find_file+0x70>
    {
      len -= 1;
  81c29c:	e0bffc17 	ldw	r2,-16(fp)
  81c2a0:	10bfffc4 	addi	r2,r2,-1
  81c2a4:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  81c2a8:	e0bffc17 	ldw	r2,-16(fp)
  81c2ac:	1007883a 	mov	r3,r2
  81c2b0:	e0bffe17 	ldw	r2,-8(fp)
  81c2b4:	1885883a 	add	r2,r3,r2
  81c2b8:	10800003 	ldbu	r2,0(r2)
  81c2bc:	10803fcc 	andi	r2,r2,255
  81c2c0:	1080201c 	xori	r2,r2,128
  81c2c4:	10bfe004 	addi	r2,r2,-128
  81c2c8:	10800be0 	cmpeqi	r2,r2,47
  81c2cc:	10000a1e 	bne	r2,zero,81c2f8 <alt_find_file+0xc0>
  81c2d0:	e0bffc17 	ldw	r2,-16(fp)
  81c2d4:	1007883a 	mov	r3,r2
  81c2d8:	e0bffe17 	ldw	r2,-8(fp)
  81c2dc:	1885883a 	add	r2,r3,r2
  81c2e0:	10800003 	ldbu	r2,0(r2)
  81c2e4:	10803fcc 	andi	r2,r2,255
  81c2e8:	1080201c 	xori	r2,r2,128
  81c2ec:	10bfe004 	addi	r2,r2,-128
  81c2f0:	1004c03a 	cmpne	r2,r2,zero
  81c2f4:	10000a1e 	bne	r2,zero,81c320 <alt_find_file+0xe8>
  81c2f8:	e0bffd17 	ldw	r2,-12(fp)
  81c2fc:	11000217 	ldw	r4,8(r2)
  81c300:	e1bffc17 	ldw	r6,-16(fp)
  81c304:	e17ffe17 	ldw	r5,-8(fp)
  81c308:	081c5280 	call	81c528 <memcmp>
  81c30c:	1004c03a 	cmpne	r2,r2,zero
  81c310:	1000031e 	bne	r2,zero,81c320 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  81c314:	e0bffd17 	ldw	r2,-12(fp)
  81c318:	e0bfff15 	stw	r2,-4(fp)
  81c31c:	00000806 	br	81c340 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  81c320:	e0bffd17 	ldw	r2,-12(fp)
  81c324:	10800017 	ldw	r2,0(r2)
  81c328:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  81c32c:	00c020b4 	movhi	r3,130
  81c330:	18fb2e04 	addi	r3,r3,-4936
  81c334:	e0bffd17 	ldw	r2,-12(fp)
  81c338:	10ffc91e 	bne	r2,r3,81c260 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  81c33c:	e03fff15 	stw	zero,-4(fp)
  81c340:	e0bfff17 	ldw	r2,-4(fp)
}
  81c344:	e037883a 	mov	sp,fp
  81c348:	dfc00117 	ldw	ra,4(sp)
  81c34c:	df000017 	ldw	fp,0(sp)
  81c350:	dec00204 	addi	sp,sp,8
  81c354:	f800283a 	ret

0081c358 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  81c358:	defff804 	addi	sp,sp,-32
  81c35c:	dfc00715 	stw	ra,28(sp)
  81c360:	df000615 	stw	fp,24(sp)
  81c364:	df000604 	addi	fp,sp,24
  81c368:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  81c36c:	00bffa04 	movi	r2,-24
  81c370:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
  81c374:	008020b4 	movhi	r2,130
  81c378:	10827304 	addi	r2,r2,2508
  81c37c:	10800017 	ldw	r2,0(r2)
  81c380:	e0bffa15 	stw	r2,-24(fp)
  81c384:	e03ffb0d 	sth	zero,-20(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
  81c388:	e17ffb0b 	ldhu	r5,-20(fp)
  81c38c:	e1bffe04 	addi	r6,fp,-8
  81c390:	e13ffa17 	ldw	r4,-24(fp)
  81c394:	0816b280 	call	816b28 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81c398:	e03ffd15 	stw	zero,-12(fp)
  81c39c:	00001e06 	br	81c418 <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
  81c3a0:	e0bffd17 	ldw	r2,-12(fp)
  81c3a4:	00c020b4 	movhi	r3,130
  81c3a8:	18f65f04 	addi	r3,r3,-9860
  81c3ac:	10800324 	muli	r2,r2,12
  81c3b0:	10c5883a 	add	r2,r2,r3
  81c3b4:	10800017 	ldw	r2,0(r2)
  81c3b8:	1004c03a 	cmpne	r2,r2,zero
  81c3bc:	1000131e 	bne	r2,zero,81c40c <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
  81c3c0:	e0bffd17 	ldw	r2,-12(fp)
  81c3c4:	00c020b4 	movhi	r3,130
  81c3c8:	18f65f04 	addi	r3,r3,-9860
  81c3cc:	10800324 	muli	r2,r2,12
  81c3d0:	10c7883a 	add	r3,r2,r3
  81c3d4:	e0bfff17 	ldw	r2,-4(fp)
  81c3d8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  81c3dc:	008020b4 	movhi	r2,130
  81c3e0:	10bb3204 	addi	r2,r2,-4920
  81c3e4:	10c00017 	ldw	r3,0(r2)
  81c3e8:	e0bffd17 	ldw	r2,-12(fp)
  81c3ec:	1880040e 	bge	r3,r2,81c400 <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
  81c3f0:	00c020b4 	movhi	r3,130
  81c3f4:	18fb3204 	addi	r3,r3,-4920
  81c3f8:	e0bffd17 	ldw	r2,-12(fp)
  81c3fc:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  81c400:	e0bffd17 	ldw	r2,-12(fp)
  81c404:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
  81c408:	00000606 	br	81c424 <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81c40c:	e0bffd17 	ldw	r2,-12(fp)
  81c410:	10800044 	addi	r2,r2,1
  81c414:	e0bffd15 	stw	r2,-12(fp)
  81c418:	e0bffd17 	ldw	r2,-12(fp)
  81c41c:	10800810 	cmplti	r2,r2,32
  81c420:	103fdf1e 	bne	r2,zero,81c3a0 <alt_get_fd+0x48>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
  81c424:	008020b4 	movhi	r2,130
  81c428:	10827304 	addi	r2,r2,2508
  81c42c:	11000017 	ldw	r4,0(r2)
  81c430:	0816f200 	call	816f20 <OSSemPost>

  return rc;
  81c434:	e0bffc17 	ldw	r2,-16(fp)
}
  81c438:	e037883a 	mov	sp,fp
  81c43c:	dfc00117 	ldw	ra,4(sp)
  81c440:	df000017 	ldw	fp,0(sp)
  81c444:	dec00204 	addi	sp,sp,8
  81c448:	f800283a 	ret

0081c44c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  81c44c:	defffb04 	addi	sp,sp,-20
  81c450:	df000415 	stw	fp,16(sp)
  81c454:	df000404 	addi	fp,sp,16
  81c458:	e13ffe15 	stw	r4,-8(fp)
  81c45c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  81c460:	e0bfff17 	ldw	r2,-4(fp)
  81c464:	10840070 	cmpltui	r2,r2,4097
  81c468:	1000021e 	bne	r2,zero,81c474 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  81c46c:	00840004 	movi	r2,4096
  81c470:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  81c474:	e0fffe17 	ldw	r3,-8(fp)
  81c478:	e0bfff17 	ldw	r2,-4(fp)
  81c47c:	1885883a 	add	r2,r3,r2
  81c480:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  81c484:	e0bffe17 	ldw	r2,-8(fp)
  81c488:	e0bffd15 	stw	r2,-12(fp)
  81c48c:	00000506 	br	81c4a4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  81c490:	e0bffd17 	ldw	r2,-12(fp)
  81c494:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  81c498:	e0bffd17 	ldw	r2,-12(fp)
  81c49c:	10800804 	addi	r2,r2,32
  81c4a0:	e0bffd15 	stw	r2,-12(fp)
  81c4a4:	e0fffd17 	ldw	r3,-12(fp)
  81c4a8:	e0bffc17 	ldw	r2,-16(fp)
  81c4ac:	18bff836 	bltu	r3,r2,81c490 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  81c4b0:	e0bffe17 	ldw	r2,-8(fp)
  81c4b4:	108007cc 	andi	r2,r2,31
  81c4b8:	1005003a 	cmpeq	r2,r2,zero
  81c4bc:	1000021e 	bne	r2,zero,81c4c8 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  81c4c0:	e0bffd17 	ldw	r2,-12(fp)
  81c4c4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  81c4c8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  81c4cc:	e037883a 	mov	sp,fp
  81c4d0:	df000017 	ldw	fp,0(sp)
  81c4d4:	dec00104 	addi	sp,sp,4
  81c4d8:	f800283a 	ret

0081c4dc <atexit>:
  81c4dc:	200b883a 	mov	r5,r4
  81c4e0:	000d883a 	mov	r6,zero
  81c4e4:	0009883a 	mov	r4,zero
  81c4e8:	000f883a 	mov	r7,zero
  81c4ec:	081c59c1 	jmpi	81c59c <__register_exitproc>

0081c4f0 <exit>:
  81c4f0:	defffe04 	addi	sp,sp,-8
  81c4f4:	000b883a 	mov	r5,zero
  81c4f8:	dc000015 	stw	r16,0(sp)
  81c4fc:	dfc00115 	stw	ra,4(sp)
  81c500:	2021883a 	mov	r16,r4
  81c504:	081c6d40 	call	81c6d4 <__call_exitprocs>
  81c508:	008020b4 	movhi	r2,130
  81c50c:	10bb2904 	addi	r2,r2,-4956
  81c510:	11000017 	ldw	r4,0(r2)
  81c514:	20800f17 	ldw	r2,60(r4)
  81c518:	10000126 	beq	r2,zero,81c520 <exit+0x30>
  81c51c:	103ee83a 	callr	r2
  81c520:	8009883a 	mov	r4,r16
  81c524:	081c8c40 	call	81c8c4 <_exit>

0081c528 <memcmp>:
  81c528:	00c000c4 	movi	r3,3
  81c52c:	1980032e 	bgeu	r3,r6,81c53c <memcmp+0x14>
  81c530:	2144b03a 	or	r2,r4,r5
  81c534:	10c4703a 	and	r2,r2,r3
  81c538:	10000f26 	beq	r2,zero,81c578 <memcmp+0x50>
  81c53c:	31ffffc4 	addi	r7,r6,-1
  81c540:	3000061e 	bne	r6,zero,81c55c <memcmp+0x34>
  81c544:	00000a06 	br	81c570 <memcmp+0x48>
  81c548:	39ffffc4 	addi	r7,r7,-1
  81c54c:	00bfffc4 	movi	r2,-1
  81c550:	21000044 	addi	r4,r4,1
  81c554:	29400044 	addi	r5,r5,1
  81c558:	38800526 	beq	r7,r2,81c570 <memcmp+0x48>
  81c55c:	20c00003 	ldbu	r3,0(r4)
  81c560:	28800003 	ldbu	r2,0(r5)
  81c564:	18bff826 	beq	r3,r2,81c548 <memcmp+0x20>
  81c568:	1885c83a 	sub	r2,r3,r2
  81c56c:	f800283a 	ret
  81c570:	0005883a 	mov	r2,zero
  81c574:	f800283a 	ret
  81c578:	180f883a 	mov	r7,r3
  81c57c:	20c00017 	ldw	r3,0(r4)
  81c580:	28800017 	ldw	r2,0(r5)
  81c584:	18bfed1e 	bne	r3,r2,81c53c <memcmp+0x14>
  81c588:	31bfff04 	addi	r6,r6,-4
  81c58c:	21000104 	addi	r4,r4,4
  81c590:	29400104 	addi	r5,r5,4
  81c594:	39bff936 	bltu	r7,r6,81c57c <memcmp+0x54>
  81c598:	003fe806 	br	81c53c <memcmp+0x14>

0081c59c <__register_exitproc>:
  81c59c:	defffa04 	addi	sp,sp,-24
  81c5a0:	008020b4 	movhi	r2,130
  81c5a4:	10bb2904 	addi	r2,r2,-4956
  81c5a8:	dc000015 	stw	r16,0(sp)
  81c5ac:	14000017 	ldw	r16,0(r2)
  81c5b0:	dd000415 	stw	r20,16(sp)
  81c5b4:	2829883a 	mov	r20,r5
  81c5b8:	81405217 	ldw	r5,328(r16)
  81c5bc:	dcc00315 	stw	r19,12(sp)
  81c5c0:	dc800215 	stw	r18,8(sp)
  81c5c4:	dc400115 	stw	r17,4(sp)
  81c5c8:	dfc00515 	stw	ra,20(sp)
  81c5cc:	2023883a 	mov	r17,r4
  81c5d0:	3027883a 	mov	r19,r6
  81c5d4:	3825883a 	mov	r18,r7
  81c5d8:	28002526 	beq	r5,zero,81c670 <__register_exitproc+0xd4>
  81c5dc:	29000117 	ldw	r4,4(r5)
  81c5e0:	008007c4 	movi	r2,31
  81c5e4:	11002716 	blt	r2,r4,81c684 <__register_exitproc+0xe8>
  81c5e8:	8800101e 	bne	r17,zero,81c62c <__register_exitproc+0x90>
  81c5ec:	2105883a 	add	r2,r4,r4
  81c5f0:	1085883a 	add	r2,r2,r2
  81c5f4:	20c00044 	addi	r3,r4,1
  81c5f8:	1145883a 	add	r2,r2,r5
  81c5fc:	0009883a 	mov	r4,zero
  81c600:	15000215 	stw	r20,8(r2)
  81c604:	28c00115 	stw	r3,4(r5)
  81c608:	2005883a 	mov	r2,r4
  81c60c:	dfc00517 	ldw	ra,20(sp)
  81c610:	dd000417 	ldw	r20,16(sp)
  81c614:	dcc00317 	ldw	r19,12(sp)
  81c618:	dc800217 	ldw	r18,8(sp)
  81c61c:	dc400117 	ldw	r17,4(sp)
  81c620:	dc000017 	ldw	r16,0(sp)
  81c624:	dec00604 	addi	sp,sp,24
  81c628:	f800283a 	ret
  81c62c:	29802204 	addi	r6,r5,136
  81c630:	00800044 	movi	r2,1
  81c634:	110e983a 	sll	r7,r2,r4
  81c638:	30c04017 	ldw	r3,256(r6)
  81c63c:	2105883a 	add	r2,r4,r4
  81c640:	1085883a 	add	r2,r2,r2
  81c644:	1185883a 	add	r2,r2,r6
  81c648:	19c6b03a 	or	r3,r3,r7
  81c64c:	14802015 	stw	r18,128(r2)
  81c650:	14c00015 	stw	r19,0(r2)
  81c654:	00800084 	movi	r2,2
  81c658:	30c04015 	stw	r3,256(r6)
  81c65c:	88bfe31e 	bne	r17,r2,81c5ec <__register_exitproc+0x50>
  81c660:	30804117 	ldw	r2,260(r6)
  81c664:	11c4b03a 	or	r2,r2,r7
  81c668:	30804115 	stw	r2,260(r6)
  81c66c:	003fdf06 	br	81c5ec <__register_exitproc+0x50>
  81c670:	008020f4 	movhi	r2,131
  81c674:	10a0fc04 	addi	r2,r2,-31760
  81c678:	100b883a 	mov	r5,r2
  81c67c:	80805215 	stw	r2,328(r16)
  81c680:	003fd606 	br	81c5dc <__register_exitproc+0x40>
  81c684:	00802034 	movhi	r2,128
  81c688:	109f6d04 	addi	r2,r2,32180
  81c68c:	1000021e 	bne	r2,zero,81c698 <__register_exitproc+0xfc>
  81c690:	013fffc4 	movi	r4,-1
  81c694:	003fdc06 	br	81c608 <__register_exitproc+0x6c>
  81c698:	01006404 	movi	r4,400
  81c69c:	103ee83a 	callr	r2
  81c6a0:	1007883a 	mov	r3,r2
  81c6a4:	103ffa26 	beq	r2,zero,81c690 <__register_exitproc+0xf4>
  81c6a8:	80805217 	ldw	r2,328(r16)
  81c6ac:	180b883a 	mov	r5,r3
  81c6b0:	18000115 	stw	zero,4(r3)
  81c6b4:	18800015 	stw	r2,0(r3)
  81c6b8:	80c05215 	stw	r3,328(r16)
  81c6bc:	18006215 	stw	zero,392(r3)
  81c6c0:	18006315 	stw	zero,396(r3)
  81c6c4:	0009883a 	mov	r4,zero
  81c6c8:	883fc826 	beq	r17,zero,81c5ec <__register_exitproc+0x50>
  81c6cc:	003fd706 	br	81c62c <__register_exitproc+0x90>

0081c6d0 <register_fini>:
  81c6d0:	f800283a 	ret

0081c6d4 <__call_exitprocs>:
  81c6d4:	008020b4 	movhi	r2,130
  81c6d8:	10bb2904 	addi	r2,r2,-4956
  81c6dc:	10800017 	ldw	r2,0(r2)
  81c6e0:	defff304 	addi	sp,sp,-52
  81c6e4:	df000b15 	stw	fp,44(sp)
  81c6e8:	d8800115 	stw	r2,4(sp)
  81c6ec:	00802034 	movhi	r2,128
  81c6f0:	109f6804 	addi	r2,r2,32160
  81c6f4:	1005003a 	cmpeq	r2,r2,zero
  81c6f8:	d8800215 	stw	r2,8(sp)
  81c6fc:	d8800117 	ldw	r2,4(sp)
  81c700:	dd400815 	stw	r21,32(sp)
  81c704:	dd000715 	stw	r20,28(sp)
  81c708:	10805204 	addi	r2,r2,328
  81c70c:	dfc00c15 	stw	ra,48(sp)
  81c710:	ddc00a15 	stw	r23,40(sp)
  81c714:	dd800915 	stw	r22,36(sp)
  81c718:	dcc00615 	stw	r19,24(sp)
  81c71c:	dc800515 	stw	r18,20(sp)
  81c720:	dc400415 	stw	r17,16(sp)
  81c724:	dc000315 	stw	r16,12(sp)
  81c728:	282b883a 	mov	r21,r5
  81c72c:	2039883a 	mov	fp,r4
  81c730:	d8800015 	stw	r2,0(sp)
  81c734:	2829003a 	cmpeq	r20,r5,zero
  81c738:	d8800117 	ldw	r2,4(sp)
  81c73c:	14405217 	ldw	r17,328(r2)
  81c740:	88001026 	beq	r17,zero,81c784 <__call_exitprocs+0xb0>
  81c744:	ddc00017 	ldw	r23,0(sp)
  81c748:	88800117 	ldw	r2,4(r17)
  81c74c:	8c802204 	addi	r18,r17,136
  81c750:	143fffc4 	addi	r16,r2,-1
  81c754:	80000916 	blt	r16,zero,81c77c <__call_exitprocs+0xa8>
  81c758:	05bfffc4 	movi	r22,-1
  81c75c:	a000151e 	bne	r20,zero,81c7b4 <__call_exitprocs+0xe0>
  81c760:	8409883a 	add	r4,r16,r16
  81c764:	2105883a 	add	r2,r4,r4
  81c768:	1485883a 	add	r2,r2,r18
  81c76c:	10c02017 	ldw	r3,128(r2)
  81c770:	a8c01126 	beq	r21,r3,81c7b8 <__call_exitprocs+0xe4>
  81c774:	843fffc4 	addi	r16,r16,-1
  81c778:	85bff81e 	bne	r16,r22,81c75c <__call_exitprocs+0x88>
  81c77c:	d8800217 	ldw	r2,8(sp)
  81c780:	10003126 	beq	r2,zero,81c848 <__call_exitprocs+0x174>
  81c784:	dfc00c17 	ldw	ra,48(sp)
  81c788:	df000b17 	ldw	fp,44(sp)
  81c78c:	ddc00a17 	ldw	r23,40(sp)
  81c790:	dd800917 	ldw	r22,36(sp)
  81c794:	dd400817 	ldw	r21,32(sp)
  81c798:	dd000717 	ldw	r20,28(sp)
  81c79c:	dcc00617 	ldw	r19,24(sp)
  81c7a0:	dc800517 	ldw	r18,20(sp)
  81c7a4:	dc400417 	ldw	r17,16(sp)
  81c7a8:	dc000317 	ldw	r16,12(sp)
  81c7ac:	dec00d04 	addi	sp,sp,52
  81c7b0:	f800283a 	ret
  81c7b4:	8409883a 	add	r4,r16,r16
  81c7b8:	88c00117 	ldw	r3,4(r17)
  81c7bc:	2105883a 	add	r2,r4,r4
  81c7c0:	1445883a 	add	r2,r2,r17
  81c7c4:	18ffffc4 	addi	r3,r3,-1
  81c7c8:	11800217 	ldw	r6,8(r2)
  81c7cc:	1c001526 	beq	r3,r16,81c824 <__call_exitprocs+0x150>
  81c7d0:	10000215 	stw	zero,8(r2)
  81c7d4:	303fe726 	beq	r6,zero,81c774 <__call_exitprocs+0xa0>
  81c7d8:	00c00044 	movi	r3,1
  81c7dc:	1c06983a 	sll	r3,r3,r16
  81c7e0:	90804017 	ldw	r2,256(r18)
  81c7e4:	8cc00117 	ldw	r19,4(r17)
  81c7e8:	1884703a 	and	r2,r3,r2
  81c7ec:	10001426 	beq	r2,zero,81c840 <__call_exitprocs+0x16c>
  81c7f0:	90804117 	ldw	r2,260(r18)
  81c7f4:	1884703a 	and	r2,r3,r2
  81c7f8:	10000c1e 	bne	r2,zero,81c82c <__call_exitprocs+0x158>
  81c7fc:	2105883a 	add	r2,r4,r4
  81c800:	1485883a 	add	r2,r2,r18
  81c804:	11400017 	ldw	r5,0(r2)
  81c808:	e009883a 	mov	r4,fp
  81c80c:	303ee83a 	callr	r6
  81c810:	88800117 	ldw	r2,4(r17)
  81c814:	98bfc81e 	bne	r19,r2,81c738 <__call_exitprocs+0x64>
  81c818:	b8800017 	ldw	r2,0(r23)
  81c81c:	147fd526 	beq	r2,r17,81c774 <__call_exitprocs+0xa0>
  81c820:	003fc506 	br	81c738 <__call_exitprocs+0x64>
  81c824:	8c000115 	stw	r16,4(r17)
  81c828:	003fea06 	br	81c7d4 <__call_exitprocs+0x100>
  81c82c:	2105883a 	add	r2,r4,r4
  81c830:	1485883a 	add	r2,r2,r18
  81c834:	11000017 	ldw	r4,0(r2)
  81c838:	303ee83a 	callr	r6
  81c83c:	003ff406 	br	81c810 <__call_exitprocs+0x13c>
  81c840:	303ee83a 	callr	r6
  81c844:	003ff206 	br	81c810 <__call_exitprocs+0x13c>
  81c848:	88800117 	ldw	r2,4(r17)
  81c84c:	1000081e 	bne	r2,zero,81c870 <__call_exitprocs+0x19c>
  81c850:	89000017 	ldw	r4,0(r17)
  81c854:	20000726 	beq	r4,zero,81c874 <__call_exitprocs+0x1a0>
  81c858:	b9000015 	stw	r4,0(r23)
  81c85c:	8809883a 	mov	r4,r17
  81c860:	0807da00 	call	807da0 <free>
  81c864:	bc400017 	ldw	r17,0(r23)
  81c868:	883fb71e 	bne	r17,zero,81c748 <__call_exitprocs+0x74>
  81c86c:	003fc506 	br	81c784 <__call_exitprocs+0xb0>
  81c870:	89000017 	ldw	r4,0(r17)
  81c874:	882f883a 	mov	r23,r17
  81c878:	2023883a 	mov	r17,r4
  81c87c:	883fb21e 	bne	r17,zero,81c748 <__call_exitprocs+0x74>
  81c880:	003fc006 	br	81c784 <__call_exitprocs+0xb0>

0081c884 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  81c884:	defffd04 	addi	sp,sp,-12
  81c888:	df000215 	stw	fp,8(sp)
  81c88c:	df000204 	addi	fp,sp,8
  81c890:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  81c894:	e0bfff17 	ldw	r2,-4(fp)
  81c898:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  81c89c:	e0bffe17 	ldw	r2,-8(fp)
  81c8a0:	1005003a 	cmpeq	r2,r2,zero
  81c8a4:	1000021e 	bne	r2,zero,81c8b0 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  81c8a8:	002af070 	cmpltui	zero,zero,43969
  81c8ac:	00000106 	br	81c8b4 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  81c8b0:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  81c8b4:	e037883a 	mov	sp,fp
  81c8b8:	df000017 	ldw	fp,0(sp)
  81c8bc:	dec00104 	addi	sp,sp,4
  81c8c0:	f800283a 	ret

0081c8c4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  81c8c4:	defffd04 	addi	sp,sp,-12
  81c8c8:	dfc00215 	stw	ra,8(sp)
  81c8cc:	df000115 	stw	fp,4(sp)
  81c8d0:	df000104 	addi	fp,sp,4
  81c8d4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  81c8d8:	008020b4 	movhi	r2,130
  81c8dc:	10827c44 	addi	r2,r2,2545
  81c8e0:	10000005 	stb	zero,0(r2)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  81c8e4:	e13fff17 	ldw	r4,-4(fp)
  81c8e8:	081c8840 	call	81c884 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  81c8ec:	003fff06 	br	81c8ec <_exit+0x28>
  81c8f0:	0081c6d0 	cmplti	r2,zero,1819
